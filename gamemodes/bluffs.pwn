

// INCLUDE
#include <a_samp>
#include <a_mysqlblf>			
#include <streamer>				
#include <foreach>		
#include <sscanf2>				
#include <zcmd>					
#include <mSelection>   		
#include <a_zones>      		
#include <beaZone>      		
#include <timerfix>     		
#include <fly>          		
#include <crashdetect>  		
#include <timestamptodate>  	
#include <geolocation>			
#include <a_http>				
#include <firework>				
#include <md5>
//#include <numlib>
//#include <antitroll>		

#pragma dynamic 84872
static gTeam[MAX_PLAYERS];

forward DeAMXI(playerid);
public DeAMXI(playerid)
{
 	AntiDeAMX();
	return 1;
}

//native WP_Hash(buffer[], len, const str[]);
native gpci(playerid, serial[], len);

// server settings

#define SQL_HOST "localhost"
#define SQL_USER "server_895"
#define SQL_DATA "server_895_dbs"
#define SQL_PASS "14mjzi5pfr"
#define SERVER_NAME "rpg.bluffs.ga"

/*
#define SQL_HOST "sa-mp.me"
#define SQL_USER "879433"
#define SQL_DATA "879433"
#define SQL_PASS "5uw2kBtuYBV6E5w5f"
#define SERVER_NAME "rpg.bluffs.ga"
*/

#define SERVER_HOUR_FIX 1 // for fix server hour if your host is on other timezone
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// databse upload (players)
#define pCashx              1
#define pExpx               2
#define pBank               3
#define pCarLicTx           4
#define pFlyLicTx           5
#define pBoatLicTx          6
#define pGunLicTx           8
#define pRobx               9
#define pFpunishx           10
#define pConnectTimex       12
#define pPayDayx            15
// clear 16
#define pPhousekeyx         17
#define pJailedx            18
#define pJailTimex          19
#define pWantedLevelx       21
#define pPhonex             22
#define pMatsx              23
// clear 24
#define pFishSkillx         25
#define pRobSkillx          26
#define pLevelx             27
#define pPremiumAccountx    28
#define pPbiskeyx           29
#define pPnumberx           30
#define pRegx               31
#define pRentedx            37
#define pCrimesx            38
#define pCrime1x            40
#define pCrime2x            41
#define pCrime3x            42
#define pVictimx            43
#define pAccusedx           44
#define pEmailx             45
#define pWarnsx             52
#define pLanguagex          53
#define pPremiumPointsx     54
#define pFWorksx            61
#define pVirtualPDx         62
#define pGlassesx           63
#define pHatsx              64
#define pTruckSkillx        65
#define pTruckTimesx        66
#define pTruckRemx          67
#define pFarmSkillx         68
#define pFarmTimesx         69
#define pFarmRemx           70
#define pFishTimesx         71
#define pFishRemx           72
#define pSpawnChangex       73
#define pRobTimesx          74
#define pRobRemx            75
#define pCreditsx           76
#define pFactionJoinx       77
#define pNMutedx            78
#define pHiddenColorx       80
#define pGiftTimex          81
#define pFightStylex        82
#define pHUD1x              83
#define pHUD2x              84
#define pHUD3x              85
#define pGasCanx            86
#define pCarLicSuspendx     87
#define pGunLicSuspendx     88
#define pPizzaSkillx        89
#define pPizzaTimesx        90
#define pPizzaRemx          91
#define pArmsSkillx         92
#define pArmsTimesx         93
#define pArmsRemx           94
#define pBusSkillx          95
#define pBusTimesx          96
#define pBusRemx            97
#define pColorsx            98
#define pSessionx           99
#define pPaydayONx          100
#define pGarbageSkillx      101
#define pGarbageTimesx      102
#define pGarbageRemx        103
#define pQuest1x            104
#define pQuest2x            105
#define pQuestProgress1x    106
#define pQuestProgress2x    107
#define pQuestNeed1x        108
#define pQuestNeed2x        109
#define pQuestCarx          110
#define pOnlineTimeTodayx   111
#define pReportMutedx       112
#define pHelpedplayersx     113
#define Raport1x			114
#define Raport2x			115
#define Raport3x			116
#define Raport4x			117
#define Raport5x			118
#define Raport6x			119
#define pClanDepx			120
#define pCasesx				121
#define ClanSafex			122
#define pNextCasex			123
#define pPetx 				124
#define pPetNamex 			125
#define pPetLevelx 			126
#define pPetPointsx 		127
#define pNeonRx    			128
#define pNeonAx				129
#define pNeonVx				130
#define pNeonGx				131
#define pNeonRZx			132
#define pAcceptedx			133
#define pAirSkillx        	134
#define pAirTimesx       	135
#define pAirRemx         	136
#define pStrawSkillx        137
#define pStrawTimesx       	138
#define pStrawRemx         	139
#define pMp3x				140
#define pBillboardx 		141
#define pCarLicx 			142
#define pBoatLicx 			143
#define pFlyLicx 			144
#define pGunLicx 			145
#define pHUD4x              146
#define pPaintKillsx 		147
#define pPaintDeathsx 		148
#define pPaintRankx 		149
#define pPaintWonx			150
#define pRaceWonx 			151
#define pRaceExpx			152
#define pPetSkinx 			153
#define pPayDayminx			154
#define pPayDaysecx			155
#define pBeesecx			156
#define pBeeminx			157
#define pBeePlacedx			158
#define pNewYearx			159
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// database update (cars)
#define cLocationxx             1
#define cLocationyx             2
#define cLocationzx             3
#define cAnglex                 4
#define cModelx                 5
#define cColorOnex              6
#define cColorTwox              7
#define cOwnerx                 8
#define cValuex                 9
#define cLicensex               10
#define cDescriptionx           11
#define cLockx                  12
#define cTimedx                 13
#define cInscarpricex           14
#define cInsurancecarx          15
#define cKMx                    16
#define cOwnedx                 17
#define cSellx                  18
#define cModsx                  19
#define cPaintJx                20
#define cDaysx                  21
#define cHPx                    22
#define cDamage1x               23
#define cDamage2x               24
#define cDamage3x               25
#define cDamage4x               26
#define cGasx                   27
#define cLocationx2x            28
#define cLocationy2x            29
#define cLocationz2x            30
#define cAngle2x                31
#define cKMLastx                32
#define cCarVIPx                33
#define cBlockx                 34
#define cCarVipColorsx          35
#define cCarNeonx				36
#define cCarVipXPosx			37
#define cCarVipYPosx			38
#define cCarVipZPosx			39
#define cCarVipRXPosx			40
#define cCarVipRYPosx			41
#define cCarVipRZPosx			42
#define cStagex			43
#define cGasMaxx				44
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// dialogs
#define DIALOG_LOGIN1               1
#define DIALOG_LOGIN2               2
// clear 3
#define DIALOG_PLATE                4
#define DIALOG_LOCATIONS            5
#define Dialog_24                   7
#define DIALOG_RADIO                8
#define DIALOG_PREMIUM              9
#define Dialog_Gym                  10
#define DIALOG_HQS                  17
#define DIALOG_MEMBERS              32
#define DIALOG_CARDAMAGE            43
#define DIALOG_WANTEDON             54
#define DIALOG_TRANSFER             59
#define DIALOG_JOBS                 71
#define DIALOG_CARBUY               72
#define DIALOG_CARBUY2              74
#define DIALOG_CARBUY3              75
#define DIALOG_CARBUY4              76
#define DIALOG_PENDEVENT            86
#define DIALOG_NEWPASS              132
#define DIALOG_REGISTER             454
#define DIALOG_REGISTER2            456
#define DIALOG_REGISTER3            474
//clear 477
#define DIALOG_REGISTER5            479
#define DIALOG_REGISTER6            480
#define DIALOG_CARSELL              483
#define DIALOG_SHOP                 489
#define DIALOG_SHOP2                490
#define DIALOG_CHANGENAME           491
#define DIALOG_CLAN                 492
#define DIALOG_CLAN_TAG             493
#define DIALOG_CLANMEMBERS          494
#define DIALOG_FACTIONS             495
#define DIALOG_FACTIONS2            496
#define DIALOG_CARBUY8              497
#define DIALOG_HELP                 498
#define DIALOG_HELP2                499
#define DIALOG_LOCATIONSLS          500
#define DIALOG_LOCATIONSLV          501
#define DIALOG_LOCATIONSMODS        502
#define DIALOG_GMX                  503
#define DIALOG_TRUCKER1             504
#define DIALOG_TRUCKER2             505
#define DIALOG_TRUCKER3             506
#define DIALOG_TRUCKER4             507
#define DIALOG_CMEMBERS      		508
#define DIALOG_TRUCKSELECT          509
#define DIALOG_TRUCKSELECTX         510
#define DIALOG_TRUCKSELECT2         511
#define DIALOG_TRUCKSELECT3         512
#define DIALOG_TRUCKSELECT4         513
#define DIALOG_SELLFISH             514
#define DIALOG_CARBUY5              515
#define DIALOG_NOSTOCK              516
#define DIALOG_LOCATIONS247LS       517
#define DIALOG_LOCATIONSBARLS       518
#define DIALOG_LOCATIONSBANKLS      519
#define DIALOG_LOCATIONSGYMLS       520
#define DIALOG_LOCATIONSBURGERLS    521
#define DIALOG_LOCATIONSPIZZALS     522
#define DIALOG_LOCATIONSGSLS        523
#define DIALOG_LOCATIONSCNNLS       524
#define DIALOG_LOCATIONSGASLS       525
#define DIALOG_LOCATIONSPNSLS       526
#define DIALOG_LOCATIONS247LV       527
#define DIALOG_LOCATIONSBANKLV      528
#define DIALOG_LOCATIONSBURGERLV    529
#define DIALOG_LOCATIONSGSLV        530
#define DIALOG_LOCATIONSCNNLV       531
#define DIALOG_LOCATIONSGASLV       532
#define DIALOG_LOCATIONSPNSLV       533
#define Dialog_gunshop              545
#define DIALOG_IPHONE               546
#define DIALOG_JOBULETES            552
#define DIALOG_REPORT1              553
#define DIALOG_REPORT2              554
#define DIALOG_REPORTDM1            555
#define DIALOG_REPORTDM2            556
#define DIALOG_REPORTDM3            557
#define DIALOG_REPORTCH1            558
#define DIALOG_REPORTCH2            559
#define DIALOG_REPORTCH3            560
#define DIALOG_REPORT_AP1           561
#define DIALOG_COLORID              562
#define DIALOG_REPORT_DEGEABA       563
#define DIALOG_VEHINFO              566
#define DIALOG_INSURANCEBUY         567
#define DIALOG_INSURANCEBUY2        568
#define DIALOG_NOPP                 569
#define DIALOG_GIFTBOX              570
#define DIALOG_HUD                  571
#define DIALOG_HUD1                 572
#define DIALOG_HUD2                 573
#define DIALOG_HUD3                 574
#define DIALOG_PAINTBALL            575
#define DIALOG_PAINTBALLMAP         576
#define DIALOG_PAINTBALLWEAPON      577
#define DIALOG_LASTS                578
#define DIALOG_UNINVITE             579
#define DIALOG_EMAILS               580
#define DIALOG_EMAILS2              581
#define DIALOG_CLANMEMBERS2         582
#define DIALOG_CLANSETTINGS         583
#define DIALOG_CLANMEMBERS3         584
#define DIALOG_CLAN_RANK            585
#define DIALOG_CLAN_WARNS           586
#define DIALOG_CLAN_CHANGERANK      587
#define DIALOG_CLAN_COLOR           588
#define DIALOG_CLAN_CHANGERANK2     589
#define DIALOG_FRIENDS              590
#define DIALOG_ADDFRIENDS           591
#define DIALOG_FRIENDS2             592
#define DIALOG_QUITGROUP            593
#define DIALOG_QUITCLAN             594
#define DIALOG_CHOOSECLANNAME       595
#define DIALOG_CHOOSECLANTAG        596
#define DIALOG_SEXSHOP              597
#define DIALOG_BAR                  598
#define DIALOG_LOCATIONSCLOTHINGLS  599
#define DIALOG_LOCATIONSRENTLS      600
#define DIALOG_LOCATIONSSEXLS       601
#define DIALOG_LOCATIONSMODLS       602
#define DIALOG_LOCATIONSCLOTHINGLV  603
#define DIALOG_LOCATIONSCLUCKINLV   604
#define DIALOG_LOCATIONSCASINOLV    605
#define DIALOG_LOCATIONSSEXLV       606
#define DIALOG_LOCATIONSMODLV       607
#define DIALOG_FWARN                608
#define DIALOG_FUNWARN              609
#define DIALOG_FPUNINVITE           610
#define DIALOG_NOUNINVITE           611
#define DIALOG_MEMBERS2             612
#define DIALOG_MEMBERS3             613
#define DIALOG_SAVEVEHICLE          614
#define DIALOG_VEHSPAWN             615
#define DIALOG_VEHSPAWNCAR          616
#define DIALOG_CARBUY9              617
#define DIALOG_UNSTUCK              618
#define DIALOG_SELLCARTO            619
#define DIALOG_TRADECAR             620
#define DIALOG_CLEARSALARIES        621
#define DIALOG_UNLOADTRASH          622
#define DIALOG_CHANGENAME2          623
#define DIALOG_VIPNAME   			624
#define DIALOG_RACEVOTECOL          625
#define DIALOG_RACEVOTEMAP          626
#define DIALOG_RACEVOTECAR          627
#define DIALOG_VIPNAMETEXT			628
#define DIALOG_CLANBUY				629
#define DIALOG_CLOTHES              630
#define DIALOG_CUSTOMRADIO          632
#define DIALOG_UPDATERR             633
#define DIALOG_VCREATE              634
#define DIALOG_TRADEHOUSEHOUSE      635
#define DIALOG_TRADEHOUSECAR        636
#define DIALOG_GETUNINVITE          637
#define DIALOG_SELLHIDDEN           638
#define DIALOG_HOWNER               639
#define DIALOG_BOWNER               640
#define DIALOG_VOWNER               641
#define DIALOG_SELLCARX             642
#define DIALOG_MP3SHOP				643
#define DIALOG_VREMOVE              644
#define DIALOG_BUYSLOT              645
#define DIALOG_BUYPREMIUM           646
#define DIALOG_BUYCLEARFP           647
#define DIALOG_BUYCLEARWARNS        648
#define DIALOG_BUYCLEARKM           649
#define DIALOG_BUYHIDDEN            650
#define DIALOG_BUYFIREWORKS         651
#define DIALOG_BUYMONEY1            652
#define DIALOG_BUYMONEY2            653
#define DIALOG_BUYMONEY3            654
#define DIALOG_BUYMONEY4            655
#define DIALOG_BUYCLEARFH           656
#define DIALOG_BUYWALKIE            657
#define DIALOG_VIPWHEELS            658
#define DIALOG_BUYVIPCAR            659
#define DIALOG_BUYCLEARKM2          660
#define DIALOG_BID                  661
#define DIALOG_RAMHQ                662
#define DIALOG_RAMHOUSE             663
#define DIALOG_RAMBIZ               664
#define DIALOG_ATM_MENU             665
#define DIALOG_ATM_WITHDRAW         666
#define DIALOG_ATM_BALANCE          667
#define DIALOG_NAMECHANGES          668
#define DIALOG_SELLHOUSETOSTATE     669
#define DIALOG_SELLBIZTOSTATE       670
#define DIALOG_HUPGRADE             671
#define DIALOG_HUPGRADE1            672
#define DIALOG_HUPGRADE2            673
#define DIALOG_HMUSIC               674
#define DIALOG_CUSTOMRADIOH         675
#define DIALOG_DELETEVEHICLE        676
#define DIALOG_GO                   677
#define DIALOG_GO1                  678
#define DIALOG_GO2                  679
#define DIALOG_GO3                  680
#define DIALOG_GO4                  681
#define DIALOG_GO5                  682
#define DIALOG_GO6                  683
#define DIALOG_HIDDEN               684
#define DIALOG_HIDDEN1              685
#define DIALOG_VIPNAMECOLOR         686
#define DIALOG_BJ_ACTION            687
#define DIALOG_BJ_BET               689
#define pReferralx                  690
#define DIALOG_CLAN_SAFE			691
#define DIALOG_CLAN_VEHICLES		692
#define DIALOG_CLAN_VEHBUY			693
#define DIALOG_CLAN_VEHOWN			694
#define DIALOG_CLAN_VEHSPW			695	
//696 occupied
#define DIALOG_UNSTUCK2				697
#define DIALOG_SELLCLANCAR			698
#define DIALOG_PET  				699
#define DIALOG_PETx  				700
#define DIALOG_PETSHOP				701
#define DIALOG_MYNEONS				702
#define DIALOG_NEONS    			703
#define DIALOG_LOCATIONSSF 			704
#define DIALOG_LOCATIONS247SF 		705
#define DIALOG_LOCATIONSGASSF 		706
#define DIALOG_LOCATIONSBANKSF 		707
#define DIALOG_LOCATIONSCLOTHINGSF  708
#define DIALOG_LOCATIONSPIZZASF 	709
#define DIALOG_LOCATIONSBURGERSF 	710
#define DIALOG_BILLBOARDS 			711
#define DIALOG_BILLRENT				712
#define DIALOG_BILLBOARDS2			713
#define DIALOG_BILLMENU 			714
#define DIALOG_BILLMENUSIZE			715
#define DIALOG_BILLMENUTEXT			716
#define DIALOG_MP32 				717
#define DIALOG_HUD4					718
#define DIALOG_VUPGRADES			719
#define DIALOG_PETSKIN				720
#define DIALOG_REMOVENEON			721
#define DIALOG_VGASUP				722
#define DIALOG_UPSTAGE              723
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// another defines
#define EX_SPLITLENGTH 113
#define EX_SPLITLENGTHH 128
#define MAX_GROUPS (15)
#define MAX_CLANS (100)
#define MAX_ATMS (25)
#define MAX_SVARS (21)
#define MAX_BILL (21)
#define MAX_SKINS (312)
#define RATE_INC (500)
#define RATE_MAX (2500)
#define THRESOLD_ACTION (1)
#define MAX_PERSONAL_CARS (105)
#define MAX_PERSONAL_VEHICLES (20)
#define MAX_CLAN_VEHICLES (5)
#define AdminOnly "You are not authorised to use this command!"
#define SetPlayerHoldingObject(%1,%2,%3,%4,%5,%6,%7,%8,%9) SetPlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1,%2,%3,%4,%5,%6,%7,%8,%9)
#define StopPlayerHoldingObject(%1) RemovePlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define IsPlayerHoldingObject(%1) IsPlayerAttachedObjectSlotUsed(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define SpeedCheck(%0,%1,%2,%3,%4) floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1) ) *%3*1.8)
#define                 hidePlayerDialog(%0)                    ShowPlayerDialog(%0, -1, 0, " ", " ", "", "")
#define                 strcpy(%0,%1,%2)                        strcat((%0[0] = '\0', %0), %1, %2) // strcpy(dest, source, length)
#define GetVehicleSeats(%0) (GetVehicleModelSeats(GetVehicleModel(%0)))
forward _Kick ( playerid ); public _Kick ( playerid ) return Kick ( playerid );
#define KickEx(%1) SetTimerEx ( "_Kick", 500, false, "i", %1 )
#define function%0(%1) forward%0(%1); public%0(%1)
#define ATTACK_TYPE_PLAYERID 1
#define ATTACK_TYPE_IP 2
#define RELEASED(%0) \
    (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
#define PRESSING(%0,%1) \
	(%0 & (%1))
#define MAX_EVOBJECTS 51
#define ACTIVE_QUEST 1
#define MAX_CHANNEL 1000
#define MAX_STRING 2500
#define CHECKPOINT_NONE 0
#define CHECKPOINT_LOCATE 53
#define KEY_AIM (128)
#define KEY_HANDBRAKE (128)
#define SCM SendClientMessage
#define SPECIAL_ACTION_PISSING 68

#define SPEED_MULTIPLIER 1.025
#define SPEED_THRESHOLD  0.4
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// colors
#define COLOR_ADMCHAT       0xFFC266AA
#define COLOR_CHATBUBBLE    0xFFFFFFCC
#define COLOR_ERROR         0xEDD388FF
#define COLOR_GRAD1         0xB4B5B7FF
#define COLOR_GRAD2         0xBFC0C2FF
#define COLOR_GREY          0xCECECEFF
#define COLOR_GREEN         0x33AA33AA
#define COLOR_GREEN2        0x4DAD2BAA
#define COLOR_ADV           0x00FF00AA
#define COLOR_RED           0xAA3333AA
#define COLOR_LIGHTRED      0xFF6347AA
#define COLOR_LIGHTRED2     0xCC4661FF
#define COLOR_LIGHTBLUE     0x33CCFFAA
#define COLOR_LIGHTGREEN    0x8BBA2EAA
#define COLOR_ORANGE        0xFFA500AA
#define COLOR_ADMIN         0xC56D30FF
#define COLOR_WARNING       0xDE1414FF
#define COLOR_YELLOW        0xFFFF00AA
#define COLOR_ADMCOMMANDS   0xFFC000FF
#define COLOR_DCHAT         0xFFD7004A
#define COLOR_WHITE         0xFFFFFFFF
#define COLOR_FADE1         0xE6E6E6E6
#define COLOR_FADE2         0xC8C8C8C8
#define COLOR_FADE3         0xAAAAAAAA
#define COLOR_FADE4         0x8C8C8C8C
#define COLOR_FADE5         0x6E6E6E6E
#define COLOR_PURPLE        0xC2A2DAAA
#define COLOR_DBLUE         0x2641FEAA
#define COLOR_ALLDEPT       0xff353535
#define COLOR_RADIOCHAT     0x8D8DFFFF
#define COLOR_BID           0x4B4BE9FF
#define COLOR_TEAL          0x67AAB1FF
#define COLOR_GENANNOUNCE   0xA9C4E4FF
#define COLOR_GENANNOUNCE2  0xFF8080FF
#define COLOR_ROB           0x0C8176FF
#define COLOR_BLUE          0x211CDEC8
#define COLOR_DARKPINK      0xE7AAA5A5
#define COLOR_NEWBIE        0x9DFE8080
#define COLOR_RED2          0xFF0000FF
#define COLOR_REPORT        0xA60404FF
#define COLOR_MEMBER        0x00B8E6FF
#define COLOR_LEADER        0x009ACDFF
#define COLOR_CLAN          0xFFCC99FF
#define COLOR_LIGHTGREEN3   0xCEF0ACFF
#define COLOR_GREEN3        0x6DB067AA
#define COLOR_CYAN          0x5EB1B1FF
#define COLOR_BLUE2         0x3E63B8FF
#define COLOR_COOLBLUE      0x0064FFAA
#define COLOR_COOLRED       0xAB0000FF
#define COLOR_SMS           0xD5EAFFFF
#define COLOR_JOB      		0x409FB6FF
#define COLOR_PET			0xD6A7F1FF
#define COLOR_ARENA			0xDD5E42FF
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// team
#define TEAM_CYAN   1
#define TEAM_BLUE   2
#define TEAM_GREEN  3
#define TEAM_ORANGE 4
#define TEAM_COR    5
#define TEAM_BAR    6
#define TEAM_TAT    7
#define TEAM_CUN    8
#define TEAM_STR    9
#define TEAM_HIT    10
#define TEAM_ADMIN  11
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

#define RunOutTime 30000
#define RefuelWait 5000
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

new const
	KEY_VEHICLE_FORWARD  = 0b001000,
	KEY_VEHICLE_BACKWARD = 0b100000
;

// vehicle seats
new MaxSeats[212] = {
4,2,2,2,4,4,1,2,2,4,2,2,2,4,2,2,4,2,4,2,4,4,2,2,2,1,4,4,4,2,1,9,1,2,2,1,2,9,4,2,
4,1,2,2,2,4,1,2,1,6,1,2,1,1,1,2,2,2,4,4,2,2,2,2,2,2,4,4,2,2,4,2,1,1,2,2,1,2,2,4,
2,1,4,3,1,1,1,4,2,2,4,2,4,1,2,2,2,4,4,2,2,2,2,2,2,2,2,4,2,1,1,2,1,1,2,2,4,2,2,1,
1,2,2,2,2,2,2,2,2,4,1,1,1,2,2,2,2,0,0,1,4,2,2,2,2,2,4,4,2,2,4,4,2,1,2,2,2,2,2,2,
4,4,2,2,1,2,4,4,1,0,0,1,1,2,1,2,2,2,2,4,4,2,4,1,1,4,2,2,2,2,6,1,2,2,2,1,4,4,4,2,
2,2,2,2,4,2,1,1,1,4,1,1
};
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/


#define MAX_AOBJECTS 150

#define DIALOG_ACCS	809
#define DIALOG_BUY_ACCS 810
#define DIALOG_EDITACCS 811

#define SAVE_ACCESORY 0
#define SAVE_BONE 1
#define SAVE_STATUS 2
#define SAVE_INDEX_0 3
#define SAVE_INDEX_1 4
#define SAVE_INDEX_2 5
#define SAVE_INDEX_3 6
#define SAVE_INDEX_4 7
#define SAVE_INDEX_5 8
#define SAVE_INDEX_6 9
#define SAVE_INDEX_7 10
#define SAVE_INDEX_8 11
#define SAVE_INDEX_9 12

// rainbow vip & premium
new RainbowOn[MAX_PLAYERS],RainbowCarID[MAX_PLAYERS],RainbowCarIN[MAX_PLAYERS];

// blackjack
new BDeal[MAX_PLAYERS],BDealerScore[MAX_PLAYERS],BlackJackPlayerScore[MAX_PLAYERS],
	BDealerCards[MAX_PLAYERS],BlackJackPlayerCards[MAX_PLAYERS],BlackJackStand[MAX_PLAYERS],
	BDealerCard[MAX_PLAYERS][5],BlackJackPlayerCard[MAX_PLAYERS][5],CloseBMatch[MAX_PLAYERS],
	BJMatch[MAX_PLAYERS],BlackJackActions[MAX_PLAYERS],InBlackJackGame[MAX_PLAYERS];
//new ObjectEdit,Float:VipRPos[3],Float:VipPos[3],Float:VipSPos[3],objmodelzx;

new BonusAcc;

//dmv exam
new InDmvTest[MAX_PLAYERS], PlayerText: DmvTd[MAX_PLAYERS][13],CurrentDmvQ[MAX_PLAYERS],DmvWrongs[MAX_PLAYERS],DmvQtime[MAX_PLAYERS];

// getlicences variable
new InLicenceTest[MAX_PLAYERS], PlayerText: LicenceTD[MAX_PLAYERS][13],CurrentLicenceQ[MAX_PLAYERS],LicenceWrongs[MAX_PLAYERS],LicenceQtime[MAX_PLAYERS];

// new opencase system
new PlayerText: OpencaseTD[MAX_PLAYERS][11], InOpenCase[MAX_PLAYERS], CaseOpening[MAX_PLAYERS], CaseCount[MAX_PLAYERS], opencasetimer[MAX_PLAYERS];

// trade system
new PlayerText: TradeTD[MAX_PLAYERS][12];

// damageinformer var
new PlayerText: DmgInformer[MAX_PLAYERS][2];

//spin
new joacapacanele[MAX_PLAYERS];
new PlayerText:PacaneleTD[52];
new sumapacanele[MAX_PLAYERS];
new timerpacanele[MAX_PLAYERS];
new rundapacanele[MAX_PLAYERS];
new IcoanaPacanele[MAX_PLAYERS][10];

//roulette
new
	RouletteInGame[MAX_PLAYERS],RouletteStatus,RouletteTime,RouletteTime2,
	playtime,prohodtime,betplayer[MAX_PLAYERS],betsumma[MAX_PLAYERS],
	totalbet[3],podkrut,TotalBet,totalsumma[3],
	bool:gSelected[MAX_PLAYERS],gSelectColor[MAX_PLAYERS],
	step,step2,step3,prohod,zmidialog[MAX_PLAYERS],
	Text:CasinoDraw[20],PlayerText:CasinoDrawPlayer[MAX_PLAYERS][2];

new PlayerText:BJusebox1[MAX_PLAYERS],PlayerText:BJusebox2[MAX_PLAYERS],PlayerText:BJusebox3[MAX_PLAYERS],
	PlayerText:BJDealerText[MAX_PLAYERS],PlayerText:BJPlayerText[MAX_PLAYERS],PlayerText:BJBlackJackText[MAX_PLAYERS],
	PlayerText:BJScoreText[MAX_PLAYERS],PlayerText:BJDealText[MAX_PLAYERS],PlayerText:BJDealAmountText[MAX_PLAYERS],
	PlayerText:BJBalanceText[MAX_PLAYERS],PlayerText:BJDealButtonText[MAX_PLAYERS],
	PlayerText:BJEnterBetText[MAX_PLAYERS],PlayerText:BJDealerScoreText[MAX_PLAYERS],PlayerText:BJPlayerScoreText[MAX_PLAYERS],
	PlayerText:BJClearBetText[MAX_PLAYERS],PlayerText:BJreset[MAX_PLAYERS],PlayerText:BJDealerCard1[MAX_PLAYERS],
	PlayerText:BJDealerCard2[MAX_PLAYERS],PlayerText:BJDealerCard3[MAX_PLAYERS],PlayerText:BJDealerCard4[MAX_PLAYERS],
	PlayerText:BJDealerCard5[MAX_PLAYERS],PlayerText:BJPlayerCard1[MAX_PLAYERS],PlayerText:BJPlayerCard2[MAX_PLAYERS],
	PlayerText:BJPlayerCard3[MAX_PLAYERS],PlayerText:BJPlayerCard4[MAX_PLAYERS],PlayerText:BJPlayerCard5[MAX_PLAYERS],
	PlayerText:BJWinText[MAX_PLAYERS],PlayerText:BJHitOptionText[MAX_PLAYERS],PlayerText:BJStandOptionText[MAX_PLAYERS];
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

//another var 
new housestring[200][256],barstring[100][256],
  	wantedvar[MAX_PLAYERS],Asteapta[MAX_PLAYERS];
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// players var
new SQL = -1;
new cCarOwner[MAX_CLANS][MAX_CLAN_VEHICLES][50],cCarPlate[MAX_CLANS][MAX_CLAN_VEHICLES][30],GiftBoxActiv = 1,destroytimer[MAX_CLANS][MAX_CLAN_VEHICLES],
	Float:DMInfo[MAX_PLAYERS][3],Float:GiftPosX,Float:GiftPosY,Float:GiftPosZ,giftboxobject,Text3D:giftbox3DText,Text3D:Pet[MAX_PLAYERS],
	TogVIP[MAX_PLAYERS],QuestWait[MAX_PLAYERS],TogBid[MAX_PLAYERS],HealTimer[MAX_PLAYERS],Listening[MAX_PLAYERS],TaxiCall[MAX_PLAYERS],
	TaxiAccepted[MAX_PLAYERS],TaxiFare[MAX_PLAYERS],TaxiTimer[MAX_PLAYERS],TaxiMoneySpent[MAX_PLAYERS],TaxiMoneyEarned[MAX_PLAYERS],
	TaxiDriver[MAX_PLAYERS],CanSpectate[MAX_PLAYERS],BreachID[MAX_PLAYERS],SellHouseID[MAX_PLAYERS],ShowDMG[MAX_PLAYERS],vObject[MAX_VEHICLES],
	BlockVehUse[MAX_PLAYERS],FireworkTimer[MAX_PLAYERS],LiveQuestion[MAX_PLAYERS][128],TimerQuestion[MAX_PLAYERS],ChangeClothes[MAX_PLAYERS],
	SkinSelect[MAX_PLAYERS],HaveNewbie[MAX_PLAYERS],HelperTimer[MAX_PLAYERS],timernewbie[MAX_PLAYERS],WantedFarmer[MAX_PLAYERS],
	FactionSpec[MAX_PLAYERS],HOwnerID[MAX_PLAYERS],HOwnerName[MAX_PLAYERS][30],RestartTimer,WantName[MAX_PLAYERS][30],WantBillName[MAX_PLAYERS][128],TypeName[MAX_PLAYERS],
	JobCar[MAX_PLAYERS],OnlineTime[MAX_PLAYERS],adutytime[MAX_PLAYERS],OnlineTimeToday[MAX_PLAYERS],DrugTimer[MAX_PLAYERS],
	GarbageInCar[MAX_VEHICLES],GarbageCollected[MAX_PLAYERS],CarCollisions[MAX_PLAYERS],DeathP[MAX_PLAYERS],LastText[MAX_PLAYERS][128],
	LastTextTime[MAX_PLAYERS]=-1,TextCount[MAX_PLAYERS],examcar[MAX_PLAYERS],LastBiz[MAX_PLAYERS],LastBizTime[MAX_PLAYERS],countdown,
	LastPlayer[MAX_PLAYERS],Selectat[1000][MAX_PLAYERS],XCheckpoints[MAX_PLAYERS],LastCheckpoint[MAX_PLAYERS],Selected[MAX_PLAYERS][101],
	Selected2[MAX_PLAYERS],AdvMSG[MAX_PLAYERS][256],AdvPlayer[MAX_PLAYERS],AdvTimer[MAX_PLAYERS],CarPlate[MAX_PLAYERS][MAX_PERSONAL_VEHICLES][30],
	CarVipName[MAX_PLAYERS][MAX_PERSONAL_VEHICLES][20],CarMod[MAX_PLAYERS][MAX_PERSONAL_VEHICLES][17],CarOwner[MAX_PLAYERS][MAX_PERSONAL_VEHICLES][50],
	SelectedCar[MAX_PLAYERS],SellTradeID[MAX_PLAYERS],SellTradePrice[MAX_PLAYERS],SellTradeTimer[MAX_PLAYERS],SellHiddenID[MAX_PLAYERS],
	SellHiddenPrice[MAX_PLAYERS],Float:old_veh_pos[MAX_VEHICLES + 1][3],Float:LastPos[MAX_PLAYERS][3],viddd[MAX_PLAYERS],
	Trucker[MAX_PLAYERS],Trucker2[MAX_PLAYERS],Trucker3[MAX_PLAYERS],Trucker4[MAX_PLAYERS],RepairTime[MAX_PLAYERS],
	pnsmoney[MAX_PLAYERS],AreFaina[MAX_PLAYERS],CarJacker[MAX_PLAYERS],BuyCar[MAX_PLAYERS],IsPlayerAFK[MAX_PLAYERS],object,
	iGMXTick,iGMXTimer,IsABid = 0,TopBidder = -1,BidAmount = 1000000,BidAmount2 = 1,IsAtBid = 0,BidTime = 0,WantToBid[MAX_PLAYERS],
	WantToBid2[MAX_PLAYERS],RentCar[MAX_PLAYERS],RentTime[MAX_PLAYERS],RentMoneySpent[MAX_PLAYERS],waitwar[15],SelFac[MAX_PLAYERS],
	EnterInModShop[MAX_PLAYERS],PlayerEnterTime[MAX_PLAYERS],Undercover[MAX_PLAYERS],shotTime[MAX_PLAYERS],shot[MAX_PLAYERS],
	WantedName[MAX_PLAYERS][256],WantedReason[MAX_PLAYERS],WantedTimer[MAX_PLAYERS],Float:QuestCarKM[MAX_VEHICLES],EmailId[MAX_PLAYERS][11],
	taxim[MAX_PLAYERS],Float:evex,Float:evey,Float:evez,eventenabled,pickup_event,virtuallevent,interiorevent,fight2[MAX_PLAYERS],
	reporttext[MAX_PLAYERS][128],reportcheater[MAX_PLAYERS] = -1,reportreason[MAX_PLAYERS] = 0,playerreported[MAX_PLAYERS] = -1,dmvp,
	gslsenter1,gslsenter2,gslsenter3,gslsenter4,ObjectIDD[MAX_OBJECTS],ObjectMoney[MAX_OBJECTS],toglc[MAX_PLAYERS],togsurf[MAX_PLAYERS],
	togarrests[MAX_PLAYERS],toge[MAX_PLAYERS],raceoff[MAX_PLAYERS],Carspawn[MAX_VEHICLES],Destroycar = 0,masini = 0,stockss = 0,svarss = 0,billboards = 0,
	clanss = 0,factionss = 0,questobjectss = 0,Diceid[MAX_PLAYERS],Dicem[MAX_PLAYERS],wantedlost[MAX_PLAYERS],CheckBus[MAX_PLAYERS],
	BusCheckk[MAX_PLAYERS],JobStep[MAX_PLAYERS],CreateVEH[MAX_PLAYERS],CreateVEHID[MAX_PLAYERS],timerbus[MAX_PLAYERS],busc[MAX_PLAYERS],
	Float:Health[MAX_PLAYERS],Float:Armour[MAX_PLAYERS],SpamCheck[MAX_PLAYERS],antirem[MAX_PLAYERS],login[MAX_PLAYERS],Clanidoff[MAX_PLAYERS],
	kickafk = 0,QuestionsOn = 0,tazer[MAX_PLAYERS],PlayerHandsup[MAX_PLAYERS],Freezed[MAX_PLAYERS],curatj[MAX_PLAYERS],XDeaths[MAX_PLAYERS],LastDeath[MAX_PLAYERS],
	playerdeath[MAX_PLAYERS],drug[MAX_PLAYERS],bizid[MAX_PLAYERS],bizprice[MAX_PLAYERS],bizoffer[MAX_PLAYERS],bool:WeaponData[MAX_PLAYERS][13],
	TimerAtuPlayer[MAX_PLAYERS],Cash[MAX_PLAYERS],bussines = 0,housess = 0,turfsss = 0,Vehicless = 0,togfind[MAX_PLAYERS],TowAcc[MAX_PLAYERS],
	JackAcc[MAX_PLAYERS],HaveHelmet[MAX_PLAYERS],vendi[MAX_PLAYERS],vendi2[MAX_PLAYERS],Vending[MAX_PLAYERS],
	FactionOffer[MAX_PLAYERS],hudactivated[MAX_PLAYERS],ReportTime[MAX_PLAYERS],timerreport[MAX_PLAYERS],Fishing[MAX_PLAYERS],FishTimer[MAX_PLAYERS],
	FishTimerr[MAX_PLAYERS],TipPeste[MAX_PLAYERS],farmerc[MAX_PLAYERS],farmertime[MAX_PLAYERS],timerfarmm[MAX_PLAYERS],timersoo[MAX_PLAYERS],
	soexpire[MAX_PLAYERS],BusinessRob[MAX_PLAYERS],RobTime[MAX_PLAYERS],RobTimer[MAX_PLAYERS],somatee[MAX_PLAYERS],somated[MAX_PLAYERS],
	somatename[MAX_PLAYERS][30],pizzaj[MAX_PLAYERS],pizzaprize[MAX_PLAYERS],PizzaCP[MAX_PLAYERS],AirCP[MAX_PLAYERS],airprize[MAX_PLAYERS],airj[MAX_PLAYERS],packageson[MAX_PLAYERS],
	TrashID[MAX_PLAYERS],GarbageTimer[MAX_PLAYERS],deathdeletetime[MAX_PLAYERS],targetfind[MAX_PLAYERS],InHouse[MAX_PLAYERS],InBussines[MAX_PLAYERS],
	InHQ[MAX_PLAYERS],cased[MAX_PLAYERS],caser[MAX_PLAYERS],adminacceptedhelp[MAX_PLAYERS] = -1,WTChannel[MAX_PLAYERS],arrestcop[MAX_PLAYERS] = -1,
	eventorganizer[MAX_PLAYERS],requestingevent[MAX_PLAYERS],requestingtitle[MAX_PLAYERS][50],requestinglocation[MAX_PLAYERS][50],
	requestingdescription[MAX_PLAYERS][100],requestingprize[MAX_PLAYERS],requestingtime[MAX_PLAYERS][50],payala[MAX_PLAYERS],activeevent,
	eventtitle[50],eventlocation[50],eventdescription[100],eventprize,eventtime[50],gatelspd,gatelvpd,gatelvpd2,gateng,lspdbar,lvpdbar,
	UsingDrugs[MAX_PLAYERS],Float:PlayerPos[MAX_PLAYERS][6],Float:PlayerPosii[MAX_PLAYERS][6],vehEngine[MAX_VEHICLES],HelperDuty[MAX_PLAYERS],
	AdminDuty[MAX_PLAYERS],vehRadio[MAX_VEHICLES],customRadio[MAX_VEHICLES][128],gPlayerUsingLoopingAnim[MAX_PLAYERS],Float:g_SpeedThreshold,
	gPlayerAnimLibsPreloaded[MAX_PLAYERS],FreeOffer[MAX_PLAYERS],FreePlayer[MAX_PLAYERS],FreePrice[MAX_PLAYERS],FreeExpire[MAX_PLAYERS],
	MatsOffer[MAX_PLAYERS],MatsPrice[MAX_PLAYERS],MatsAmmo[MAX_PLAYERS],SellgunOffer[MAX_PLAYERS],SellgunPrice[MAX_PLAYERS],
	SellgunMats[MAX_PLAYERS],SellgunAmmo[MAX_PLAYERS],SellgunID[MAX_PLAYERS],HouseID[MAX_PLAYERS],HouseOffer[MAX_PLAYERS],HousePrice[MAX_PLAYERS],
	ofercar[MAX_PLAYERS],hiddenoffer[MAX_PLAYERS],hiddenprice[MAX_PLAYERS],carprice[MAX_PLAYERS],primesccar[MAX_PLAYERS],cartype[MAX_PLAYERS],
	CarID[MAX_PLAYERS],tradeofferer[MAX_PLAYERS],tradediff[MAX_PLAYERS],tradecars[MAX_PLAYERS],tradecars2[MAX_PLAYERS],tradetype[MAX_PLAYERS],
	tradetype2[MAX_PLAYERS],flymode[MAX_PLAYERS],EnableBoast[MAX_PLAYERS],Text3D:areap,areape = 0,
	Text3D:dynamicevent3DText,Float:posxxx[MAX_PLAYERS],Float:posyyy[MAX_PLAYERS],Float:poszzz[MAX_PLAYERS],RegistrationStep[MAX_PLAYERS],
	TakingLesson[MAX_PLAYERS],UsedFind[MAX_PLAYERS],NoFuel[MAX_PLAYERS],MatsHolding[MAX_PLAYERS],GotoMats[MAX_PLAYERS],PlayerStoned[MAX_PLAYERS],
	ConsumingMoney[MAX_PLAYERS],TutTime[MAX_PLAYERS],PlayerDrunk[MAX_PLAYERS],PlayerDrunkTime[MAX_PLAYERS],LiveOffer[MAX_PLAYERS],
	TalkingLive[MAX_PLAYERS],PlacedNews[MAX_PLAYERS],SelectChar[MAX_PLAYERS],SelectCharID[MAX_PLAYERS],SelectCharPlace[MAX_PLAYERS],
	ChosenSkin[MAX_PLAYERS],CurrentMoney[MAX_PLAYERS],CP[MAX_PLAYERS],RaceCP[MAX_PLAYERS],RacePos[MAX_PLAYERS],
	MoneyMessage[MAX_PLAYERS],TaxValue,PaintBallWinnerKills[5],PaintWinner[5],MedicCall[MAX_PLAYERS],MedicAccepted[MAX_PLAYERS],
	Slapped[MAX_PLAYERS],MedicTime[MAX_PLAYERS],NeedMedicTime[MAX_PLAYERS],TicketOffer[MAX_PLAYERS],TicketMoney[MAX_PLAYERS],GotHit[MAX_PLAYERS],  
	GoChase[MAX_PLAYERS],GetChased[MAX_PLAYERS],PlayerTied[MAX_PLAYERS], PlayerCuffed[MAX_PLAYERS],PlayerCuffed2[MAX_PLAYERS],
	PlayerCuffedTime[MAX_PLAYERS],PlayerTazeTime[MAX_PLAYERS],RepairOffer[MAX_PLAYERS], RepairPrice[MAX_PLAYERS],RefillOffer[MAX_PLAYERS],
	RefillPrice[MAX_PLAYERS],RepairCar[MAX_PLAYERS],TransferOffer[MAX_PLAYERS], TransferMoney[MAX_PLAYERS],DrugOffer[MAX_PLAYERS], 
	DrugPrice[MAX_PLAYERS],DrugGram[MAX_PLAYERS],WantedPoints[MAX_PLAYERS], OnDuty[MAX_PLAYERS],gPlayerCheckpointStatus[MAX_PLAYERS], 
	gPlayerLogged[MAX_PLAYERS],gPlayerLogTries[MAX_PLAYERS],gPlayerSpawned[MAX_PLAYERS],gLastCar[MAX_PLAYERS],gNews[MAX_PLAYERS],
	gFam[MAX_PLAYERS],BigEar[MAX_PLAYERS],Spectate[MAX_PLAYERS],SpectateState[MAX_PLAYERS],CellTime[MAX_PLAYERS],HireCar[MAX_PLAYERS],
	SafeTime[MAX_PLAYERS],HidePM[MAX_PLAYERS],PhoneOnline[MAX_PLAYERS],PhoneOnlineCalls[MAX_PLAYERS],TurfsDisp[MAX_PLAYERS],FirstSpawn[MAX_PLAYERS],
	Mobile[MAX_PLAYERS],CallCost[MAX_PLAYERS],gPlayerAccount[MAX_PLAYERS],gLastDriver[600],racep, racem,racec, racecol, 
	racet, racers, racevotem[5], racevotec[22],racevotecol[2],carvoted, rmapvoted,rcarid[20],paintp[5],paintm[5], fctdeelay[MAX_PLAYERS],builddeelay[MAX_PLAYERS],
	paintg[3], paintt[5], paintrs[5],paintvoteg[3][3],paintvotem[5][5],mapvoted[5], gunvoted[3], gCarLock[600], Float: TpTestx[MAX_PLAYERS], Float: TpTesty[MAX_PLAYERS],
	Float: TpTestz[MAX_PLAYERS],StrawCP[MAX_PLAYERS],BillSelected[MAX_PLAYERS],Float: DmgLastH[MAX_PLAYERS],Float: DmgLastD[MAX_PLAYERS];
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// textdraw
new PlayerText:TimeLeftWar1[MAX_PLAYERS],PlayerText:TextJos[MAX_PLAYERS],
	PlayerText:PaintBallText[MAX_PLAYERS],PlayerText:FindTXD[MAX_PLAYERS][2],Text:Time,Text:Date,
	PlayerText:Bus1[MAX_PLAYERS],PlayerText:Bus2[MAX_PLAYERS],PlayerText:TextDrawSpec[MAX_PLAYERS][6],
	PlayerText:Fuell[MAX_PLAYERS],PlayerText:Speedd[MAX_PLAYERS],PlayerText:Odom[MAX_PLAYERS],
	PlayerText:carlocked[MAX_PLAYERS],PlayerText:farmspeed[MAX_PLAYERS],PlayerText:farmwanted[MAX_PLAYERS],PlayerText:farmtime[MAX_PLAYERS],
	PlayerText:Jailtime[MAX_PLAYERS],PlayerText:Tutorial[MAX_PLAYERS],PlayerText:Step[MAX_PLAYERS],
	PlayerText:BusJob[MAX_PLAYERS],PlayerText:BusCheck[MAX_PLAYERS],PlayerText:DMVexam[MAX_PLAYERS],
	PlayerText:DMVcheck[MAX_PLAYERS],PlayerText:WantedText[MAX_PLAYERS],PlayerText:UndercoverText[MAX_PLAYERS],
	PlayerText:Reportss[MAX_PLAYERS],PlayerText:RaceTD[MAX_PLAYERS][5],PlayerText:HUD[5][MAX_PLAYERS],
	PlayerText:TextLogo[MAX_PLAYERS],Text:AdminHUD, PlayerText: PayDayTimer[MAX_PLAYERS], PlayerText: BeehiveTimer[MAX_PLAYERS],
	PlayerText:RentCarText[MAX_PLAYERS],PlayerText:Packages[MAX_PLAYERS];
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// global variables
new Float:rx,Float:ry,Float:rz,objstore[128],cbjstore[128],ghour = 0,gminute = 0,gsecond = 0,dollah = 10000,realtime = 1,
	levelcost = 2000,realchat = 1,timeshift = -1,shifthour,synctimer,unjailtimer,preparerace1,preparerace2,preparepaint1,
	preparepaint2,preparepaint3,preparepaint4,paintrun1,paintrun2,paintrun3,paintrun4,racerun1,racerun2,wantedicatimer,
	twosecondstimer,productiontimer,twominutestimer,savedatatimer,randmsgtimer,checkgastimer,checkvehinfotimer,cartimer,
	levelexp = 4,pickups,Float:TeleportDest[MAX_PLAYERS][3],Float:TelePos[MAX_PLAYERS][6];
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// pizza checkpoints
new Float:gRandomPizza[30][3] = {
{1685.2980,-2098.7466,13.8529},{1080.7717,-1697.3340,13.6551},{1421.9972,-886.2278,50.7027},
{1852.9264,-2019.7021,13.5469},{900.3127,-1447.2301,14.3844},{2482.0947,-1995.6274,13.8343},
{2015.0562,-1732.5383,14.2344},{652.3757,-1693.7325,14.5828},{2522.2671,-2019.4713,14.1051},
{2384.6179,-1675.5129,14.9152},{192.6641,-1747.7219,4.3926},{1382.1199,-1088.0479,28.2299},
{2695.7800,-2020.4929,14.0457},{316.3287,-1769.9015,4.6583},{2247.1563,-1796.8983,13.5469},
{2383.4626,-1366.1216,24.4997},{-44.6829,-1563.1976,2.6430},{2402.2053,-1715.8423,14.0657},
{2433.7083,-1275.6931,24.7570},{254.4520,-1366.8945,53.1242},{2627.8093,-1084.4847,69.6166},
{2395.0051,-1133.6754,30.7319},{298.3587,-1338.8015,53.4608},{2552.0752,-958.5036,82.6985},
{2287.4463,-1080.7529,48.0063},{1034.9878,-812.8563,101.8792},{2510.4316,-1132.1924,41.6207},
{1180.0117,-1261.1542,18.9179},{1496.6488,-688.5958,95.4122},{2149.7832,-1433.9181,26.0887}
};
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// air checkpoints
new Float:gRandomAir[20][3] = {
{-1262.4613,502.2433,48.2599},{-752.6929,-116.9929,101.7423},
{-1727.6832,-18.4066,45.7891},{-15.4105,79.5333,42.0811},
{-2044.9806,-1050.5295,89.3498},{-1451.7839,-1499.8719,140.8010},
{-2618.5598,687.7015,97.2172},{322.1458,862.1691,53.3542},
{-2412.0059,1556.8934,61.8695},{-370.0816,1173.1908,56.0722},
{-1833.4867,1534.2264,47.4097},{-1506.6532,1977.9583,85.1760},
{-1504.6593,1286.5304,47.2512},{-1949.5942,2375.6006,84.8142},
{-1920.2722,765.4290,137.6973},{-2218.4492,2322.8494,37.6323},
{-2436.2771,69.1441,80.4141},{-2449.8406,2267.2271,43.6228},
{-1110.9325,-619.9664,83.2857},{-2587.9561,2303.5969,47.3626}
};
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// strawberry checkpoints
new Float:gRandomStrawberry[32][3] = {
{-119.0807,98.1306,3.1172},{-111.6469,119.9653,3.1172},
{-102.6697,147.3779,3.1161},{-114.4343,137.8025,3.112},
{-123.0624,113.1831,3.1172},{-126.9004,127.4186,3.117},
{-135.6801,103.1925,3.1172},{-118.4994,154.4310,3.633},
{-129.4394,146.2020,3.6097},{-138.5521,119.9944,3.354},
{-152.5566,109.1210,3.2615},{-142.6646,136.5403,3.781},
{-134.8616,159.0513,4.6397},{-155.0314,127.2539,3.603},
{-146.9519,151.5061,4.5680},{-151.4472,163.4761,5.802},
{-158.7296,141.2826,4.1735},{-167.9521,115.7641,3.383},
{-171.2027,131.6287,3.8531},{-161.4948,160.1434,5.935},
{-168.1618,168.4108,7.5650},{-173.4892,151.0853,5.663},
{-184.0253,120.2289,3.4633},{-185.2131,143.4281,5.487},
{-178.3013,165.1744,7.5251},{-185.0753,174.3329,8.714},
{-190.8478,158.5954,6.4983},{-199.5632,132.3075,3.663},
{-201.4952,151.0283,5.1137},{-194.9545,169.6379,7.882},
{-207.5584,161.9401,5.8874},{-213.1280,145.2235,3.853}
};
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// garbage checkpoints
new Float:CHKGarbage[25][3] = {
{2399.3333,-1721.3162,14.1116},{2159.6494,-1612.4806,14.8997},{1102.0321,-1876.0066,13.5469},
{1611.9386,-994.9053,24.0781},{1425.5986,-1080.5208,17.5583},{811.0487,-1098.3597,25.9063},
{414.3998,-1511.9857,33.0968},{433.4746,-1747.7964,9.2082},{945.7682,-1742.5713,14.3200},
{857.0139,-1381.7810,13.7297},{1492.3641,-687.2353,94.7500},{789.0624,-863.2424,60.6406},
{642.9407,-511.0573,17.0787},{1105.6340,-293.6084,73.9851},{1571.8179,26.1781,24.1641},
{2849.5703,1293.6212,11.3906},{2319.4424,1801.6254,11.6260},{2181.5298,1419.7175,10.8203},
{2656.4788,1081.9113,10.8203},{2638.0356,1835.3378,11.0234},{1977.2443,2495.1428,10.8665},
{1532.2018,2725.5518,10.8203},{959.2382,1805.0083,8.8516},{1479.1313,967.0140,10.8203},
{1579.1681,667.6521,10.8203}
};
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// race cars model
new RaceCar[22][1] = {
{402},{411},{415},{429},{451},{468},{471},{477},{480},{494},{495},{496},{506},{522},{541},{556},{557},{560},{568},{571},{572},{589}
};

// race positions(1)
new Float:RaceCPos1[20][4] = {
	{1664.8215,-1952.9338,23.5388,17.8781},{1651.0105,-1957.0048,23.5426,12.6880},{1661.5887,-1943.2240,23.6287,15.3161},
	{1650.4756,-1946.2118,23.6329,15.0291},{1646.9115,-1935.5114,23.8815,14.0427},{1658.0850,-1932.3418,23.8765,15.8355},
	{1655.7063,-1920.8724,24.1644,18.9371},{1644.0537,-1924.3422,24.1628,15.1860},{1641.3341,-1913.5647,24.4346,13.6180},
	{1652.5720,-1910.4500,24.4346,16.6797},{1647.5660,-1898.9185,24.6154,17.7002},{1638.0862,-1901.8688,24.6104,14.5660},
	{1634.2096,-1891.8969,24.7167,14.7279},{1644.1671,-1889.2178,24.7190,16.8311},{1641.0809,-1878.0859,24.8309,18.4938},
	{1630.6755,-1880.6888,24.8313,13.7463},{1637.4492,-1865.6379,25.1025,14.6930},{1626.5314,-1867.9270,25.1121,14.2808},
	{1623.5702,-1856.3097,25.4080,14.2762},{1634.2532,-1853.7094,25.4028,15.0607}
};

// race checkpoints (1)
new Float:RaceCCPos1[24][3] = {
	{1606.7430,-1627.0051,28.5859},{1608.6531,-1416.5537,28.5859},{1631.7269,-1217.7533,51.6463},{1653.7821,-1066.3461,60.9307},
	{1680.7343,-898.5240,61.3034},{1700.6436,-763.1754,52.6851},{1714.1312,-615.1121,39.3733},{1701.7422,-459.2735,33.3373},
	{1676.5778,-242.3406,42.7356},{1663.2672,-93.2728,35.4748},{1607.3998,61.6162,37.4506},{1654.0922,264.7711,30.0483},
	{1702.7062,400.2924,30.4659},{1760.1658,564.4227,25.0367},{1799.0160,765.1021,12.1282},{1804.6685,981.3500,6.8006},
	{1804.7825,1168.8334,6.7344},{1804.8198,1350.4043,6.7420},{1804.8362,1606.7394,6.7344},{1804.8529,1822.0753,6.7344},
	{1804.8529,1975.0753,5.0893},{1806.3547,2087.9102,3.9063},{1806.3972,2232.4299,4.7782},{1806.5177,2352.0327,6.7613}
};

// race positions (2)
new Float:RaceCPos2[20][4] = {
	{-2782.2056,-1729.1956,141.3940,348.3545},{-2786.2693,-1728.6627,141.4626,350.6985},{-2784.9417,-1720.3645,141.4154,350.6236},
	{-2780.5410,-1721.1072,141.4168,347.1776},{-2783.3452,-1713.3201,141.3922,350.3702},{-2778.9021,-1714.4030,141.4010,347.5752},
	{-2782.2080,-1706.5625,141.3737,350.5704},{-2777.4211,-1707.5137,141.3996,347.7630},{-2780.9370,-1699.0852,141.3533,350.0144},
	{-2775.7886,-1699.9452,141.4039,347.6471},{-2779.3596,-1690.7311,141.3320,347.8316},{-2773.4766,-1692.1511,141.5199,345.2198},
	{-2777.7402,-1683.1970,141.3103,347.9884},{-2771.9341,-1684.6481,141.5195,343.0033},{-2775.7651,-1673.8101,141.2850,348.4796},
	{-2769.9460,-1674.6434,141.5010,350.4145},{-2774.3894,-1665.9292,141.2635,353.1205},{-2769.3784,-1666.3802,141.3198,350.2652},
	{-2772.9714,-1656.4193,141.2386,350.2765},{-2768.2588,-1656.9392,141.2353,352.0675}
};

// race checkpoints (2)
new Float:RaceCCPos2[22][3] = {
	{-2763.6570,-1540.6292,140.3021},{-2735.1819,-1337.1201,147.6727},{-2609.8960,-1156.1077,170.7550},{-2531.7278,-1113.6655,176.6869},
	{-2613.8115,-1194.2880,198.7064},{-2659.8167,-1331.5876,243.6851},{-2552.7744,-1327.3273,267.5554},{-2404.8711,-1278.8977,296.9921},
	{-2414.6677,-1350.5143,336.2686},{-2564.4937,-1454.7810,356.9287},{-2399.8770,-1391.4828,359.1385},{-2215.8020,-1505.4290,359.2662},
	{-2214.0144,-1684.1577,377.5201},{-2229.4924,-1562.7354,379.0385},{-2358.2944,-1447.9075,383.4210},{-2521.5945,-1600.5491,397.8123},
	{-2505.6191,-1764.3940,402.1362},{-2442.2500,-1780.0552,415.3171},{-2433.2964,-1726.7140,433.6148},{-2302.4834,-1792.4752,444.3116},
	{-2287.0095,-1705.3296,477.3173},{-2320.7354,-1619.1311,483.4444}
};

// race positions (3)
new Float:RaceCPos3[20][4] = {
	{-312.4946,-1912.2476,12.8110,91.2134},{-312.7263,-1907.5328,12.4271,90.4969},{-319.4455,-1907.5010,12.0213,89.2331},
	{-319.5836,-1912.4535,12.4430,92.3464},{-326.0461,-1908.1326,11.6520,95.1078},{-325.8822,-1912.7118,12.1222,92.4220},
	{-332.5753,-1908.6427,11.2628,93.3712},{-332.5471,-1912.9854,11.7927,92.1575},{-339.7218,-1908.7074,10.6430,88.7288},
	{-339.9342,-1912.9471,11.6197,89.7244},{-346.8582,-1908.6205,10.2382,90.9769},{-346.8570,-1912.9503,11.4538,90.3600},
	{-355.4246,-1909.8541,10.2838,95.7476},{-355.0123,-1913.7578,11.4055,97.7317},{-362.3782,-1911.3519,10.4857,103.8645},
	{-361.2711,-1915.3796,11.8299,103.9565},{-369.0455,-1912.9365,10.9361,101.2732},{-367.8647,-1917.0819,12.3502,104.3768},
	{-376.2256,-1913.9048,10.7586,97.4436},{-374.8159,-1918.6959,12.6140,103.6338}
};

// race checkpoints (3)
new Float:RaceCCPos3[24][3] = {
	{-446.0038,-1980.6345,27.2827},{-560.0427,-2028.8717,50.1934},{-667.8534,-2044.7177,25.0980},{-773.7825,-2128.8652,25.2220},
	{-836.3202,-2185.4963,23.1133},{-937.3137,-2181.0674,34.6764},{-956.5271,-2313.4153,58.0039},{-1022.7851,-2375.8484,58.4726},
	{-1210.2120,-2347.3665,17.2871},{-1268.2340,-2254.2036,22.1183},{-1364.0348,-2175.1973,21.7806},{-1487.6610,-2157.6660,2.1014},
	{-1628.1329,-2154.7593,26.9979},{-1706.6035,-2095.3848,38.9558},{-1948.7546,-2047.5782,70.2670},{-1889.7488,-1933.2793,82.2486},
	{-1744.8981,-1917.8726,98.3029},{-1545.7839,-1896.4569,79.7016},{-1493.3903,-1791.4915,53.0705},{-1444.5317,-1820.0983,44.4001},
	{-1415.2518,-2002.1530,7.2238},{-1318.3213,-2057.0828,16.7988},{-1307.5045,-2176.3328,21.6446},{-1219.6254,-2343.9712,17.0815}
};

/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// trucker pickup
new Float:CHKTruck[18][3] = {
	{-99.2558,-1168.3788,2.5964}, //GAS LS ---- CHECKS LS
	{1315.7880,-867.2107,39.5781}, //24/7 Store LS
	{2116.6514,-1771.4202,13.3937}, //Pizza Boy LS
	{2816.3660,-1698.8490,9.9504}, //8 Track LS
	{2651.2346,-2390.4055,13.6328}, //Chop Shop LS
	{2115.3047,-1723.7944,13.5502}, //Crack House LS
	{2165.3979,2746.7004,10.8203}, //GAS LV ---- CHECKS LV
	{2046.1804,2244.4304,10.8203}, //Clothing Soter LV
	{2447.6467,1999.7650,10.8203}, //Burger Shot LV
	{2503.0703,1531.9418,10.6749}, //Pool LV
	{2032.2845,1516.1019,10.8203}, //Pirate Ship LV
	{1483.8053,1046.6919,10.8203}, //Chuckup LV
	{-1728.6168,-119.5973,3.5547}, //Ship SF ---- CHECKS SF
	{-1694.2990,399.9545,7.1797}, //GAS SF
	{-1672.8090,1322.6425,7.1853}, //Pier 69 SF
	{-2110.9172,816.9711,69.5625}, //Supa Save SF
	{-2533.0513,1227.8401,37.4219}, //Restaurant SF
	{-2142.6599,-442.6247,35.3359} //Homies SF
};

// trucker pickup (2)
new Float:CHKTruck2[18][3] = {
	{-119.2522,-1218.2719,2.9902}, //LANGA GAS LS ---- CHECKS LS
	{1361.1011,-906.6476,35.3157}, //LANGA 24/7 Store LS
	{2078.8257,-1706.9739,13.3906}, //LANGA Pizza Boy LS
	{2683.8926,-1683.9061,9.4250}, //LANGA 8 Track LS
	{2609.1416,-2393.7742,13.6271}, //LANGA Chop Shop LS
	{2158.9236,-1725.8071,13.5389}, //LANGA Crack House LS
	{2101.4238,2803.3069,10.8203}, //LANGA GAS LV ---- CHECKS LV
	{2116.0403,2189.2769,10.8203}, //LANGA Clothing Soter LV
	{2426.0283,2005.2286,10.8203}, //LANGA Burger Shot LV
	{2589.9490,1704.1989,10.8203}, //LANGA Pool LV
	{2029.4589,1418.5114,10.8203}, //LANGA Pirate Ship LV
	{1441.4424,1005.0969,10.8203}, //LANGA Chuckup LV
	{-1731.8619,-71.2586,3.5489}, //LANGA Ship SF ---- CHECKS SF
	{-1714.7142,352.0824,7.1875}, //LANGA GAS SF
	{-1647.4458,1291.6462,7.0391}, //LANGA Pier 69 SF
	{-2132.7087,769.0834,69.5625}, //LANGA Supa Save SF
	{-2468.7771,1231.8475,35.2001}, //LANGA Restaurant SF
	{-2184.9126,-409.3924,35.3359} //LANGA Homies SF
};
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// jail spawn
new Float:gRandomJailSpawns[3][3] = {
	{263.7989,85.8850,1001.0391},{264.0302,81.2118,1001.0391},{263.8704,77.0021,1001.0391}
};

// admin jail spawn
new Float:gRandomAJailSpawns[4][3] = {
	{215.5260,110.5124,1000.0156},{219.3602,109.9994,1000.0156},{223.3645,109.9972,1000.0156},{227.1875,110.2887,1000.0156}
};
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// rob checkpoints
new Float:gRandomRob[11][3] = {
	{2308.8533,-1715.0500,14.6496},{1921.6538,-1115.0759,27.0883},{351.7325,-1197.2733,76.5156},
	{1182.0050,-1068.1383,29.1936},{2435.2007,-1289.3853,25.3479},{2248.9714,961.5317,10.8130},
	{2787.9294,2222.7788,14.6615},{1597.7314,2093.5139,11.3125},{1029.9531,2028.0458,11.4683},
	{1609.4539,2789.3052,10.8203},{2594.5935,748.7582,11.0234}
};

// rob checkpoints (2)
new Float:gRandomRob2[10][3] = {
	{1695.5579,-2125.8223,13.8101},{2522.6125,-2018.8566,14.0744},{2751.7439,-1962.8811,13.5469},
	{2553.0874,-958.2475,82.6460},{166.8161,-1758.7646,6.7969},{2042.4943,732.5795,11.4609},
	{2581.5403,1060.6929,11.7309},{1435.2942,2548.9001,10.8203},{1029.7107,1847.9226,11.4683},
	{1706.7246,950.2996,10.8203}
};
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// rc map spawn (paintball)
new Float:gRandomSpawnRC[7][3] = {
	{-969.7932,1094.1221,1345.0070},{-976.3990,1022.5371,1345.0310},{-973.6447,1041.8181,1352.6875},
	{-1014.5994,1027.9786,1342.6187},{-1133.7423,1021.9453,1345.7335},{-1115.6410,1095.8212,1341.8438},
	{-1133.1267,1079.1073,1353.4480}
};
// tennis map spawn (paintball)
new Float:gRandomSpawnTennis[7][3] = {
	{-2754.8149,-245.1009,7.1875},{-2779.4072,-248.5145,7.1875},{-2779.9651,-265.2720,7.1875},
	{-2744.6108,-270.1563,7.1875},{-2718.3101,-252.3627,7.1875},{-2726.9282,-240.9186,7.1875},
	{-2716.3669,-269.9250,7.1875}
};
// farm map spawn (paintball)
new Float:gRandomSpawnFarm[7][3] = {
	{15.3401,2.1944,3.1172},{-59.7064,-32.2439,3.1172},{-102.5952,-29.0223,3.1172},
	{-111.9006,27.3635,3.1172},{-152.7778,49.3966,3.1172},{-205.3790,8.9561,3.1172},
	{-75.0158,9.1256,3.1172}
};
// lspd map spawn (paintball)
new Float:gRandomSpawnLSPD[7][3] = {
	{1499.7970,-1671.6659,14.0469},{1459.4235,-1699.1788,14.5469},{1491.1667,-1724.2849,13.5469},{1519.1375,-1741.3630,13.5469},
	{1501.7247,-1609.9181,14.0469},{1457.3564,-1623.7700,14.7891},{1483.3802,-1631.9480,14.1484}
};
// beach map spawn (paintball)
new Float:gRandomSpawnBeach[4][3] = {
	{435.9146,-1866.6290,3.2360},{444.5479,-1812.2511,5.6518},{626.7772,-1895.2271,3.5011},{574.0911,-1837.1144,5.4269}
};
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// job tow car deliver checkpoints
new Float:TowCarCk[14][3] = {
	{1209.6587,-1102.2660,25.1793},{1013.2002,-1022.8221,32.1016},{928.3862,-1081.9692,24.2891},
	{856.1053,-1364.4233,13.5469},{968.3508,-1710.0663,13.5546},{1017.6634,-917.3149,42.1797},
	{1268.3655,-1613.0262,13.5469},{1433.0844,-1843.8458,13.5469},{2051.3674,-2046.2601,13.5469},
	{2137.6187,-2173.9358,13.5544},{2215.5930,-2202.2126,13.5469},{2468.5393,-2078.4360,13.5469},
	{2699.9041,-1951.2253,13.5540},{2662.4050,-1593.9717,13.3006}
};
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// fuel var
new Gas[MAX_VEHICLES];
new Neons[2][MAX_VEHICLES];
new Refueling[MAX_PLAYERS];

static stock Float:VehicleData[ ][ 6 ] =
{
	//SizeX,    SizeY,    SizeZ,    ChassisX, ChassisY, ChassisZ
	{ 2.329999, 5.119999, 1.639999, 0.000000, 0.000000, 0.000000 }, // 400
	{ 2.569999, 5.829999, 1.710000, 0.000000, 0.000000, 0.000000 }, // 401
	{ 2.410000, 5.800000, 1.529999, 0.000000, 1.519999, -0.349999 }, // 402
	{ 3.150000, 9.220000, 4.179999, 0.000000, 0.000000, 0.000000 }, // 403
	{ 2.200000, 5.809999, 1.840000, 0.000000, 0.000000, 0.000000 }, // 404
	{ 2.349999, 6.000000, 1.490000, 0.000000, 0.019999, 0.000000 }, // 405
	{ 5.269999, 11.590000, 4.420000, 0.000000, 0.000000, 0.000000 }, // 406
	{ 2.849999, 8.960000, 2.700000, 0.000000, 0.000000, 0.000000 }, // 407
	{ 3.119999, 10.689999, 3.910000, 0.000000, 0.000000, 0.000000 }, // 408
	{ 2.369999, 8.180000, 1.529999, 0.000000, 2.750000, -0.349999 }, // 409
	{ 2.259999, 5.010000, 1.799999, 0.000000, 0.000000, 0.000000 }, // 410
	{ 2.390000, 5.780000, 1.370000, 0.000000, 0.000000, 0.000000 }, // 411
	{ 2.450000, 7.309999, 1.389999, 0.000000, 0.000000, 0.000000 }, // 412
	{ 2.279999, 5.880000, 2.230000, 0.000000, 0.000000, 0.000000 }, // 413
	{ 2.519999, 7.070000, 4.599999, 0.000000, 0.000000, 0.000000 }, // 414
	{ 2.319999, 5.510000, 1.139999, 0.000000, 0.000000, 0.000000 }, // 415
	{ 2.730000, 8.010000, 3.400000, 0.000000, 0.000000, 0.000000 }, // 416
	{ 5.449999, 23.270000, 6.610000, 0.000000, 0.000000, 0.000000 }, // 417
	{ 2.569999, 5.670000, 2.140000, 0.000000, 0.000000, 0.000000 }, // 418
	{ 2.400000, 6.219999, 1.409999, 0.000000, 1.620000, -0.430000 }, // 419
	{ 2.410000, 5.909999, 1.769999, 0.000000, 0.000000, 0.000000 }, // 420
	{ 2.250000, 6.389999, 1.370000, 0.000000, 1.740000, -0.469999 }, // 421
	{ 2.269999, 5.380000, 1.549999, 0.000000, 0.000000, 0.000000 }, // 422
	{ 2.319999, 4.840000, 4.909999, 0.000000, 0.000000, 0.000000 }, // 423
	{ 2.460000, 3.859999, 1.779999, 0.000000, 0.000000, 0.000000 }, // 424
	{ 5.159999, 18.629999, 5.190000, 0.000000, 0.000000, 0.000000 }, // 425
	{ 2.410000, 5.909999, 1.769999, 0.000000, 1.639999, -0.349999 }, // 426
	{ 2.640000, 8.199999, 3.230000, 0.000000, 0.000000, 0.000000 }, // 427
	{ 2.730000, 6.280000, 3.480000, 0.000000, 0.000000, 0.100000 }, // 428
	{ 2.210000, 5.179999, 1.279999, 0.000000, 0.000000, 0.000000 }, // 429
	{ 4.77,     16.90,    5.92,     0.000000, 0.000000, 0.000000 }, // 430
	{ 3.009999, 12.210000, 4.420000, 0.000000, 0.000000, 0.000000 }, // 431
	{ 4.300000, 9.170000, 3.880000, 0.000000, 0.000000, 0.000000 }, // 432
	{ 3.400000, 10.000000, 4.860000, 0.000000, 0.000000, 0.000000 }, // 433
	{ 2.289999, 4.570000, 1.720000, 0.000000, 0.000000, 0.000000 }, // 434
	{ 3.160000, 13.529999, 4.769999, 0.000000, 0.000000, 0.000000 }, // 435
	{ 2.279999, 5.510000, 1.720000, 0.000000, 0.000000, 0.000000 }, // 436
	{ 3.039999, 11.760000, 4.010000, 0.000000, 0.000000, 0.000000 }, // 437
	{ 2.410000, 5.820000, 1.720000, 0.000000, 0.000000, 0.000000 }, // 438
	{ 2.220000, 5.289999, 1.470000, 0.000000, 0.000000, 0.000000 }, // 439
	{ 2.309999, 5.559999, 2.759999, 0.000000, 0.000000, 0.000000 }, // 440
	{ 0.870000, 1.409999, 1.019999, 0.000000, 0.000000, 0.000000 }, // 441
	{ 2.609999, 6.679999, 1.759999, 0.000000, 0.000000, 0.000000 }, // 442
	{ 4.159999, 20.049999, 4.429999, 0.000000, 0.000000, 0.000000 }, // 443
	{ 3.660000, 6.019999, 3.289999, 0.000000, 0.000000, 0.000000 }, // 444
	{ 2.299999, 5.860000, 1.750000, 0.000000, 0.000000, 0.000000 }, // 445
	
	{ 4.77,     17.02,    4.31, 0.000000, 0.000000, 0.000000 }, // 446
	
	{ 2.420000, 14.800000, 3.150000, 0.000000, 0.000000, 0.000000 }, // 447
	{ 0.709999, 2.190000, 1.629999, 0.000000, 0.000000, 0.000000 }, // 448
	{ 3.029999, 9.029999, 4.989999, 0.000000, 0.000000, 0.000000 }, // 449
	{ 3.069999, 13.510000, 3.720000, 0.000000, 0.000000, 0.000000 }, // 450
	{ 2.319999, 5.469999, 1.220000, 0.000000, 0.000000, 0.000000 }, // 451
	{ 3.609999, 14.569999, 3.289999, 0.000000, 1.500000, 1.169999 }, // 452
	
	{ 5.14,     13.77,     9.29,     0.000000, 1.500000, 1.169999 }, // 453
	{ 6.62,     19.05,     13.84,    0.000000, 1.500000, 1.169999 }, // 454
	
	
	{ 3.319999, 9.699999, 3.630000, 0.000000, 0.000000, 0.000000 }, // 455
	{ 3.230000, 9.520000, 4.980000, 0.000000, 0.000000, 0.000000 }, // 456
	{ 1.830000, 2.609999, 2.720000, 0.000000, 0.000000, 0.000000 }, // 457
	{ 2.410000, 6.139999, 1.470000, 0.000000, 0.000000, 0.000000 }, // 458
	{ 2.299999, 5.719999, 2.230000, 0.000000, 0.000000, 0.000000 }, // 459
	{ 10.850000, 13.550000, 4.440000, 0.000000, 0.000000, 0.000000 }, // 460
	{ 0.699999, 2.460000, 1.679999, 0.000000, 0.000000, 0.000000 }, // 461
	{ 0.709999, 2.190000, 1.629999, 0.000000, 0.000000, 0.000000 }, // 462
	{ 0.699999, 2.420000, 1.340000, 0.000000, 0.000000, 0.000000 }, // 463
	{ 1.580000, 1.549999, 1.149999, 0.000000, 0.000000, 0.000000 }, // 464
	{ 0.870000, 1.409999, 1.019999, 0.000000, 0.000000, 0.000000 }, // 465
	{ 2.529999, 6.170000, 1.649999, 0.000000, 1.789999, -0.349999 }, // 466
	{ 2.529999, 6.360000, 1.669999, 0.000000, 1.799999, -0.349999 }, // 467
	{ 0.709999, 2.230000, 1.419999, 0.000000, 0.000000, 0.000000 }, // 468
	{ 2.420000, 14.800000, 3.150000, 0.000000, 0.000000, 0.000000 }, // 469
	{ 2.660000, 5.480000, 2.099999, 0.000000, 0.000000, 0.000000 }, // 470
	{ 1.419999, 2.000000, 1.710000, 0.000000, 0.000000, 0.000000 }, // 471
	
	{ 2.67,     9.34,     4.87, 0.000000, 0.000000, 1.72 }, // 472
	{ 2.90,     5.40,     2.22, 0.00,     0.31,     0.36 }, // 473
	
	{ 2.430000, 6.030000, 1.690000, 0.000000, 0.000000, 0.000000 }, // 474
	{ 2.450000, 5.780000, 1.480000, 0.000000, 1.539999, -0.349999 }, // 475
	{ 11.029999, 11.289999, 3.289999, 0.000000, 0.000000, 0.000000 }, // 476
	{ 2.670000, 5.929999, 1.399999, 0.000000, 0.000000, 0.000000 }, // 477
	{ 2.450000, 5.570000, 1.740000, 0.000000, 1.490000, -0.550000 }, // 478
	{ 2.250000, 6.150000, 1.990000, 0.000000, 0.000000, 0.000000 }, // 479
	{ 2.269999, 5.260000, 1.419999, 0.000000, 0.000000, 0.000000 }, // 480
	{ 0.709999, 1.879999, 1.320000, 0.000000, 0.000000, 0.000000 }, // 481
	{ 2.339999, 5.699999, 1.870000, 0.000000, 0.000000, 0.000000 }, // 482
	{ 2.049999, 6.190000, 2.109999, 0.000000, 0.000000, 0.000000 }, // 483
	
	{ 5.35,     26.20,    7.16, 0.000000, 0.000000, 0.46 }, // 484
	
	{ 1.970000, 4.070000, 1.440000, 0.000000, 0.000000, 0.000000 }, // 485
	{ 4.340000, 7.840000, 4.449999, 0.000000, 0.000000, 0.000000 }, // 486
	{ 2.329999, 15.039999, 4.670000, 0.000000, 0.000000, 0.000000 }, // 487
	{ 2.329999, 12.609999, 4.650000, 0.000000, 0.000000, 0.000000 }, // 488
	{ 2.539999, 5.699999, 2.140000, 0.000000, 0.000000, 0.000000 }, // 489
	{ 2.920000, 6.929999, 2.140000, 0.000000, 0.180000, 0.000000 }, // 490
	{ 2.309999, 6.329999, 1.289999, 0.000000, 1.570000, -0.419999 }, // 491
	{ 2.349999, 6.179999, 1.789999, 0.000000, 1.710000, -0.349999 }, // 492
	
	{ 4.77,     17.83,    3.85, 0.000000, 0.000000, 0.000000 }, // 493
	
	{ 2.250000, 6.489999, 1.500000, 0.000000, -0.219999, 0.000000 }, // 494
	{ 2.779999, 5.449999, 1.990000, 0.000000, 0.000000, 0.000000 }, // 495
	{ 2.279999, 4.750000, 1.789999, 0.000000, 0.000000, 0.000000 }, // 496
	{ 2.329999, 15.039999, 4.659999, 0.000000, 0.000000, 0.000000 }, // 497
	{ 2.900000, 6.599999, 4.280000, 0.000000, 0.000000, 0.000000 }, // 498
	{ 2.640000, 7.199999, 3.750000, 0.000000, 0.000000, 0.000000 }, // 499
	{ 2.289999, 5.010000, 1.850000, 0.000000, 0.000000, 0.000000 }, // 500
	{ 0.870000, 1.409999, 1.019999, 0.000000, 0.000000, 0.000000 }, // 501
	{ 2.349999, 5.969999, 1.519999, 0.000000, 0.000000, 0.000000 }, // 502
	{ 2.210000, 6.139999, 1.629999, 0.000000, -0.219999, 0.000000 }, // 503
	{ 2.529999, 6.039999, 1.649999, 0.000000, 1.799999, 0.000000 }, // 504
	{ 2.539999, 5.699999, 2.140000, 0.000000, 0.000000, 0.000000 }, // 505
	{ 2.250000, 5.219999, 1.169999, 0.000000, 0.000000, 0.000000 }, // 506
	{ 2.569999, 6.590000, 1.620000, 0.000000, 1.799999, -0.449999 }, // 507
	{ 2.960000, 8.050000, 3.339999, 0.000000, 0.000000, 0.000000 }, // 508
	{ 0.709999, 1.899999, 1.320000, 0.000000, 0.000000, 0.000000 }, // 509
	{ 0.720000, 1.740000, 1.120000, 0.000000, 0.000000, 0.000000 }, // 510
	{ 21.219999, 21.190000, 5.059999, 0.000000, 0.000000, 0.000000 }, // 511
	{ 11.159999, 6.159999, 2.990000, 0.000000, 0.000000, 0.000000 }, // 512
	{ 8.699999, 9.000000, 2.230000, 0.000000, 0.000000, -0.180000 }, // 513
	{ 3.190000, 10.069999, 3.059999, 0.000000, 0.000000, 0.000000 }, // 514
	{ 3.549999, 9.949999, 3.420000, 0.000000, 0.000000, 0.000000 }, // 515
	{ 2.599999, 6.239999, 1.710000, 0.000000, 0.000000, 0.000000 }, // 516
	{ 2.529999, 6.329999, 1.649999, 0.000000, 1.679999, -0.409999 }, // 517
	{ 2.430000, 6.000000, 1.570000, 0.000000, 0.000000, 0.000000 }, // 518
	{ 20.309999, 19.290000, 6.940000, 0.000000, 0.000000, 0.000000 }, // 519
	{ 8.750000, 14.319999, 2.160000, 0.000000, 0.000000, 0.000000 }, // 520
	{ 0.699999, 2.460000, 1.679999, 0.000000, 0.000000, 0.000000 }, // 521
	{ 0.699999, 2.460000, 1.679999, 0.000000, 0.000000, 0.000000 }, // 522
	{ 0.699999, 2.470000, 1.679999, 0.000000, 0.000000, 0.000000 }, // 523
	{ 3.589999, 8.840000, 3.640000, 0.000000, 0.000000, 0.000000 }, // 524
	{ 3.049999, 6.469999, 3.289999, 0.000000, 0.000000, 0.000000 }, // 525
	{ 2.200000, 5.400000, 1.259999, 0.000000, 0.000000, 0.000000 }, // 526
	{ 2.430000, 5.719999, 1.740000, 0.000000, 0.000000, 0.000000 }, // 527
	{ 2.549999, 5.550000, 2.140000, 0.000000, 0.000000, 0.000000 }, // 528
	{ 2.380000, 5.630000, 1.860000, 0.000000, 0.000000, 0.000000 }, // 529
	{ 1.580000, 4.230000, 2.680000, 0.000000, 0.000000, 0.000000 }, // 530
	{ 1.960000, 3.700000, 1.669999, 0.000000, 0.000000, -0.059999 }, // 531
	{ 8.619999, 11.390000, 4.179999, 0.000000, 0.000000, 0.000000 }, // 532
	{ 2.380000, 5.420000, 1.490000, 0.000000, 0.000000, 0.000000 }, // 533
	{ 2.180000, 6.269999, 1.159999, 0.000000, 0.000000, 0.000000 }, // 534
	{ 2.670000, 5.480000, 1.580000, 0.000000, 0.000000, 0.000000 }, // 535
	{ 2.460000, 6.420000, 1.299999, 0.000000, 1.750000, -0.349999 }, // 536
	{ 3.329999, 18.430000, 5.199999, 0.000000, 0.000000, 0.000000 }, // 537
	{ 3.269999, 16.590000, 4.949999, 0.000000, 0.000000, -0.119999 }, // 538
	{ 2.500000, 3.869999, 2.559999, 0.000000, 0.000000, 0.000000 }, // 539
	{ 2.589999, 6.070000, 1.500000, 0.000000, 0.000000, 0.000000 }, // 540
	{ 2.269999, 4.949999, 1.240000, 0.000000, 0.000000, 0.000000 }, // 541
	{ 2.480000, 6.400000, 1.700000, 0.000000, 1.620000, -0.370000 }, // 542
	{ 2.380000, 5.730000, 1.860000, 0.000000, 0.000000, 0.000000 }, // 543
	{ 2.809999, 12.859999, 3.890000, 0.000000, 0.000000, 0.000000 }, // 544
	{ 2.190000, 4.809999, 1.690000, 0.000000, 0.000000, 0.000000 }, // 545
	{ 2.569999, 5.860000, 1.669999, 0.000000, 0.000000, 0.000000 }, // 546
	{ 2.490000, 5.840000, 1.769999, 0.000000, 0.000000, 0.100000 }, // 547
	{ 4.179999, 24.420000, 4.909999, 0.000000, 0.000000, 0.000000 }, // 548
	{ 2.400000, 5.530000, 1.429999, 0.000000, 0.000000, 0.000000 }, // 549
	{ 2.539999, 5.889999, 1.539999, 0.000000, 0.000000, 0.000000 }, // 550
	{ 2.660000, 6.719999, 1.769999, 0.000000, 0.000000, 0.000000 }, // 551
	{ 2.650000, 6.719999, 3.559999, 0.000000, 0.000000, 0.000000 }, // 552
	{ 28.739999, 23.489999, 7.389999, 0.000000, 0.000000, 0.000000 }, // 553
	{ 2.680000, 6.170000, 2.089999, 0.000000, 0.000000, 0.000000 }, // 554
	{ 2.000000, 5.130000, 1.419999, 0.000000, 0.000000, 0.000000 }, // 555
	{ 3.660000, 6.369999, 3.289999, 0.000000, 0.000000, 0.000000 }, // 556
	{ 3.660000, 6.260000, 3.289999, 0.000000, 0.000000, 0.000000 }, // 557
	{ 2.230000, 5.250000, 1.750000, 0.000000, 0.000000, 0.000000 }, // 558
	{ 2.279999, 5.480000, 1.399999, 0.000000, 0.000000, 0.000000 }, // 559
	{ 2.319999, 5.400000, 1.620000, 0.000000, 0.000000, 0.000000 }, // 560
	{ 2.500000, 5.800000, 1.789999, 0.000000, 0.000000, 0.000000 }, // 561
	{ 2.259999, 5.309999, 1.509999, 0.000000, -0.009999, 0.000000 }, // 562
	{ 3.390000, 18.620000, 4.710000, 0.000000, 0.000000, 0.000000 }, // 563
	{ 0.870000, 1.409999, 1.019999, 0.000000, 0.000000, 0.000000 }, // 564
	{ 2.029999, 4.820000, 1.500000, 0.000000, 0.000000, 0.000000 }, // 565
	{ 2.509999, 6.460000, 1.659999, 0.000000, 1.710000, -0.349999 }, // 566
	{ 2.710000, 6.630000, 1.580000, 0.000000, 0.300000, -0.230000 }, // 567
	{ 2.710000, 4.610000, 1.419999, 0.000000, 0.000000, 0.000000 }, // 568
	{ 3.259999, 18.430000, 5.030000, 0.000000, 0.000000, 0.000000 }, // 569
	{ 3.470000, 21.069999, 5.190000, 0.000000, 0.000000, 0.029999 }, // 570
	{ 1.570000, 2.329999, 1.580000, 0.000000, 0.000000, 0.000000 }, // 571
	{ 1.659999, 2.349999, 2.019999, 0.000000, 0.000000, 0.000000 }, // 572
	{ 2.930000, 7.380000, 3.160000, 0.000000, 0.000000, 0.000000 }, // 573
	{ 1.620000, 3.849999, 2.500000, 0.000000, 0.000000, 0.000000 }, // 574
	{ 2.490000, 5.829999, 1.929999, 0.000000, 0.000000, 0.000000 }, // 575
	{ 2.420000, 6.360000, 1.850000, 0.000000, 0.000000, 0.000000 }, // 576
	{ 62.490001, 61.439998, 34.950000, 0.000000, 0.000000, 0.000000 }, // 577
	{ 3.150000, 11.789999, 2.779999, 0.000000, 0.000000, 0.000000 }, // 578
	{ 2.470000, 6.210000, 2.559999, 0.000000, 0.000000, 0.000000 }, // 579
	{ 2.660000, 5.769999, 2.240000, 0.000000, 0.000000, 0.000000 }, // 580
	{ 0.699999, 2.460000, 1.679999, 0.000000, 0.000000, 0.000000 }, // 581
	{ 2.440000, 7.219999, 3.190000, 0.000000, 0.000000, 0.000000 }, // 582
	{ 1.669999, 3.660000, 3.210000, 0.000000, 0.000000, 0.000000 }, // 583
	{ 3.549999, 15.909999, 3.400000, 0.000000, 0.000000, 0.000000 }, // 584
	{ 2.440000, 6.530000, 2.059999, 0.000000, 0.000000, 0.000000 }, // 585
	{ 0.699999, 2.799999, 1.960000, 0.000000, 0.000000, 0.000000 }, // 586
	{ 2.609999, 5.760000, 1.450000, 0.000000, 0.000000, 0.000000 }, // 587
	{ 3.079999, 8.619999, 7.530000, 0.000000, 0.000000, 0.000000 }, // 588
	{ 2.259999, 5.090000, 2.119999, 0.000000, 0.000000, 0.000000 }, // 589
	{ 3.440000, 18.399999, 5.030000, 0.000000, 0.000000, 0.000000 }, // 590
	{ 3.180000, 13.630000, 4.659999, 0.000000, 0.000000, 0.000000 }, // 591
	{ 44.450000, 57.569999, 18.430000, 0.000000, 0.000000, 0.000000 }, // 592
	{ 12.590000, 13.550000, 3.569999, 0.000000, 0.000000, 0.000000 }, // 593
	{ 0.500000, 0.920000, 0.300000, 0.000000, -0.039999, 0.000000 }, // 594
	{ 2.849999, 13.470000, 2.210000, 0.000000, 0.000000, 0.000000 }, // 595
	{ 2.410000, 5.909999, 1.769999, 0.000000, 1.639999, -0.349999 }, // 596
	{ 2.410000, 5.909999, 1.769999, 0.000000, 1.639999, -0.349999 }, // 597
	{ 2.410000, 5.789999, 1.769999, 0.000000, 1.639999, -0.349999 }, // 598
	{ 2.920000, 6.159999, 2.140000, 0.000000, 0.000000, 0.000000 }, // 599
	{ 2.400000, 6.059999, 1.559999, 0.000000, 0.000000, 0.000000 }, // 600
	{ 3.079999, 6.960000, 3.829999, 0.000000, 0.000000, 0.000000 }, // 601
	{ 2.319999, 5.539999, 1.289999, 0.000000, 0.000000, 0.000000 }, // 602
	{ 2.640000, 6.070000, 1.429999, 0.000000, 0.000000, 0.000000 }, // 603
	{ 2.529999, 6.170000, 1.649999, 0.000000, 1.789999, -0.349999 }, // 604
	{ 2.380000, 5.730000, 1.860000, 0.000000, 0.000000, 0.000000 }, // 605
	{ 2.930000, 3.380000, 1.970000, 0.000000, 0.000000, 0.000000 }, // 606
	{ 3.019999, 3.259999, 1.600000, 0.000000, 0.000000, -0.300000 }, // 607
	{ 1.450000, 4.650000, 6.360000, 0.000000, 0.000000, 0.000000 }, // 608
	{ 2.900000, 6.599999, 4.219999, 0.000000, 0.000000, 0.000000 }, // 609
	{ 2.480000, 1.429999, 1.629999, 0.000000, 0.000000, 0.000000 }, // 610
	{ 2.130000, 3.160000, 1.830000, 0.000000, 0.000000, 0.000000 } // 611	
};

//beehives variable
new BeeCar[MAX_PLAYERS],
	BeeObjects[6][MAX_PLAYERS],
	PlayerText3D: Bee3DText[MAX_PLAYERS];

/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// anti-troll
new EnterVehicle[MAX_PLAYERS];

function GetVehicleMaxSpeed(model) {
	new speed;
	model -= 400;
	switch(model) {
		case 0: speed = 149; // model 400
		case 1: speed = 139; // model 401
		case 2: speed = 176; // model 402
		case 3: speed = 104; // model 403
		case 4: speed = 125; // model 404
		case 5: speed = 155; // model 405
		case 6: speed = 104; // model 406
		case 7: speed = 140; // model 407
		case 8: speed = 94;  // model 408
		case 9: speed = 149; // model 409
		case 10: speed = 122; // model 410
		case 11: speed = 209; // model 411
		case 12: speed = 159; // model 412
		case 13: speed = 104; // model 413
		case 14: speed = 100; // model 414
		case 15: speed = 181; // model 415
		case 16: speed = 145; // model 416
		case 17: speed = 127; // model 417
		case 18: speed = 109; // model 418
		case 19: speed = 141; // model 419
		case 20: speed = 137; // model 420
		case 21: speed = 145; // model 421
		case 22: speed = 132; // model 422
		case 23: speed = 93;  // model 423
		case 24: speed = 128; // model 424
		case 25: speed = 191; // model 425
		case 26: speed = 164; // model 426
		case 27: speed = 156; // model 427
		case 28: speed = 148; // model 428
		case 29: speed = 190; // model 429
		case 30: speed = 100; // model 430
		case 31: speed = 123; // model 431
		case 32: speed = 89;  // model 432
		case 33: speed = 104; // model 433
		case 34: speed = 158; // model 434
		case 35: speed = 0;   // model 435
		case 36: speed = 141; // model 436
		case 37: speed = 149; // model 437
		case 38: speed = 135; // model 438
		case 39: speed = 159; // model 439
		case 40: speed = 128; // model 440
		case 41: speed = 71;  // model 441
		case 42: speed = 131; // model 442
		case 43: speed = 119; // model 443
		case 44: speed = 104; // model 444
		case 45: speed = 155; // model 445
		case 46: speed = 140; // model 446
		case 47: speed = 126; // model 447
		case 48: speed = 106; // model 448
		case 49: speed = 169; // model 449
		case 50: speed = 0;   // model 450
		case 51: speed = 182; // model 451
		case 52: speed = 141; // model 452
		case 53: speed = 58;  // model 453
		case 54: speed = 115; // model 454
		case 55: speed = 119; // model 455
		case 56: speed = 100; // model 456
		case 57: speed = 90;  // model 457
		case 58: speed = 138; // model 458
		case 59: speed = 128; // model 459
		case 60: speed = 130;   // model 460
		case 61: speed = 151; // model 461
		case 62: speed = 105; // model 462
		case 63: speed = 136; // model 463
		case 64: speed = 0;   // model 464
		case 65: speed = 0;   // model 465
		case 66: speed = 139; // model 466
		case 67: speed = 132; // model 467
		case 68: speed = 136; // model 468
		case 69: speed = 126;   // model 469
		case 70: speed = 148; // model 470
		case 71: speed = 104; // model 471
		case 72: speed = 0;   // model 472
		case 73: speed = 0;   // model 473
		case 74: speed = 141; // model 474
		case 75: speed = 163; // model 475
		case 76: speed = 230;   // model 476
		case 77: speed = 176; // model 477
		case 78: speed = 111; // model 478
		case 79: speed = 132; // model 479
		case 80: speed = 174; // model 480
		case 81: speed = 68;  // model 481
		case 82: speed = 148; // model 482
		case 83: speed = 116; // model 483
		case 84: speed = 0;   // model 484
		case 85: speed = 94;  // model 485
		case 86: speed = 60;  // model 486
		case 87: speed = 169;   // model 487
		case 88: speed = 169;   // model 488
		case 89: speed = 132; // model 489
		case 90: speed = 148; // model 490
		case 91: speed = 141; // model 491
		case 92: speed = 132; // model 492
		case 93: speed = 0;   // model 493
		case 94: speed = 203; // model 494
		case 95: speed = 166; // model 495
		case 96: speed = 153; // model 496
		case 97: speed = 169;   // model 497
		case 98: speed = 115; // model 498
		case 99: speed = 116; // model 499
		case 100: speed = 132; // model 500
		case 101: speed = 0;   // model 501
		case 102: speed = 203; // model 502
		case 103: speed = 203; // model 503
		case 104: speed = 163; // model 504
		case 105: speed = 132; // model 505
		case 106: speed = 169; // model 506
		case 107: speed = 156; // model 507
		case 108: speed = 102; // model 508
		case 109: speed = 74;  // model 509
		case 110: speed = 95;  // model 510
		case 111: speed = 0;   // model 511
		case 112: speed = 0;   // model 512
		case 113: speed = 0;   // model 513
		case 114: speed = 113; // model 514
		case 115: speed = 126; // model 515
		case 116: speed = 148; // model 516
		case 117: speed = 148; // model 517
		case 118: speed = 155; // model 518
		case 119: speed = 255; // model 519
		case 120: speed = 255; // model 520
		case 121: speed = 150; // model 521
		case 122: speed = 166; // model 522
		case 123: speed = 142; // model 523
		case 124: speed = 123; // model 524
		case 125: speed = 151; // model 525
		case 126: speed = 149; // model 526
		case 127: speed = 141; // model 527
		case 128: speed = 166; // model 528
		case 129: speed = 141; // model 529
		case 130: speed = 57;  // model 530
		case 131: speed = 66;  // model 531
		case 132: speed = 104; // model 532
		case 133: speed = 157; // model 533
		case 134: speed = 159; // model 534
		case 135: speed = 149; // model 535
		case 136: speed = 163; // model 536
		case 137: speed = 0;   // model 537
		case 138: speed = 0;   // model 538
		case 139: speed = 94;  // model 539
		case 140: speed = 141; // model 540
		case 141: speed = 191; // model 541
		case 142: speed = 155; // model 542
		case 143: speed = 142; // model 543
		case 144: speed = 140; // model 544
		case 145: speed = 139; // model 545
		case 146: speed = 141; // model 546
		case 147: speed = 135; // model 547
		case 148: speed = 0;   // model 548
		case 149: speed = 145; // model 549
		case 150: speed = 137; // model 550
		case 151: speed = 148; // model 551
		case 152: speed = 114; // model 552
		case 153: speed = 0;   // model 553
		case 154: speed = 136; // model 554
		case 155: speed = 149; // model 555
		case 156: speed = 104; // model 556
		case 157: speed = 104; // model 557
		case 158: speed = 147; // model 558
		case 159: speed = 168; // model 559
		case 160: speed = 159; // model 560
		case 161: speed = 145; // model 561
		case 162: speed = 168; // model 562
		case 163: speed = 0;   // model 563
		case 164: speed = 83;  // model 564
		case 165: speed = 155; // model 565
		case 166: speed = 151; // model 566
		case 167: speed = 163; // model 567
		case 168: speed = 138; // model 568
		case 169: speed = 0;   // model 569
		case 170: speed = 0;   // model 570
		case 171: speed = 88;  // model 571
		case 172: speed = 58;  // model 572
		case 173: speed = 104; // model 573
		case 174: speed = 57;  // model 574
		case 175: speed = 149; // model 575
		case 176: speed = 140; // model 576  
		case 177: speed = 0;   // model 577
		case 178: speed = 123; // model 578
		case 179: speed = 149; // model 579
		case 180: speed = 144; // model 580
		case 181: speed = 101; // model 581
		case 182: speed = 115; // model 582
		case 183: speed = 66;  // model 583
		case 184: speed = 0;   // model 584
		case 185: speed = 144; // model 585
		case 186: speed = 132; // model 586
		case 187: speed = 155; // model 587
		case 188: speed = 102; // model 588
		case 189: speed = 153; // model 589
		case 190: speed = 0;   // model 590
		case 191: speed = 0;   // model 591
		case 192: speed = 0;   // model 592
		case 193: speed = 0;   // model 593
		case 194: speed = 57;  // model 594
		case 195: speed = 0;   // model 595
		case 196: speed = 166; // model 596
		case 197: speed = 166; // model 597
		case 198: speed = 166; // model 598
		case 199: speed = 149; // model 599
		case 200: speed = 142; // model 600
		case 201: speed = 104; // model 601
		case 202: speed = 160; // model 602
		case 203: speed = 162; // model 603
		case 204: speed = 139; // model 604
		case 205: speed = 142; // model 605
		case 206: speed = 0;   // model 606
		case 207: speed = 0;   // model 607
		case 208: speed = 0;   // model 608
		case 209: speed = 102; // model 609
		case 210: speed = 0;   // model 610
	}
	return speed;
}

new StageSpeed[1][4] = {
	{0, 10, 35, 85}
};

// vehicle name
new aVehicleNames[212][] =
{
	{"Landstalker"},{"Bravura"},{"Buffalo"},{"Linerunner"},{"Perrenial"},{"Sentinel"},{"Dumper"},{"Firetruck"},{"Trashmaster"},
	{"Stretch"},{"Manana"},{"Infernus"},{"Voodoo"},{"Pony"},{"Mule"},{"Cheetah"},{"Ambulance"},{"Leviathan"},{"Moonbeam"},{"Esperanto"},
	{"Taxi"},{"Washington"},{"Bobcat"},{"Mr Whoopee"},{"BF Injection"},{"Hunter"},{"Premier"},{"Enforcer"},{"Securicar"},{"Banshee"},
	{"Predator"},{"Bus"},{"Rhino"},{"Barracks"},{"Hotknife"},{"Trailer"},{"Previon"},{"Coach"},{"Cabbie"},{"Stallion"},{"Rumpo"},
	{"RC Bandit"},{"Romero"},{"Packer"},{"Monster"},{"Admiral"},{"Squalo"},{"Seasparrow"},{"Pizzaboy"},{"Tram"},{"Trailer"},{"Turismo"},{"Speeder"},
	{"Reefer"},{"Tropic"},{"Flatbed"},{"Yankee"},{"Caddy"},{"Solair"},{"Berkley's RC Van"},{"Skimmer"},{"PCJ-600"},{"Faggio"},{"Freeway"},
	{"RC Baron"},{"RC Raider"},{"Glendale"},{"Oceanic"},{"Sanchez"},{"Sparrow"},{"Patriot"},{"Quad"},{"Coastguard"},{"Dinghy"},{"Hermes"},
	{"Sabre"},{"Rustler"},{"ZR-350"},{"Walton"},{"Regina"},{"Comet"},{"BMX"},{"Burrito"},{"Camper"},{"Marquis"},{"Baggage"},{"Dozer"},{"Maverick"},
	{"News Chopper"},{"Rancher"},{"FBI Rancher"},{"Virgo"},{"Greenwood"},{"Jetmax"},{"Hotring"},{"Sandking"},{"Blista Compact"},{"Police Maverick"},
	{"Boxville"},{"Benson"},{"Mesa"},{"RC Goblin"},{"Hotring Racer A"},{"Hotring Racer B"},{"Bloodring Banger"},{"Rancher"},{"Super GT"},
	{"Elegant"},{"Journey"},{"Bike"},{"Mountain Bike"},{"Beagle"},{"Cropduster"},{"Stuntplane"},{"Tanker"},{"Road Train"},{"Nebula"},{"Majestic"},
	{"Buccaneer"},{"Shamal"},{"Hydra"},{"FCR-900"},{"NRG-500"},{"HPV-1000"},{"Cement Truck"},{"Tow Truck"},{"Fortune"},{"Cadrona"},{"FBI Truck"},
	{"Willard"},{"Forklift"},{"Tractor"},{"Combine"},{"Feltzer"},{"Remington"},{"Slamvan"},{"Blade"},{"Freight"},{"Streak"},{"Vortex"},{"Vincent"},
	{"Bullet"},{"Clover"},{"Sadler"},{"Firetruck"},{"Hustler"},{"Intruder"},{"Primo"},{"Cargobob"},{"Tampa"},{"Sunrise"},{"Merit"},{"Utility"},
	{"Nevada"},{"Yosemite"},{"Windsor"},{"Monster A"},{"Monster B"},{"Uranus"},{"Jester"},{"Sultan"},{"Stratum"},{"Elegy"},{"Raindance"},{"RC Tiger"},
	{"Flash"},{"Tahoma"},{"Savanna"},{"Bandito"},{"Freight"},{"Trailer"},{"Kart"},{"Mower"},{"Duneride"},{"Sweeper"},{"Broadway"},{"Tornado"},
	{"AT-400"},{"DFT-30"},{"Huntley"},{"Stafford"},{"BF-400"},{"Newsvan"},{"Tug"},{"Trailer"},{"Emperor"},{"Wayfarer"},{"Euros"},{"Hotdog"},
	{"Club"},{"Trailer"},{"Trailer"},{"Andromada"},{"Dodo"},{"RCCam"},{"Launch"},{"Police Car (LSPD)"},{"Police Car (SFPD)"},{"Police Car (LVPD)"},
	{"Police Ranger"},{"Picador"},{"S.W.A.T. Van"},{"Alpha"},{"Phoenix"},{"Glendale"},{"Sadler"},{"Luggage Trailer A"},{"Luggage Trailer B"},
	{"Stair Trailer"},{"Boxville"},{"Farm Plow"},{"Utility Trailer"}
};
new PaintRankName[19][] =
{
	{"N/A"},{"Silver I [S1]"},{"Silver II [S2]"},{"Silver III [S3]"},{"Silver IV [S4]"},{"Silver Elite [SE]"},{"Silver Elite Master [SEM]"},{"Gold Nova I [GN1]"},{"Gold Nova II [GN2]"},
	{"Gold Nova III[GN3]"},{"Gold Nova Master [GNM]"},{"Master Guardian I [MG1]"},{"Master Guardian II [MG2]"},{"Master Guardian Elite [MGE]"},{"Distinguished Master Guardian [DMG]"},{"Legendary Eagle [LE]"},
	{"Legendary Eagle Master [LEM]"},{"Supreme Master First Class [SMFC]"},{"The Global Elite [Global]"}
};
new ShortPRankName[19][] =
{
	{"[N/A]"},{"[S1]"},{"[S2]"},{"[S3]"},{"[S4]"},{"[SE]"},{"[SEM]"},{"[GN1]"},{"[GN2]"},{"[GN3]"},{"[GNM]"},{"[MG1]"},{"[MG2]"},{"[MGE]"},{"[DMG]"},{"[LE]"},
	{"[LEM]"},{"[SMFC]"},{"[Global]"}
};
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// server anno
new 	RandomMSG[][] = {
	"Forumul serverului nostru este https://bluffs.ga/forum.",
	"Puteti pune intrebari despre server pe /n.",
	"Foloseste /locations pentru a afla locatiile de pe server.",
	"Foloseste /jobs pentru a vedea job-urile disponibile.",
	"Pentru a afla detalii despre contul premium foloseste /premium.",
	"Pentru a afla detalii despre contul vip foloseste /vipaccount.",
	"Daca ai probleme sau nelamuriri foloseste /report.",
	"Foloseste /carradio pentru a asculta radio in masina.",
	"Daca ai 10/10 Rob Points poti jefui banca(/rob).",
	"Afacerile cu bani reali sunt interzise. Cei ce-s prinsi ca incearca sa faca afaceri cu bani reali vor primi ban permanent.",
	"Pentru a face rost de o licenta foloseste comanda /getlicence.",
	"Pentru a vedea teritoriile mafiilor foloseste /turfs."
};

new 	RandomMSGENG[][] = {
	"Our forum is in https://bluffs.ga/forum.",
	"If you have any questions, use /n.",
	"Use /locations to find locations on the server.",
	"Use /jobs to see available jobs.",
	"To learn more about using premium account use /premium.",
	"To learn more about using vip account use /vipaccount.",
	"If you have any problems, use /report.",
	"Use /carradio to listen to radio in the car.",
	"If you have 10/10 Rob Points you can rob the bank(/rob).",
	"Businesses with real money are prohibited. Those who were caught trying to do business with real money will get permanent ban.",
	"For get a licence type command /getlicence.",
	"Use /turfs to view the gang zones."
};
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

enum beforeSpectateInfo
{
 	Float: pOldPos[3],pWorld,pInt,pState,pInVehicle,bool: pSpectating
};
new BeforeSpectate[MAX_PLAYERS][beforeSpectateInfo];
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

//anti flood
enum LIST_ANTIFLOOD 
{
	lastCheck,
	floodRate
}
new AntiFlood_Data[MAX_PLAYERS][LIST_ANTIFLOOD];

// gang turfs (war)
enum zInfo
{
    zID,
    zOwned,
    Float:zMinX,
    Float:zMinY,
    Float:zMaxX,
    Float:zMaxY
};
new TurfInfo[50][zInfo],
	Turfs[50];
enum wInfo
{
    wFaction,
	wAttacker,
	wTime,
};
new WarInfo[sizeof(TurfInfo)][wInfo],
	WarScoreF[16][sizeof(TurfInfo)],
	ucideri[MAX_PLAYERS][sizeof(TurfInfo)],
	decese[MAX_PLAYERS][sizeof(TurfInfo)],
	worstscoreat[sizeof(TurfInfo)],
	worstmemberat[sizeof(TurfInfo)],
	worstscoredf[sizeof(TurfInfo)],
	worstmemberdf[sizeof(TurfInfo)],
	bestscoreat[sizeof(TurfInfo)],
	bestmemberat[sizeof(TurfInfo)],
	bestscoredf[sizeof(TurfInfo)],
	bestmemberdf[sizeof(TurfInfo)],
	DeelayWar[16],
	InWar[16];
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// spectate
enum pSpec
{
	Float:Coords[3],
	Float:sPx,
	Float:sPy,
	Float:sPz,
	sPint,
	sLocal,
	sCam,
};
new Unspec[MAX_PLAYERS][pSpec];
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// clans
enum clanE
{
    cClanName[64],cClanMOTD[128],cClanRankName1[32],cClanRankName2[32],cClanRankName3[32],cClanRankName4[32],cClanRankName5[32],cClanSeif,
	cClanRankName6[32],cClanRankName7[32],cClanTag[32],cClanTagType,cClanID,cClanExpire,cClanActive,cClanSlots,cClanColor[10],cCar[MAX_CLAN_VEHICLES],cCarID[MAX_CLAN_VEHICLES],cCarModel[MAX_CLAN_VEHICLES],Float:cCarLocX[MAX_CLAN_VEHICLES],
	Float:cCarLocY[MAX_CLAN_VEHICLES],Float:cCarLocZ[MAX_CLAN_VEHICLES],Float:cCarAngle[MAX_CLAN_VEHICLES],
	cCarColor1[MAX_CLAN_VEHICLES],cCarColor2[MAX_CLAN_VEHICLES],cCarLock[MAX_CLAN_VEHICLES],
};
new ClanInfo[MAX_CLANS][clanE];
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// accounts
enum pInfo
{
	pKey[129],pColors,pNormalName[30],pLevel,pAdmin,pHelper,pPremiumAccount,pPremiumPoints,pPhoneBlocked[MAX_PLAYERS],pNewYear,
	pBlockedAcc,pObject[MAX_EVOBJECTS],pMapIcon[MAX_EVOBJECTS],Float:pConnectTime,pReg,pSex,pAge,pOrigin,
	pMuted,pMuteTime,pGasCan,pExp,pCash,pAccount,pCrimes,pKills,pDeaths,pWantedDeaths,pPhoneBook,pReportMuted,pPhone,pWantedLevel,
 	pSelected[MAX_PLAYER_NAME],pFishes,pJob,pPayCheck,pHeadValue,pJailed,pJailTime,pMats,pDrugs,pLeader,pMember,pRank,pGlasses,pHats,pFACWarns,
	pFpunish,pFishSkill,pFlyMode,pSpawnChange,pFishPrice,pInt,pLocal,pTeam,pModel,pPnumber,pPhousekey,pPbiskey,Float:pPos_x,Float:pPos_y,
	Float:pPos_z,pCarLicSuspend,pGunLicSuspend,pCarLicT,pCarLic,pFlyLicT,pFlyLic,pBoatLicT,pBoatLic,pGunLicT,pGunLic,pPayDay,pRobSkill,
 	pRobTimes,pRobRem,pTruckSkill,pTruckTimes,pTruckRem,pFarmSkill,pFarmTimes,pFarmRem,pPizzaSkill,pPizzaTimes,pPizzaRem,pArmsSkill,pArmsTimes,
	pArmsRem,pBusSkill,pBusTimes,pBusRem,pFishTimes,pFishRem,pGarbageSkill,pGarbageTimes,pGarbageRem,pRob,pTut,pWarns,pLanguage,pFuel,
    pSleeping, pRented,pSpeaker,pWTalkie,pEmail[200],pClanTag,pClan,pHitT,pCRank,pCWarns,pSQLID,pVictim[64],pAccused[64],pCrime1[184],
	pCrime2[184],pCrime3[184],pSerial[128],pNewbieEnabled,pFirstAnswer,pNewbieQuestion[256],pNMuted,pNewbieTimeout,pStatus,pFWorks,pVirtualPD,
	pFactionJoin,pFactionTime,pCredits,pHost[25],pOneHost,pHiddenColor,pHelpedplayers,pGiftTime,pCases,pNextCase,pFightStyle,pAsteapta,pHUD1,
	pHUD2,pHUD3,pHUD4,pFPS,pDrunkLevelLast,pClanDep,pJobVehicle,pRaceG,pPaintBallG,pPaintBallKills,pPaintBallVoted,pPaintBallVoted2,
	pRaceVoted,pNextNotification,pPaydayON,pSession,pCarSlots,pCar[MAX_PERSONAL_VEHICLES],pCarID[MAX_PERSONAL_VEHICLES],
	pCarModel[MAX_PERSONAL_VEHICLES],Float:pCarLocX[MAX_PERSONAL_VEHICLES],Float:pCarLocY[MAX_PERSONAL_VEHICLES],Float:pCarLocZ[MAX_PERSONAL_VEHICLES],
	Float:pCarAngle[MAX_PERSONAL_VEHICLES],Float:pCarLLocX[MAX_PERSONAL_VEHICLES],Float:pCarLLocY[MAX_PERSONAL_VEHICLES],Float:pCarLLocZ[MAX_PERSONAL_VEHICLES],
	Float:pCarAngle2[MAX_PERSONAL_VEHICLES],pCarBuyTime[MAX_PERSONAL_VEHICLES],pCarColor1[MAX_PERSONAL_VEHICLES],pCarColor2[MAX_PERSONAL_VEHICLES],
	pCarLock[MAX_PERSONAL_VEHICLES],pCarInsPrice[MAX_PERSONAL_VEHICLES],pCarIns[MAX_PERSONAL_VEHICLES],Float:pCarKM[MAX_PERSONAL_VEHICLES],pCarStage[MAX_PERSONAL_VEHICLES],
	pCarKMLast[MAX_PERSONAL_VEHICLES],Float:pCarHP[MAX_PERSONAL_VEHICLES],pCarVIP[MAX_PERSONAL_VEHICLES],pCarVipColors[MAX_PERSONAL_VEHICLES],
	pCarDamage1[MAX_PERSONAL_VEHICLES],pCarDamage2[MAX_PERSONAL_VEHICLES],pCarDamage3[MAX_PERSONAL_VEHICLES],pCarDamage4[MAX_PERSONAL_VEHICLES],
	pCarGas[MAX_PERSONAL_VEHICLES],pCarGasMax[MAX_PERSONAL_VEHICLES],pCarPaintJ[MAX_PERSONAL_VEHICLES],pCarBlock[MAX_PERSONAL_VEHICLES],pCarNeon[MAX_PERSONAL_VEHICLES],pCarEvent[MAX_PERSONAL_VEHICLES],pQuest1,pQuest2,pQuestProgress1,
	pQuestProgress2,pQuestNeed1,pQuestNeed2,pQuestCar,Raport1,Raport2,Raport3,Raport4,Raport5,Raport6, pPet, pPetStatus, pPetName[30], pPetLevel,pAccepted,
	pNeonRZ,pNeonG,pNeonV,pNeonR,pNeonA,pPetPoints,pAirSkill,pAirTimes,pAirRem,pStrawSkill,pStrawTimes,pStrawRem, pMp3, pBillboard,pSkins[MAX_SKINS],pTSkins,pStrSkins[1600],
	pQuestObjects[MAX_EVOBJECTS],pQuestStr[256],pPaintRank,pPaintKills,pPaintDeaths,pPaintWon,pRaceWon,pRaceExp,pPetSkin,
	Float: pCarVipXPos[MAX_PERSONAL_VEHICLES], Float: pCarVipYPos[MAX_PERSONAL_VEHICLES], Float: pCarVipZPos[MAX_PERSONAL_VEHICLES],
	Float: pCarVipRXPos[MAX_PERSONAL_VEHICLES], Float: pCarVipRYPos[MAX_PERSONAL_VEHICLES], Float: pCarVipRZPos[MAX_PERSONAL_VEHICLES], pPayDaymin, pPayDaysec, pBeemin, pBeesec, pBeePlaced
};
new PlayerInfo[MAX_PLAYERS][pInfo];
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// houses
enum hInfo
{
	hID,Float:hEntrancex,Float:hEntrancey,Float:hEntrancez,Float:hExitx,Float:hExity,Float:hExitz,hOwner[25],
	hDiscription[64],hValue,hPrice,hHel,hMusic,hInterior,hInteriorType,hLock,hOwned,hRent,hRentabil,hTakings,hLevel,hVirtual
};
new HouseInfo[120][hInfo],
	Text3D:HouseLabel[sizeof(HouseInfo)],
	HousePickup[200];
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// vehicles (jobs, server, factions)
enum vehInfo
{
	vehModel,vehColor1,vehColor2,vehGroup,vehRank,vehJob,vehCarID,vehCarIDD,Float:vehPosX,Float:vehPosY,Float:vehPosZ,Float:vehRotation
};
new VehicleInfo[1000][vehInfo];
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// atms
enum atmInfo
{
	Float: fATMPos[3],Float: fATMPosRot[3],rObjectId
};
new AtmInfo[MAX_ATMS][atmInfo];
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// billboards
enum bBillInfo
{
	bBillText[128], Float: bBillXPos, Float: bBillYPos, Float: bBillZPos, Float: bBillRXPos, Float: bBillRYPos, Float: bBillRZPos,
	bBillTime, bBillActive, bBillOwner[64], bBillModel, bBillTextSize, bBilObject
};
new bBill[MAX_BILL][bBillInfo];

// svars
enum svarInfo
{
	svName[32],svValue
};
new SvarInfo[MAX_SVARS][svarInfo];
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// quest objects
enum objInfo
{
	objID,objModel,Float:objPosX,Float:objPosY,Float:objPosZ
};
new ObjectInfo[MAX_EVOBJECTS][objInfo];
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// bussines
enum bInfo
{
	bID,bOwned,bOwner[25],bMessage[50],Float:bEntranceX,Float:bEntranceY,Float:bEntranceZ,Float:bExitX,Float:bExitY,Float:bExitZ,
	bLevelNeeded,bBuyPrice,bPrice,bEntranceCost,bTill,bLocked,bInterior,bVirtual,bSbiz,bType
};
new BizzInfo[100][bInfo],
	Text3D:BizzLabel[sizeof(BizzInfo)];
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// tunning
new spoiler[20][0] = {
	{1000},{1001},{1002},{1003},{1014},{1015},{1016},{1023},{1058},{1060},{1049},
	{1050},{1138},{1139},{1146},{1147},{1158},{1162},{1163},{1164}
};

new nitro[3][0] = {
	{1008},{1009},{1010}
};

new fbumper[23][0] = {
	{1117},{1152},{1153},{1155},{1157},{1160},{1165},{1167},{1169},{1170},
	{1171},{1172},{1173},{1174},{1175},{1179},{1181},{1182},{1185},{1188},
	{1189},{1192},{1193}
};

new rbumper[22][0] = {
	{1140},{1141},{1148},{1149},{1150},{1151},{1154},{1156},{1159},{1161},{1166},{1168},
	{1176},{1177},{1178},{1180},{1183},{1184},{1186},{1187},{1190},{1191}
};

new exhaust[28][0] = {
	{1018},{1019},{1020},{1021},{1022},{1028},{1029},{1037},{1043},{1044},{1045},{1046},
	{1059},{1064},{1065},{1066},{1089},{1092},{1104},{1105},{1113},{1114},{1126},{1127},
	{1129},{1132},{1135},{1136}
};

new bventr[2][0] = {
	{1142},{1144}
};

new bventl[2][0] = {
	{1143},{1145}
};

new bscoop[4][0] = {
	{1004},{1005},{1011},{1012}
};

new rscoop[17][0] = {
	{1006},{1032},{1033},{1035},{1038},{1053},{1054},{1055},{1061},{1067},{1068},{1088},
	{1091},{1103},{1128},{1130},{1131}
};

new lskirt[21][0] = {
	{1007},{1026},{1031},{1036},{1039},{1042},{1047},{1048},{1056},{1057},
	{1069},{1070},{1090},{1093},{1106},{1108},{1118},{1119},{1133},{1122},{1134}
};

new rskirt[21][0] = {
	{1017},{1027},{1030},{1040},{1041},{1051},{1052},{1062},{1063},{1071},{1072},
	{1094},{1095},{1099},{1101},{1102},{1107},{1120},{1121},{1124},{1137}
};

new hydraulics[1][0] = {
	{1087}
};

new vbase[1][0] = {
	{1086}
};

new rbbars[4][0] = {
	{1109},{1110},{1123},{1125}
};

new fbbars[2][0] = {
	{1115},{1116}
};

new wheels[17][0] = {
	{1025},{1073},{1074},{1075},{1076},{1077},{1078},{1079},{1080},{1081},{1082},
	{1083},{1084},{1085},{1096},{1097},{1098}
};

new vlights[2][0] = {
	{1013},{1024}
};
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// dealership
enum vInfo
{
	vID,vStock,vPrice,vModel,vSpeed,vName[255]
};
new Stock[106][vInfo];
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// factions
enum Factions
{
	fID,fName[128],Float:fcX,Float:fcY,Float:fcZ,Float:fceX,Float:fceY,Float:fceZ,Float:fSafePos[3],fSafePickupID,
	Text3D:fSafeLabelID,fMats,fDrugs,fBank,fAnn[128],fWin,fLost,fMembers,fMaxMembers,fMinLevel,fApplication,
	fInterior,fVirtual,fMapIcon,fLocked,fPickupID,fPickupIDD,Text3D:fLabelID,fRankName1[64],fRankName2[64],
	fRankName3[64],fRankName4[64],fRankName5[64],fRankName6[64],fRankName7[64],fWarTurf
};
new DynamicFactions[15][Factions],
	FactionSkin[15][11];
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// gun names
new GunNames[55][] =
{
	"Punch","Brass Knuckles","Golf Club","Nitestick","Knife","Baseball Bat","Showel","Pool Cue","Katana","Chainsaw",
	"Purple Dildo","Small White Dildo","Long White Dildo","Vibrator","Flowers","Cane","Grenade","Tear Gas Grenade",
	"Molotov","Vehicle Missile","Hydra Flare","Jetpack","Colt .45","Silenced Colt .45","Desert Eagle","Shotgun",
	"Sawn-off","Combat Shotgun","Micro UZI","MP5","AK-47","M4A1","Tec-9","Rifle","Sniper Rifle","Rocket Launcher",
	"HS Rocket Launcher","Flamethrower","Minigun","Satchel Charge","Detonator","Spraycan","Fire Extinguisher","Camera",
	"Nightvision Goggles","Thermal Goggles","Parachute","Fake Pistol","","Vehicle","Helicopter","Explosion","","Drowned","Splat"
};
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

new Peds[153][1] = {
{1},{2},{6},{8},{9},{10},{12},{13},{14},{15},{16},{18},{19},{20},{21},{22},{23},{24},{25},{27},{28},{29},{30},{31},{32},{33},{34},{35},{36},{37},{38},{39},{40},{41},{42},{43},{44},{45},{47},{48},{49},{50},{51},{52},{53},{54},{56},{57},{58},{60},
{62},{63},{64},{65},{66},{67},{68},{69},{75},{77},{78},{79},{80},{81},{85},{87},{88},{89},{91},{92},{94},{95},{96},{97},{99},{101},{129},{130},{131},{132},{133},{134},{135},{136},{137},{138},{139},{140},{142},{143},{145},{146},{151},{152},{154},
{156},{157},{158},{159},{160},{161},{162},{168},{170},{178},{179},{180},{182},{183},{192},{193},{196},{197},{198},{199},{200},{201},{202},{205},{207},{209},{210},{212},{213},{214},{215},{216},{229},{230},{231},{232},{233},{234},{235},{236},{237},
{238},{239},{243},{244},{245},{246},{249},{250},{251},{252},{256},{257},{260},{262},{263},{268},{298}
};




enum objects_attach_Info {
	objID,
	objModel,
	objType,	
	objMoney,
	objPremium,
	objBone,
	Float: objfOffsetX, 
	Float: objfOffsetY, 
	Float: objfOffsetZ, 
	Float: objfRotX, 
	Float: objfRotY, 
	Float: objfRotZ,
	Float: objfScaleX, 
	Float: objfScaleY, 
	Float: objfScaleZ
};

enum attached_object_data
{
    ao_model,
    ao_bone,
    Float:ao_x,
    Float:ao_y,
    Float:ao_z,
    Float:ao_rx,
    Float:ao_ry,
    Float:ao_rz,
    Float:ao_sx,
    Float:ao_sy,
    Float:ao_sz
}
new ao[MAX_PLAYERS][MAX_PLAYER_ATTACHED_OBJECTS][attached_object_data];

enum player_object_Info {
	aID[MAX_PLAYER_ATTACHED_OBJECTS],
	aModel[MAX_PLAYER_ATTACHED_OBJECTS],
	aBone[MAX_PLAYER_ATTACHED_OBJECTS],
	aStatus[MAX_PLAYER_ATTACHED_OBJECTS],
	Float: aIndex0[9],
	Float: aIndex1[9],
	Float: aIndex2[9],
	Float: aIndex3[9],
	Float: aIndex4[9],
	Float: aIndex5[9],
	Float: aIndex6[9],
	Float: aIndex7[9],
	Float: aIndex8[9],
	Float: aIndex9[9]
};

new
	total_objects,
	objectInfo[MAX_AOBJECTS][objects_attach_Info],
	attachInfo[MAX_PLAYERS][player_object_Info],
	ObjectSlot[MAX_PLAYERS][100],
	ObjectID[MAX_PLAYERS],
	ObjectType[MAX_PLAYERS],
	Text: AccsTD[13],
	PlayerText: AccsPTD[3];
// rapid fire 
new CurrentWeapon[MAX_PLAYERS],NoReloading[MAX_PLAYERS],CurrentAmmo[MAX_PLAYERS],CheatRapidAnn[MAX_PLAYERS];

// miner job
new InMinerJob[MAX_PLAYERS],minerloot[MAX_PLAYERS];

// login & register variables
new PlayerText: LoginTD[MAX_PLAYERS][6],KeepPassword[MAX_PLAYERS][129],PlayerText: IncorrectTD[MAX_PLAYERS][2],
	PlayerText: RegisterTD[MAX_PLAYERS][12], RegLanguage[MAX_PLAYERS], RegSex[MAX_PLAYERS], RegAge[MAX_PLAYERS];

// strawberry job
new InStrawberryJob[MAX_PLAYERS];

// player update in database
forward Update(playerid, type);
public Update(playerid, type)
{
	if(IsPlayerConnected(playerid))
	{
		new var[356];
		{
			switch(type)
			{
				case pCashx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Money`='%d' WHERE `name`='%s'",GetPlayerCash(playerid), PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pExpx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Respect`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pExp], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pBank:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Bank`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pAccount], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCarLicTx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `CarLicT`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarLicT], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCarLicSuspendx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `CarLicSuspend`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarLicSuspend], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pGunLicSuspendx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `GunLicSuspend`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGunLicSuspend], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFlyLicTx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FlyLicT`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFlyLicT], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pBoatLicTx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `BoatLicT`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pBoatLicT], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pGunLicTx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `GunLicT`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGunLicT], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRobx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Rob`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pRob], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFpunishx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FPunish`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFpunish], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pConnectTimex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `ConnectedTime`='%f' WHERE `name`='%s'",PlayerInfo[playerid][pConnectTime], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPayDayx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PayDay`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPayDay], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPhousekeyx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `House`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPhousekey], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pJailedx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Jailed`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pJailed], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pJailTimex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `JailTime`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pJailTime], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pWantedLevelx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `WantedLevel`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pWantedLevel], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPhonex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Phone`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPhone], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pMatsx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Materials`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pMats], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFishSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FishSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFishSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pGarbageSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `GarbageSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGarbageSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pGarbageTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `GarbageTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGarbageTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pGarbageRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `GarbageRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGarbageRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pSpawnChangex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `SpawnChange`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pSpawnChange], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRobSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `RobSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pRobSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pTruckSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `TruckSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pTruckSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pTruckTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `TruckTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pTruckTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pTruckRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `TruckRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pTruckRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPizzaSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PizzaSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPizzaSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPizzaTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PizzaTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPizzaTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPizzaRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PizzaRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPizzaRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pArmsSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `ArmsSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pArmsSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pArmsTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `ArmsTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pArmsTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pArmsRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `ArmsRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pArmsRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pBusSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `BusSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pBusSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pBusTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `BusTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pBusTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pBusRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `BusRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pBusRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFarmSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FarmSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFarmSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFarmTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FarmTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFarmTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFarmRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FarmRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFarmRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFishTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FishTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFishTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFishRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FishRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFishRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRobRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `RobRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pRobRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRobTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `RobTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pRobTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pLevelx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Level`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pLevel], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPremiumAccountx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Premium`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumAccount], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pOnlineTimeTodayx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `OnlineTimeToday`='%d'  WHERE `name`='%s'", OnlineTimeToday[playerid], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pQuest1x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Quest1`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pQuest1], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pQuest2x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Quest2`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pQuest2], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pQuestProgress1x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `QuestProgress1`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pQuestProgress1], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pQuestProgress2x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `QuestProgress2`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pQuestProgress2], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pQuestNeed1x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `QuestNeed1`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pQuestNeed1], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pQuestNeed2x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `QuestNeed2`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pQuestNeed2], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pQuestCarx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `QuestCar`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pQuestCar], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPaydayONx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PaydayON`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPaydayON], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pGasCanx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `GasCan`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGasCan], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPetx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Pet`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPet], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}	
				case pPetNamex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PetName`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pPetName], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPetLevelx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PetLevel`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPetLevel], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPetSkinx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PetSkin`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPetSkin], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPetPointsx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PetPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPetPoints], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPremiumPointsx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pNewYearx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `NewYear`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pNewYear], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pReportMutedx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `ReportMuted`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pReportMuted], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPbiskeyx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Bizz`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPbiskey], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPnumberx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PhoneNr`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPnumber], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRegx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Registered`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pReg], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pColorsx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Color`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pColors], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRentedx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Rented`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pRented], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCrimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Crimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCrimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCrime1x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Crime1`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pCrime1], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCrime2x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Crime2`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pCrime2], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCrime3x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Crime3`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pCrime3], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pVictimx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Victim`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pVictim], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pAccusedx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Accused`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pAccused], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFWorksx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FWorks`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFWorks], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pEmailx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Email`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pEmail], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pWarnsx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Warnings`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pWarns], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pLanguagex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Language`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pLanguage], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pVirtualPDx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `VirtualPD`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pVirtualPD], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pGlassesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Glasses`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGlasses], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pHatsx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Hats`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pHats], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFactionJoinx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FactionJoin`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFactionJoin], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCreditsx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `CreditsF`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCredits], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pNMutedx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `NMuted`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pNMuted], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pHiddenColorx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `HiddenColor`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pHiddenColor], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pGiftTimex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `GiftTime`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGiftTime], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCasesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Cases`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCases], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPayDayminx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PayDaymin`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPayDaymin], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPayDaysecx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PayDaysec`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPayDaysec], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pBeesecx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Beesec`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pBeesec], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pBeeminx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `BeeMin`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pBeemin], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pBeePlacedx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `BeePlaced`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pBeePlaced], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pNextCasex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `NextCase`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pNextCase], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFightStylex:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FightStyle`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFightStyle], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pHUD1x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `HUD1`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pHUD1], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pHUD2x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `HUD2`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pHUD2], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pHUD3x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `HUD3`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pHUD3], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pHUD4x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `HUD4`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pHUD4], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pSessionx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Session`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pSession], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pHelpedplayersx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `HelpedPlayers`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pHelpedplayers], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case Raport1x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Raport1`='%d' WHERE `name`='%s'",PlayerInfo[playerid][Raport1], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case Raport2x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Raport2`='%d' WHERE `name`='%s'",PlayerInfo[playerid][Raport2], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case Raport3x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Raport3`='%d' WHERE `name`='%s'",PlayerInfo[playerid][Raport3], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case Raport4x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Raport4`='%d' WHERE `name`='%s'",PlayerInfo[playerid][Raport4], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case Raport5x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Raport5`='%d' WHERE `name`='%s'",PlayerInfo[playerid][Raport5], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case Raport6x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Raport6`='%d' WHERE `name`='%s'",PlayerInfo[playerid][Raport6], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pClanDepx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `ClanDep`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pClanDep], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pNeonAx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `NeonA`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pNeonA], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pNeonGx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `NeonG`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pNeonG], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pNeonVx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `NeonV`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pNeonV], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pNeonRZx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `NeonRZ`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pNeonRZ], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pNeonRx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `NeonR`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pNeonR], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pAcceptedx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Accepted`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pAccepted], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pAirSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `AirSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pAirSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pAirTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `AirTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pAirTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pAirRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `AirRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pAirRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pStrawSkillx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `StrawSkill`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pStrawSkill], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pStrawTimesx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `StrawTimes`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pStrawTimes], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pStrawRemx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `StrawRem`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pStrawRem], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pMp3x:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Mp3`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pMp3], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pBillboardx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Billboard`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pBillboard], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pCarLicx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `CarLic`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarLic], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pFlyLicx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `FlyLic`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFlyLic], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pBoatLicx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `BoatLic`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pBoatLic], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pGunLicx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `GunLic`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pGunLic], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPaintKillsx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PaintKills`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPaintKills], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pPaintRankx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PaintRank`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPaintRank], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
                case pPaintDeathsx:
                {
                    mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PaintDeaths`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPaintDeaths], PlayerInfo[playerid][pNormalName]);
                    mysql_tquery(SQL,var,"","");
                }
                case pPaintWonx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `PaintWon`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPaintWon], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRaceWonx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `RaceWon`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pRaceWon], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
				case pRaceExpx:
				{
					mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `RaceExp`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pRaceExp], PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,var,"","");
				}
			}
		}
	}
	return 1;
}
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/
forward ClanUpdate(clanid, type);
public ClanUpdate(clanid, type)
{
	new var[356];
	switch(type)
	{
		case ClanSafex:
		{
			mysql_format(SQL, var, sizeof(var), "UPDATE `clans` SET `clanSeif`='%d' WHERE `clanID`='%d'",ClanInfo[clanid][cClanSeif], clanid);
			mysql_tquery(SQL,var,"","");
		}
	}
	return 1;
}

// daily quests
forward FinishQuest1(playerid, questid);
public FinishQuest1(playerid, questid)
{
	new quest1[128],quest[256],money,giftpoint;
	if(PlayerInfo[playerid][pLanguage] == 1)
	{
		if(questid == 1)  format(quest1,sizeof(quest1),"Go to the baseball stadium located in Las Venturas");
		else if(questid == 2)  format(quest1,sizeof(quest1),"Climb mount Chiliad");
		else if(questid == 3)  format(quest1,sizeof(quest1),"Travel %d KM with vehicle %s",PlayerInfo[playerid][pQuestNeed1],aVehicleNames[PlayerInfo[playerid][pQuestCar] - 400]);
		else if(questid == 4)  format(quest1,sizeof(quest1),"Rob a business");
		else if(questid == 5)  format(quest1,sizeof(quest1),"Collect %d materials",PlayerInfo[playerid][pQuestNeed1]);
		else if(questid == 6)  format(quest1,sizeof(quest1),"Catch and sell %d fish",PlayerInfo[playerid][pQuestNeed1]);
		else if(questid == 7)  format(quest1,sizeof(quest1),"Collect %d metals from the mine",PlayerInfo[playerid][pQuestNeed1]);
		else if(questid == 8)  format(quest1,sizeof(quest1),"Collect %d strawberrys",PlayerInfo[playerid][pQuestNeed1]);
		format(quest, sizeof(quest),"Quest [%s] completed!",quest1);
		SendClientMessage(playerid, COLOR_YELLOW, quest);
		money = PlayerInfo[playerid][pLevel] * (SvarInfo[13][svValue] + random(3000));
		GivePlayerCash(playerid, money);
		PlayerInfo[playerid][pExp]++;
		giftpoint = 20 + random(5);
		PlayerInfo[playerid][pGiftTime] += giftpoint;
		Update(playerid, pGiftTimex);
		Update(playerid, pExpx);
		format(quest, sizeof(quest),"You received a respect point, %d gift points and $%s.",giftpoint,FormatNumber(money));
		SendClientMessage(playerid, COLOR_YELLOW, quest);
	}
	else
	{
		if(questid == 1)  format(quest1,sizeof(quest1),"Mergi pe stadionul de baseball din Las Venturas");
		else if(questid == 2)  format(quest1,sizeof(quest1),"Urca pe muntele Chiliad");
		else if(questid == 3)  format(quest1,sizeof(quest1),"Parcurge distanta de %d KM cu un vehicul de tipul %s",PlayerInfo[playerid][pQuestNeed1],aVehicleNames[PlayerInfo[playerid][pQuestCar] - 400]);
		else if(questid == 4)  format(quest1,sizeof(quest1),"Jefuieste o afacere");
		else if(questid == 5)  format(quest1,sizeof(quest1),"Colecteaza %d materiale",PlayerInfo[playerid][pQuestNeed1]);
		else if(questid == 6)  format(quest1,sizeof(quest1),"Vinde %d pesti",PlayerInfo[playerid][pQuestNeed1]);
		else if(questid == 7)  format(quest1,sizeof(quest1),"Colecteaza %d metale",PlayerInfo[playerid][pQuestNeed1]);
		else if(questid == 8)  format(quest1,sizeof(quest1),"Colecteaza %d capsuni",PlayerInfo[playerid][pQuestNeed1]);
		format(quest, sizeof(quest),"Misiunea [%s] a fost terminata!",quest1);
		SendClientMessage(playerid, COLOR_YELLOW, quest);
		money = PlayerInfo[playerid][pLevel] * (SvarInfo[13][svValue] + random(3000));
		GivePlayerCash(playerid, money);
		PlayerInfo[playerid][pExp]++;
		giftpoint = 20 + random(5);
		PlayerInfo[playerid][pGiftTime] += giftpoint;
		Update(playerid, pGiftTimex);
		Update(playerid, pExpx);
		format(quest, sizeof(quest),"You received a respect point, %d gift points and $%s.",giftpoint,FormatNumber(money));
		SendClientMessage(playerid, COLOR_YELLOW, quest);
	}
	if(PlayerInfo[playerid][pQuestProgress1]>=PlayerInfo[playerid][pQuestNeed1] && PlayerInfo[playerid][pQuestProgress2]>=PlayerInfo[playerid][pQuestNeed2])
	{
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "You received a case, use /opencase to use it.");
		PlayerInfo[playerid][pCases]++;
		Update(playerid,pCasesx);
	}
	return 1;
}

forward FinishQuest2(playerid, questid);
public FinishQuest2(playerid, questid)
{
	new quest2[128],quest[256],money,giftpoint;
	if(PlayerInfo[playerid][pLanguage] == 1)
	{
		if(questid == 1)  format(quest2,sizeof(quest2),"Deliver %d pizza",PlayerInfo[playerid][pQuestNeed2]);
		else if(questid == 2)
		{
			if(!IsACop(playerid))
			{
				format(quest2,sizeof(quest2),"Kill %d cops",PlayerInfo[playerid][pQuestNeed2]);
			}
			else
			{
				format(quest2,sizeof(quest2),"Arrest %d suspects",PlayerInfo[playerid][pQuestNeed2]);
			}
		}
		else if(questid == 3)  format(quest2,sizeof(quest2),"Kill %d players at paintball",PlayerInfo[playerid][pQuestNeed2]);
		else if(questid == 4)  format(quest2,sizeof(quest2),"Collect and unload %d KG of garbage",PlayerInfo[playerid][pQuestNeed2]);
		else if(questid == 5)  format(quest2,sizeof(quest2),"Sell %d KG of flour",PlayerInfo[playerid][pQuestNeed2]);
		else if(questid == 6)  format(quest2,sizeof(quest2),"Buy drugs and use them");
		else if(questid == 7)  format(quest2,sizeof(quest2),"Go in a bar and get drunk");
		else if(questid == 8)  format(quest2,sizeof(quest2),"Deliver %d packages at Air Transporter",PlayerInfo[playerid][pQuestNeed2]);
		format(quest, sizeof(quest),"Quest [%s] completed!",quest2);
		SendClientMessage(playerid, COLOR_YELLOW, quest);
		money = PlayerInfo[playerid][pLevel] * (SvarInfo[13][svValue] + random(3000));
		GivePlayerCash(playerid, money);
		PlayerInfo[playerid][pExp]++;
		giftpoint = 20 + random(5);
		PlayerInfo[playerid][pGiftTime] += giftpoint;
		Update(playerid, pGiftTimex);
		Update(playerid, pExpx);
		format(quest, sizeof(quest),"You received a respect point, %d gift points and $%s.",giftpoint,FormatNumber(money));
		SendClientMessage(playerid, COLOR_YELLOW, quest);
	}
	else
	{
		if(questid == 1)  format(quest2,sizeof(quest2),"Livreaza %d pizza",PlayerInfo[playerid][pQuestNeed2]);
		else if(questid == 2)
		{
			if(!IsACop(playerid))
			{
				format(quest2,sizeof(quest2),"Omoara %d politisti",PlayerInfo[playerid][pQuestNeed2]);
			}
			else
			{
				format(quest2,sizeof(quest2),"Aresteaza %d suspecti",PlayerInfo[playerid][pQuestNeed2]);
			}
		}
		else if(questid == 3)  format(quest2,sizeof(quest2),"Omoara %d playeri la Paintball",PlayerInfo[playerid][pQuestNeed2]);
		else if(questid == 4)  format(quest2,sizeof(quest2),"Colecteaza si descarca %d KG de gunoi",PlayerInfo[playerid][pQuestNeed2]);
		else if(questid == 5)  format(quest2,sizeof(quest2),"Vinde %d KG de faina",PlayerInfo[playerid][pQuestNeed2]);
		else if(questid == 6)  format(quest2,sizeof(quest2),"Cumpara droguri si foloseste-le");
		else if(questid == 7)  format(quest2,sizeof(quest2),"Du-te intr-un bar si imbata-te");
		else if(questid == 8)  format(quest2,sizeof(quest2),"Livreaza %d pachete la Air Transporter",PlayerInfo[playerid][pQuestNeed2]);
		format(quest, sizeof(quest),"Misiunea [%s] a fost terminata!",quest2);
		SendClientMessage(playerid, COLOR_YELLOW, quest);
		money = PlayerInfo[playerid][pLevel] * (SvarInfo[13][svValue] + random(3000));
		GivePlayerCash(playerid, money);
		PlayerInfo[playerid][pExp]++;
		giftpoint = 20 + random(5);
		PlayerInfo[playerid][pGiftTime] += giftpoint;
		Update(playerid, pGiftTimex);
		Update(playerid, pExpx);
		format(quest, sizeof(quest),"You received a respect point, %d gift points and $%s.",giftpoint,FormatNumber(money));
		SendClientMessage(playerid, COLOR_YELLOW, quest);
	}
	if(PlayerInfo[playerid][pQuestProgress1]>=PlayerInfo[playerid][pQuestNeed1] && PlayerInfo[playerid][pQuestProgress2]>=PlayerInfo[playerid][pQuestNeed2])
	{
		SendClientMessage(playerid, COLOR_YELLOW, "You received a case, use /opencase to use it.");
		PlayerInfo[playerid][pCases]++;
		Update(playerid,pCasesx);
	}
	return 1;
}

function GetVehicleSpeedUp(playerid, carid) {
	new x, m = GetVehicleMaxSpeed(PlayerInfo[playerid][pCarModel][carid]);
	x = m;
	x = PlayerInfo[playerid][pCarStage][carid] ? StageSpeed[0][PlayerInfo[playerid][pCarStage][carid]] + x : x;
	return Carspeed(playerid) < (m-3) || Carspeed(playerid) > (x-3) ? (true) : (false);
}

function GiveVehicleSpeed(playerid,vehicleid, carid) {
    new
        keys,
        Float:vx,
        Float:vy,
        Float:vz;   

	if(GetVehicleSpeedUp(playerid, carid)) return true;

    GetPlayerKeys(playerid, keys, _:vx, _:vx);

    if ((keys & (KEY_VEHICLE_FORWARD | KEY_VEHICLE_BACKWARD | KEY_HANDBRAKE)) == KEY_VEHICLE_FORWARD) {

        GetVehicleVelocity(vehicleid, vx, vy, vz);


        if (vx * vx + vy * vy < g_SpeedThreshold)
            return true;


        vx *= SPEED_MULTIPLIER;
        vy *= SPEED_MULTIPLIER;


        if (vz > 0.04 || vz < -0.04)
            vz -= 0.020;

        SetVehicleVelocity(vehicleid, vx, vy, vz);
	}
    return true;
}
//roulette
function SendCasino(color, text[]) {
	foreach(Player, i) {
		if(RouletteInGame[i] == 1) SendClientMessage(i, color, text);
	}
	return 1;
}
stock SelectTextDrawEx(playerid,color) {
	gSelected[playerid] = true;
	gSelectColor[playerid] = color;
	SelectTextDraw(playerid,color);
	return 1;
}
stock CancelSelectTextDrawEx(playerid) {
	gSelected[playerid] = false;
	CancelSelectTextDraw(playerid);
	return 1;
}
stock RouletteOnRed()
{
	new string[128],var100[256];
	switch(step) {
			case 1: prohodtime = SetTimer("TextDrawProhod3", 250, true),TextDrawSetString(CasinoDraw[19], "ROLLING ROULETTE..");
			case 10: {
	            foreach(new i:Player) {
					if(RouletteInGame[i] == 1) {
	                    HideCasino(i);
						TextDrawBoxColor(CasinoDraw[1], 0x000000AA),TextDrawBoxColor(CasinoDraw[2], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[3], 0x000000AA),TextDrawBoxColor(CasinoDraw[4], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[5], 0x000000AA),TextDrawBoxColor(CasinoDraw[6], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[7], 0x000000AA);
						ShowCasino(i);
						SendClientMessage(i,-1,"The roulette hands on RED.");

	                    if(betplayer[i] == 14) {
	                    	format(string, sizeof(string), "You won $%s at roulette.", FormatNumber(betsumma[i]*2));
							SendClientMessage(i, COLOR_GREEN, string);
							GivePlayerCash(i,betsumma[i]*2);
						} else if(betplayer[i] == 10 || betplayer[i] == 4) {
	                    	format(string, sizeof(string), "You lost $%s at roulette.", FormatNumber(betsumma[i]));
							SendClientMessage(i, COLOR_GREEN, string);
						}
						mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','0','%s')", PlayerInfo[i][pSQLID],string);
						mysql_tquery(SQL,var100,"","");
						betsumma[i] = 0,betplayer[i] = 0;
					}
				}
				RouletteTime = 20,TotalBet = 0,RouletteStatus = 0,step = 0,step2 = 0,step3 = 0,podkrut = 0;
	            for(new i; i<3; i++) totalbet[i] = 0;
				for(new i; i<3; i++) totalsumma[i] = 0;
				KillTimer(playtime),KillTimer(prohodtime);
				TextDrawSetString(CasinoDraw[19], "WIN RED");
				TextDrawSetString(CasinoDraw[16], "0 bets~n~$0");
				TextDrawSetString(CasinoDraw[17], "0 bets~n~$0");
				TextDrawSetString(CasinoDraw[18], "0 bets~n~$0");
				return true;
			}
		}
	return 1;
}
stock RouletteOnGreen()
{
	new string[128],var100[256];
	switch(step) {
		case 1: prohodtime = SetTimer("TextDrawProhod2", 250, true),TextDrawSetString(CasinoDraw[19], "ROLLING ROULETTE..");
		case 10: {
	        foreach(new i:Player) {
				if(RouletteInGame[i] == 1) {
	                HideCasino(i);
					TextDrawBoxColor(CasinoDraw[1], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[2], 0x000000AA),TextDrawBoxColor(CasinoDraw[3], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[4], 0x00FF00AA),TextDrawBoxColor(CasinoDraw[5], 0x000000AA),TextDrawBoxColor(CasinoDraw[6], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[7], 0x000000AA);
					ShowCasino(i);
					SendClientMessage(i,-1,"The roulette hands on GREEN.");

	                if(betplayer[i] == 4) {
	                	format(string, sizeof(string), "You won $%s at roulette.", FormatNumber(betsumma[i]*14));
						SendClientMessage(i, COLOR_GREEN, string);
						GivePlayerCash(i,betsumma[i]*14);
					} else if(betplayer[i] == 10 || betplayer[i] == 14) {
	                	format(string, sizeof(string), "You lost $%s at roulette.", FormatNumber(betsumma[i]));
						SendClientMessage(i, COLOR_GREEN, string);
					}
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','0','%s')", PlayerInfo[i][pSQLID],string);
					mysql_tquery(SQL,var100,"","");
					betsumma[i] = 0,betplayer[i] = 0;
				}
			}
			RouletteTime = 20,TotalBet = 0,RouletteStatus = 0,step = 0,step2 = 0,step3 = 0,podkrut = 0;
	        for(new i; i<3; i++) totalbet[i] = 0;
			for(new i; i<3; i++) totalsumma[i] = 0;
			KillTimer(playtime),KillTimer(prohodtime);
			TextDrawSetString(CasinoDraw[19], "WIN GREEN");
			TextDrawSetString(CasinoDraw[16], "0 bets~n~$0");
			TextDrawSetString(CasinoDraw[17], "0 bets~n~$0");
			TextDrawSetString(CasinoDraw[18], "0 bets~n~$0");
			return true;
		}
	}
	return 1;
}
stock RouletteOnBlack()
{
	new string[128],var100[256];
	switch(step) {
		case 1: prohodtime = SetTimer("TextDrawProhod1", 250, true),TextDrawSetString(CasinoDraw[19], "ROLLING ROULETTE..");
		case 10: {
	        foreach(new i:Player) {
				if(RouletteInGame[i] == 1) {
	                HideCasino(i);
					TextDrawBoxColor(CasinoDraw[1], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[2], 0x000000AA),TextDrawBoxColor(CasinoDraw[3], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[4], 0x000000AA),TextDrawBoxColor(CasinoDraw[5], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[6], 0x000000AA),TextDrawBoxColor(CasinoDraw[7], 0xFF0000AA);
					ShowCasino(i);
					SendClientMessage(i,-1,"The roulette hands on BLACK.");

	                if(betplayer[i] == 10) {
	                	format(string, sizeof(string), "You won $%s at roulette.", FormatNumber(betsumma[i]*2));
						SendClientMessage(i, COLOR_GREEN, string);
						GivePlayerCash(i,betsumma[i]*2);
					} else if(betplayer[i] == 14 || betplayer[i] == 4) {
	                	format(string, sizeof(string), "You lost $%s at roulette.", FormatNumber(betsumma[i]));
						SendClientMessage(i, COLOR_GREEN, string);
					}
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','0','%s')", PlayerInfo[i][pSQLID],string);
					mysql_tquery(SQL,var100,"","");
					update_ruleta(i);
	                betsumma[i] = 0,betplayer[i] = 0;
	            }
			}
			RouletteTime = 20,RouletteStatus = 0,TotalBet = 0,step = 0,step2 = 0,step3 = 0,podkrut = 0;
			for(new i; i<3; i++) totalbet[i] = 0;
			for(new i; i<3; i++) totalsumma[i] = 0;
			KillTimer(playtime),KillTimer(prohodtime);
			TextDrawSetString(CasinoDraw[19], "WIN BLACK");
			TextDrawSetString(CasinoDraw[16], "0 bets~n~$0");
			TextDrawSetString(CasinoDraw[17], "0 bets~n~$0");
			TextDrawSetString(CasinoDraw[18], "0 bets~n~$0");
			return true;
		}
	}
	return 1;
}

forward RouletteGame1();
public RouletteGame1() {
	if(RouletteTime2 == 10 && podkrut == 0) prohod = random(55);
	else if(RouletteTime2 == 10 && podkrut != 0) prohod = podkrut;
	step ++;
	switch(prohod) 
	{
        case 0..25: {
        	new var = random(13);
        	if(var%2 == 0) RouletteOnBlack();
			else RouletteOnRed();
		}
		case 26..28: {
			RouletteOnGreen();
		}
		case 29..55: {
			new var = random(13);
        	if(var%2 == 0) RouletteOnRed();
			else RouletteOnBlack();
		}
	}
	return true;
}
stock ShowCasino(playerid) {
	if(RouletteInGame[playerid] == 0) return true;
	TextDrawShowForPlayer(playerid,CasinoDraw[1]);
	TextDrawShowForPlayer(playerid,CasinoDraw[2]);
	TextDrawShowForPlayer(playerid,CasinoDraw[3]);
	TextDrawShowForPlayer(playerid,CasinoDraw[4]);
	TextDrawShowForPlayer(playerid,CasinoDraw[5]);
	TextDrawShowForPlayer(playerid,CasinoDraw[6]);
	TextDrawShowForPlayer(playerid,CasinoDraw[7]);
	return true;
}
stock HideCasino(playerid) {
    if(RouletteInGame[playerid] == 0) return true;
	TextDrawHideForPlayer(playerid,CasinoDraw[1]);
	TextDrawHideForPlayer(playerid,CasinoDraw[2]);
	TextDrawHideForPlayer(playerid,CasinoDraw[3]);
	TextDrawHideForPlayer(playerid,CasinoDraw[4]);
	TextDrawHideForPlayer(playerid,CasinoDraw[5]);
	TextDrawHideForPlayer(playerid,CasinoDraw[6]);
	TextDrawHideForPlayer(playerid,CasinoDraw[7]);
	return true;
}
forward TextDrawProhod1();
public TextDrawProhod1() {
	if(step2 == 0) step2 ++;
	switch(step2) {
		case 1: {
            foreach(new i:Player) {
				HideCasino(i);
				TextDrawBoxColor(CasinoDraw[1], 0x000000AA),TextDrawBoxColor(CasinoDraw[2], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[3], 0x000000AA),TextDrawBoxColor(CasinoDraw[4], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[5], 0x000000AA),TextDrawBoxColor(CasinoDraw[6], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[7], 0x000000AA);
				ShowCasino(i),step2 = 2;
			}
		}
		case 2: {
            foreach(new i:Player) {
				HideCasino(i);
				TextDrawBoxColor(CasinoDraw[1], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[2], 0x000000AA),TextDrawBoxColor(CasinoDraw[3], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[4], 0x000000AA),TextDrawBoxColor(CasinoDraw[5], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[6], 0x000000AA),TextDrawBoxColor(CasinoDraw[7], 0xFF0000AA);
				ShowCasino(i),step2 = 1;
			}
		}
	}
	return true;
}
forward TextDrawProhod2();
public TextDrawProhod2() {
	if(step2 == 0) step2 = 1;
	step3 ++;

	switch(step2) {
		case 1: {
            foreach(new i:Player) {
				HideCasino(i);
				TextDrawBoxColor(CasinoDraw[1], 0x000000AA),TextDrawBoxColor(CasinoDraw[2], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[3], 0x000000AA),TextDrawBoxColor(CasinoDraw[4], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[5], 0x000000AA),TextDrawBoxColor(CasinoDraw[6], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[7], 0x000000AA);
				ShowCasino(i),step2 = 2;
			}
		}
		case 2: {
            foreach(new i:Player) {
				HideCasino(i);
				TextDrawBoxColor(CasinoDraw[1], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[2], 0x000000AA),TextDrawBoxColor(CasinoDraw[3], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[4], 0x000000AA),TextDrawBoxColor(CasinoDraw[5], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[6], 0x000000AA),TextDrawBoxColor(CasinoDraw[7], 0xFF0000AA);
				ShowCasino(i);
				if(step3 == 16) step2 = 3;
				else step2 = 1;
			}
		}
		case 3: {
            foreach(new i:Player) {
				HideCasino(i);
				TextDrawBoxColor(CasinoDraw[1], 0x00FF00AA),TextDrawBoxColor(CasinoDraw[2], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[3], 0x000000AA),TextDrawBoxColor(CasinoDraw[4], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[5], 0x000000AA),TextDrawBoxColor(CasinoDraw[6], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[7], 0x000000AA);
				ShowCasino(i);
				step2 = 4;
			}
		}
		case 4: {
            foreach(new i:Player) {
				HideCasino(i);
				TextDrawBoxColor(CasinoDraw[1], 0x000000AA),TextDrawBoxColor(CasinoDraw[2], 0x00FF00AA),TextDrawBoxColor(CasinoDraw[3], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[4], 0x000000AA),TextDrawBoxColor(CasinoDraw[5], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[6], 0x000000AA),TextDrawBoxColor(CasinoDraw[7], 0xFF0000AA);
				ShowCasino(i);
				step2 = 5;
			}
		}
		case 5: {
            foreach(new i:Player) {
				HideCasino(i);
				TextDrawBoxColor(CasinoDraw[1], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[2], 0x000000AA),TextDrawBoxColor(CasinoDraw[3], 0x00FF00AA),TextDrawBoxColor(CasinoDraw[4], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[5], 0x000000AA),TextDrawBoxColor(CasinoDraw[6], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[7], 0x000000AA);
				ShowCasino(i);
				step = 9;
			}
		}
	}
	return true;
}
forward TextDrawProhod3();
public TextDrawProhod3() {
	if(step2 == 0) step2 ++;
	switch(step2) {
		case 1: {
            foreach(new i:Player) {
				HideCasino(i);
				TextDrawBoxColor(CasinoDraw[1], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[2], 0x000000AA),TextDrawBoxColor(CasinoDraw[3], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[4], 0x000000AA),TextDrawBoxColor(CasinoDraw[5], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[6], 0x000000AA),TextDrawBoxColor(CasinoDraw[7], 0xFF0000AA);
				ShowCasino(i),step2 = 2;
			}
		}
		case 2: {
            foreach(new i:Player) {
				HideCasino(i);
				TextDrawBoxColor(CasinoDraw[1], 0x000000AA),TextDrawBoxColor(CasinoDraw[2], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[3], 0x000000AA),TextDrawBoxColor(CasinoDraw[4], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[5], 0x000000AA),TextDrawBoxColor(CasinoDraw[6], 0xFF0000AA),TextDrawBoxColor(CasinoDraw[7], 0x000000AA);
				ShowCasino(i),step2 = 1;
			}
		}
	}
	return true;
}
forward GlobalServerTimer();
public GlobalServerTimer() {
	if(RouletteTime2 >= 1 && RouletteStatus == 1) RouletteTime2 --;
	if(RouletteTime == 0 && RouletteStatus == 0) TextDrawSetString(CasinoDraw[19], "WAITING TO ROLLING.."),RouletteStatus = 1,RouletteTime2 = 11,playtime = SetTimer("RouletteGame1", 1000, true);
	if(RouletteTime >= 1) {
	    RouletteTime --;
	    if(TotalBet == 0) return TextDrawSetString(CasinoDraw[19], "WAITING FOR BETS.."),RouletteTime = 30;
	    new newtextt[24];
		format(newtextt, sizeof(newtextt), "SPINNING IN %d SECONDS..", RouletteTime);
		TextDrawSetString(CasinoDraw[19], newtextt);
	}
	return 1;
}
stock update_ruleta(playerid) {
	new string[64];
	format(string, sizeof(string), "~g~$%s", FormatNumber(GetPlayerCash(playerid)));
	PlayerTextDrawSetString(playerid, CasinoDrawPlayer[playerid][0], string);
	PlayerTextDrawShow(playerid, CasinoDrawPlayer[playerid][0]);
	return 1;
}

/*----------------------------------------------------------------------------------------------------------------------------------------------------*/

// blackjack
forward BlackJackFunction(playerid, card);
public BlackJackFunction(playerid, card)
{
	if(BlackJackPlayerCards[playerid] + 1 > 5) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti pune mai mult de 5 carti la masa!", "(Error){FFFFFF} You can't have more than 5 cards on table!");
	if(CloseBMatch[playerid] != 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Meciul de blackjack s-a incheiat", "(Error){FFFFFF} The blackjack match is over!");
	for(new c; c < card; c++)
	{
		if(BlackJackStand[playerid]==0) {
			new rand = random(85), numb;
			if(rand >= 0 && rand <= 5) numb = 1;
			else if(rand >= 6 && rand <= 12) numb = 2;
			else if(rand >= 13 && rand <= 20) numb = 3;
			else if(rand >= 21 && rand <= 30) numb = 4;
			else if(rand >= 31 && rand <= 38) numb = 5;
			else if(rand >= 39 && rand <= 45) numb = 6;
			else if(rand >= 46 && rand <= 55) numb = 7;
			else if(rand >= 56 && rand <= 59) numb = 8;
			else if(rand >= 60 && rand <= 66) numb = 9;
			else if(rand >= 67 && rand <= 72) numb = 10;
			else if(rand >= 73 && rand <= 75) numb = 12;
			else if(rand >= 76 && rand <= 79) numb = 13;
			else if(rand >= 80) numb = 14;

			BlackJackPlayerCard[playerid][BlackJackPlayerCards[playerid]] = numb;
			BlackJackPlayerScore[playerid] += numb;

			BlackJackPlayerCards[playerid]++;
		}
	}
	for(new c; c < card; c++)
	{
		if(BDealerScore[playerid]<16) {
			new rand = random(85), numb;
			if(rand >= 0 && rand <= 5) numb = 1;
			else if(rand >= 6 && rand <= 12) numb = 2;
			else if(rand >= 13 && rand <= 20) numb = 3;
			else if(rand >= 21 && rand <= 30) numb = 4;
			else if(rand >= 31 && rand <= 38) numb = 5;
			else if(rand >= 39 && rand <= 45) numb = 6;
			else if(rand >= 46 && rand <= 55) numb = 7;
			else if(rand >= 56 && rand <= 59) numb = 8;
			else if(rand >= 60 && rand <= 66) numb = 9;
			else if(rand >= 67 && rand <= 72) numb = 10;
			else if(rand >= 73 && rand <= 75) numb = 12;
			else if(rand >= 76 && rand <= 79) numb = 13;
			else if(rand >= 80) numb = 14;

			BDealerCard[playerid][BDealerCards[playerid]] = numb;
			BDealerScore[playerid] += numb;
			BDealerCards[playerid]++;
		}
	}
	new text[256],var100[256],string2[256];
	if(BlackJackPlayerScore[playerid] > 21 && BDealerScore[playerid] > 21)
	{
		GivePlayerCash(playerid, BDeal[playerid]);
		format(text, sizeof(text), "** %s and dealer scored more than 21 at Black Jack (no one lose) **.", GetName(playerid));
		ProxDetector(40.0, playerid, text, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		CloseBMatch[playerid] = 1;
		PlayerTextDrawShow(playerid, BJreset[playerid]);
		mysql_real_escape_string(text, string2);
		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','0','%s')", PlayerInfo[playerid][pSQLID],string2);
		mysql_tquery(SQL,var100,"","");
	}
	else if(BlackJackPlayerScore[playerid] > 21)
	{
		format(text, sizeof(text), "** %s lost $%s at Black Jack (scored more than 21) **.", GetName(playerid), FormatNumber(BDeal[playerid]));
		ProxDetector(40.0, playerid, text, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		CloseBMatch[playerid] = 1;
		PlayerTextDrawShow(playerid, BJreset[playerid]);
		mysql_real_escape_string(text, string2);
		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','0','%s')", PlayerInfo[playerid][pSQLID],string2);
		mysql_tquery(SQL,var100,"","");
	}
	else if(BDealerScore[playerid] > 21)
	{
		GivePlayerCash(playerid, BDeal[playerid]*2);
		format(text, sizeof(text), "** %s win $%s at Black Jack (dealer scored more than 21) **.", GetName(playerid), FormatNumber(BDeal[playerid]*2));
		ProxDetector(40.0, playerid, text, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		PlayerPlaySound(playerid, 4201, 0.0, 0.0, 0.0);
		CloseBMatch[playerid] = 1;
		PlayerTextDrawShow(playerid, BJreset[playerid]);
		mysql_real_escape_string(text, string2);
		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','0','%s')", PlayerInfo[playerid][pSQLID],string2);
		mysql_tquery(SQL,var100,"","");
	}
	else if(BlackJackPlayerScore[playerid] == BDealerScore[playerid]  && BlackJackActions[playerid]>=2)
	{
		GivePlayerCash(playerid, BDeal[playerid]);
		format(text, sizeof(text), "** %s scored egal at Black Jack (player  %d - dealer %d) **.", GetName(playerid),BlackJackPlayerScore[playerid],BDealerScore[playerid]);
		ProxDetector(40.0, playerid, text, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		PlayerPlaySound(playerid, 4201, 0.0, 0.0, 0.0);
		CloseBMatch[playerid] = 1;
		PlayerTextDrawShow(playerid, BJreset[playerid]);
		mysql_real_escape_string(text, string2);
		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','0','%s')", PlayerInfo[playerid][pSQLID],string2);
		mysql_tquery(SQL,var100,"","");
	}
	else if(BlackJackPlayerScore[playerid] == 21 && BDealerScore[playerid] == 21)
	{
		GivePlayerCash(playerid, BDeal[playerid]);
		format(text, sizeof(text), "** %s scored egal at Black Jack (player  %d - dealer %d) **.", GetName(playerid),BlackJackPlayerScore[playerid],BDealerScore[playerid]);
		ProxDetector(40.0, playerid, text, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		PlayerPlaySound(playerid, 4201, 0.0, 0.0, 0.0);
		CloseBMatch[playerid] = 1;
		PlayerTextDrawShow(playerid, BJreset[playerid]);
		mysql_real_escape_string(text, string2);
		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','0','%s')", PlayerInfo[playerid][pSQLID],string2);
		mysql_tquery(SQL,var100,"","");
	}
	else if(BDealerScore[playerid] == 21)
	{
		format(text, sizeof(text), "** %s lost $%s at Black Jack (dealer scored 21) **.", GetName(playerid), FormatNumber(BDeal[playerid]));
		ProxDetector(40.0, playerid, text, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		CloseBMatch[playerid] = 1;
		PlayerTextDrawShow(playerid, BJreset[playerid]);
		mysql_real_escape_string(text, string2);
		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','0','%s')", PlayerInfo[playerid][pSQLID],string2);
		mysql_tquery(SQL,var100,"","");
	}
	else if(BlackJackPlayerScore[playerid] == 21)
	{
		GivePlayerCash(playerid, BDeal[playerid]*2);
		format(text, sizeof(text), "** %s win $%s at Black Jack (scored 21) **.", GetName(playerid), FormatNumber(BDeal[playerid]*2));
		ProxDetector(40.0, playerid, text, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		PlayerPlaySound(playerid, 4201, 0.0, 0.0, 0.0);
		CloseBMatch[playerid] = 1;
		PlayerTextDrawShow(playerid, BJreset[playerid]);
		mysql_real_escape_string(text, string2);
		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','0','%s')", PlayerInfo[playerid][pSQLID],string2);
		mysql_tquery(SQL,var100,"","");
	}
	else if(BlackJackPlayerScore[playerid] < BDealerScore[playerid] && BlackJackActions[playerid]>=2)
	{
		format(text, sizeof(text), "** %s lost $%s at Black Jack (player %d - dealer %d) **.", GetName(playerid), FormatNumber(BDeal[playerid]),BlackJackPlayerScore[playerid],BDealerScore[playerid]);
		ProxDetector(40.0, playerid, text, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		CloseBMatch[playerid] = 1;
		PlayerTextDrawShow(playerid, BJreset[playerid]);
		mysql_real_escape_string(text, string2);
		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','0','%s')", PlayerInfo[playerid][pSQLID],string2);
		mysql_tquery(SQL,var100,"","");
	}
	else if(BlackJackPlayerScore[playerid] > BDealerScore[playerid] && BlackJackActions[playerid]>=2)
	{
		GivePlayerCash(playerid, BDeal[playerid]*2);
		format(text, sizeof(text), "** %s win $%s at Black Jack (player %d - dealer %d) **.", GetName(playerid), FormatNumber(BDeal[playerid]*2),BlackJackPlayerScore[playerid],BDealerScore[playerid]);
		ProxDetector(40.0, playerid, text, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		PlayerPlaySound(playerid, 4201, 0.0, 0.0, 0.0);
		CloseBMatch[playerid] = 1;
		PlayerTextDrawShow(playerid, BJreset[playerid]);
		mysql_real_escape_string(text, string2);
		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','0','%s')", PlayerInfo[playerid][pSQLID],string2);
		mysql_tquery(SQL,var100,"","");
	}
	BlackJackUpdateTable(playerid);
	return 1;
}

forward BlackJackUpdateTable(playerid);
public BlackJackUpdateTable(playerid)
{
	for(new p; p < BlackJackPlayerCards[playerid]; p++)
	{
		if(BlackJackStand[playerid]==0) {
			new type[30];
			switch(BlackJackPlayerCard[playerid][p])
			{
			    case 1:format(type, sizeof(type), "LD_CARD:cd1s");
			    case 2:format(type, sizeof(type), "LD_CARD:cd2h");
			    case 3:format(type, sizeof(type), "LD_CARD:cd3d");
			    case 4:format(type, sizeof(type), "LD_CARD:cd4c");
			    case 5:format(type, sizeof(type), "LD_CARD:cd5h");
			    case 6:format(type, sizeof(type), "LD_CARD:cd6c");
			    case 7:format(type, sizeof(type), "LD_CARD:cd7d");
			    case 8:format(type, sizeof(type), "LD_CARD:cd8c");
			    case 9:format(type, sizeof(type), "LD_CARD:cd9h");
			    case 10:format(type, sizeof(type), "LD_CARD:cd10s");
			    case 12:format(type, sizeof(type), "LD_CARD:cd11d");
			    case 13:format(type, sizeof(type), "LD_CARD:cd12h");
			    case 14:format(type, sizeof(type), "LD_CARD:cd13h");
			}
			switch(p)
			{
			    case 0:PlayerTextDrawSetString(playerid, BJPlayerCard1[playerid], type);
			    case 1:PlayerTextDrawSetString(playerid, BJPlayerCard2[playerid], type);
			    case 2:PlayerTextDrawSetString(playerid, BJPlayerCard3[playerid], type);
			    case 3:PlayerTextDrawSetString(playerid, BJPlayerCard4[playerid], type);
			    case 4:PlayerTextDrawSetString(playerid, BJPlayerCard5[playerid], type);
			}
		}	
	}
	for(new p; p < BDealerCards[playerid]; p++)
	{
		if(BDealerScore[playerid]>=16 && BDealerCards[playerid]!=2)	{ }
		else 
		{
			new type[30];
			switch(BDealerCard[playerid][p])
			{
			    case 1:format(type, sizeof(type), "LD_CARD:cd1s");
			    case 2:format(type, sizeof(type), "LD_CARD:cd2h");
			    case 3:format(type, sizeof(type), "LD_CARD:cd3d");
			    case 4:format(type, sizeof(type), "LD_CARD:cd4c");
			    case 5:format(type, sizeof(type), "LD_CARD:cd5h");
			    case 6:format(type, sizeof(type), "LD_CARD:cd6c");
			    case 7:format(type, sizeof(type), "LD_CARD:cd7d");
			    case 8:format(type, sizeof(type), "LD_CARD:cd8c");
			    case 9:format(type, sizeof(type), "LD_CARD:cd9h");
			    case 10:format(type, sizeof(type), "LD_CARD:cd10s");
			    case 12:format(type, sizeof(type), "LD_CARD:cd11d");
			    case 13:format(type, sizeof(type), "LD_CARD:cd12h");
			    case 14:format(type, sizeof(type), "LD_CARD:cd13h");
			}
			switch(p)
			{
			    case 0:PlayerTextDrawSetString(playerid, BJDealerCard1[playerid], type);
			    case 1:PlayerTextDrawSetString(playerid, BJDealerCard2[playerid], type);
			    case 2:PlayerTextDrawSetString(playerid, BJDealerCard3[playerid], type);
			    case 3:PlayerTextDrawSetString(playerid, BJDealerCard4[playerid], type);
			    case 4:PlayerTextDrawSetString(playerid, BJDealerCard5[playerid], type);
			}
		}	
	}
	if(BlackJackStand[playerid]==1) BlackJackStand[playerid]=0;
	new str[100];
	format(str, sizeof(str), "DEALER: %s", FormatNumber(BDealerScore[playerid]));
	PlayerTextDrawSetString(playerid, BJDealerScoreText[playerid], str);
	format(str, sizeof(str), "PLAYER: %s", FormatNumber(BlackJackPlayerScore[playerid]));
	PlayerTextDrawSetString(playerid, BJPlayerScoreText[playerid], str);
	return 1;
}
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

// vehicle component save
forward SaveComponent(vehicleid,componentid);
public SaveComponent(vehicleid,componentid)
{
	new vid,pid;
	foreach(new i : Player)
	{
		for(new v; v < MAX_PERSONAL_VEHICLES; v++)
		{
			if(PlayerInfo[i][pCarID][v] == vehicleid)
			{
				vid = v;
				pid = i;
			}
		}
	}
	for(new s=0; s<20; s++)
	{
		if(componentid == spoiler[s][0])
		{
			CarMod[pid][vid][0] = componentid;
		}
	}
	for(new s=0; s<3; s++)
	{
		if(componentid == nitro[s][0])
		{
			CarMod[pid][vid][1] = componentid;
		}
	}
	for(new s=0; s<23; s++)
	{
		if(componentid == fbumper[s][0])
		{
			CarMod[pid][vid][2] = componentid;
		}
	}
	for(new s=0; s<22; s++)
	{
		if(componentid == rbumper[s][0])
		{
			CarMod[pid][vid][3] = componentid;
		}
	}
	for(new s=0; s<28; s++)
	{
		if(componentid == exhaust[s][0])
		{
			CarMod[pid][vid][4] = componentid;
		}
	}
	for(new s=0; s<2; s++)
	{
		if(componentid == bventr[s][0])
		{
			CarMod[pid][vid][5] = componentid;
		}
	}
	for(new s=0; s<2; s++)
	{
		if(componentid == bventl[s][0]) {
			CarMod[pid][vid][6] = componentid;
		}
	}
	for(new s=0; s<4; s++)
	{
		if(componentid == bscoop[s][0])
		{
			CarMod[pid][vid][7] = componentid;
		}
	}
	for(new s=0; s<17; s++)
	{
		if(componentid == rscoop[s][0])
		{
			CarMod[pid][vid][8] = componentid;
		}
	}
	for(new s=0; s<21; s++)
	{
		if(componentid == lskirt[s][0])
		{
			CarMod[pid][vid][9] = componentid;
		}
	}
	for(new s=0; s<21; s++)
	{
		if(componentid == rskirt[s][0])
		{
			CarMod[pid][vid][10] = componentid;
		}
	}
	for(new s=0; s<1; s++)
	{
		if(componentid == hydraulics[s][0])
		{
			CarMod[pid][vid][11] = componentid;
		}
	}
	for(new s=0; s<1; s++)
	{
		if(componentid == vbase[s][0])
		{
			CarMod[pid][vid][12] = componentid;
		}
	}
	for(new s=0; s<4; s++)
	{
		if(componentid == rbbars[s][0])
		{
			CarMod[pid][vid][13] = componentid;
		}
	}
	for(new s=0; s<2; s++)
	{
		if(componentid == fbbars[s][0])
		{
			CarMod[pid][vid][14] = componentid;
		}
	}
	for(new s=0; s<17; s++)
	{
		if(componentid == wheels[s][0])
		{
			CarMod[pid][vid][15] = componentid;
		}
	}
	for(new s=0; s<2; s++)
	{
		if(componentid == vlights[s][0])
		{
			CarMod[pid][vid][16] = componentid;
		}
	}
	cUpdate(pid, vid, cModsx);
	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rxx, Float:ryy, Float:rzz)
{
	if(response == EDIT_RESPONSE_FINAL)
	{
		new car = GetPlayerVehicleID(playerid),idcar=-1;
		for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
		{
			if(car == PlayerInfo[playerid][pCarID][vv])
			{
				idcar = vv;
			}
		}
		new Float:ofx, Float:ofy, Float:ofz, Float:ofaz, Float:finalx, Float:finaly, Float:px, Float:py, Float:pz, Float:roz;
        GetVehiclePos(car, px, py, pz);
        GetVehicleZAngle(car, roz);

        ofx = x-px;
        ofy = y-py;
        ofz = z-pz;
        ofaz = rzz-roz;
        finalx = ofx*floatcos(roz, degrees)+ofy*floatsin(roz, degrees);
        finaly = -ofx*floatsin(roz, degrees)+ofy*floatcos(roz, degrees);

        PlayerInfo[playerid][pCarVipXPos][idcar] = finalx;
        PlayerInfo[playerid][pCarVipYPos][idcar] = finaly;
        PlayerInfo[playerid][pCarVipZPos][idcar] = ofz;
        PlayerInfo[playerid][pCarVipRXPos][idcar] = rxx;
        PlayerInfo[playerid][pCarVipRYPos][idcar] = ryy;
        PlayerInfo[playerid][pCarVipRZPos][idcar] = ofaz;

		AttachDynamicObjectToVehicle(vObject[PlayerInfo[playerid][pCarID][idcar]], PlayerInfo[playerid][pCarID][idcar], PlayerInfo[playerid][pCarVipXPos][idcar], PlayerInfo[playerid][pCarVipYPos][idcar], PlayerInfo[playerid][pCarVipZPos][idcar], PlayerInfo[playerid][pCarVipRXPos][idcar],
			PlayerInfo[playerid][pCarVipRYPos][idcar], PlayerInfo[playerid][pCarVipRZPos][idcar]);
		
		cUpdate(playerid, idcar, cCarVipXPosx);
		cUpdate(playerid, idcar, cCarVipYPosx);
		cUpdate(playerid, idcar, cCarVipZPosx);
		cUpdate(playerid, idcar, cCarVipRXPosx);
		cUpdate(playerid, idcar, cCarVipRYPosx);
		cUpdate(playerid, idcar, cCarVipRZPosx);

		SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} The modified offsets was applied.");
	}
	else if(response == EDIT_RESPONSE_CANCEL)
	{
		new car = GetPlayerVehicleID(playerid),idcar=-1;
		for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
		{
			if(car == PlayerInfo[playerid][pCarID][vv])
			{
				idcar = vv;
			}
		}
		new Float:fPos[3];
        
	    GetVehiclePos(GetPlayerVehicleID(playerid), fPos[0], fPos[1], fPos[2]);    

	    PlayerInfo[playerid][pCarVipXPos][idcar] = PlayerInfo[playerid][pCarVipXPos][idcar]-fPos[0];
	    PlayerInfo[playerid][pCarVipYPos][idcar] = PlayerInfo[playerid][pCarVipYPos][idcar]-fPos[1];
	    PlayerInfo[playerid][pCarVipZPos][idcar] = PlayerInfo[playerid][pCarVipZPos][idcar]-fPos[2];
		AttachDynamicObjectToVehicle(vObject[PlayerInfo[playerid][pCarID][idcar]], PlayerInfo[playerid][pCarID][idcar], PlayerInfo[playerid][pCarVipXPos][idcar], PlayerInfo[playerid][pCarVipYPos][idcar], PlayerInfo[playerid][pCarVipZPos][idcar], PlayerInfo[playerid][pCarVipRXPos][idcar],
			PlayerInfo[playerid][pCarVipRYPos][idcar], PlayerInfo[playerid][pCarVipRZPos][idcar]);
		SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} The modified offsets was restored.");
	}
	return 1;
}

/*--------------------------------------------------------------------------------------------------------------------------------------------------*/

SetPlayerAttachedObjectEx(playerid, index, modelid, bone, Float:fOffsetX = 0.0, Float:fOffsetY = 0.0, Float:fOffsetZ = 0.0, Float:fRotX = 0.0, Float:fRotY = 0.0, Float:fRotZ = 0.0, Float:fScaleX = 1.0, Float:fScaleY = 1.0, Float:fScaleZ = 1.0, materialcolor1 = 0, materialcolor2 = 0)
{
    ao[playerid][index][ao_x] = fOffsetX;
    ao[playerid][index][ao_y] = fOffsetY;
    ao[playerid][index][ao_z] = fOffsetZ;
    ao[playerid][index][ao_rx] = fRotX;
    ao[playerid][index][ao_ry] = fRotY;
    ao[playerid][index][ao_rz] = fRotZ;
    ao[playerid][index][ao_sx] = fScaleX;
    ao[playerid][index][ao_sy] = fScaleY;
    ao[playerid][index][ao_sz] = fScaleZ;
    SetPlayerAttachedObject(playerid, index, modelid, bone, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ, materialcolor1, materialcolor2);
    return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    if(response)
    {
    	SetPVarInt(playerid, "Edited", 1);
    	new type = ObjectType[playerid];
		switch(type) {
			case 0: {
				attachInfo[playerid][aIndex0][0] = fOffsetX; attachInfo[playerid][aIndex0][1] = fOffsetY; attachInfo[playerid][aIndex0][2] = fOffsetZ;
				attachInfo[playerid][aIndex0][3] = fRotX; attachInfo[playerid][aIndex0][4] = fRotY; attachInfo[playerid][aIndex0][5] = fRotZ;
				attachInfo[playerid][aIndex0][6] = fScaleX; attachInfo[playerid][aIndex0][7] = fScaleY; attachInfo[playerid][aIndex0][8] = fScaleZ;
				save_player_accs(playerid, SAVE_INDEX_0);
			}
			case 1: {
				attachInfo[playerid][aIndex1][0] = fOffsetX; attachInfo[playerid][aIndex1][1] = fOffsetY; attachInfo[playerid][aIndex1][2] = fOffsetZ;
				attachInfo[playerid][aIndex1][3] = fRotX; attachInfo[playerid][aIndex1][4] = fRotY; attachInfo[playerid][aIndex1][5] = fRotZ;
				attachInfo[playerid][aIndex1][6] = fScaleX; attachInfo[playerid][aIndex1][7] = fScaleY; attachInfo[playerid][aIndex1][8] = fScaleZ;
				save_player_accs(playerid, SAVE_INDEX_1);
			}
			case 2: {
				attachInfo[playerid][aIndex2][0] = fOffsetX; attachInfo[playerid][aIndex2][1] = fOffsetY; attachInfo[playerid][aIndex2][2] = fOffsetZ;
				attachInfo[playerid][aIndex2][3] = fRotX; attachInfo[playerid][aIndex2][4] = fRotY; attachInfo[playerid][aIndex2][5] = fRotZ;
				attachInfo[playerid][aIndex2][6] = fScaleX; attachInfo[playerid][aIndex2][7] = fScaleY; attachInfo[playerid][aIndex2][8] = fScaleZ;
				save_player_accs(playerid, SAVE_INDEX_2);
			}
			case 3: {
				attachInfo[playerid][aIndex3][0] = fOffsetX; attachInfo[playerid][aIndex3][1] = fOffsetY; attachInfo[playerid][aIndex3][2] = fOffsetZ;
				attachInfo[playerid][aIndex3][3] = fRotX; attachInfo[playerid][aIndex3][4] = fRotY; attachInfo[playerid][aIndex3][5] = fRotZ;
				attachInfo[playerid][aIndex3][6] = fScaleX; attachInfo[playerid][aIndex3][7] = fScaleY; attachInfo[playerid][aIndex3][8] = fScaleZ;
				save_player_accs(playerid, SAVE_INDEX_3);
			}
			case 4: {
				attachInfo[playerid][aIndex4][0] = fOffsetX; attachInfo[playerid][aIndex4][1] = fOffsetY; attachInfo[playerid][aIndex4][2] = fOffsetZ;
				attachInfo[playerid][aIndex4][3] = fRotX; attachInfo[playerid][aIndex4][4] = fRotY; attachInfo[playerid][aIndex4][5] = fRotZ;
				attachInfo[playerid][aIndex4][6] = fScaleX; attachInfo[playerid][aIndex4][7] = fScaleY; attachInfo[playerid][aIndex4][8] = fScaleZ;
				save_player_accs(playerid, SAVE_INDEX_4);
			}
			case 5: {
				attachInfo[playerid][aIndex5][0] = fOffsetX; attachInfo[playerid][aIndex5][1] = fOffsetY; attachInfo[playerid][aIndex5][2] = fOffsetZ;
				attachInfo[playerid][aIndex5][3] = fRotX; attachInfo[playerid][aIndex5][4] = fRotY; attachInfo[playerid][aIndex5][5] = fRotZ;
				attachInfo[playerid][aIndex5][6] = fScaleX; attachInfo[playerid][aIndex5][7] = fScaleY; attachInfo[playerid][aIndex5][8] = fScaleZ;
				save_player_accs(playerid, SAVE_INDEX_5);
			}
			case 6: {
				attachInfo[playerid][aIndex6][0] = fOffsetX; attachInfo[playerid][aIndex6][1] = fOffsetY; attachInfo[playerid][aIndex6][2] = fOffsetZ;
				attachInfo[playerid][aIndex6][3] = fRotX; attachInfo[playerid][aIndex6][4] = fRotY; attachInfo[playerid][aIndex6][5] = fRotZ;
				attachInfo[playerid][aIndex6][6] = fScaleX; attachInfo[playerid][aIndex6][7] = fScaleY; attachInfo[playerid][aIndex6][8] = fScaleZ;
				save_player_accs(playerid, SAVE_INDEX_6);
			}
			case 7: {
				attachInfo[playerid][aIndex7][0] = fOffsetX; attachInfo[playerid][aIndex7][1] = fOffsetY; attachInfo[playerid][aIndex7][2] = fOffsetZ;
				attachInfo[playerid][aIndex7][3] = fRotX; attachInfo[playerid][aIndex7][4] = fRotY; attachInfo[playerid][aIndex7][5] = fRotZ;
				attachInfo[playerid][aIndex7][6] = fScaleX; attachInfo[playerid][aIndex7][7] = fScaleY; attachInfo[playerid][aIndex7][8] = fScaleZ;
				save_player_accs(playerid, SAVE_INDEX_7);
			}
			case 8: {
				attachInfo[playerid][aIndex8][0] = fOffsetX; attachInfo[playerid][aIndex8][1] = fOffsetY; attachInfo[playerid][aIndex8][2] = fOffsetZ;
				attachInfo[playerid][aIndex8][3] = fRotX; attachInfo[playerid][aIndex8][4] = fRotY; attachInfo[playerid][aIndex8][5] = fRotZ;
				attachInfo[playerid][aIndex8][6] = fScaleX; attachInfo[playerid][aIndex8][7] = fScaleY; attachInfo[playerid][aIndex8][8] = fScaleZ;
				save_player_accs(playerid, SAVE_INDEX_8);
			}
   /*case 9: {
				attachInfo[playerid][aIndex9][0] = fOffsetX; attachInfo[playerid][aIndex9][1] = fOffsetY; attachInfo[playerid][aIndex9][2] = fOffsetZ;
				attachInfo[playerid][aIndex9][3] = fRotX; attachInfo[playerid][aIndex9][4] = fRotY; attachInfo[playerid][aIndex9][5] = fRotZ;
				attachInfo[playerid][aIndex9][6] = fScaleX; attachInfo[playerid][aIndex9][7] = fScaleY; attachInfo[playerid][aIndex9][8] = fScaleZ;
				save_player_accs(playerid, SAVE_INDEX_9);
			}		*/
		}
        ao[playerid][index][ao_x] = fOffsetX;
        ao[playerid][index][ao_y] = fOffsetY;
        ao[playerid][index][ao_z] = fOffsetZ;
        ao[playerid][index][ao_rx] = fRotX;
        ao[playerid][index][ao_ry] = fRotY;
        ao[playerid][index][ao_rz] = fRotZ;
        ao[playerid][index][ao_sx] = fScaleX;
        ao[playerid][index][ao_sy] = fScaleY;
        ao[playerid][index][ao_sz] = fScaleZ;	
    }
    else
    {
        new i = index;
        SetPlayerAttachedObjectEx(playerid, index, modelid, boneid, ao[playerid][i][ao_x], ao[playerid][i][ao_y], ao[playerid][i][ao_z], ao[playerid][i][ao_rx], ao[playerid][i][ao_ry], ao[playerid][i][ao_rz], ao[playerid][i][ao_sx], ao[playerid][i][ao_sy], ao[playerid][i][ao_sz]);
    }
    return 1;
}


stock categoryName(type) {
	new string[32];
	switch(type) {
		case 0: string = "Hats";
		case 1: string = "Glasses";
		case 2: string = "Watches";
		case 3: string = "Lasers";
		case 4: string = "Hand items";
		case 5: string = "Masks & Gang Bandanas";
		case 6: string = "Back Items";
		//case 7: string = "Special Items";
	}
	return string;
}

update_accs(playerid) {
	new string[64],
		i = ObjectSlot[playerid][ObjectID[playerid]];

	if(objectInfo[i][objPremium] == 0) format(string, sizeof(string), "Price: ~g~$%s", FormatNumber(objectInfo[i][objMoney]));
	else if(objectInfo[i][objPremium] > 0 && objectInfo[i][objMoney] == 0) format(string, sizeof(string), "Price: ~p~%s PP", FormatNumber(objectInfo[i][objPremium]));
	else if(objectInfo[i][objPremium] > 0 && objectInfo[i][objMoney] > 0) format(string, sizeof(string), "Price: ~g~$%s~w~~h~ / ~p~%s PP", FormatNumber(objectInfo[i][objMoney]), FormatNumber(objectInfo[i][objPremium]));
	PlayerTextDrawSetString(playerid, AccsPTD[0], string);
	PlayerTextDrawShow(playerid, AccsPTD[0]);

	PlayerTextDrawSetPreviewModel(playerid, AccsPTD[1], objectInfo[i][objModel]);
	PlayerTextDrawShow(playerid, AccsPTD[1]);

	format(string, sizeof(string), "%d/%d", ObjectID[playerid]+1, count_objects(ObjectType[playerid]));
	PlayerTextDrawSetString(playerid, AccsPTD[2], string);
	PlayerTextDrawShow(playerid, AccsPTD[2]);

	SetPlayerAttachedObjectEx( playerid, ObjectType[playerid], objectInfo[i][objModel], objectInfo[i][objBone], objectInfo[i][objfOffsetX], objectInfo[i][objfOffsetY], objectInfo[i][objfOffsetZ], objectInfo[i][objfRotX], objectInfo[i][objfRotY], objectInfo[i][objfRotZ], objectInfo[i][objfScaleX], objectInfo[i][objfScaleY], objectInfo[i][objfScaleZ]);
	return 1;
}

select_type(playerid, type) {
	new x;
	for(new i = 0; i < MAX_AOBJECTS; i++) {
		if(objectInfo[i][objType] == type && objectInfo[i][objModel]) ObjectSlot[playerid][x] = i, x++;
	}
	ObjectType[playerid] = type;
	ObjectID[playerid] = 0;
	show_accs_tds(playerid);
	update_accs(playerid);
	return 1;
}


count_objects(type) {
	new x;
	for(new i = 0; i < MAX_AOBJECTS; i++) {
		if(objectInfo[i][objType] == type && objectInfo[i][objModel]) x++;
	}
	return x;
}

check_save(playerid) {
	new 
		query[128],
		Cache: result,
		test;
		
	format(query, sizeof(query), "SELECT * FROM `player_accessory` WHERE `UserID`='%d'", PlayerInfo[playerid][pSQLID]);
	result = mysql_query(SQL, query);
	test = cache_get_row_count();
	
    for(new i; i < MAX_PLAYER_ATTACHED_OBJECTS-1; i++) {
    	RemovePlayerAttachedObject(playerid, i);
    }

	if(test == 0) {
		format(query, sizeof(query), "INSERT INTO `player_accessory` (`UserID`) VALUES ('%d')", PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, query, "", "");		
		reset_player_accs(playerid);	
	}
	else 
	{
		new 
			var[80];

		cache_get_field_content(0, "Accessory", query); 
		format(var, sizeof(var), query);
		sscanf(var, "p<|>iiiiiiiiii", attachInfo[playerid][aModel][0], attachInfo[playerid][aModel][1], attachInfo[playerid][aModel][2], attachInfo[playerid][aModel][3], attachInfo[playerid][aModel][4], attachInfo[playerid][aModel][5],
		attachInfo[playerid][aModel][6], attachInfo[playerid][aModel][7], attachInfo[playerid][aModel][8], attachInfo[playerid][aModel][9]);

		cache_get_field_content(0, "Bone", query); 
		format(var, sizeof(var), query);
		sscanf(var, "p<|>iiiiiiiiii", attachInfo[playerid][aBone][0], attachInfo[playerid][aBone][1], attachInfo[playerid][aBone][2], attachInfo[playerid][aBone][3], attachInfo[playerid][aBone][4], attachInfo[playerid][aBone][5],
		attachInfo[playerid][aBone][6], attachInfo[playerid][aBone][7], attachInfo[playerid][aBone][8], attachInfo[playerid][aBone][9]);

		cache_get_field_content(0, "Status", query); 
		format(var, sizeof(var), query);
		sscanf(var, "p<|>iiiiiiiiii", attachInfo[playerid][aStatus][0], attachInfo[playerid][aStatus][1], attachInfo[playerid][aStatus][2], attachInfo[playerid][aStatus][3], attachInfo[playerid][aStatus][4], attachInfo[playerid][aStatus][5],
		attachInfo[playerid][aStatus][6], attachInfo[playerid][aStatus][7], attachInfo[playerid][aStatus][8], attachInfo[playerid][aStatus][9]);

		cache_get_field_content(0, "Index0", query); 
		format(var, sizeof(var), query);
		sscanf(var, "p<|>fffffffff", attachInfo[playerid][aIndex0][0], attachInfo[playerid][aIndex0][1], attachInfo[playerid][aIndex0][2], attachInfo[playerid][aIndex0][3], attachInfo[playerid][aIndex0][4], attachInfo[playerid][aIndex0][5], attachInfo[playerid][aIndex0][6], attachInfo[playerid][aIndex0][7], attachInfo[playerid][aIndex0][8]);

		cache_get_field_content(0, "Index1", query); 
		format(var, sizeof(var), query);
		sscanf(var, "p<|>fffffffff", attachInfo[playerid][aIndex1][0], attachInfo[playerid][aIndex1][1], attachInfo[playerid][aIndex1][2], attachInfo[playerid][aIndex1][3], attachInfo[playerid][aIndex1][4], attachInfo[playerid][aIndex1][5], attachInfo[playerid][aIndex1][6], attachInfo[playerid][aIndex1][7], attachInfo[playerid][aIndex1][8]);

		cache_get_field_content(0, "Index2", query); 
		format(var, sizeof(var), query);
		sscanf(var, "p<|>fffffffff", attachInfo[playerid][aIndex2][0], attachInfo[playerid][aIndex2][1], attachInfo[playerid][aIndex2][2], attachInfo[playerid][aIndex2][3], attachInfo[playerid][aIndex2][4], attachInfo[playerid][aIndex2][5], attachInfo[playerid][aIndex2][6], attachInfo[playerid][aIndex2][7], attachInfo[playerid][aIndex2][8]);

		cache_get_field_content(0, "Index3", query);  
		format(var, sizeof(var), query);
		sscanf(var, "p<|>fffffffff", attachInfo[playerid][aIndex3][0], attachInfo[playerid][aIndex3][1], attachInfo[playerid][aIndex3][2], attachInfo[playerid][aIndex3][3], attachInfo[playerid][aIndex3][4], attachInfo[playerid][aIndex3][5], attachInfo[playerid][aIndex3][6], attachInfo[playerid][aIndex3][7], attachInfo[playerid][aIndex3][8]);

		cache_get_field_content(0, "Index4", query); 
		format(var, sizeof(var), query);
		sscanf(var, "p<|>fffffffff", attachInfo[playerid][aIndex4][0], attachInfo[playerid][aIndex4][1], attachInfo[playerid][aIndex4][2], attachInfo[playerid][aIndex4][3], attachInfo[playerid][aIndex4][4], attachInfo[playerid][aIndex4][5], attachInfo[playerid][aIndex4][6], attachInfo[playerid][aIndex4][7], attachInfo[playerid][aIndex4][8]);

		cache_get_field_content(0, "Index5", query); 
		format(var, sizeof(var), query);
		sscanf(var, "p<|>fffffffff", attachInfo[playerid][aIndex5][0], attachInfo[playerid][aIndex5][1], attachInfo[playerid][aIndex5][2], attachInfo[playerid][aIndex5][3], attachInfo[playerid][aIndex5][4], attachInfo[playerid][aIndex5][5], attachInfo[playerid][aIndex5][6], attachInfo[playerid][aIndex5][7], attachInfo[playerid][aIndex5][8]);

		cache_get_field_content(0, "Index6", query);  
		format(var, sizeof(var), query);
		sscanf(var, "p<|>fffffffff", attachInfo[playerid][aIndex6][0], attachInfo[playerid][aIndex6][1], attachInfo[playerid][aIndex6][2], attachInfo[playerid][aIndex6][3], attachInfo[playerid][aIndex6][4], attachInfo[playerid][aIndex6][5], attachInfo[playerid][aIndex6][6], attachInfo[playerid][aIndex6][7], attachInfo[playerid][aIndex6][8]);

		cache_get_field_content(0, "Index7", query); 
		format(var, sizeof(var), query);
		sscanf(var, "p<|>fffffffff", attachInfo[playerid][aIndex7][0], attachInfo[playerid][aIndex7][1], attachInfo[playerid][aIndex7][2], attachInfo[playerid][aIndex7][3], attachInfo[playerid][aIndex7][4], attachInfo[playerid][aIndex7][5], attachInfo[playerid][aIndex7][6], attachInfo[playerid][aIndex7][7], attachInfo[playerid][aIndex7][8]);

		cache_get_field_content(0, "Index8", query);  
		format(var, sizeof(var), query);
		sscanf(var, "p<|>fffffffff", attachInfo[playerid][aIndex8][0], attachInfo[playerid][aIndex8][1], attachInfo[playerid][aIndex8][2], attachInfo[playerid][aIndex8][3], attachInfo[playerid][aIndex8][4], attachInfo[playerid][aIndex8][5], attachInfo[playerid][aIndex8][6], attachInfo[playerid][aIndex8][7], attachInfo[playerid][aIndex8][8]);

 	/*cache_get_field_content(0, "Index9", query);
		format(var, sizeof(var), query);
		sscanf(var, "p<|>fffffffff", attachInfo[playerid][aIndex9][0], attachInfo[playerid][aIndex9][1], attachInfo[playerid][aIndex9][2], attachInfo[playerid][aIndex9][3], attachInfo[playerid][aIndex9][4], attachInfo[playerid][aIndex9][5], attachInfo[playerid][aIndex9][6], attachInfo[playerid][aIndex9][7], attachInfo[playerid][aIndex9][8]);
		*/
		cache_delete(result);
	}								
	return 1;
}

function load_objects_accesory() {
	new Cache: db = mysql_query(SQL, "SELECT * FROM `objects_accesory`");
	new x, result[126];
 	for(new i, j = cache_get_row_count (); i != j; ++i) {
	    total_objects ++;
       	cache_get_field_content(i, "ID", result); x = strval(result), objectInfo[x][objID] = x;
		cache_get_field_content(i, "Model", result); objectInfo[x][objModel] = strval(result);
 		cache_get_field_content(i, "Type", result); objectInfo[x][objType] = strval(result);
 		cache_get_field_content(i, "Money", result); objectInfo[x][objMoney] = strval(result);
 		cache_get_field_content(i, "Premium", result); objectInfo[x][objPremium] = strval(result);
  		cache_get_field_content(i, "Bone", result); objectInfo[x][objBone] = strval(result);
   		objectInfo[x][objfOffsetX] = cache_get_field_content_float(i, "fOffsetX");
   		objectInfo[x][objfOffsetY] = cache_get_field_content_float(i, "fOffsetY");
   		objectInfo[x][objfOffsetZ] = cache_get_field_content_float(i, "fOffsetZ");
   		objectInfo[x][objfRotX] = cache_get_field_content_float(i, "fRotX");
   		objectInfo[x][objfRotY] = cache_get_field_content_float(i, "fRotY");
   		objectInfo[x][objfRotZ] = cache_get_field_content_float(i, "fRotZ");   	
   		objectInfo[x][objfScaleX] = cache_get_field_content_float(i, "fScaleX");
   		objectInfo[x][objfScaleY] = cache_get_field_content_float(i, "fScaleY");
   		objectInfo[x][objfScaleZ] = cache_get_field_content_float(i, "fScaleZ");	  			
	}
	printf("Accesory loaded: %d", total_objects);
	cache_delete(db);
	return 1;
}

buy_accs(playerid) {
	new 
		type = ObjectType[playerid],
		x = ObjectSlot[playerid][ObjectID[playerid]];

	attachInfo[playerid][aModel][type] = objectInfo[x][objModel];
	attachInfo[playerid][aStatus][type] = 0;
	attachInfo[playerid][aBone][type] = objectInfo[x][objBone];
	if(GetPVarInt(playerid, "Edited") == 0) {
		switch(type) {
			case 0: {
				attachInfo[playerid][aIndex0][0] = objectInfo[x][objfOffsetX]; attachInfo[playerid][aIndex0][1] = objectInfo[x][objfOffsetY]; attachInfo[playerid][aIndex0][2] = objectInfo[x][objfOffsetZ];
				attachInfo[playerid][aIndex0][3] = objectInfo[x][objfRotX]; attachInfo[playerid][aIndex0][4] = objectInfo[x][objfRotY]; attachInfo[playerid][aIndex0][5] = objectInfo[x][objfRotZ];
				attachInfo[playerid][aIndex0][6] = objectInfo[x][objfScaleX]; attachInfo[playerid][aIndex0][7] = objectInfo[x][objfScaleY]; attachInfo[playerid][aIndex0][8] = objectInfo[x][objfScaleZ];
				save_player_accs(playerid, SAVE_INDEX_0);
			}
			case 1: {
				attachInfo[playerid][aIndex1][0] = objectInfo[x][objfOffsetX]; attachInfo[playerid][aIndex1][1] = objectInfo[x][objfOffsetY]; attachInfo[playerid][aIndex1][2] = objectInfo[x][objfOffsetZ];
				attachInfo[playerid][aIndex1][3] = objectInfo[x][objfRotX]; attachInfo[playerid][aIndex1][4] = objectInfo[x][objfRotY]; attachInfo[playerid][aIndex1][5] = objectInfo[x][objfRotZ];
				attachInfo[playerid][aIndex1][6] = objectInfo[x][objfScaleX]; attachInfo[playerid][aIndex1][7] = objectInfo[x][objfScaleY]; attachInfo[playerid][aIndex1][8] = objectInfo[x][objfScaleZ];
				save_player_accs(playerid, SAVE_INDEX_1);
			}
			case 2: {
				attachInfo[playerid][aIndex2][0] = objectInfo[x][objfOffsetX]; attachInfo[playerid][aIndex2][1] = objectInfo[x][objfOffsetY]; attachInfo[playerid][aIndex2][2] = objectInfo[x][objfOffsetZ];
				attachInfo[playerid][aIndex2][3] = objectInfo[x][objfRotX]; attachInfo[playerid][aIndex2][4] = objectInfo[x][objfRotY]; attachInfo[playerid][aIndex2][5] = objectInfo[x][objfRotZ];
				attachInfo[playerid][aIndex2][6] = objectInfo[x][objfScaleX]; attachInfo[playerid][aIndex2][7] = objectInfo[x][objfScaleY]; attachInfo[playerid][aIndex2][8] = objectInfo[x][objfScaleZ];
				save_player_accs(playerid, SAVE_INDEX_2);
			}
			case 3: {
				attachInfo[playerid][aIndex3][0] = objectInfo[x][objfOffsetX]; attachInfo[playerid][aIndex3][1] = objectInfo[x][objfOffsetY]; attachInfo[playerid][aIndex3][2] = objectInfo[x][objfOffsetZ];
				attachInfo[playerid][aIndex3][3] = objectInfo[x][objfRotX]; attachInfo[playerid][aIndex3][4] = objectInfo[x][objfRotY]; attachInfo[playerid][aIndex3][5] = objectInfo[x][objfRotZ];
				attachInfo[playerid][aIndex3][6] = objectInfo[x][objfScaleX]; attachInfo[playerid][aIndex3][7] = objectInfo[x][objfScaleY]; attachInfo[playerid][aIndex3][8] = objectInfo[x][objfScaleZ];
				save_player_accs(playerid, SAVE_INDEX_3);
			}
			case 4: {
				attachInfo[playerid][aIndex4][0] = objectInfo[x][objfOffsetX]; attachInfo[playerid][aIndex4][1] = objectInfo[x][objfOffsetY]; attachInfo[playerid][aIndex4][2] = objectInfo[x][objfOffsetZ];
				attachInfo[playerid][aIndex4][3] = objectInfo[x][objfRotX]; attachInfo[playerid][aIndex4][4] = objectInfo[x][objfRotY]; attachInfo[playerid][aIndex4][5] = objectInfo[x][objfRotZ];
				attachInfo[playerid][aIndex4][6] = objectInfo[x][objfScaleX]; attachInfo[playerid][aIndex4][7] = objectInfo[x][objfScaleY]; attachInfo[playerid][aIndex4][8] = objectInfo[x][objfScaleZ];
				save_player_accs(playerid, SAVE_INDEX_4);
			}
			case 5: {
				attachInfo[playerid][aIndex5][0] = objectInfo[x][objfOffsetX]; attachInfo[playerid][aIndex5][1] = objectInfo[x][objfOffsetY]; attachInfo[playerid][aIndex5][2] = objectInfo[x][objfOffsetZ];
				attachInfo[playerid][aIndex5][3] = objectInfo[x][objfRotX]; attachInfo[playerid][aIndex5][4] = objectInfo[x][objfRotY]; attachInfo[playerid][aIndex5][5] = objectInfo[x][objfRotZ];
				attachInfo[playerid][aIndex5][6] = objectInfo[x][objfScaleX]; attachInfo[playerid][aIndex5][7] = objectInfo[x][objfScaleY]; attachInfo[playerid][aIndex5][8] = objectInfo[x][objfScaleZ];
				save_player_accs(playerid, SAVE_INDEX_5);
			}
			case 6: {
				attachInfo[playerid][aIndex6][0] = objectInfo[x][objfOffsetX]; attachInfo[playerid][aIndex6][1] = objectInfo[x][objfOffsetY]; attachInfo[playerid][aIndex6][2] = objectInfo[x][objfOffsetZ];
				attachInfo[playerid][aIndex6][3] = objectInfo[x][objfRotX]; attachInfo[playerid][aIndex6][4] = objectInfo[x][objfRotY]; attachInfo[playerid][aIndex6][5] = objectInfo[x][objfRotZ];
				attachInfo[playerid][aIndex6][6] = objectInfo[x][objfScaleX]; attachInfo[playerid][aIndex6][7] = objectInfo[x][objfScaleY]; attachInfo[playerid][aIndex6][8] = objectInfo[x][objfScaleZ];
				save_player_accs(playerid, SAVE_INDEX_6);
			}
			case 7: {
				attachInfo[playerid][aIndex7][0] = objectInfo[x][objfOffsetX]; attachInfo[playerid][aIndex7][1] = objectInfo[x][objfOffsetY]; attachInfo[playerid][aIndex7][2] = objectInfo[x][objfOffsetZ];
				attachInfo[playerid][aIndex7][3] = objectInfo[x][objfRotX]; attachInfo[playerid][aIndex7][4] = objectInfo[x][objfRotY]; attachInfo[playerid][aIndex7][5] = objectInfo[x][objfRotZ];
				attachInfo[playerid][aIndex7][6] = objectInfo[x][objfScaleX]; attachInfo[playerid][aIndex7][7] = objectInfo[x][objfScaleY]; attachInfo[playerid][aIndex7][8] = objectInfo[x][objfScaleZ];
				save_player_accs(playerid, SAVE_INDEX_7);
			}
			case 8: {
				attachInfo[playerid][aIndex8][0] = objectInfo[x][objfOffsetX]; attachInfo[playerid][aIndex8][1] = objectInfo[x][objfOffsetY]; attachInfo[playerid][aIndex8][2] = objectInfo[x][objfOffsetZ];
				attachInfo[playerid][aIndex8][3] = objectInfo[x][objfRotX]; attachInfo[playerid][aIndex8][4] = objectInfo[x][objfRotY]; attachInfo[playerid][aIndex8][5] = objectInfo[x][objfRotZ];
				attachInfo[playerid][aIndex8][6] = objectInfo[x][objfScaleX]; attachInfo[playerid][aIndex8][7] = objectInfo[x][objfScaleY]; attachInfo[playerid][aIndex8][8] = objectInfo[x][objfScaleZ];
				save_player_accs(playerid, SAVE_INDEX_8);
			}
   /*case 9: {
				attachInfo[playerid][aIndex9][0] = objectInfo[x][objfOffsetX]; attachInfo[playerid][aIndex9][1] = objectInfo[x][objfOffsetY]; attachInfo[playerid][aIndex9][2] = objectInfo[x][objfOffsetZ];
				attachInfo[playerid][aIndex9][3] = objectInfo[x][objfRotX]; attachInfo[playerid][aIndex9][4] = objectInfo[x][objfRotY]; attachInfo[playerid][aIndex9][5] = objectInfo[x][objfRotZ];
				attachInfo[playerid][aIndex9][6] = objectInfo[x][objfScaleX]; attachInfo[playerid][aIndex9][7] = objectInfo[x][objfScaleY]; attachInfo[playerid][aIndex9][8] = objectInfo[x][objfScaleZ];
				save_player_accs(playerid, SAVE_INDEX_9);
			}	*/
		}
	}

	save_player_accs(playerid, SAVE_ACCESORY);
	save_player_accs(playerid, SAVE_STATUS);		
	save_player_accs(playerid, SAVE_BONE);	
	return 1;
}

attach_objects(playerid) {
    for(new i; i < MAX_PLAYER_ATTACHED_OBJECTS-1; i++) RemovePlayerAttachedObject(playerid, i);
	if(attachInfo[playerid][aStatus][0] == 0 && attachInfo[playerid][aModel][0] != 0) SetPlayerAttachedObjectEx(playerid, 0, attachInfo[playerid][aModel][0], attachInfo[playerid][aBone][0], attachInfo[playerid][aIndex0][0], attachInfo[playerid][aIndex0][1], attachInfo[playerid][aIndex0][2], attachInfo[playerid][aIndex0][3], attachInfo[playerid][aIndex0][4], attachInfo[playerid][aIndex0][5], attachInfo[playerid][aIndex0][6], attachInfo[playerid][aIndex0][7], attachInfo[playerid][aIndex0][8]);
	if(attachInfo[playerid][aStatus][1] == 0 && attachInfo[playerid][aModel][1] != 0) SetPlayerAttachedObjectEx(playerid, 1, attachInfo[playerid][aModel][1], attachInfo[playerid][aBone][1], attachInfo[playerid][aIndex1][0], attachInfo[playerid][aIndex1][1], attachInfo[playerid][aIndex1][2], attachInfo[playerid][aIndex1][3], attachInfo[playerid][aIndex1][4], attachInfo[playerid][aIndex1][5], attachInfo[playerid][aIndex1][6], attachInfo[playerid][aIndex1][7], attachInfo[playerid][aIndex1][8]);
	if(attachInfo[playerid][aStatus][2] == 0 && attachInfo[playerid][aModel][2] != 0) SetPlayerAttachedObjectEx(playerid, 2, attachInfo[playerid][aModel][2], attachInfo[playerid][aBone][2], attachInfo[playerid][aIndex2][0], attachInfo[playerid][aIndex2][1], attachInfo[playerid][aIndex2][2], attachInfo[playerid][aIndex2][3], attachInfo[playerid][aIndex2][4], attachInfo[playerid][aIndex2][5], attachInfo[playerid][aIndex2][6], attachInfo[playerid][aIndex2][7], attachInfo[playerid][aIndex2][8]);
	if(attachInfo[playerid][aStatus][3] == 0 && attachInfo[playerid][aModel][3] != 0) SetPlayerAttachedObjectEx(playerid, 3, attachInfo[playerid][aModel][3], attachInfo[playerid][aBone][3], attachInfo[playerid][aIndex3][0], attachInfo[playerid][aIndex3][1], attachInfo[playerid][aIndex3][2], attachInfo[playerid][aIndex3][3], attachInfo[playerid][aIndex3][4], attachInfo[playerid][aIndex3][5], attachInfo[playerid][aIndex3][6], attachInfo[playerid][aIndex3][7], attachInfo[playerid][aIndex3][8]);
	if(attachInfo[playerid][aStatus][4] == 0 && attachInfo[playerid][aModel][4] != 0) SetPlayerAttachedObjectEx(playerid, 4, attachInfo[playerid][aModel][4], attachInfo[playerid][aBone][4], attachInfo[playerid][aIndex4][0], attachInfo[playerid][aIndex4][1], attachInfo[playerid][aIndex4][2], attachInfo[playerid][aIndex4][3], attachInfo[playerid][aIndex4][4], attachInfo[playerid][aIndex4][5], attachInfo[playerid][aIndex4][6], attachInfo[playerid][aIndex4][7], attachInfo[playerid][aIndex4][8]);
	if(attachInfo[playerid][aStatus][5] == 0 && attachInfo[playerid][aModel][5] != 0) SetPlayerAttachedObjectEx(playerid, 5, attachInfo[playerid][aModel][5], attachInfo[playerid][aBone][5], attachInfo[playerid][aIndex5][0], attachInfo[playerid][aIndex5][1], attachInfo[playerid][aIndex5][2], attachInfo[playerid][aIndex5][3], attachInfo[playerid][aIndex5][4], attachInfo[playerid][aIndex5][5], attachInfo[playerid][aIndex5][6], attachInfo[playerid][aIndex5][7], attachInfo[playerid][aIndex5][8]);
	if(attachInfo[playerid][aStatus][6] == 0 && attachInfo[playerid][aModel][6] != 0) SetPlayerAttachedObjectEx(playerid, 6, attachInfo[playerid][aModel][6], attachInfo[playerid][aBone][6], attachInfo[playerid][aIndex6][0], attachInfo[playerid][aIndex6][1], attachInfo[playerid][aIndex6][2], attachInfo[playerid][aIndex6][3], attachInfo[playerid][aIndex6][4], attachInfo[playerid][aIndex6][5], attachInfo[playerid][aIndex6][6], attachInfo[playerid][aIndex6][7], attachInfo[playerid][aIndex6][8]);
	if(attachInfo[playerid][aStatus][7] == 0 && attachInfo[playerid][aModel][7] != 0) SetPlayerAttachedObjectEx(playerid, 7, attachInfo[playerid][aModel][7], attachInfo[playerid][aBone][7], attachInfo[playerid][aIndex7][0], attachInfo[playerid][aIndex7][1], attachInfo[playerid][aIndex7][2], attachInfo[playerid][aIndex7][3], attachInfo[playerid][aIndex7][4], attachInfo[playerid][aIndex7][5], attachInfo[playerid][aIndex7][6], attachInfo[playerid][aIndex7][7], attachInfo[playerid][aIndex7][8]);
	if(attachInfo[playerid][aStatus][8] == 0 && attachInfo[playerid][aModel][8] != 0) SetPlayerAttachedObjectEx(playerid, 8, attachInfo[playerid][aModel][8], attachInfo[playerid][aBone][8], attachInfo[playerid][aIndex8][0], attachInfo[playerid][aIndex8][1], attachInfo[playerid][aIndex8][2], attachInfo[playerid][aIndex8][3], attachInfo[playerid][aIndex8][4], attachInfo[playerid][aIndex8][5], attachInfo[playerid][aIndex8][6], attachInfo[playerid][aIndex8][7], attachInfo[playerid][aIndex8][8]);
 //if(attachInfo[playerid][aStatus][9] == 0 && attachInfo[playerid][aModel][9] != 0) SetPlayerAttachedObjectEx(playerid, 9, attachInfo[playerid][aModel][9], attachInfo[playerid][aBone][9], attachInfo[playerid][aIndex9][0], attachInfo[playerid][aIndex9][1], attachInfo[playerid][aIndex9][2], attachInfo[playerid][aIndex9][3], attachInfo[playerid][aIndex9][4], attachInfo[playerid][aIndex9][5], attachInfo[playerid][aIndex9][6], attachInfo[playerid][aIndex9][7], attachInfo[playerid][aIndex9][8]);
	return 1;
}

reset_player_accs(playerid) {
	for(new i = 0; i < 6; i++) {
		attachInfo[playerid][aIndex0][i] = 0;
		attachInfo[playerid][aIndex1][i] = 0;
		attachInfo[playerid][aIndex2][i] = 0;
		attachInfo[playerid][aIndex3][i] = 0;
		attachInfo[playerid][aIndex4][i] = 0;
		attachInfo[playerid][aIndex5][i] = 0;
		attachInfo[playerid][aIndex6][i] = 0;
		attachInfo[playerid][aIndex7][i] = 0;
		attachInfo[playerid][aIndex8][i] = 0;
		//attachInfo[playerid][aIndex9][i] = 0;
	}	
    for(new i; i < MAX_PLAYER_ATTACHED_OBJECTS-1; i++) {
    	RemovePlayerAttachedObject(playerid, i);
    	attachInfo[playerid][aModel][i] = 0, attachInfo[playerid][aBone][i] = 0, attachInfo[playerid][aStatus][i] = 0;
    }
    for(new i = 0; i < 13; i++) save_player_accs(playerid, i);     	
	return 1;
}


save_player_accs(playerid, type) {
	new 
		query[256];

	switch(type) {	
		case SAVE_ACCESORY: {
			mysql_format(SQL, query, sizeof(query), "UPDATE `player_accessory` SET `Accessory` = '%d|%d|%d|%d|%d|%d|%d|%d|%d|%d' WHERE `UserID` = %d", attachInfo[playerid][aModel][0], attachInfo[playerid][aModel][1], attachInfo[playerid][aModel][2], attachInfo[playerid][aModel][3], attachInfo[playerid][aModel][4], attachInfo[playerid][aModel][5],
			attachInfo[playerid][aModel][6], attachInfo[playerid][aModel][7], attachInfo[playerid][aModel][8], attachInfo[playerid][aModel][9], PlayerInfo[playerid][pSQLID]);
		}
		case SAVE_BONE: {
			mysql_format(SQL, query, sizeof(query), "UPDATE `player_accessory` SET `Bone` = '%d|%d|%d|%d|%d|%d|%d|%d|%d|%d' WHERE `UserID` = %d", attachInfo[playerid][aBone][0], attachInfo[playerid][aBone][1], attachInfo[playerid][aBone][2], attachInfo[playerid][aBone][3], attachInfo[playerid][aBone][4], attachInfo[playerid][aBone][5],
			attachInfo[playerid][aBone][6], attachInfo[playerid][aBone][7], attachInfo[playerid][aBone][8], attachInfo[playerid][aBone][9], PlayerInfo[playerid][pSQLID]);
		}		
		case SAVE_STATUS: {
			mysql_format(SQL, query, sizeof(query), "UPDATE `player_accessory` SET `Status` = '%d|%d|%d|%d|%d|%d|%d|%d|%d|%d' WHERE `UserID` = %d", attachInfo[playerid][aStatus][0], attachInfo[playerid][aStatus][1], attachInfo[playerid][aStatus][2], attachInfo[playerid][aStatus][3], attachInfo[playerid][aStatus][4], attachInfo[playerid][aStatus][5],
			attachInfo[playerid][aStatus][6], attachInfo[playerid][aStatus][7], attachInfo[playerid][aStatus][8], attachInfo[playerid][aStatus][9], PlayerInfo[playerid][pSQLID]);	
		}
		case SAVE_INDEX_0: {
			mysql_format(SQL, query, sizeof(query), "UPDATE `player_accessory` SET `Index0` = '%f|%f|%f|%f|%f|%f|%f|%f|%f' WHERE `UserID` = %d", attachInfo[playerid][aIndex0][0], attachInfo[playerid][aIndex0][1], attachInfo[playerid][aIndex0][2], attachInfo[playerid][aIndex0][3], attachInfo[playerid][aIndex0][4], 
			attachInfo[playerid][aIndex0][5], attachInfo[playerid][aIndex0][6], attachInfo[playerid][aIndex0][7], attachInfo[playerid][aIndex0][8], PlayerInfo[playerid][pSQLID]);	
		}
		case SAVE_INDEX_1: {
			mysql_format(SQL, query, sizeof(query), "UPDATE `player_accessory` SET `Index1` = '%f|%f|%f|%f|%f|%f|%f|%f|%f' WHERE `UserID` = %d", attachInfo[playerid][aIndex1][0], attachInfo[playerid][aIndex1][1], attachInfo[playerid][aIndex1][2], attachInfo[playerid][aIndex1][3], attachInfo[playerid][aIndex1][4], 
			attachInfo[playerid][aIndex1][5], attachInfo[playerid][aIndex1][6], attachInfo[playerid][aIndex1][7], attachInfo[playerid][aIndex1][8], PlayerInfo[playerid][pSQLID]);	
		}
		case SAVE_INDEX_2: {
			mysql_format(SQL, query, sizeof(query), "UPDATE `player_accessory` SET `Index2` = '%f|%f|%f|%f|%f|%f|%f|%f|%f' WHERE `UserID` = %d", attachInfo[playerid][aIndex2][0], attachInfo[playerid][aIndex2][1], attachInfo[playerid][aIndex2][2], attachInfo[playerid][aIndex2][3], attachInfo[playerid][aIndex2][4], 
			attachInfo[playerid][aIndex2][5], attachInfo[playerid][aIndex2][6], attachInfo[playerid][aIndex2][7], attachInfo[playerid][aIndex2][8], PlayerInfo[playerid][pSQLID]);	
		}
		case SAVE_INDEX_3: {
			mysql_format(SQL, query, sizeof(query), "UPDATE `player_accessory` SET `Index3` = '%f|%f|%f|%f|%f|%f|%f|%f|%f' WHERE `UserID` = %d", attachInfo[playerid][aIndex3][0], attachInfo[playerid][aIndex3][1], attachInfo[playerid][aIndex3][2], attachInfo[playerid][aIndex3][3], attachInfo[playerid][aIndex3][4], 
			attachInfo[playerid][aIndex3][5], attachInfo[playerid][aIndex3][6], attachInfo[playerid][aIndex3][7], attachInfo[playerid][aIndex3][8], PlayerInfo[playerid][pSQLID]);	
		}
		case SAVE_INDEX_4: {
			mysql_format(SQL, query, sizeof(query), "UPDATE `player_accessory` SET `Index4` = '%f|%f|%f|%f|%f|%f|%f|%f|%f' WHERE `UserID` = %d", attachInfo[playerid][aIndex4][0], attachInfo[playerid][aIndex4][1], attachInfo[playerid][aIndex4][2], attachInfo[playerid][aIndex4][3], attachInfo[playerid][aIndex4][4], 
			attachInfo[playerid][aIndex4][5], attachInfo[playerid][aIndex4][6], attachInfo[playerid][aIndex4][7], attachInfo[playerid][aIndex4][8], PlayerInfo[playerid][pSQLID]);	
		}
		case SAVE_INDEX_5: {
			mysql_format(SQL, query, sizeof(query), "UPDATE `player_accessory` SET `Index5` = '%f|%f|%f|%f|%f|%f|%f|%f|%f' WHERE `UserID` = %d", attachInfo[playerid][aIndex5][0], attachInfo[playerid][aIndex5][1], attachInfo[playerid][aIndex5][2], attachInfo[playerid][aIndex5][3], attachInfo[playerid][aIndex5][4], 
			attachInfo[playerid][aIndex5][5], attachInfo[playerid][aIndex5][6], attachInfo[playerid][aIndex5][7], attachInfo[playerid][aIndex5][8], PlayerInfo[playerid][pSQLID]);	
		}
		case SAVE_INDEX_6: {
			mysql_format(SQL, query, sizeof(query), "UPDATE `player_accessory` SET `Index6` = '%f|%f|%f|%f|%f|%f|%f|%f|%f' WHERE `UserID` = %d", attachInfo[playerid][aIndex6][0], attachInfo[playerid][aIndex6][1], attachInfo[playerid][aIndex6][2], attachInfo[playerid][aIndex6][3], attachInfo[playerid][aIndex6][4], 
			attachInfo[playerid][aIndex6][5], attachInfo[playerid][aIndex6][6], attachInfo[playerid][aIndex6][7], attachInfo[playerid][aIndex6][8], PlayerInfo[playerid][pSQLID]);	
		}
		case SAVE_INDEX_7: {
			mysql_format(SQL, query, sizeof(query), "UPDATE `player_accessory` SET `Index7` = '%f|%f|%f|%f|%f|%f|%f|%f|%f' WHERE `UserID` = %d", attachInfo[playerid][aIndex7][0], attachInfo[playerid][aIndex7][1], attachInfo[playerid][aIndex7][2], attachInfo[playerid][aIndex7][3], attachInfo[playerid][aIndex7][4], 
			attachInfo[playerid][aIndex7][5], attachInfo[playerid][aIndex7][6], attachInfo[playerid][aIndex7][7], attachInfo[playerid][aIndex7][8], PlayerInfo[playerid][pSQLID]);	
		}
		case SAVE_INDEX_8: {
			mysql_format(SQL, query, sizeof(query), "UPDATE `player_accessory` SET `Index8` = '%f|%f|%f|%f|%f|%f|%f|%f|%f' WHERE `UserID` = %d", attachInfo[playerid][aIndex8][0], attachInfo[playerid][aIndex8][1], attachInfo[playerid][aIndex8][2], attachInfo[playerid][aIndex8][3], attachInfo[playerid][aIndex8][4], 
			attachInfo[playerid][aIndex8][5], attachInfo[playerid][aIndex8][6], attachInfo[playerid][aIndex8][7], attachInfo[playerid][aIndex8][8], PlayerInfo[playerid][pSQLID]);
  }
		/*case SAVE_INDEX_9: {
			mysql_format(SQL, query, sizeof(query), "UPDATE `player_accessory` SET `Index9` = '%f|%f|%f|%f|%f|%f|%f|%f|%f' WHERE `UserID` = %d", attachInfo[playerid][aIndex9][0], attachInfo[playerid][aIndex9][1], attachInfo[playerid][aIndex9][2], attachInfo[playerid][aIndex9][3], attachInfo[playerid][aIndex9][4],
			attachInfo[playerid][aIndex9][5], attachInfo[playerid][aIndex9][6], attachInfo[playerid][aIndex9][7], attachInfo[playerid][aIndex9][8], PlayerInfo[playerid][pSQLID]);
		}*/
	}
	mysql_tquery(SQL, query, "", "");		
	return 1;
}

show_accs_tds(playerid) {
	for(new i = 0; i < sizeof(AccsTD); i++) TextDrawShowForPlayer(playerid, AccsTD[i]);
	for(new i = 0; i < sizeof(AccsPTD); i++) PlayerTextDrawShow(playerid, AccsPTD[i]);	
	SelectTextDraw(playerid, 0xFFFFFF50);	
	return 1;
}

hide_accs_tds(playerid) {
	for(new i = 0; i < sizeof(AccsTD); i++) TextDrawHideForPlayer(playerid, AccsTD[i]);
	for(new i = 0; i < sizeof(AccsPTD); i++) PlayerTextDrawHide(playerid, AccsPTD[i]);		
	return 1;
}

load_accs_td() {
	AccsTD[0] = TextDrawCreate(38.333320, 165.940734, "box");
	TextDrawLetterSize(AccsTD[0], 0.000000, 18.833332);
	TextDrawTextSize(AccsTD[0], 157.000000, 0.000000);
	TextDrawAlignment(AccsTD[0], 1);
	TextDrawColor(AccsTD[0], -1);
	TextDrawUseBox(AccsTD[0], 1);
	TextDrawBoxColor(AccsTD[0], 141);
	TextDrawSetShadow(AccsTD[0], 0);
	TextDrawSetOutline(AccsTD[0], 0);
	TextDrawBackgroundColor(AccsTD[0], 255);
	TextDrawFont(AccsTD[0], 1);
	TextDrawSetProportional(AccsTD[0], 1);
	TextDrawSetShadow(AccsTD[0], 0);

	AccsTD[1] = TextDrawCreate(38.500057, 338.518524, "box");
	TextDrawLetterSize(AccsTD[1], 0.000000, -0.133337);
	TextDrawTextSize(AccsTD[1], 156.899993, 0.000000);
	TextDrawAlignment(AccsTD[1], 1);
	TextDrawColor(AccsTD[1], -1);
	TextDrawUseBox(AccsTD[1], 1);
	TextDrawBoxColor(AccsTD[1], 882572287);
	TextDrawSetShadow(AccsTD[1], 0);
	TextDrawSetOutline(AccsTD[1], 0);
	TextDrawBackgroundColor(AccsTD[1], 255);
	TextDrawFont(AccsTD[1], 1);
	TextDrawSetProportional(AccsTD[1], 1);
	TextDrawSetShadow(AccsTD[1], 0);

	AccsTD[2] = TextDrawCreate(38.366718, 166.370361, "box");
	TextDrawLetterSize(AccsTD[2], 0.000000, 6.066660);
	TextDrawTextSize(AccsTD[2], 157.000000, 0.000000);
	TextDrawAlignment(AccsTD[2], 1);
	TextDrawColor(AccsTD[2], -1);
	TextDrawUseBox(AccsTD[2], 1);
	TextDrawBoxColor(AccsTD[2], 882572074);
	TextDrawSetShadow(AccsTD[2], 0);
	TextDrawSetOutline(AccsTD[2], 0);
	TextDrawBackgroundColor(AccsTD[2], 255);
	TextDrawFont(AccsTD[2], 1);
	TextDrawSetProportional(AccsTD[2], 1);
	TextDrawSetShadow(AccsTD[2], 0);

	AccsTD[3] = TextDrawCreate(38.366741, 164.296264, "box");
	TextDrawLetterSize(AccsTD[3], 0.000000, -0.066670);
	TextDrawTextSize(AccsTD[3], 157.000000, 0.000000);
	TextDrawAlignment(AccsTD[3], 1);
	TextDrawColor(AccsTD[3], -1);
	TextDrawUseBox(AccsTD[3], 1);
	TextDrawBoxColor(AccsTD[3], 882572287);
	TextDrawSetShadow(AccsTD[3], 0);
	TextDrawSetOutline(AccsTD[3], 0);
	TextDrawBackgroundColor(AccsTD[3], 255);
	TextDrawFont(AccsTD[3], 1);
	TextDrawSetProportional(AccsTD[3], 1);
	TextDrawSetShadow(AccsTD[3], 0);

	AccsTD[4] = TextDrawCreate(71.333236, 260.103607, "BUY");
	TextDrawLetterSize(AccsTD[4], 0.209333, 1.131258);
	TextDrawTextSize(AccsTD[4], 10.000000, 42.000000);
	TextDrawAlignment(AccsTD[4], 2);
	TextDrawColor(AccsTD[4], -1);
	TextDrawUseBox(AccsTD[4], 1);
	TextDrawBoxColor(AccsTD[4], 882572099);
	TextDrawSetShadow(AccsTD[4], 1);
	TextDrawSetOutline(AccsTD[4], 0);
	TextDrawBackgroundColor(AccsTD[4], 28);
	TextDrawFont(AccsTD[4], 2);
	TextDrawSetProportional(AccsTD[4], 1);
	TextDrawSetShadow(AccsTD[4], 1);
	TextDrawSetSelectable(AccsTD[4], true);

	AccsTD[5] = TextDrawCreate(122.599914, 260.103607, "Cancel");
	TextDrawLetterSize(AccsTD[5], 0.209333, 1.131258);
	TextDrawTextSize(AccsTD[5], 10.000000, 42.000000);
	TextDrawAlignment(AccsTD[5], 2);
	TextDrawColor(AccsTD[5], -1);
	TextDrawUseBox(AccsTD[5], 1);
	TextDrawBoxColor(AccsTD[5], 882572099);
	TextDrawSetShadow(AccsTD[5], 1);
	TextDrawSetOutline(AccsTD[5], 0);
	TextDrawBackgroundColor(AccsTD[5], 28);
	TextDrawFont(AccsTD[5], 2);
	TextDrawSetProportional(AccsTD[5], 1);
	TextDrawSetShadow(AccsTD[5], 1);
	TextDrawSetSelectable(AccsTD[5], true);

	AccsTD[6] = TextDrawCreate(74.666702, 306.562927, "RESET");
	TextDrawLetterSize(AccsTD[6], 0.353666, 1.865481);
	TextDrawTextSize(AccsTD[6], 105.000000, 52.000000);
	TextDrawAlignment(AccsTD[6], 1);
	TextDrawColor(AccsTD[6], -1);
	TextDrawSetShadow(AccsTD[6], 1);
	TextDrawSetOutline(AccsTD[6], 0);
	TextDrawBackgroundColor(AccsTD[6], 255);
	TextDrawFont(AccsTD[6], 2);
	TextDrawSetProportional(AccsTD[6], 1);
	TextDrawSetShadow(AccsTD[6], 1);
	TextDrawSetSelectable(AccsTD[6], true);

	AccsTD[7] = TextDrawCreate(55.000022, 307.507324, "<");
	TextDrawLetterSize(AccsTD[7], 0.353666, 1.865481);
	TextDrawTextSize(AccsTD[7], 66.000000, 20.000000);
	TextDrawAlignment(AccsTD[7], 1);
	TextDrawColor(AccsTD[7], -1);
	TextDrawBoxColor(AccsTD[7], 255);
	TextDrawSetShadow(AccsTD[7], 1);
	TextDrawSetOutline(AccsTD[7], 0);
	TextDrawBackgroundColor(AccsTD[7], 255);
	TextDrawFont(AccsTD[7], 2);
	TextDrawSetProportional(AccsTD[7], 1);
	TextDrawSetShadow(AccsTD[7], 1);
	TextDrawSetSelectable(AccsTD[7], true);

	AccsTD[8] = TextDrawCreate(130.666748, 307.392547, ">");
	TextDrawLetterSize(AccsTD[8], 0.353666, 1.865481);
	TextDrawTextSize(AccsTD[8], 140.000000, 20.000000);
	TextDrawAlignment(AccsTD[8], 1);
	TextDrawColor(AccsTD[8], -1);
	TextDrawBoxColor(AccsTD[8], 255);
	TextDrawSetShadow(AccsTD[8], 1);
	TextDrawSetOutline(AccsTD[8], 0);
	TextDrawBackgroundColor(AccsTD[8], 255);
	TextDrawFont(AccsTD[8], 2);
	TextDrawSetProportional(AccsTD[8], 1);
	TextDrawSetShadow(AccsTD[8], 1);
	TextDrawSetSelectable(AccsTD[8], true);

	AccsTD[9] = TextDrawCreate(38.433361, 299.925842, "box");
	TextDrawLetterSize(AccsTD[9], 0.000000, -0.300000);
	TextDrawTextSize(AccsTD[9], 157.000000, 0.000000);
	TextDrawAlignment(AccsTD[9], 1);
	TextDrawColor(AccsTD[9], -1);
	TextDrawUseBox(AccsTD[9], 1);
	TextDrawBoxColor(AccsTD[9], 121);
	TextDrawSetShadow(AccsTD[9], 0);
	TextDrawSetOutline(AccsTD[9], 0);
	TextDrawBackgroundColor(AccsTD[9], 255);
	TextDrawFont(AccsTD[9], 1);
	TextDrawSetProportional(AccsTD[9], 1);
	TextDrawSetShadow(AccsTD[9], 0);

	AccsTD[10] = TextDrawCreate(56.333347, 185.136886, "<");
	TextDrawLetterSize(AccsTD[10], 0.353666, 1.865481);
	TextDrawTextSize(AccsTD[10], 67.000000, 10.000000);
	TextDrawAlignment(AccsTD[10], 1);
	TextDrawColor(AccsTD[10], -1);
	TextDrawBoxColor(AccsTD[10], 255);
	TextDrawSetShadow(AccsTD[10], 1);
	TextDrawSetOutline(AccsTD[10], 0);
	TextDrawBackgroundColor(AccsTD[10], 255);
	TextDrawFont(AccsTD[10], 2);
	TextDrawSetProportional(AccsTD[10], 1);
	TextDrawSetShadow(AccsTD[10], 1);
	TextDrawSetSelectable(AccsTD[10], true);

	AccsTD[11] = TextDrawCreate(127.666679, 184.307250, ">");
	TextDrawLetterSize(AccsTD[11], 0.353666, 1.865481);
	TextDrawTextSize(AccsTD[11], 137.000000, 10.000000);
	TextDrawAlignment(AccsTD[11], 1);
	TextDrawColor(AccsTD[11], -1);
	TextDrawBoxColor(AccsTD[11], 255);
	TextDrawSetShadow(AccsTD[11], 1);
	TextDrawSetOutline(AccsTD[11], 0);
	TextDrawBackgroundColor(AccsTD[11], 255);
	TextDrawFont(AccsTD[11], 2);
	TextDrawSetProportional(AccsTD[11], 1);
	TextDrawSetShadow(AccsTD[11], 1);
	TextDrawSetSelectable(AccsTD[11], true);

	AccsTD[12] = TextDrawCreate(97.933235, 277.525878, "Edit");
	TextDrawLetterSize(AccsTD[12], 0.209333, 1.131258);
	TextDrawTextSize(AccsTD[12], 10.000000, 42.000000);
	TextDrawAlignment(AccsTD[12], 2);
	TextDrawColor(AccsTD[12], -1);
	TextDrawUseBox(AccsTD[12], 1);
	TextDrawBoxColor(AccsTD[12], 882572099);
	TextDrawSetShadow(AccsTD[12], 1);
	TextDrawSetOutline(AccsTD[12], 0);
	TextDrawBackgroundColor(AccsTD[12], 28);
	TextDrawFont(AccsTD[12], 2);
	TextDrawSetProportional(AccsTD[12], 1);
	TextDrawSetShadow(AccsTD[12], 1);
	TextDrawSetSelectable(AccsTD[12], true);
	return 1;
}

load_accs_ptd(playerid) {
	AccsPTD[0] = CreatePlayerTextDraw(playerid, 95.999977, 238.118499, "Price: ~g~$10.000");
	PlayerTextDrawLetterSize(playerid, AccsPTD[0], 0.207332, 1.168593);
	PlayerTextDrawAlignment(playerid, AccsPTD[0], 2);
	PlayerTextDrawColor(playerid, AccsPTD[0], -1);
	PlayerTextDrawSetShadow(playerid, AccsPTD[0], 1);
	PlayerTextDrawSetOutline(playerid, AccsPTD[0], 0);
	PlayerTextDrawBackgroundColor(playerid, AccsPTD[0], 255);
	PlayerTextDrawFont(playerid, AccsPTD[0], 2);
	PlayerTextDrawSetProportional(playerid, AccsPTD[0], 1);
	PlayerTextDrawSetShadow(playerid, AccsPTD[0], 1);

	AccsPTD[1] = CreatePlayerTextDraw(playerid, 50.999996, 147.533325, "");
	PlayerTextDrawLetterSize(playerid, AccsPTD[1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, AccsPTD[1], 90.000000, 90.000000);
	PlayerTextDrawAlignment(playerid, AccsPTD[1], 1);
	PlayerTextDrawColor(playerid, AccsPTD[1], -1);
	PlayerTextDrawSetShadow(playerid, AccsPTD[1], 0);
	PlayerTextDrawSetOutline(playerid, AccsPTD[1], 0);
	PlayerTextDrawBackgroundColor(playerid, AccsPTD[1], 0);
	PlayerTextDrawFont(playerid, AccsPTD[1], 5);
	PlayerTextDrawSetProportional(playerid, AccsPTD[1], 0);
	PlayerTextDrawSetShadow(playerid, AccsPTD[1], 0);
	PlayerTextDrawSetPreviewModel(playerid, AccsPTD[1], 18951);
	PlayerTextDrawSetPreviewRot(playerid, AccsPTD[1], 163.000000, 253.000000, 181.000000, 1.204378);

	AccsPTD[2] = CreatePlayerTextDraw(playerid, 156.333389, 164.696228, "1/41");
	PlayerTextDrawLetterSize(playerid, AccsPTD[2], 0.202333, 1.326221);
	PlayerTextDrawAlignment(playerid, AccsPTD[2], 3);
	PlayerTextDrawColor(playerid, AccsPTD[2], -1);
	PlayerTextDrawSetShadow(playerid, AccsPTD[2], 1);
	PlayerTextDrawSetOutline(playerid, AccsPTD[2], 0);
	PlayerTextDrawBackgroundColor(playerid, AccsPTD[2], 255);
	PlayerTextDrawFont(playerid, AccsPTD[2], 2);
	PlayerTextDrawSetProportional(playerid, AccsPTD[2], 1);
	PlayerTextDrawSetShadow(playerid, AccsPTD[2], 1);
	return 1;
}


exit_accs(playerid) {
	hide_accs_tds(playerid);
	SetPVarInt(playerid, "accs", 0);
	CancelSelectTextDraw(playerid);
	check_save(playerid);
	return 1;
}

show_accs_dialog(playerid) {
	new string[128];
	format(string, sizeof(string), "Category\tAvailable\nHats\t%d\nGlasses\t%d\nWatches\t%d\nLasers\t%d\nHand Items\t%d\nMasks & Gang Bandanas\t%d\nBack Items\t%d", 
	count_objects(0), count_objects(1), count_objects(2), count_objects(3), count_objects(4), count_objects(5), count_objects(6));
	ShowPlayerDialog(playerid, DIALOG_ACCS, DIALOG_STYLE_TABLIST_HEADERS, "SERVER: Clothes", string, "Select", "Cancel");
}

forward Float:GetDistanceBetweenPlayers(p1,p2);
public Float:GetDistanceBetweenPlayers(p1,p2)
{
	new	Float:x1,
		Float:y1,
		Float:z1,
		Float:x2,
		Float:y2,
		Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

strtok(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

stock IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key))
	return 1;

	return 0;
}

stock Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2)
{
    return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

stock GetClosestVehicle2(playerid, Float:dis)
{
	new Float:X,
		Float:Y,
		Float:Z;
	if(GetPlayerPos(playerid, X, Y, Z))
	{
		new vehicleid = INVALID_VEHICLE_ID;
		for(new v, Float:temp, Float:VX, Float:VY, Float:VZ; v != MAX_VEHICLES; v++)
		{
			if(GetVehiclePos(v, VX, VY, VZ))
			{
				VX -= X, VY -= Y, VZ -= Z;
				temp = VX * VX + VY * VY + VZ * VZ;
				if(temp < dis) dis = temp, vehicleid = v;
			}
		}
		dis = floatpower(dis, 0.5);
		return vehicleid;
	}
	return INVALID_VEHICLE_ID;
}

stock IsSeatTaken(vehicleid, seatid)
{
    for(new i; i < MAX_PLAYERS; i++)
    {
        if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == seatid) return 1;
    }
    return 0;
}

stock IsVehicleInRangeOfPoint(vehicleid, Float: radius, Float:x, Float:y, Float:z) {

	new Float:Floats[6];

	GetVehiclePos(vehicleid, Floats[0], Floats[1], Floats[2]);
	Floats[3] = (Floats[0] -x);
	Floats[4] = (Floats[1] -y);
	Floats[5] = (Floats[2] -z);
	if(((Floats[3] < radius) && (Floats[3] > -radius)) && ((Floats[4] < radius) && (Floats[4] > -radius)) && ((Floats[5] < radius) && (Floats[5] > -radius)))
		return 1;
	return 0;
}

stock Float:GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
    new Float:a;
    GetPlayerPos(playerid, x, y, a);
    if(IsPlayerInAnyVehicle(playerid))
        GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    else
        GetPlayerFacingAngle(playerid, a);
    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
    return a;
}

// MAIN
main()
{
	new Year, Month, Day, Hour, Minute, Second, strgm[128];
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);
	format(strgm, sizeof(strgm), "%02d.%02d.%d %02d:%02d:%02d", Day, Month, Year, Hour, Minute, Second);
	format(strgm, sizeof strgm, "bluffs, %s", strgm);

	printf("** %s script loaded, running version %s",SERVER_NAME, strgm);
	print("----------------------------------------------------");
}


public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if(clickedid == AccsTD[4]) {
		new 
			string[128], string2[128],
			id = ObjectSlot[playerid][ObjectID[playerid]];

		strcat(string, "Payment\tAmount\n");
		if(objectInfo[id][objPremium] != 0) format(string2, sizeof(string2), "Premium points\t %s\n", FormatNumber(objectInfo[id][objPremium])), strcat(string, string2);
		
		if(objectInfo[id][objMoney] != 0) format(string2, sizeof(string2), "Money\t $%s", FormatNumber(objectInfo[id][objMoney])), strcat(string, string2), strcat(string, string2);
			
	    ShowPlayerDialog(playerid, DIALOG_BUY_ACCS, DIALOG_STYLE_TABLIST_HEADERS, "SERVER: Buy accesories", string, "Select", "Cancel");				
	}

	if(clickedid == AccsTD[5]) show_accs_dialog(playerid);

	if(clickedid == AccsTD[6]) {
		SetPlayerFacingAngle(playerid, 266.7052);
	}
	if(clickedid == AccsTD[7]) {
		new Float: Angle;
		GetPlayerFacingAngle(playerid, Angle);
		SetPlayerFacingAngle(playerid, Angle-10);
	}
	if(clickedid == AccsTD[8]) {
		new Float: Angle;
		GetPlayerFacingAngle(playerid, Angle);
		SetPlayerFacingAngle(playerid, Angle+10);
	}

	if(clickedid == AccsTD[10]) {
		if(ObjectID[playerid] == 0) return 1;
		SetPVarInt(playerid, "Edited", 0);
		ObjectID[playerid] --;
		update_accs(playerid);
	}
	if(clickedid == AccsTD[11]) {
		if(ObjectID[playerid] == count_objects(ObjectType[playerid])-1) return 1;
		SetPVarInt(playerid, "Edited", 0);
		ObjectID[playerid] ++;
		update_accs(playerid);
	}	

	if(clickedid == AccsTD[12]) EditAttachedObject(playerid, ObjectType[playerid]);

	if(clickedid == Text:CasinoDraw[12])
	{
		if(RouletteStatus == 1 || betsumma[playerid] != 0) return SendClientMessage(playerid, COLOR_ERROR,"(Error){FFFFFF} You already placed a bet.");
		if(zmidialog[playerid] == 1) return true;
		ShowPlayerDialog(playerid, 5551, DIALOG_STYLE_INPUT, "Enter a bet:","Enter the bet amount (1000$-500.000$):", "OK", "Cancel");
	} // RED
	if(clickedid == Text:CasinoDraw[13])
	{
		if(RouletteStatus == 1 || betsumma[playerid] != 0) return SendClientMessage(playerid, COLOR_ERROR,"(Error){FFFFFF} You already placed a bet.");
		if(zmidialog[playerid] == 1) return true;
		ShowPlayerDialog(playerid, 5552, DIALOG_STYLE_INPUT, "Enter a bet:","Enter the bet amount (1000$-500.000$):", "OK", "Cancel");
	} // GREEN
	if(clickedid == Text:CasinoDraw[14])
	{
		if(RouletteStatus == 1 || betsumma[playerid] != 0) return SendClientMessage(playerid, COLOR_ERROR,"(Error){FFFFFF} You already placed a bet.");
		if(zmidialog[playerid] == 1) return true;
		ShowPlayerDialog(playerid, 5553, DIALOG_STYLE_INPUT, "Enter a bet:","Enter the bet amount (1000$-500.000$):", "OK", "Cancel");
	} // BLACK


    if(clickedid == Text:INVALID_TEXT_DRAW)
    {
    	if(InBlackJackGame[playerid] == 1) {
    		if(BJMatch[playerid] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Your blackjack match is in progress, you can't leave."),SelectTextDrawEx(playerid,0xFFFFFFFF);
	        PlayerTextDrawHide(playerid, BJusebox1[playerid]);
			PlayerTextDrawHide(playerid, BJusebox2[playerid]);
			PlayerTextDrawHide(playerid, BJusebox3[playerid]);
			PlayerTextDrawHide(playerid, BJDealerText[playerid]);
			PlayerTextDrawHide(playerid, BJPlayerText[playerid]);
			PlayerTextDrawHide(playerid, BJBlackJackText[playerid]);
			PlayerTextDrawHide(playerid, BJScoreText[playerid]);
			PlayerTextDrawHide(playerid, BJDealText[playerid]);
			PlayerTextDrawHide(playerid, BJBalanceText[playerid]);
			PlayerTextDrawHide(playerid, BJDealButtonText[playerid]);
			PlayerTextDrawHide(playerid, BJEnterBetText[playerid]);
			PlayerTextDrawHide(playerid, BJDealerScoreText[playerid]);
			PlayerTextDrawHide(playerid, BJPlayerScoreText[playerid]);
			PlayerTextDrawHide(playerid, BJClearBetText[playerid]);
			PlayerTextDrawHide(playerid, BJStandOptionText[playerid]);
			PlayerTextDrawHide(playerid, BJHitOptionText[playerid]);
			PlayerTextDrawHide(playerid, BJreset[playerid]);
			PlayerTextDrawHide(playerid, BJDealerCard1[playerid]);
			PlayerTextDrawHide(playerid, BJDealerCard2[playerid]);
			PlayerTextDrawHide(playerid, BJDealerCard3[playerid]);
			PlayerTextDrawHide(playerid, BJDealerCard4[playerid]);
			PlayerTextDrawHide(playerid, BJDealerCard5[playerid]);
			PlayerTextDrawHide(playerid, BJPlayerCard1[playerid]);
			PlayerTextDrawHide(playerid, BJPlayerCard2[playerid]);
			PlayerTextDrawHide(playerid, BJPlayerCard3[playerid]);
			PlayerTextDrawHide(playerid, BJPlayerCard4[playerid]);
			PlayerTextDrawHide(playerid, BJPlayerCard5[playerid]);
			PlayerTextDrawHide(playerid, BJWinText[playerid]);
			TogglePlayerControllable(playerid, true);
			CloseBMatch[playerid] = 0;
			BJMatch[playerid] = 0;
			InBlackJackGame[playerid] = 0;
		}
		if(RouletteInGame[playerid] == 1) {
			if(betsumma[playerid] != 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti iesi din ruleta acum!", "(Error){FFFFFF} You can't leave now the roulette!"),SelectTextDrawEx(playerid,0xFFFFFFFF);
	        if(zmidialog[playerid] == 1) return true;
			if(RouletteStatus == 1) return SS(playerid, COLOR_ERROR,"(Error){FFFFFF} Asteapta pana ce se invarte ruleta.", "(Error){FFFFFF} Wait until the roullet is rolling."),SelectTextDrawEx(playerid,0xFFFFFFFF);
			RouletteInGame[playerid] = 0;
			if(TotalBet > 0 && betsumma[playerid] != 0) TotalBet--;
		    for(new x; x<20; x++) {
		    	if(x != 15  && x!= 9 && x != 10 && x != 11) TextDrawHideForPlayer(playerid,CasinoDraw[x]),CancelSelectTextDrawEx(playerid);
		    }
		   	PlayerTextDrawHide(playerid,CasinoDrawPlayer[playerid][0]);
		    new string[64];
		    if(betplayer[playerid] == 10)
			{
				totalbet[2] --,totalsumma[2] -= betsumma[playerid];
				if(totalbet[2] < 0) totalbet[2] = 0;
				format(string, sizeof(string), "%d bets~n~$%s", totalbet[2],FormatNumber(totalsumma[2]));
				TextDrawSetString(CasinoDraw[16], string);
			}
			if(betplayer[playerid] == 14)
			{
				totalbet[0] --,totalsumma[0] -= betsumma[playerid];
				if(totalbet[0] < 0) totalbet[0] = 0;
				format(string, sizeof(string), "%d bets~n~$%s", totalbet[0],FormatNumber(totalsumma[0]));
			    TextDrawSetString(CasinoDraw[17], string);
			}
			if(betplayer[playerid] == 4)
			{
				totalbet[1] --,totalsumma[1] -= betsumma[playerid];
				if(totalbet[1] < 0) totalbet[1] = 0;
				format(string, sizeof(string), "%d bets~n~$%s", totalbet[1],FormatNumber(totalsumma[1]));
	            TextDrawSetString(CasinoDraw[18], string);
			}
		    GivePlayerCash(playerid,betsumma[playerid]),betsumma[playerid] = 0;
		}
		if(joacapacanele[playerid] > 0)
		{
			if(timerpacanele[playerid] > 0) return SelectTextDraw(playerid, 0xFF00000FF);
			else Pacanele(playerid, false);
		}
		if(GetPVarInt(playerid, "accs") == 1) SelectTextDraw(playerid, 0xFFFFFF50);	
		if(InDmvTest[playerid] == 1) SelectTextDraw(playerid, 0xFFFFFF50);
		if(InLicenceTest[playerid] != 0) SelectTextDraw(playerid, 0xFFFFFF50);
		if(InOpenCase[playerid] != 0) 
		{
			SelectTextDraw(playerid, 0xFFFFFF50);
			SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} Press the 'X' button for exit the case opening menu.");
		}
		new str2[128];
		PlayerTextDrawShow(playerid, TextLogo[playerid]);
		format(str2,sizeof(str2),"%s / rpg.bluffs.ga", PlayerInfo[playerid][pNormalName]);
		PlayerTextDrawSetString(playerid, TextLogo[playerid], str2);
    }
    return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(playertextid == LoginTD[playerid][4]) //enter password button
	{
		if(strcmp(KeepPassword[playerid], "NULL", true)) return SendClientMessage(playerid, COLOR_LIGHTRED, "(Login){FFFFFF} You already added a password, press the 'Login' button.");
		ShowPlayerDialog(playerid,DIALOG_LOGIN2,DIALOG_STYLE_PASSWORD,"Enter password","You will be kicked in 60 seconds if you don't logging in.","Ok","Cancel");
	}
	if(playertextid == LoginTD[playerid][5]) //login button
	{
		if(!strcmp(KeepPassword[playerid], "NULL", true)) return SendClientMessage(playerid, COLOR_LIGHTRED, "(Login){FFFFFF} You need to add a password, please press 'enter password' for that.");
		OnPlayerLogin(playerid,MD5_Hash(KeepPassword[playerid]));
	}
	if(playertextid == IncorrectTD[playerid][1]) 
	{
		PlayerTextDrawHide(playerid, IncorrectTD[playerid][0]);
		PlayerTextDrawHide(playerid, IncorrectTD[playerid][1]);
	}

	if(playertextid == RegisterTD[playerid][4]) ShowPlayerDialog(playerid,DIALOG_LOGIN1,DIALOG_STYLE_PASSWORD,"Enter password","Be careful when you enter the password, anyway, if you enter the password wrong, you can re-enter the password.","Ok","Cancel");
	if(playertextid == RegisterTD[playerid][5]) ShowPlayerDialog(playerid, DIALOG_REGISTER3, DIALOG_STYLE_INPUT, "Enter age", "Type your age below:", "Ok", "");
	if(playertextid == RegisterTD[playerid][9]) ShowPlayerDialog(playerid, DIALOG_REGISTER2, DIALOG_STYLE_LIST, "Choose your sex", "Male\nWoman", "Choose", "Cancel");
	
	if(playertextid == RegisterTD[playerid][6])
	{
		if(!strcmp(KeepPassword[playerid], "NULL", true) || RegLanguage[playerid] == 0 || RegAge[playerid] ==0 || RegSex[playerid] == 0) return PlayerTextDrawShow(playerid, RegisterTD[playerid][8]);
		else OnPlayerRegister(playerid, MD5_Hash(KeepPassword[playerid]));
	}
	
	if(playertextid == RegisterTD[playerid][10])
	{
		RegLanguage[playerid] = 2;
		SendClientMessage(playerid, COLOR_LIGHTRED, "(Register){FFFFFF} Limba setata pe: romana.");
		PlayerTextDrawHide(playerid, RegisterTD[playerid][10]);
		PlayerTextDrawHide(playerid, RegisterTD[playerid][11]);
		PlayerTextDrawColor(playerid, RegisterTD[playerid][10], 16711935);
		PlayerTextDrawColor(playerid, RegisterTD[playerid][11], -1);
		PlayerTextDrawShow(playerid, RegisterTD[playerid][10]);
		PlayerTextDrawShow(playerid, RegisterTD[playerid][11]);
	}
	if(playertextid == RegisterTD[playerid][11])
	{
		RegLanguage[playerid] = 1;
		SendClientMessage(playerid, COLOR_LIGHTRED, "(Register){FFFFFF} Language set to: english.");
		PlayerTextDrawHide(playerid, RegisterTD[playerid][10]);
		PlayerTextDrawHide(playerid, RegisterTD[playerid][11]);
		PlayerTextDrawColor(playerid, RegisterTD[playerid][10], -1);
		PlayerTextDrawColor(playerid, RegisterTD[playerid][11], 16711935);
		PlayerTextDrawShow(playerid, RegisterTD[playerid][10]);
		PlayerTextDrawShow(playerid, RegisterTD[playerid][11]);
	}
	if(playertextid == RegisterTD[playerid][8]) PlayerTextDrawHide(playerid, RegisterTD[playerid][8]);

	if(playertextid == BJDealButtonText[playerid])
    {
		if(CloseBMatch[playerid] == 0)
		{
			if(BDeal[playerid] > 0)
			{
				if(BJMatch[playerid] == 0)
				{
					BlackJackFunction(playerid, 2);
					GivePlayerCash(playerid, -BDeal[playerid]);
					new text[100];
					format(text, sizeof(text), "BALANCE:~n~%s$", FormatNumber(GetPlayerCash(playerid)));
					PlayerTextDrawSetString(playerid, BJBalanceText[playerid], text);
					BJMatch[playerid] = 1;
					PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
				}
				else SS(playerid, COLOR_WHITE, "(Blackjack) Jocul a inceput deja!", "(Blackjack) The match has already begun!");
			}
			else SS(playerid, COLOR_WHITE, "(Blackjack) Seteaza o suma de bani inainte, folosind 'ENTER BET AMOUNT'!", "(Blackjack) Set an amount of money before DEAL, using 'ENTER BET AMOUNT'!");
		}
    }
    else if(playertextid == BJHitOptionText[playerid])
    {
		if(BJMatch[playerid] == 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu esti intr-o partida de BlackJack!", "(Error){FFFFFF} You are not in a match of BlackJack!");
		BlackJackFunction(playerid, 1);
		BlackJackActions[playerid]++;
    }
    else if(playertextid == BJStandOptionText[playerid])
    {
		if(BJMatch[playerid] == 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu esti intr-o partida de BlackJack!", "(Error){FFFFFF} You are not in a match of BlackJack!");
		BlackJackStand[playerid]=1;
		BlackJackFunction(playerid, 1);
		BlackJackActions[playerid]++;
    }
	else if(playertextid == BJClearBetText[playerid])
    {
		if(BJMatch[playerid] != 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi Clear Bet cat timp esti intr-o partida de BlackJack!", "(Error){FFFFFF} You can't Clear Bet while you are in a match of BlackJack!");
		BDeal[playerid] = 0;
		PlayerTextDrawSetString(playerid, BJDealText[playerid], "DEAL:~n~0$");
	}
	else if(playertextid == BJEnterBetText[playerid])
    {
        if(CloseBMatch[playerid] == 0)
		{
			if(BJMatch[playerid] == 0)
			{
				if(PlayerInfo[playerid][pLanguage] == 1) ShowPlayerDialog(playerid, DIALOG_BJ_BET, DIALOG_STYLE_INPUT, "Blackjack: Enter amount", "Type in the box below the amount you wish to bet before the game starts\nMinimum 10$ - Maximum 250.000$", "Bet", "Close");
				else ShowPlayerDialog(playerid, DIALOG_BJ_BET, DIALOG_STYLE_INPUT, "Blackjack: Introdu suma", "Introdu in casuta de mai jos suma pe care vrei sa o pariezi inainte de a incepe jocul\nMinim 10$ - Maxim 250.000$", "Bet", "Close");
				PlayerPlaySound(playerid, 5201, 0.0, 0.0, 0.0);
			}
			else SS(playerid, COLOR_WHITE, "(Blackjack) Jocul a inceput deja!", "(Blackjack) The match has already begun!");
		}
	}
	else if(playertextid == BJreset[playerid])
    {
		PlayerTextDrawHide(playerid, BJusebox1[playerid]);
		PlayerTextDrawHide(playerid, BJusebox2[playerid]);
		PlayerTextDrawHide(playerid, BJusebox3[playerid]);
		PlayerTextDrawHide(playerid, BJDealerText[playerid]);
		PlayerTextDrawHide(playerid, BJPlayerText[playerid]);
		PlayerTextDrawHide(playerid, BJBlackJackText[playerid]);
		PlayerTextDrawHide(playerid, BJScoreText[playerid]);
		PlayerTextDrawHide(playerid, BJDealText[playerid]);
		PlayerTextDrawHide(playerid, BJBalanceText[playerid]);
		PlayerTextDrawHide(playerid, BJDealButtonText[playerid]);
		PlayerTextDrawHide(playerid, BJEnterBetText[playerid]);
		PlayerTextDrawHide(playerid, BJDealerScoreText[playerid]);
		PlayerTextDrawHide(playerid, BJPlayerScoreText[playerid]);
		PlayerTextDrawHide(playerid, BJClearBetText[playerid]);
		PlayerTextDrawHide(playerid, BJreset[playerid]);
		PlayerTextDrawHide(playerid, BJDealerCard1[playerid]);
		PlayerTextDrawHide(playerid, BJDealerCard2[playerid]);
		PlayerTextDrawHide(playerid, BJDealerCard3[playerid]);
		PlayerTextDrawHide(playerid, BJDealerCard4[playerid]);
		PlayerTextDrawHide(playerid, BJDealerCard5[playerid]);
		PlayerTextDrawHide(playerid, BJPlayerCard1[playerid]);
		PlayerTextDrawHide(playerid, BJPlayerCard2[playerid]);
		PlayerTextDrawHide(playerid, BJPlayerCard3[playerid]);
		PlayerTextDrawHide(playerid, BJPlayerCard4[playerid]);
		PlayerTextDrawHide(playerid, BJPlayerCard5[playerid]);
		PlayerTextDrawHide(playerid, BJWinText[playerid]);
		TogglePlayerControllable(playerid, true);
		CloseBMatch[playerid] = 0;
		InBlackJackGame[playerid] = 0;
		BJMatch[playerid] = 0;
        cmd_blackjack(playerid, "");
	}
	if(playertextid == OpencaseTD[playerid][10])
    {
    	if(CaseOpening[playerid] == 0)
		{
			HideCaseTds(playerid);
			TogglePlayerControllable(playerid, true);
			InOpenCase[playerid] = 0;
		}
		else SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} The case is opening, you can't exit now.");
	}
	if(playertextid == OpencaseTD[playerid][6])
    {
    	if(CaseOpening[playerid] == 0)
		{
			if(PlayerInfo[playerid][pCases] <= 0) 
			{
				new string[128];
				SendClientMessage(playerid, -1,"You don't have any case, but you can get one:");
				SendClientMessage(playerid, -1,"- if you complet all your daily quests");
				format(string, sizeof(string), "- every 5 online hours(AFK) (left: %d paydays)", PlayerInfo[playerid][pNextCase]);
				SendClientMessage(playerid, -1, string);
				SendClientMessage(playerid, -1,"- if you are online at 20:30");
				return 1;
			}
    		PlayerTextDrawShow(playerid, OpencaseTD[playerid][9]);
    		CaseCount[playerid] = 20;
    		CaseOpening[playerid] = 1;
    		opencasetimer[playerid] = SetTimerEx("CaseOpen",500, false, "i", playerid);
    	}
    	else SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} The case is opening, wait until the roll is ended."); 
	}
	if(playertextid == LicenceTD[playerid][8])
    {
		if(CurrentLicenceQ[playerid] != 3 && CurrentLicenceQ[playerid] != 5) {
			LicenceWrongs[playerid]++;
			SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} Wrong answer!");
		}
		if(LicenceWrongs[playerid] == 3)
		{
			SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} Exam failed, 3/3 wrong answers!");
			HideLicenceTds(playerid);
			TogglePlayerControllable(playerid, 1);
			LicenceQtime[playerid] = 0;
			InLicenceTest[playerid] = 0;
		}
		else {
			if(CurrentLicenceQ[playerid] == 5)
			{
				LicenceQtime[playerid] = 0;
				new string[128];
				TogglePlayerControllable(playerid, 1);
				HideLicenceTds(playerid);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
        		ClearAnimations(playerid);
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
				if(InLicenceTest[playerid] == 1)
				{
					TakingLesson[playerid] = 1;
	       			examcar[playerid] = AddStaticVehicle(593, 381.8426,2501.5383,17.4061,89.3533, -1, -1);
					Gas[examcar[playerid]] = 100;
					EnterVehicle[playerid] = examcar[playerid];
					PutPlayerInVehicleEx(playerid, examcar[playerid], 0);
					DisableRemoteVehicleCollisions(playerid, 1);
					SS(playerid, COLOR_WHITE, "Examenul practic a inceput. Mergi la checkpoint.", "The practical exam has begun. Go to the checkpoint.");
					SS(playerid, COLOR_WHITE, "Scrie /engine sau apasa tasta 2 pentru a porni motorul.", "Type /engine or press key 2 to start the engine.");
				    CP[playerid] = 125;
				    PlayerTextDrawShow(playerid, DMVexam[playerid]);
					format(string, sizeof(string), "~w~CHECKPOINTS: ~r~0~w~/~r~7");
					PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
					PlayerTextDrawShow(playerid, DMVcheck[playerid]);
					SetPlayerRaceCheckpoint(playerid,3, 294.4955,2498.8005,16.6322,-23.6290,2505.2061,52.8105,10.0);
				}
				else if(InLicenceTest[playerid] == 2)
				{
					TakingLesson[playerid] = 1;
	       			examcar[playerid] = AddStaticVehicle(452, 2090.2922,-106.6227,1.1796,115.5734, -1, -1);
					Gas[examcar[playerid]] = 100;
					EnterVehicle[playerid] = examcar[playerid];
					PutPlayerInVehicleEx(playerid, examcar[playerid], 0);
					DisableRemoteVehicleCollisions(playerid, 1);
					SS(playerid, COLOR_WHITE, "Examenul practic a inceput. Mergi la checkpoint.", "The practical exam has begun. Go to the checkpoint.");
					SS(playerid, COLOR_WHITE, "Scrie /engine sau apasa tasta 2 pentru a porni motorul masinii.", "Type /engine or press key 2 to start the engine.");
				    CP[playerid] = 132;
				    PlayerTextDrawShow(playerid, DMVexam[playerid]);
					format(string, sizeof(string), "~w~CHECKPOINTS: ~r~0~w~/~r~7");
					PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
					PlayerTextDrawShow(playerid, DMVcheck[playerid]);
					SetPlayerRaceCheckpoint(playerid,3, 2024.0104,-106.2818,0.9779,1951.2327,-71.5712,0.3375,10.0);
				}
				else if(InLicenceTest[playerid] == 3)
				{
					TakingLesson[playerid] = 1;
					SS(playerid, COLOR_WHITE, "Examenul practic a inceput. Consuma toate gloantele.", "The practical exam has begun. Shot until the weapon ammo is empty.");
					GivePlayerWeaponEx(playerid, 24, 10);
				}
				InLicenceTest[playerid] = 0;
			}
			else {
				CurrentLicenceQ[playerid]++;
				ShowLicenceTds(playerid);
			}
		}
	}
	if(playertextid == LicenceTD[playerid][7])
    {
		if(CurrentLicenceQ[playerid] != 3 && CurrentLicenceQ[playerid] != 1) {
			LicenceWrongs[playerid]++;
			SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} Wrong answer!");
		}
		if(LicenceWrongs[playerid] == 3)
		{
			SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} Exam failed, 3/3 wrong answers!");
			HideLicenceTds(playerid);
			TogglePlayerControllable(playerid, 1);
			LicenceQtime[playerid] = 0;
			InLicenceTest[playerid] = 0;
		}
		else {
			if(CurrentLicenceQ[playerid] == 5)
			{
				LicenceQtime[playerid] = 0;
				new string[128];
				TogglePlayerControllable(playerid, 1);
				HideLicenceTds(playerid);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
        		ClearAnimations(playerid);
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
				if(InLicenceTest[playerid] == 1)
				{
					TakingLesson[playerid] = 1;
	       			examcar[playerid] = AddStaticVehicle(593, 381.8426,2501.5383,17.4061,89.3533, -1, -1);
					Gas[examcar[playerid]] = 100;
					EnterVehicle[playerid] = examcar[playerid];
					PutPlayerInVehicleEx(playerid, examcar[playerid], 0);
					DisableRemoteVehicleCollisions(playerid, 1);
					SS(playerid, COLOR_WHITE, "Examenul practic a inceput. Mergi la checkpoint.", "The practical exam has begun. Go to the checkpoint.");
					SS(playerid, COLOR_WHITE, "Scrie /engine sau apasa tasta 2 pentru a porni motorul.", "Type /engine or press key 2 to start the engine.");
				    CP[playerid] = 125;
				    PlayerTextDrawShow(playerid, DMVexam[playerid]);
					format(string, sizeof(string), "~w~CHECKPOINTS: ~r~0~w~/~r~7");
					PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
					PlayerTextDrawShow(playerid, DMVcheck[playerid]);
					SetPlayerRaceCheckpoint(playerid,3, 294.4955,2498.8005,16.6322,-23.6290,2505.2061,52.8105,10.0);
				}
				else if(InLicenceTest[playerid] == 2)
				{
					TakingLesson[playerid] = 1;
	       			examcar[playerid] = AddStaticVehicle(452, 2090.2922,-106.6227,1.1796,115.5734, -1, -1);
					Gas[examcar[playerid]] = 100;
					EnterVehicle[playerid] = examcar[playerid];
					PutPlayerInVehicleEx(playerid, examcar[playerid], 0);
					DisableRemoteVehicleCollisions(playerid, 1);
					SS(playerid, COLOR_WHITE, "Examenul practic a inceput. Mergi la checkpoint.", "The practical exam has begun. Go to the checkpoint.");
					SS(playerid, COLOR_WHITE, "Scrie /engine sau apasa tasta 2 pentru a porni motorul masinii.", "Type /engine or press key 2 to start the engine.");
				    CP[playerid] = 132;
				    PlayerTextDrawShow(playerid, DMVexam[playerid]);
					format(string, sizeof(string), "~w~CHECKPOINTS: ~r~0~w~/~r~7");
					PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
					PlayerTextDrawShow(playerid, DMVcheck[playerid]);
					SetPlayerRaceCheckpoint(playerid,3, 2024.0104,-106.2818,0.9779,1951.2327,-71.5712,0.3375,10.0);
				}
				else if(InLicenceTest[playerid] == 3)
				{
					TakingLesson[playerid] = 1;
					SS(playerid, COLOR_WHITE, "Examenul practic a inceput. Consuma toate gloantele.", "The practical exam has begun. Shot until the weapon ammo is empty.");
					GivePlayerWeaponEx(playerid, 24, 10);
				}
				InLicenceTest[playerid] = 0;
			}
			else {
				CurrentLicenceQ[playerid]++;
				ShowLicenceTds(playerid);
			}
		}
	}
	if(playertextid == LicenceTD[playerid][9])
    {
		if(CurrentLicenceQ[playerid] != 2 && CurrentLicenceQ[playerid] != 4){
			LicenceWrongs[playerid]++;
			SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} Wrong answer!");
		}
		if(LicenceWrongs[playerid] == 3)
		{
			SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} Exam failed, 3/3 wrong answers!");
			HideLicenceTds(playerid);
			TogglePlayerControllable(playerid, 1);
			LicenceQtime[playerid] = 0;
			InLicenceTest[playerid] = 0;
		}
		else {
			if(CurrentLicenceQ[playerid] == 5)
			{
				LicenceQtime[playerid] = 0;
				new string[128];
				TogglePlayerControllable(playerid, 1);
				HideLicenceTds(playerid);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
        		ClearAnimations(playerid);
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
				if(InLicenceTest[playerid] == 1)
				{
					TakingLesson[playerid] = 1;
	       			examcar[playerid] = AddStaticVehicle(593, 381.8426,2501.5383,17.4061,89.3533, -1, -1);
					Gas[examcar[playerid]] = 100;
					EnterVehicle[playerid] = examcar[playerid];
					PutPlayerInVehicleEx(playerid, examcar[playerid], 0);
					DisableRemoteVehicleCollisions(playerid, 1);
					SS(playerid, COLOR_WHITE, "Examenul practic a inceput. Mergi la checkpoint.", "The practical exam has begun. Go to the checkpoint.");
					SS(playerid, COLOR_WHITE, "Scrie /engine sau apasa tasta 2 pentru a porni motorul.", "Type /engine or press key 2 to start the engine.");
				    CP[playerid] = 125;
				    PlayerTextDrawShow(playerid, DMVexam[playerid]);
					format(string, sizeof(string), "~w~CHECKPOINTS: ~r~0~w~/~r~7");
					PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
					PlayerTextDrawShow(playerid, DMVcheck[playerid]);
					SetPlayerRaceCheckpoint(playerid,3, 294.4955,2498.8005,16.6322,-23.6290,2505.2061,52.8105,10.0);
				}
				else if(InLicenceTest[playerid] == 2)
				{
					TakingLesson[playerid] = 1;
	       			examcar[playerid] = AddStaticVehicle(452, 2090.2922,-106.6227,1.1796,115.5734, -1, -1);
					Gas[examcar[playerid]] = 100;
					EnterVehicle[playerid] = examcar[playerid];
					PutPlayerInVehicleEx(playerid, examcar[playerid], 0);
					DisableRemoteVehicleCollisions(playerid, 1);
					SS(playerid, COLOR_WHITE, "Examenul practic a inceput. Mergi la checkpoint.", "The practical exam has begun. Go to the checkpoint.");
					SS(playerid, COLOR_WHITE, "Scrie /engine sau apasa tasta 2 pentru a porni motorul masinii.", "Type /engine or press key 2 to start the engine.");
				    CP[playerid] = 132;
				    PlayerTextDrawShow(playerid, DMVexam[playerid]);
					format(string, sizeof(string), "~w~CHECKPOINTS: ~r~0~w~/~r~7");
					PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
					PlayerTextDrawShow(playerid, DMVcheck[playerid]);
					SetPlayerRaceCheckpoint(playerid,3, 2024.0104,-106.2818,0.9779,1951.2327,-71.5712,0.3375,10.0);
				}
				else if(InLicenceTest[playerid] == 3)
				{
					TakingLesson[playerid] = 1;
					SS(playerid, COLOR_WHITE, "Examenul practic a inceput. Consuma toate gloantele.", "The practical exam has begun. Shot until the weapon ammo is empty.");
					GivePlayerWeaponEx(playerid, 24, 10);
				}
				InLicenceTest[playerid] = 0;
			}
			else {
				CurrentLicenceQ[playerid]++;
				ShowLicenceTds(playerid);
			}
		}
	}


	if(playertextid == DmvTd[playerid][8])
    {
		if(CurrentDmvQ[playerid] != 3 && CurrentDmvQ[playerid] != 5) {
			DmvWrongs[playerid]++;
			SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} Wrong answer!");
		}
		if(DmvWrongs[playerid] == 3)
		{
			SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} Exam failed, 3/3 wrong answers!");
			HideDmvTds(playerid);
			TogglePlayerControllable(playerid, 1);
			DmvQtime[playerid] = 0;
			InDmvTest[playerid] = 0;
		}
		else {
			if(CurrentDmvQ[playerid] == 5)
			{
				DmvQtime[playerid] = 0;
				InDmvTest[playerid] = 0;
				new string[128];
				TogglePlayerControllable(playerid, 1);
				HideDmvTds(playerid);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
        		ClearAnimations(playerid);
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
		    	TakingLesson[playerid] = 1;
       			examcar[playerid] = AddStaticVehicle(410, 1242.0013,-1850.0372,13.0384,90.7065,  -1, -1);
				Gas[examcar[playerid]] = 100;
				EnterVehicle[playerid] = examcar[playerid];
				PutPlayerInVehicleEx(playerid, examcar[playerid], 0);
				DisableRemoteVehicleCollisions(playerid, 1);
				SS(playerid, COLOR_WHITE, "Examenul practic a inceput. Mergi la checkpoint.", "The practical exam has begun. Go to the checkpoint.");
				SS(playerid, COLOR_WHITE, "Scrie /engine sau apasa tasta 2 pentru a porni motorul masinii.", "Type /engine or press key 2 to start the engine.");
			    CP[playerid] = 100;
			    PlayerTextDrawShow(playerid, DMVexam[playerid]);
				format(string, sizeof(string), "~w~CHECKPOINTS: ~r~0~w~/~r~24");
				PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
				PlayerTextDrawShow(playerid, DMVcheck[playerid]);
				SetPlayerRaceCheckpoint(playerid,0, 1135.3868,-1850.5981,13.0366,1045.2626,-1809.4169,13.2637,4.0);
			}
			else {
				CurrentDmvQ[playerid]++;
				ShowDmvTds(playerid);
			}
		}
	}
	if(playertextid == DmvTd[playerid][7])
    {
		if(CurrentDmvQ[playerid] != 3 && CurrentDmvQ[playerid] != 1) {
			DmvWrongs[playerid]++;
			SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} Wrong answer!");
		}
		if(DmvWrongs[playerid] == 3)
		{
			SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} Exam failed, 3/3 wrong answers!");
			HideDmvTds(playerid);
			TogglePlayerControllable(playerid, 1);
			DmvQtime[playerid] = 0;
			InDmvTest[playerid] = 0;
		}
		else {
			if(CurrentDmvQ[playerid] == 5)
			{
				DmvQtime[playerid] = 0;
				InDmvTest[playerid] = 0;
				new string[128];
				TogglePlayerControllable(playerid, 1);
				HideDmvTds(playerid);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
        		ClearAnimations(playerid);
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
		    	TakingLesson[playerid] = 1;
       			examcar[playerid] = AddStaticVehicle(410, 1242.0013,-1850.0372,13.0384,90.7065,  -1, -1);
				Gas[examcar[playerid]] = 100;
				EnterVehicle[playerid] = examcar[playerid];
				PutPlayerInVehicleEx(playerid, examcar[playerid], 0);
				DisableRemoteVehicleCollisions(playerid, 1);
				SS(playerid, COLOR_WHITE, "Examenul practic a inceput. Mergi la checkpoint.", "The practical exam has begun. Go to the checkpoint.");
				SS(playerid, COLOR_WHITE, "Scrie /engine sau apasa tasta 2 pentru a porni motorul masinii.", "Type /engine or press key 2 to start the engine.");
			    CP[playerid] = 100;
			    PlayerTextDrawShow(playerid, DMVexam[playerid]);
				format(string, sizeof(string), "~w~CHECKPOINTS: ~r~0~w~/~r~24");
				PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
				PlayerTextDrawShow(playerid, DMVcheck[playerid]);
				SetPlayerRaceCheckpoint(playerid,0, 1135.3868,-1850.5981,13.0366,1045.2626,-1809.4169,13.2637,4.0);
			}
			else {
				CurrentDmvQ[playerid]++;
				ShowDmvTds(playerid);
			}
		}
	}
	if(playertextid == DmvTd[playerid][9])
    {
		if(CurrentDmvQ[playerid] != 2 && CurrentDmvQ[playerid] != 4){
			DmvWrongs[playerid]++;
			SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} Wrong answer!");
		}
		if(DmvWrongs[playerid] == 3)
		{
			SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} Exam failed, 3/3 wrong answers!");
			HideDmvTds(playerid);
			TogglePlayerControllable(playerid, 1);
			DmvQtime[playerid] = 0;
			InDmvTest[playerid] = 0;
		}
		else {
			if(CurrentDmvQ[playerid] == 5)
			{
				DmvQtime[playerid] = 0;
				InDmvTest[playerid] = 0;
				new string[128];
				TogglePlayerControllable(playerid, 1);
				HideDmvTds(playerid);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
        		ClearAnimations(playerid);
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
		    	TakingLesson[playerid] = 1;
       			examcar[playerid] = AddStaticVehicle(410, 1242.0013,-1850.0372,13.0384,90.7065,  -1, -1);
				Gas[examcar[playerid]] = 100;
				EnterVehicle[playerid] = examcar[playerid];
				PutPlayerInVehicleEx(playerid, examcar[playerid], 0);
				DisableRemoteVehicleCollisions(playerid, 1);
				SS(playerid, COLOR_WHITE, "Examenul practic a inceput. Mergi la checkpoint.", "The practical exam has begun. Go to the checkpoint.");
				SS(playerid, COLOR_WHITE, "Scrie /engine sau apasa tasta 2 pentru a porni motorul masinii.", "Type /engine or press key 2 to start the engine.");
			    CP[playerid] = 100;
			    PlayerTextDrawShow(playerid, DMVexam[playerid]);
				format(string, sizeof(string), "~w~CHECKPOINTS: ~r~0~w~/~r~24");
				PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
				PlayerTextDrawShow(playerid, DMVcheck[playerid]);
				SetPlayerRaceCheckpoint(playerid,0, 1135.3868,-1850.5981,13.0366,1045.2626,-1809.4169,13.2637,4.0);
			}
			else {
				CurrentDmvQ[playerid]++;
				ShowDmvTds(playerid);
			}
		}
	}
	if(playertextid == PacaneleTD[43])
	{
		new stringglobal[128];
		if(timerpacanele[playerid] > 0) return 1;
		sumapacanele[playerid] -= 1000;
		if(sumapacanele[playerid] < 1000) sumapacanele[playerid] = 500000;
		format(stringglobal, sizeof(stringglobal), "$%s",FormatNumber(sumapacanele[playerid]));
		PlayerTextDrawSetString(playerid, PacaneleTD[45], stringglobal);
		PlayerTextDrawShow(playerid, PacaneleTD[45]);
		new castiguri[128];
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid] * 10));
		PlayerTextDrawSetString(playerid, PacaneleTD[22], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 8));
		PlayerTextDrawSetString(playerid, PacaneleTD[26], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 6));
		PlayerTextDrawSetString(playerid, PacaneleTD[30], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 4));
		PlayerTextDrawSetString(playerid, PacaneleTD[34], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 2));
		PlayerTextDrawSetString(playerid, PacaneleTD[38], castiguri);
	}
	if(playertextid == PacaneleTD[44])
	{
		new stringglobal[128];
		if(timerpacanele[playerid] > 0) return 1;
		sumapacanele[playerid] += 1000;
		if(sumapacanele[playerid] > 500000) sumapacanele[playerid] = 1000;
		format(stringglobal, sizeof(stringglobal), "$%s",FormatNumber(sumapacanele[playerid]));
		PlayerTextDrawSetString(playerid, PacaneleTD[45], stringglobal);
		PlayerTextDrawShow(playerid, PacaneleTD[45]);
		new castiguri[128];
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid] * 10));
		PlayerTextDrawSetString(playerid, PacaneleTD[22], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 8));
		PlayerTextDrawSetString(playerid, PacaneleTD[26], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 6));
		PlayerTextDrawSetString(playerid, PacaneleTD[30], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 4));
		PlayerTextDrawSetString(playerid, PacaneleTD[34], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 2));
		PlayerTextDrawSetString(playerid, PacaneleTD[38], castiguri);
	}
	if(playertextid == PacaneleTD[46])
	{
		new stringglobal[128];
		if(timerpacanele[playerid] > 0) return 1;
		sumapacanele[playerid] = 1000;
		format(stringglobal, sizeof(stringglobal), "$%s",FormatNumber(sumapacanele[playerid]));
		PlayerTextDrawSetString(playerid, PacaneleTD[45], stringglobal);
		PlayerTextDrawShow(playerid, PacaneleTD[45]);
		new castiguri[128];
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid] * 10));
		PlayerTextDrawSetString(playerid, PacaneleTD[22], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 8));
		PlayerTextDrawSetString(playerid, PacaneleTD[26], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 6));
		PlayerTextDrawSetString(playerid, PacaneleTD[30], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 4));
		PlayerTextDrawSetString(playerid, PacaneleTD[34], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 2));
		PlayerTextDrawSetString(playerid, PacaneleTD[38], castiguri);
	}
	if(playertextid == PacaneleTD[47])
	{
		new stringglobal[128];
		if(timerpacanele[playerid] > 0) return 1;
		sumapacanele[playerid] = 500000;
		format(stringglobal, sizeof(stringglobal), "$%s",FormatNumber(sumapacanele[playerid]));
		PlayerTextDrawSetString(playerid, PacaneleTD[45], stringglobal);
		PlayerTextDrawShow(playerid, PacaneleTD[45]);
		new castiguri[128];
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid] * 10));
		PlayerTextDrawSetString(playerid, PacaneleTD[22], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 8));
		PlayerTextDrawSetString(playerid, PacaneleTD[26], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 6));
		PlayerTextDrawSetString(playerid, PacaneleTD[30], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 4));
		PlayerTextDrawSetString(playerid, PacaneleTD[34], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 2));
		PlayerTextDrawSetString(playerid, PacaneleTD[38], castiguri);
	}
	if(playertextid == PacaneleTD[50])
	{
		new stringglobal[128];
		if(timerpacanele[playerid] > 0) return 1;
		sumapacanele[playerid] += 10000;
		if(sumapacanele[playerid] > 500000) sumapacanele[playerid] = 10000;
		format(stringglobal, sizeof(stringglobal), "$%s",FormatNumber(sumapacanele[playerid]));
		PlayerTextDrawSetString(playerid, PacaneleTD[45], stringglobal);
		PlayerTextDrawShow(playerid, PacaneleTD[45]);
		new castiguri[128];
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid] * 10));
		PlayerTextDrawSetString(playerid, PacaneleTD[22], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 8));
		PlayerTextDrawSetString(playerid, PacaneleTD[26], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 6));
		PlayerTextDrawSetString(playerid, PacaneleTD[30], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 4));
		PlayerTextDrawSetString(playerid, PacaneleTD[34], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 2));
		PlayerTextDrawSetString(playerid, PacaneleTD[38], castiguri);
	}
	if(playertextid == PacaneleTD[51])
	{
		new stringglobal[128];
		if(timerpacanele[playerid] > 0) return 1;
		sumapacanele[playerid] += 100000;
		if(sumapacanele[playerid] > 500000) sumapacanele[playerid] = 100000;
		format(stringglobal, sizeof(stringglobal), "$%s",FormatNumber(sumapacanele[playerid]));
		PlayerTextDrawSetString(playerid, PacaneleTD[45], stringglobal);
		PlayerTextDrawShow(playerid, PacaneleTD[45]);
		new castiguri[128];
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid] * 10));
		PlayerTextDrawSetString(playerid, PacaneleTD[22], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 8));
		PlayerTextDrawSetString(playerid, PacaneleTD[26], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 6));
		PlayerTextDrawSetString(playerid, PacaneleTD[30], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 4));
		PlayerTextDrawSetString(playerid, PacaneleTD[34], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 2));
		PlayerTextDrawSetString(playerid, PacaneleTD[38], castiguri);
	}
	if(playertextid == PacaneleTD[48])
	{
		if(GetPlayerCash(playerid) < sumapacanele[playerid]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Not enought money.");
		if(timerpacanele[playerid] > 0) return 1;
		timerpacanele[playerid] = 10;
		rundapacanele[playerid] = 0;
		PlayerTextDrawHide(playerid, PacaneleTD[49]);
		for(new i = 0; i < 10; i++) IcoanaPacanele[playerid][i] = 0;
		for(new i = 10; i < 19; i++) PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[i], 18631),PlayerTextDrawShow(playerid, PacaneleTD[i]);
		PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[40], 0.000000, 0.000000, 15.000000, 1.000000);
		PlayerTextDrawShow(playerid, PacaneleTD[40]);
	}
    return 1;
}

forward MySQLCheckSpeed(vidd);
public MySQLCheckSpeed(vidd)
{
	new query[128];
	format(query, sizeof(query), "SELECT `speed` FROM stock WHERE `vid` = '%d'", vidd);
	new Cache: ab = mysql_query(SQL,query);
	if(cache_get_row_count()==0)
	{
	    cache_delete(ab);
		return 0;
	}
	else
	{
		new intid;
		intid = cache_get_field_content_int(0, "speed");
	    cache_delete(ab);
		return intid;
	}
}

forward MySQLCheckAccount(sqlplayersname[]);
public MySQLCheckAccount(sqlplayersname[])
{
	new query[128],
		escstr[30];
	mysql_real_escape_string(sqlplayersname, escstr);
	format(query, sizeof(query), "SELECT `id` FROM users WHERE `name` = '%s'", escstr);
	new Cache: ab = mysql_query(SQL,query);
	if(cache_get_row_count()==0)
	{
	    cache_delete(ab);
		return 0;
	}
	else
	{
		new intid;
		intid = cache_get_field_content_int(0, "id");
	    cache_delete(ab);
		return intid;
	}
}

forward CountDownCheck3(playerid);
public CountDownCheck3(playerid)
{
	GameTextForPlayer(playerid, "~g~3", 1000, 3);
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
    SetTimerEx("CountDownCheck2", 1000, 0, "i", playerid);
    return 1;
}

forward CountDownCheck2(playerid);
public CountDownCheck2(playerid)
{
	GameTextForPlayer(playerid, "~g~2", 1000, 3);
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
    SetTimerEx("CountDownCheck1", 1000, 0, "i", playerid);
    return 1;
}

forward CountDownCheck1(playerid);
public CountDownCheck1(playerid)
{
	GameTextForPlayer(playerid, "~g~1", 1000, 3);
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
 	SetTimerEx("CountDownCheckGo", 1000, 0, "i", playerid);
 	return 1;
}

forward CountDownCheckGo(playerid);
public CountDownCheckGo(playerid)
{
	GameTextForPlayer(playerid, "~r~GO ~y~GO ~b~GO", 3000, 3);
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	return 1;
}

forward CountDownFinalize(playerid);
public CountDownFinalize()
{
	countdown = 0;
	return 1;
}

forward SetPlayerPosExx(playerid, Float:x, Float:y, Float:z, interior, virtual);
public SetPlayerPosExx(playerid, Float:x, Float:y, Float:z, interior, virtual)
{
	SetPlayerPosEx(playerid, x, y, z);
	SetPlayerVirtualWorld(playerid, virtual);
	SetPlayerInterior(playerid, interior);
	return 1;
}

forward Vendingg(playerid);
public Vendingg(playerid)
{
	KillTimer(vendi[playerid]);
	Vending[playerid] = 0;
	return 1;
}

forward Vendingg2(playerid);
public Vendingg2(playerid)
{
	new Float:health;
	KillTimer(vendi2[playerid]);
	GetPlayerHealth(playerid,health);
	ClearAnimations(playerid);
	ApplyAnimation(playerid, "VENDING", "VEND_Drink_P", 4.0, 0, 0, 0, 0, 0);
	if(health >= 75)
	{
	    SetPlayerHealthEx(playerid, 100);
	}
	else
	{
	    SetPlayerHealthEx(playerid, health+25);
	}
	return 1;
}

forward AttachTrailerrr(playerid);
public AttachTrailerrr(playerid)
{
	new Float:pX,
		Float:pY,
		Float:pZ;
	GetPlayerPos(playerid,pX,pY,pZ);
	new Float:vX,
		Float:vY,
		Float:vZ;
	GetVehiclePos(viddd[playerid],vX,vY,vZ);
	if((floatabs(pX-vX)<100.0)&&(floatabs(pY-vY)<100.0)&&(floatabs(pZ-vZ)<100.0)&&(viddd[playerid]!=GetPlayerVehicleID(playerid)))
	{
		AttachTrailerToVehicle(viddd[playerid],GetPlayerVehicleID(playerid));
	}
	return 1;
}

forward Reportul(playerid);
public Reportul(playerid)
{
	ReportTime[playerid] = 0;
	format(reporttext[playerid], 30, "NULL");
	reportcheater[playerid] = -1;
	reportreason[playerid] = 0;
	if(playerreported[playerid] != -1)
	{
		reportreason[playerreported[playerid]] = 0;
	}
	playerreported[playerid] = -1;
	KillTimer(timerreport[playerid]);
}

function GetPlayers(option[]) {
	new nrr = 0, id = 1002;
	if(IsNumeric(option)) {
		new i = strval(option);
		if(IsPlayerConnected(i))
		id = i;
		else id = INVALID_PLAYER_ID;
	}
	else 
	{
		foreach(new i : Player) {
			if(strfind(GetName(i), option, true) != -1)
			{
				nrr ++;
			}
		}
		if(nrr > 10) id = 1000;
		if(nrr == 0) id = INVALID_PLAYER_ID;
		if(nrr > 1 && nrr <= 10) id = 1001;

		foreach(new i : Player) {
			if(strfind(GetName(i), option, true) != -1 && id == 1002)
			{
				id = i;
			}
		}
	}
	return id;
}
stock InvalidPlayer(playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid Player ID/Name.");
stock ToManyResults(playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Too many results for this search.");
stock ShowResults(playerid, option[])
{
	new string[128];
	SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Too many results for this search. Try one of these:");
	foreach(new i : Player)
	{
		if(strfind(GetName(i), option, true) != -1)
		{
			format(string, sizeof(string), "{FFFFCC}(%d) %s", i, GetName(i));
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}

forward DrugEffectGone(playerid);
public DrugEffectGone(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(UsingDrugs[playerid] == 1)
	    {
			DrugTimer[playerid] = 300;
            UsingDrugs[playerid] = 0;
			ClearAnimations(playerid);
			SetPlayerDrunkLevel (playerid, 0);
            PlayerStoned[playerid] = 0;
            KillTimer(drug[playerid]);
			SetPlayerHealthEx(playerid, 100);
			SendClientMessage(playerid, COLOR_WHITE, "Drogurile au inceput sa-si faca efectul.");
			new sendername[25],string[128];
            GetPlayerName(playerid, sendername, sizeof(sendername));
		    format(string, sizeof(string), "* %s took some drugs.", sendername);
            ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	return 1;
}

stock GivePlayerCash(playerid, money) {
	if(Cash[playerid] + money > 999999999) {
		new mstr[128], calc;
		calc = Cash[playerid] + money - 999999999;
		SendClientMessage(playerid, COLOR_COOLRED, "(Warning){FFFFFF} You can't have more than 999.999.999$ in your pocket.");
		SendClientMessage(playerid, COLOR_COOLRED, "(Warning){FFFFFF} The rest of money over 999.999.999$ will be added to bank account with 10 percent commission.");
		format(mstr, sizeof mstr, "(Warning){FFFFFF} %s$ added to bank account with %s$ commission from %s$. Bank account: %s$.",FormatNumber(calc-calc/10), FormatNumber(calc/10), FormatNumber(calc), FormatNumber(PlayerInfo[playerid][pAccount]+calc-calc/10));
		PlayerInfo[playerid][pAccount] += calc-calc/10;
		Update(playerid, pBank);
		Cash[playerid] = 999999999;
		SendClientMessage(playerid, COLOR_COOLRED, mstr);
	}
	else {
		Cash[playerid] += money;
	}
	Update(playerid, pCashx);
	return 1;
}
stock GetPlayerCash(playerid) return Cash[playerid];
stock ResetPlayerCash(playerid) return Cash[playerid] = 0;

stock NumeFactiune(id)
{
	new ftexst[35];
	switch(id)
	{
		case 0: ftexst = "None";
		case 1: ftexst = "Los Santos Police Department";
		case 2: ftexst = "Federal Bureau of Investigations";
		case 3: ftexst = "National Guard";
		case 4: ftexst = "Los Aztecas";
		case 5: ftexst = "Grove Street";
		case 6: ftexst = "Los Vagos";
		case 7: ftexst = "Mayor";
		case 8: ftexst = "Las Venturas Police Department";
		case 9: ftexst = "News Reporter";
		case 10: ftexst = "Ballas";
		case 11: ftexst = "Hitman Agency";
		//case 12: ftexst = "School Instructors LV";
		case 13: ftexst = "Taxi";
		case 14: ftexst = "Las Venturas Paramedic Department";
	}
	return ftexst;
}

stock CalculeazaTimp(secunde)
{
	new time = secunde;
	new ora = time/3600;
	time = time%3600;
	new minute = time/60;
	time = time%60;
	new secunde2 = time;
	new string[10];
	format(string,sizeof(string),"%02d:%02d:%02d",ora,minute,secunde2);
	return string;
}

stock CalculeazaTimp2(secunde)
{
	new time = secunde;
	time = time%3600;
	new minute = time/60;
	time = time%60;
	new secunde2 = time;
	new string[10];
	format(string,sizeof(string),"%02d:%02d",minute,secunde2);
	return string;
}

stock IsPlayerInRangeOfPlayer(playerid, playerid2, Float: radius) {

	new
		Float:Floats[3];

	GetPlayerPos(playerid2, Floats[0], Floats[1], Floats[2]);
	return IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]);
}

stock GetClanMembers(clanid)
{
	new query[300],nr=0;
	format(query, sizeof(query), "SELECT * FROM `users` WHERE `Clan` = %d ORDER BY `id`", clanid);
	new Cache: stringresult2 = mysql_query(SQL, query);
	if(cache_get_row_count() > 0)
		for(new i, j = cache_get_row_count (); i != j; ++i)
			nr++;
	cache_delete(stringresult2);
	return nr;
}

stock GetFactionMembers(fid)
{
	new query[300],nr=0;
	format(query, sizeof(query), "SELECT * FROM `users` WHERE `Member` = %d ORDER BY `id`", fid);
	new Cache: stringresult2 = mysql_query(SQL, query);
	if(cache_get_row_count() > 0)
		for(new i, j = cache_get_row_count (); i != j; ++i)
			nr++;
	cache_delete(stringresult2);
	return nr;
}

stock ShowFactions(playerid)
{
	new stringz2[MAX_STRING];
	format(stringz2, sizeof(stringz2), "Members\tFaction\tLevel\tAppplication status\n");
 	if(DynamicFactions[1][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{00FF00}online\n", stringz2, GetFactionMembers(1), DynamicFactions[1][fMaxMembers], DynamicFactions[1][fName], DynamicFactions[1][fMinLevel]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{FF0000}offline\n", stringz2, GetFactionMembers(1), DynamicFactions[1][fMaxMembers], DynamicFactions[1][fName], DynamicFactions[1][fMinLevel]);
	}
 	if(DynamicFactions[2][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{00FF00}online\n", stringz2, GetFactionMembers(2), DynamicFactions[2][fMaxMembers], DynamicFactions[2][fName], DynamicFactions[2][fMinLevel]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{FF0000}offline\n", stringz2, GetFactionMembers(2), DynamicFactions[2][fMaxMembers], DynamicFactions[2][fName], DynamicFactions[2][fMinLevel]);
	}
	if(DynamicFactions[3][fApplication] > 0)
	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{00FF00}online\n", stringz2, GetFactionMembers(3), DynamicFactions[3][fMaxMembers], DynamicFactions[3][fName], DynamicFactions[3][fMinLevel]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{FF0000}offline\n", stringz2, GetFactionMembers(3), DynamicFactions[3][fMaxMembers], DynamicFactions[3][fName], DynamicFactions[3][fMinLevel]);
	}
 	if(DynamicFactions[4][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{00FF00}online\n", stringz2, GetFactionMembers(4), DynamicFactions[4][fMaxMembers], DynamicFactions[4][fName], DynamicFactions[4][fMinLevel]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{FF0000}offline\n", stringz2, GetFactionMembers(4), DynamicFactions[4][fMaxMembers], DynamicFactions[4][fName], DynamicFactions[4][fMinLevel]);
	}
 	if(DynamicFactions[5][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{00FF00}online\n", stringz2, GetFactionMembers(5), DynamicFactions[5][fMaxMembers], DynamicFactions[5][fName], DynamicFactions[5][fMinLevel]);
	}
	else
	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{FF0000}offline\n", stringz2, GetFactionMembers(5), DynamicFactions[5][fMaxMembers], DynamicFactions[5][fName], DynamicFactions[5][fMinLevel]);
	}
 	if(DynamicFactions[6][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{00FF00}online\n", stringz2, GetFactionMembers(6), DynamicFactions[6][fMaxMembers], DynamicFactions[6][fName], DynamicFactions[6][fMinLevel]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{FF0000}offline\n", stringz2, GetFactionMembers(6), DynamicFactions[6][fMaxMembers], DynamicFactions[6][fName], DynamicFactions[6][fMinLevel]);
	}
	if(DynamicFactions[7][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{00FF00}online\n", stringz2, GetFactionMembers(7), DynamicFactions[7][fMaxMembers], DynamicFactions[7][fName], DynamicFactions[7][fMinLevel]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{FF0000}offline\n", stringz2, GetFactionMembers(7), DynamicFactions[7][fMaxMembers], DynamicFactions[7][fName], DynamicFactions[7][fMinLevel]);
	}
 	if(DynamicFactions[8][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{00FF00}online\n", stringz2, GetFactionMembers(8), DynamicFactions[8][fMaxMembers], DynamicFactions[8][fName], DynamicFactions[8][fMinLevel]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{FF0000}offline\n", stringz2, GetFactionMembers(8), DynamicFactions[8][fMaxMembers], DynamicFactions[8][fName], DynamicFactions[8][fMinLevel]);
	}
 	if(DynamicFactions[9][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{00FF00}online\n", stringz2, GetFactionMembers(9), DynamicFactions[9][fMaxMembers], DynamicFactions[9][fName], DynamicFactions[9][fMinLevel]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{FF0000}offline\n", stringz2, GetFactionMembers(9), DynamicFactions[9][fMaxMembers], DynamicFactions[9][fName], DynamicFactions[9][fMinLevel]);
	}
 	if(DynamicFactions[10][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{00FF00}online\n", stringz2, GetFactionMembers(10), DynamicFactions[10][fMaxMembers], DynamicFactions[10][fName], DynamicFactions[10][fMinLevel]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{FF0000}offline\n", stringz2, GetFactionMembers(10), DynamicFactions[10][fMaxMembers], DynamicFactions[10][fName], DynamicFactions[10][fMinLevel]);
	}
 	if(DynamicFactions[11][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{00FF00}online\n", stringz2, GetFactionMembers(11), DynamicFactions[11][fMaxMembers], DynamicFactions[11][fName], DynamicFactions[11][fMinLevel]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{FF0000}offline\n", stringz2, GetFactionMembers(11), DynamicFactions[11][fMaxMembers], DynamicFactions[11][fName], DynamicFactions[11][fMinLevel]);
	}
  /*if(DynamicFactions[12][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 5 {00FF00}[applications online]\n", stringz2, GetFactionMembers(12), DynamicFactions[12][fMaxMembers], DynamicFactions[12][fName]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}[%d/%d] %s {FFFF00}Level 5\n", stringz2, GetFactionMembers(12), DynamicFactions[12][fMaxMembers], DynamicFactions[12][fName]);
	}*/
 	if(DynamicFactions[13][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{00FF00}online\n", stringz2, GetFactionMembers(13), DynamicFactions[13][fMaxMembers], DynamicFactions[13][fName], DynamicFactions[13][fMinLevel]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{FF0000}offline\n", stringz2, GetFactionMembers(13), DynamicFactions[13][fMaxMembers], DynamicFactions[13][fName], DynamicFactions[13][fMinLevel]);
	}
 	if(DynamicFactions[14][fApplication] > 0)
  	{
		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{00FF00}online\n", stringz2, GetFactionMembers(14), DynamicFactions[14][fMaxMembers], DynamicFactions[14][fName], DynamicFactions[14][fMinLevel]);
	}
	else
	{
 		format(stringz2, sizeof(stringz2),"%s{FFFFFF}%d/%d\t%s\t %d\t{FF0000}offline\n", stringz2, GetFactionMembers(14), DynamicFactions[14][fMaxMembers], DynamicFactions[14][fName], DynamicFactions[14][fMinLevel]);
	}
	ShowPlayerDialog(playerid, DIALOG_FACTIONS, DIALOG_STYLE_TABLIST_HEADERS,"Factions", stringz2, "Select", "Cancel");
	return 1;
}

stock GetOnLinePlayers()
{
    new OnLine;
    for(new i, g = GetMaxPlayers(); i < g; i++)
        if(IsPlayerConnected(i))
            OnLine++;
    return OnLine;
}

stock Text3D:CreateStreamed3DTextLabel(const string[], color, Float:posx, Float:posy, Float:posz, Float:draw_distance, virtualworld, testlos = 0)
{
	return CreateDynamic3DTextLabel(string, color, posx, posy, posz, draw_distance, INVALID_PLAYER_ID, INVALID_PLAYER_ID, testlos, virtualworld, -1, -1, 100.0);
}

stock GetVehicleSpeed(vehicleid, get3d)
{
	new Float:x, Float:y, Float:z;
	GetVehicleVelocity(vehicleid, x, y, z);
	return SpeedCheck(x, y, z, 100.0, get3d);
}

stock PlayAudioStreamForPlayersInCar(vehicleid,url[])
{
    foreach(new i : Player)
    {
        if(IsPlayerInAnyVehicle(i))
        {
            if(GetPlayerVehicleID(i) == vehicleid)
            {
                PlayAudioStreamForPlayer(i,url);
            }
        }
    }
    return 1;
}

stock StopAudioStreamForPlayersInCar(vehicleid)
{
    foreach(new i : Player)
    {
        if(IsPlayerInAnyVehicle(i))
        {
            if(GetPlayerVehicleID(i) == vehicleid)
            {
                StopAudioStreamForPlayer(i);
            }
        }
    }
    return 1;
}

FormatNumber(number)
{
	new tStr[16];

    new number2 = number;
    if(number < 0) number = number * -1;

    format(tStr, sizeof(tStr), "%d", number);

    if(strlen(tStr) < 4)
 	return tStr;

    new iPos = strlen(tStr), iCount = 1;

    while(iPos > 0)
    {
		if(iCount == 4)
		{
			iCount = 0;
			strins(tStr, ",", iPos, 1);
			iPos++;
		}
        iCount++;
        iPos--;
    }
    if(number2 < 0) format(tStr, sizeof(tStr), "-%s", tStr);
    return tStr;
}

IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	{
		if(string[i] > '9' || string[i] < '0') return 0;
	}
	return 1;
}

stock sscanf(string[], format[], {Float,_}:...)
{
	#if defined isnull
		if(isnull(string))
	#else
		if(string[0] == 0 || (string[0] == 1 && string[1] == 0))
	#endif
		{
			return format[0];
		}
	#pragma tabsize 4
	new
		formatPos = 0,
		stringPos = 0,
		paramPos = 2,
		paramCount = numargs(),
		delim = ' ';
	while (string[stringPos] && string[stringPos] <= ' ')
	{
		stringPos++;
	}
	while (paramPos < paramCount && string[stringPos])
	{
		switch (format[formatPos++])
		{
			case '\0':
			{
				return 0;
			}
			case 'i', 'd':
			{
				new
					neg = 1,
					num = 0,
					ch = string[stringPos];
				if(ch == '-')
				{
					neg = -1;
					ch = string[++stringPos];
				}
				do
				{
					stringPos++;
					if('0' <= ch <= '9')
					{
						num = (num * 10) + (ch - '0');
					}
					else
					{
						return -1;
					}
				}
				while ((ch = string[stringPos]) > ' ' && ch != delim);
				setarg(paramPos, 0, num * neg);
			}
			case 'h', 'x':
			{
				new
					num = 0,
					ch = string[stringPos];
				do
				{
					stringPos++;
					switch (ch)
					{
						case 'x', 'X':
						{
							num = 0;
							continue;
						}
						case '0' .. '9':
						{
							num = (num << 4) | (ch - '0');
						}
						case 'a' .. 'f':
						{
							num = (num << 4) | (ch - ('a' - 10));
						}
						case 'A' .. 'F':
						{
							num = (num << 4) | (ch - ('A' - 10));
						}
						default:
						{
							return -1;
						}
					}
				}
				while ((ch = string[stringPos]) > ' ' && ch != delim);
				setarg(paramPos, 0, num);
			}
			case 'c':
			{
				setarg(paramPos, 0, string[stringPos++]);
			}
			case 'f':
			{

				new changestr[16], changepos = 0, strpos = stringPos;
				while(changepos < 16 && string[strpos] && string[strpos] != delim)
				{
					changestr[changepos++] = string[strpos++];
    				}
				changestr[changepos] = '\0';
				setarg(paramPos,0,_:floatstr(changestr));
			}
			case 'p':
			{
				delim = format[formatPos++];
				continue;
			}
			case '\':
			{
				new
					end = formatPos - 1,
					ch;
				while ((ch = format[++end]) && ch != '\') {}
				if(!ch)
				{
					return -1;
				}
				format[end] = '\0';
				if((ch = strfind(string, format[formatPos], false, stringPos)) == -1)
				{
					if(format[end + 1])
					{
						return -1;
					}
					return 0;
				}
				format[end] = '\';
				stringPos = ch + (end - formatPos);
				formatPos = end + 1;
			}
			case 'u':
			{
				new
					end = stringPos - 1,
					id = 0,
					bool:num = true,
					ch;
				while ((ch = string[++end]) && ch != delim)
				{
					if(num)
					{
						if('0' <= ch <= '9')
						{
							id = (id * 10) + (ch - '0');
						}
						else
						{
							num = false;
						}
					}
				}
				if(num && IsPlayerConnected(id))
				{
					setarg(paramPos, 0, id);
				}
				else
				{
					#if !defined foreach
						#define foreach(%1,%2) for (new %2 = 0; %2 < MAX_PLAYERS; %2++) if(IsPlayerConnected(%2))
						#define __SSCANF_FOREACH__
					#endif
					string[end] = '\0';
					num = false;
					new
						name[MAX_PLAYER_NAME];
					id = end - stringPos;
					foreach (Player, playerid)
					{
						GetPlayerName(playerid, name, sizeof (name));
						if(!strcmp(name, string[stringPos], true, id))
						{
							setarg(paramPos, 0, playerid);
							num = true;
							break;
						}
					}
					if(!num)
					{
						setarg(paramPos, 0, INVALID_PLAYER_ID);
					}
					string[end] = ch;
					#if defined __SSCANF_FOREACH__
						#undef foreach
						#undef __SSCANF_FOREACH__
					#endif
				}
				stringPos = end;
			}
			case 's', 'z':
			{
				new
					i = 0,
					ch;
				if(format[formatPos])
				{
					while ((ch = string[stringPos++]) && ch != delim)
					{
						setarg(paramPos, i++, ch);
					}
					if(!i)
					{
						return -1;
					}
				}
				else
				{
					while ((ch = string[stringPos++]))
					{
						setarg(paramPos, i++, ch);
					}
				}
				stringPos--;
				setarg(paramPos, i, '\0');
			}
			default:
			{
				continue;
			}
		}
		while (string[stringPos] && string[stringPos] != delim && string[stringPos] > ' ')
		{
			stringPos++;
		}
		while (string[stringPos] && (string[stringPos] == delim || string[stringPos] <= ' '))
		{
			stringPos++;
		}
		paramPos++;
	}
	do
	{
		if((delim = format[formatPos++]) > ' ')
		{
			if(delim == '\')
			{
				while ((delim = format[formatPos++]) && delim != '\') {}
			}
			else if(delim != 'z')
			{
				return delim;
			}
		}
	}
	while (delim > ' ');
	return 0;
}

stock right(source[], len)
{
	new retval[MAX_STRING], srclen;
	srclen = strlen(source);
	strmid(retval, source, srclen - len, srclen, MAX_STRING);
	return retval;
}

stock IsMail(email[])
{
  	new len=strlen(email),
  		cstate=0,
  		i;
  	for(i=0;i<len;i++)
	{
	    if((cstate==0 || cstate==1) && (email[i]>='A' && email[i]<='Z')||(email[i]>='0' && email[i]<='9') || (email[i]>='a' && email[i]<='z')  || (email[i]=='.')  || (email[i]=='-')  || (email[i]=='_'))
	    {
	    }
		else
		{
	       // Ok no A..Z,a..z,_,.,-
	       if((cstate==0) &&(email[i]=='@'))
		   {
	          // its an @ after the name, ok state=1;
	          cstate=1;
	       }
		   else
		   {
	          // Its stuff which is not allowed
	          return false;
	       }
	 	}
	}
  	if(cstate<1) return false;
  	if(len<6) return false;
  	// A toplevel domain has only 3 to 4 signs :-)
  	if((email[len-3]=='.') || (email[len-4]=='.') || (email[len-5]=='.')) return true;
  	return false;
}

stock IsVehicleOccupied(vehicleid)
{
	foreach(new i : Player)
	{
		if( IsPlayerInVehicle( i, vehicleid ) ) return 1;
	}
	return 0;
}

forward TwoSecondsTimer();
public TwoSecondsTimer()
{
	new hour,
		minn,
		sec;
	gettime(hour,minn,sec);
	hour+=SERVER_HOUR_FIX;
	if(hour == 24) hour = 0;
	if(hour == 20 && minn == 30 && BonusAcc == 0)
	{
		SendClientMessageToAll(COLOR_YELLOW, "Bonus: All players received 2.500.000$ and 2 cases, thanks for your activity!");
		foreach(new i : Player)
		{
			GivePlayerCash(i, 2500000);
			PlayerInfo[i][pCases]+=2;
			Update(i,pCasesx);
		}
		BonusAcc = 1;
	}
	else if(hour == 20 && minn == 32) BonusAcc=0;
	new string[256];
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pAdmin] >= 1 || PlayerInfo[i][pHelper] >= 1)
	    {
			if(IsPlayerConnected(i))
			{
				if(Spectate[i] != -1)
				{
					new targetid = Spectate[i];
					if(IsPlayerConnected(targetid))
					{
				        new Float:health,
					    	name[MAX_PLAYER_NAME];
					    GetPlayerName(targetid, name, sizeof(name));
					    GetPlayerHealth(targetid, health);
					    if(GetPlayerState(targetid) == PLAYER_STATE_DRIVER || GetPlayerState(targetid) == PLAYER_STATE_PASSENGER)
						{
					        new Float:Valoarea,
								carid = GetPlayerVehicleID(targetid),
								speed = Carspeed(targetid);
							GetVehicleHealth(carid,Valoarea);
						    format(string, sizeof(string), "%s (~r~%d~w~) - L ~r~%d", name, targetid, PlayerInfo[targetid][pLevel]);
						    PlayerTextDrawSetString(i, TextDrawSpec[i][1], string);
						    format(string, sizeof(string), "HEALTH:~r~ %.1f", health);
						    PlayerTextDrawSetString(i, TextDrawSpec[i][2], string);
						    format(string, sizeof(string), "W: ~r~%d ~w~- JAIL: ~r~%d", PlayerInfo[targetid][pWantedLevel], PlayerInfo[targetid][pJailTime]);
							PlayerTextDrawSetString(i, TextDrawSpec[i][3], string);
							format(string, sizeof(string), "CAR: ~r~%d ~w~(~r~%.1f~w~ HP)", carid, Valoarea);
							PlayerTextDrawSetString(i, TextDrawSpec[i][4], string);
							format(string, sizeof(string), "SPEED: ~g~%d KM/H", speed);
							PlayerTextDrawSetString(i, TextDrawSpec[i][5], string);
						    PlayerTextDrawShow(i, TextDrawSpec[i][1]);
							PlayerTextDrawShow(i, TextDrawSpec[i][2]);
							PlayerTextDrawShow(i, TextDrawSpec[i][3]);
							PlayerTextDrawShow(i, TextDrawSpec[i][4]);
							PlayerTextDrawShow(i, TextDrawSpec[i][5]);
						}
						else
						{
						    format(string, sizeof(string), "%s (~r~%d~w~) - L ~r~%d", name, targetid, PlayerInfo[targetid][pLevel]);
						    PlayerTextDrawSetString(i, TextDrawSpec[i][1], string);
						    format(string, sizeof(string), "HEALTH:~r~ %.1f", health);
						    PlayerTextDrawSetString(i, TextDrawSpec[i][2], string);
							format(string, sizeof(string), "W: ~r~%d ~w~- JAIL: ~r~%d", PlayerInfo[targetid][pWantedLevel], PlayerInfo[targetid][pJailTime]);
						    PlayerTextDrawSetString(i, TextDrawSpec[i][3], string);
						    PlayerTextDrawShow(i, TextDrawSpec[i][1]);
					        PlayerTextDrawShow(i, TextDrawSpec[i][2]);
					        PlayerTextDrawShow(i, TextDrawSpec[i][3]);
					    	PlayerTextDrawHide(i, TextDrawSpec[i][4]);
					    	PlayerTextDrawHide(i, TextDrawSpec[i][5]);
						}
						if(GetPlayerInterior(targetid) != GetPlayerInterior(i))
						{
							SetPlayerInterior(i,GetPlayerInterior(targetid));
							PlayerSpectatePlayer(i, targetid);
						}
						if(GetPlayerVirtualWorld(targetid) != GetPlayerVirtualWorld(i))
						{
							SetPlayerVirtualWorld(i,GetPlayerVirtualWorld(targetid));
							PlayerSpectatePlayer(i, targetid);
						}
						if(SpectateState[targetid] == 1 && GetPlayerState(targetid) == PLAYER_STATE_DRIVER || SpectateState[targetid] == 1 && GetPlayerState(targetid) == PLAYER_STATE_PASSENGER)
						{
							new carid = GetPlayerVehicleID(targetid);
						    PlayerSpectateVehicle(i, carid);
							SpectateState[targetid] = 2;
						}
						if(SpectateState[targetid] == 2 && GetPlayerState(targetid) == PLAYER_STATE_ONFOOT)
						{
							PlayerSpectatePlayer(i, Spectate[targetid]);
							SpectateState[targetid] = 1;
						}
					}
					else
					{
						TogglePlayerControllable(i, 1);
						TogglePlayerSpectating(i, 0);
						SetPlayerInterior(i,Unspec[i][sPint]);
						PlayerInfo[i][pInt] = Unspec[i][sPint];
						PlayerInfo[i][pLocal] = Unspec[i][sLocal];
						Unspec[i][sLocal] = -1;
						gTeam[i] = PlayerInfo[i][pTeam];
						SetPlayerToTeamColor(i);
				        PlayerTextDrawHide(i, TextDrawSpec[i][1]);
					    PlayerTextDrawHide(i, TextDrawSpec[i][2]);
						PlayerTextDrawHide(i, TextDrawSpec[i][3]);
					    PlayerTextDrawHide(i, TextDrawSpec[i][4]);
					    PlayerTextDrawHide(i, TextDrawSpec[i][5]);
						Spectate[i] = -1;
					}
				}
				else
				{
				    PlayerTextDrawHide(i, TextDrawSpec[i][1]);
			    	PlayerTextDrawHide(i, TextDrawSpec[i][2]);
	    			PlayerTextDrawHide(i, TextDrawSpec[i][3]);
			    	PlayerTextDrawHide(i, TextDrawSpec[i][4]);
			    	PlayerTextDrawHide(i, TextDrawSpec[i][5]);
				}
			}
		}
	}
	foreach(new x : Player)
	{
	    new carid = GetPlayerVehicleID(x),
			Float:health;
    	if(IsPlayerInRangeOfPoint(x,15.0,1025.0671,-1023.7895,32.1016))
		{
	    	GetVehicleHealth(carid, health);
	    	if(health < 999.0)
	    	{
	    		if(GetPlayerState(x) == 2)
	    		{
	    	    	pnsmoney[x] = GetPlayerMoney(x);
					SetTimerEx("AfterSpray", 3000, false, "i", x);
					return 1;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(x,15.0,719.9537,-457.2771,16.3359))
		{
	    	GetVehicleHealth(carid, health);
	    	if(health < 999.0)
	    	{
	    		if(GetPlayerState(x) == 2)
	    		{
	    	    	pnsmoney[x] = GetPlayerMoney(x);
                	SetTimerEx("AfterSpray", 3000, false, "i", x);
					return 1;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(x,15.0,487.4134,-1740.1738,11.1370))
		{
	    	GetVehicleHealth(carid, health);
	   	 	if(health < 999.0)
	    	{
	    		if(GetPlayerState(x) == 2)
	    		{
	    	    	pnsmoney[x] = GetPlayerMoney(x);
                	SetTimerEx("AfterSpray", 3000, false, "i", x);
					return 1;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(x,15.0,2065.5911,-1831.4495,13.5469))
		{
	    	GetVehicleHealth(carid, health);
	    	if(health < 999.0)
	    	{
	    		if(GetPlayerState(x) == 2)
	    		{
	    	    	pnsmoney[x] = GetPlayerMoney(x);
            		SetTimerEx("AfterSpray", 3000, false, "i", x);
					return 1;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(x,15.0,1974.3198,2162.7249,11.0703))
		{
	    	GetVehicleHealth(carid, health);
	    	if(health < 999.0)
	    	{
	    		if(GetPlayerState(x) == 2)
	    		{
	    	    	pnsmoney[x] = GetPlayerMoney(x);
                	SetTimerEx("AfterSpray", 3000, false, "i", x);
					return 1;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(x,15.0,-100.1086,1117.3312,19.7417))
		{
	    	GetVehicleHealth(carid, health);
	    	if(health < 999.0)
	    	{
	    		if(GetPlayerState(x) == 2)
	    		{
	    	    	pnsmoney[x] = GetPlayerMoney(x);
                	SetTimerEx("AfterSpray", 3000, false, "i", x);
					return 1;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(x,15.0,BizzInfo[51][bEntranceX],BizzInfo[51][bEntranceY],BizzInfo[51][bEntranceZ]))
		{
	    	if(EnterInModShop[x] > 0)
	    	{
	        	GivePlayerCash(x, -BizzInfo[51][bEntranceCost]);
				BizzInfo[51][bTill] += BizzInfo[51][bEntranceCost];
				new str[128];
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='51'",BizzInfo[51][bTill]);
				mysql_tquery(SQL,str,"","");
				format(string,sizeof(string),"~r~-%d$", BizzInfo[51][bEntranceCost]);
   				GameTextForPlayer(x, string, 5000, 1);
   				EnterInModShop[x] = 0;
				return 1;
			}
		}
		if(IsPlayerInRangeOfPoint(x,15.0,BizzInfo[38][bEntranceX],BizzInfo[38][bEntranceY],BizzInfo[38][bEntranceZ]))
		{
	    	if(EnterInModShop[x] > 0)
	    	{
	        	GivePlayerCash(x, -BizzInfo[38][bEntranceCost]);
				BizzInfo[38][bTill] += BizzInfo[38][bEntranceCost];
				new str[128];
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='38'",BizzInfo[38][bTill]);
				mysql_tquery(SQL,str,"","");
				format(string,sizeof(string),"~r~-%d$", BizzInfo[38][bEntranceCost]);
   				GameTextForPlayer(x, string, 5000, 1);
   				EnterInModShop[x] = 0;
				return 1;
			}
		}
		if(IsPlayerInRangeOfPoint(x,15.0,BizzInfo[39][bEntranceX],BizzInfo[39][bEntranceY],BizzInfo[39][bEntranceZ]))
		{
	    	if(EnterInModShop[x] > 0)
	    	{
	        	GivePlayerCash(x, -BizzInfo[39][bEntranceCost]);
				BizzInfo[39][bTill] += BizzInfo[39][bEntranceCost];
				new str[128];
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='39'",BizzInfo[39][bTill]);
				mysql_tquery(SQL,str,"","");
				format(string,sizeof(string),"~r~-%d$", BizzInfo[39][bEntranceCost]);
   				GameTextForPlayer(x, string, 5000, 1);
   				EnterInModShop[x] = 0;
				return 1;
			}
		}
		if(strcmp(PlayerInfo[x][pNewbieQuestion], "NULL", true))
		{
			new have,helperid=-1,name[30];
			foreach(new i : Player)
			{
				if(HaveNewbie[i] == x) have = 1;
			}
			if(have == 0)
			{
				new totalx,helperids[MAX_PLAYERS];
				foreach(new s : Player)
				{
					if((PlayerInfo[s][pHelper] != 0 && HelperDuty[s] == 1 && HaveNewbie[s] == -1 && gPlayerLogged[s] == 1) || (PlayerInfo[s][pAdmin] != 0 && HelperDuty[s] == 1 && HaveNewbie[s] == -1 && gPlayerLogged[s] == 1))
					{
						helperids[totalx] = s;
						totalx++;
					}
				}
				if(totalx > 0) helperid = helperids[random(totalx)];
			}
			if(helperid != -1)
			{
				HaveNewbie[helperid] = x;
				HelperTimer[helperid] = 120;
				GetPlayerName(x, name, sizeof(name));
				format(string, sizeof(string), "{FF6200}** {FFFF00}Question from %s (%d, level %d) {FF6200}**", name, x, PlayerInfo[x][pLevel]);
				SendClientMessage(helperid, COLOR_YELLOW, string);
				SendClientMessage(helperid, COLOR_YELLOW, PlayerInfo[x][pNewbieQuestion]);
			}
		}
	}
	return 1;
}

// FISH PLACE
forward ValidFishPlace(playerid);
public ValidFishPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInRangeOfPoint(playerid, 4,403.8266,-2088.7598,7.8359) || IsPlayerInRangeOfPoint(playerid, 4,398.7553,-2088.7490,7.8359))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4,396.2197,-2088.6692,7.8359) || IsPlayerInRangeOfPoint(playerid, 4,391.1094,-2088.7976,7.8359))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4,383.4157,-2088.7849,7.8359) || IsPlayerInRangeOfPoint(playerid, 4,374.9598,-2088.7979,7.8359))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4,369.8107,-2088.7927,7.8359) || IsPlayerInRangeOfPoint(playerid, 4,367.3637,-2088.7925,7.8359))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4,362.2244,-2088.7981,7.8359) || IsPlayerInRangeOfPoint(playerid, 4,354.5382,-2088.7979,7.8359))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 10,2000.5741,1563.2089,15.3672))
		{
		    return 1;
		}
	}
	return 0;
}

// MAFIA MEMBER
forward IsAMember(playerid);
public IsAMember(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader],
	    	member = PlayerInfo[playerid][pMember];
	    if(member == 4 || member == 5 || member == 6 || member == 10)
		{
		    return 1;
		}
		if(leader==4 || leader==5 || leader==6 || leader==10 || leader==15)
		{
		    return 1;
		}
	}
	return 0;
}

// COP
forward IsACop(playerid);
public IsACop(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader],
	    	member = PlayerInfo[playerid][pMember];
	    if(member==1 || member==2 || member==3 || member==8)
		{
		    return 1;
		}
		else if(leader==1 || leader==2 || leader==3 || leader==8 || leader==16)
		{
		    return 1;
		}
	}
	return 0;
}

// BANK
forward IsAtBank(playerid);
public IsAtBank(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInRangeOfPoint(playerid, 50.0, 2306.5564,-16.3045,26.7496))
	    {//BANK LS
	        return 1;
	    }
	}
	return 0;
}

forward GetDaysFromTimestamp(time);
public GetDaysFromTimestamp(time)
{
	new timex = gettime() - time, days=0;
	while(timex >= 86400)
	{
		timex -= 86400;
		days++;
	}
	return days;
}

// GAS STATION PLACE
forward IsAtGasStation(playerid);
public IsAtGasStation(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    //Los Santos Gas Station
		if(IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[33][bEntranceX],BizzInfo[33][bEntranceY],BizzInfo[33][bEntranceZ]) || IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[42][bEntranceX],BizzInfo[42][bEntranceY],BizzInfo[42][bEntranceZ]))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[43][bEntranceX],BizzInfo[43][bEntranceY],BizzInfo[43][bEntranceZ]) || IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[44][bEntranceX],BizzInfo[44][bEntranceY],BizzInfo[44][bEntranceZ]))
		{
		    return 1;
		}
		//Las Venturas Gas Station
		else if(IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[44][bEntranceX],BizzInfo[44][bEntranceY],BizzInfo[44][bEntranceZ]) || IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[45][bEntranceX],BizzInfo[45][bEntranceY],BizzInfo[45][bEntranceZ]))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[46][bEntranceX],BizzInfo[46][bEntranceY],BizzInfo[46][bEntranceZ]) || IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[47][bEntranceX],BizzInfo[47][bEntranceY],BizzInfo[47][bEntranceZ]))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[48][bEntranceX],BizzInfo[48][bEntranceY],BizzInfo[48][bEntranceZ]) || IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[49][bEntranceX],BizzInfo[49][bEntranceY],BizzInfo[49][bEntranceZ]))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[50][bEntranceX],BizzInfo[50][bEntranceY],BizzInfo[50][bEntranceZ]))
		{
		    return 1;
		}
		// sf
		else if(IsPlayerInRangeOfPoint(playerid,15.0,BizzInfo[55][bEntranceX],BizzInfo[55][bEntranceY],BizzInfo[55][bEntranceZ]))
		{
		    return 1;
		}
	}
	return 0;
}

// BOAT
forward IsABoat(carid);
public IsABoat(carid)
{
	if(GetVehicleModel(carid) == 430 || GetVehicleModel(carid) == 446 || GetVehicleModel(carid) == 452 || GetVehicleModel(carid) == 453 || GetVehicleModel(carid) == 454 || GetVehicleModel(carid) == 472 || GetVehicleModel(carid) == 473 || GetVehicleModel(carid) == 484 || GetVehicleModel(carid) == 493 || GetVehicleModel(carid) == 595)
	{
		return 1;
	}
	return 0;
}

// PLANE
forward IsAPlane(carid);
public IsAPlane(carid)
{
	if(GetVehicleModel(carid) == 417 || GetVehicleModel(carid) == 425 || GetVehicleModel(carid) == 447 || GetVehicleModel(carid) == 460 || GetVehicleModel(carid) == 464 || GetVehicleModel(carid) == 465 || GetVehicleModel(carid) == 469 || GetVehicleModel(carid) == 476 || GetVehicleModel(carid) == 487 || GetVehicleModel(carid) == 488 || GetVehicleModel(carid) == 497 || GetVehicleModel(carid) == 501 || GetVehicleModel(carid) == 511 || GetVehicleModel(carid) == 512 || GetVehicleModel(carid) == 513
	 || GetVehicleModel(carid) == 519 || GetVehicleModel(carid) == 520 || GetVehicleModel(carid) == 548 || GetVehicleModel(carid) == 553 || GetVehicleModel(carid) == 563 || GetVehicleModel(carid) == 577 || GetVehicleModel(carid) == 592 || GetVehicleModel(carid) == 593)
	{
		return 1;
	}
	return 0;
}

// COP CAR PD
forward IsACopCar(carid);
public IsACopCar(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 1)
		{
			return 1;
		}
	}
	return 0;
}

// ALL COPS CAR
forward Copcar2(carid);
public Copcar2(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 1 || VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 2 || VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 3 || VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 8)
		{
			return 1;
		}
	}
	return 0;
}

// FBI CAR
forward IsAFbiCar(carid);
public IsAFbiCar(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 2)
		{
			return 1;
		}
	}
	return 0;
}

// LVPD CAR
forward IsALVPDCar(carid);
public IsALVPDCar(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 8)
		{
			return 1;
		}
	}
	return 0;
}

// NG CAR
forward IsANgCar(carid);
public IsANgCar(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 3)
		{
			return 1;
		}
	}
	return 0;
}

// AMBULANCE
forward IsAnAmbulance(carid);
public IsAnAmbulance(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 14)
		{
			return 1;
		}
	}
	return 0;
}

//RENT CAR
forward IsARentCar(carid);
public IsARentCar(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 30)
		{
			return 1;
		}
	}
	return 0;
}

// NEWS
forward IsANewsCar(carid);
public IsANewsCar(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 9)
		{
			return 1;
		}
	}
	return 0;
}

// TAXI CAR
forward IsAnTaxi(carid);
public IsAnTaxi(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehGroup] == 13)
		{
			return 1;
		}
	}
	return 0;
}

forward IsInHQ(playerid);
public IsInHQ(playerid)
{
	for(new x; x < sizeof(DynamicFactions); x++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 50.0, DynamicFactions[x][fcX], DynamicFactions[x][fcY], DynamicFactions[x][fcZ]) && PlayerInfo[playerid][pMember] == x) return 1;
	}
	return 0;
}

// GARBAGE TRUCK
forward IsAGarbageTruck(carid);
public IsAGarbageTruck(carid)
{
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid && VehicleInfo[x][vehJob] == 10)
		{
			return 1;
		}
	}
	return 0;
}



// BUS
forward IsABus(carid);
public IsABus(carid)
{
	if(GetVehicleModel(carid)==431) return 1;
	return 0;
}

// PIZZA SCOOTER
forward IsAPizza(carid);
public IsAPizza(carid)
{
	if(GetVehicleModel(carid)==448) return 1;
	return 0;
}

// FARMER CAR
forward IsAFarmer(carid);
public IsAFarmer(carid)
{
	if(GetVehicleModel(carid)==531) return 1;
	return 0;
}

// TRUCK
forward IsATruck(carid);
public IsATruck(carid)
{
	if(GetVehicleModel(carid)==403||GetVehicleModel(carid)==514||GetVehicleModel(carid)==515) return 1;
	return 0;
}
	
forward IsABikez(carid);
public IsABikez(carid)
{

	if(GetVehicleModel(carid) == 448 || GetVehicleModel(carid) == 461 || GetVehicleModel(carid) == 462 || GetVehicleModel(carid) == 463 || GetVehicleModel(carid) == 468 || GetVehicleModel(carid) == 471 || GetVehicleModel(carid) == 481
	 || GetVehicleModel(carid) == 509 || GetVehicleModel(carid) == 510 || GetVehicleModel(carid) == 521 || GetVehicleModel(carid) == 522 || GetVehicleModel(carid) == 523 || GetVehicleModel(carid) == 581 || GetVehicleModel(carid) == 581)
	{
		return 1;
	}
	return 0;
}

// BIKE
forward IsABike(carid);
public IsABike(carid)
{

	if(GetVehicleModel(carid) == 481 || GetVehicleModel(carid) == 509 || GetVehicleModel(carid) == 510)
	{
		return 1;
	}
	return 0;
}

forward TpTest(playerid);
public TpTest(playerid)
{
	new Float: dx, Float: dy, Float: dz, Float: distance;
	GetPlayerPos(playerid, dx, dy, dz);
	distance = GetDistanceBetweenPoints(TpTestx[playerid], TpTesty[playerid], TpTestz[playerid],dx,dy,dz);
	if(distance > 300)
	{
  /*new string[128];
		format(string,sizeof(string), "AdmWarning: %s(id %d) is suspected to using teleport hack.",PlayerInfo[playerid][pNormalName], playerid);
        ABroadCast(COLOR_RED, string, 1);*/
        NightBot(playerid, "Cheats (teleport-hack) #2");
	}
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(PlayerInfo[playerid][pAdmin] > 0 && AdminDuty[playerid] == 1)
	{
	    if(GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, fX, fY, fZ+5);
			GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
		}
		else
		{
			SetPlayerPosFindZ(playerid, fX, fY, fZ+5);
		}
	}
	else if(InHQ[playerid] == -1 && InHouse[playerid] == -1 && InBussines[playerid] == -1) {
		GetPlayerPos(playerid, TpTestx[playerid], TpTesty[playerid], TpTestz[playerid]);
		SetTimerEx("TpTest",4000, false, "i", playerid);
	}
    return 1;
}

forward EmailDelivered(playerid, response_code, data[]);
public EmailDelivered(playerid, response_code, data[])
{
	new buffer[128];
	SendClientMessage(playerid, COLOR_WHITE, "-- -- --");
    if(response_code == 200)
    {
        format(buffer, sizeof(buffer), "An email was sent to %s. Click the link in the email if you want to unblock your account.", PlayerInfo[playerid][pEmail]);
        SendClientMessage(playerid, COLOR_YELLOW, buffer);
    }
    else
    {
        format(buffer, sizeof(buffer), "Email at %s couldn't be delivered, error code: %d. You can open a ticket on (panel.timelineinfo).", PlayerInfo[playerid][pEmail], response_code);
        SendClientMessage(playerid, COLOR_YELLOW, buffer);
    }
	SendClientMessage(playerid, COLOR_WHITE, "-- -- --");
    return 1;
}

// ONPLAYERCONNECT
public OnPlayerConnect(playerid)
{
    new playerip[16];
 	GetPlayerIp(playerid,playerip,sizeof(playerip));
    if(NumIp(playerip, playerid) >= SvarInfo[20][svValue])
	{
 		new string[128];
		format(string,sizeof(string), "(Error){FFFFFF} Maximum connections with same ip is %d. You need to be kicked.",SvarInfo[20][svValue]);
 		SendClientMessage(playerid, COLOR_ERROR, string);
 		KickEx(playerid);
 		return 1;
	}
	new word[30],nameee[30];
	GetPlayerName(playerid, nameee, sizeof(nameee));
	new Cache: adv = mysql_query(SQL, "SELECT * FROM `adv`");
	for(new ix, jx = cache_get_row_count (); ix != jx; ++ix)
	{
		cache_get_field_content(ix, "word", word);
		if(strfind(nameee, word, true) != -1)
		{
			new string[128];
			SendClientMessage(playerid, COLOR_RED2, "You have been kicked because you had a forbidden name.");
			format(string, sizeof(string), "Notice: {FFFFFF}%s has been kicked because he had a forbidden name.", nameee);
            ABroadCast(COLOR_RED2, string, 1);
			KickEx(playerid);
			break;
		}
	}
	cache_delete(adv);
    wantedvar[playerid] = 0;
	XDeaths[playerid] = 0;
    LastDeath[playerid] = 0;
    pnsmoney[playerid] = 0;
    cased[playerid] = 0;
    caser[playerid] = 1001;
    RepairTime[playerid] = 0;
    LastPlayer[playerid] = -1;
    payala[playerid] = 0;
    AntiFlood_InitPlayer(playerid);
	GameTextForPlayer(playerid, "~w~LOADING...~n~~g~CHECKING BAN STATUS", 2000, 3);
 	if(antirem[playerid] == 0)
 	{
 		antirem[playerid] = 1;
 	}

 	load_accs_ptd(playerid);
 	SetPVarInt(playerid, "accs", 0);
	// * RemoveBuildingForPlayer * //
	if(antirem[playerid] == 1)
	{
		RemoveBuildingForPlayer(playerid, 14449, 2567.6172, -1294.6328, 1061.2500, 0.25); // masa hq mafii
	    RemoveBuildingForPlayer(playerid, 16094, 191.1406, 1870.0391, 21.4766, 0.25);
	    RemoveBuildingForPlayer(playerid, 1226, 1624.6875, -2190.3750, 16.3125, 0.25);
		RemoveBuildingForPlayer(playerid, 17350, -54.9922, -1130.7266, 4.5781, 0.25);
		RemoveBuildingForPlayer(playerid, 1447, -89.9297, -1133.7500, 1.3906, 0.25);
		RemoveBuildingForPlayer(playerid, 1438, -87.0547, -1132.6797, 0.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 1462, -79.2500, -1137.7188, 0.0547, 0.25);
		RemoveBuildingForPlayer(playerid, 17072, -54.9922, -1130.7266, 4.5781, 0.25);
		RemoveBuildingForPlayer(playerid, 17073, -56.1250, -1130.1719, 4.4922, 0.25);
		RemoveBuildingForPlayer(playerid, 1462, -84.3750, -1116.0938, 0.2578, 0.25);
		RemoveBuildingForPlayer(playerid, 1447, -84.0547, -1117.2188, 1.3906, 0.25);
		RemoveBuildingForPlayer(playerid, 1415, -68.3516, -1104.9922, 0.2188, 0.25);
		RemoveBuildingForPlayer(playerid, 1462, -60.3594, -1116.9375, 0.2578, 0.25);
		RemoveBuildingForPlayer(playerid, 1438, -63.6719, -1125.6953, 0.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 1438, -63.4141, -1115.4141, 0.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 1415, -63.8125, -1106.4219, 0.2188, 0.25);
		RemoveBuildingForPlayer(playerid, 3593, 2407.3125, -1418.3594, 23.6875, 0.25);
		RemoveBuildingForPlayer(playerid, 955, 1789.2109, -1369.2656, 15.1641, 0.25);
		RemoveBuildingForPlayer(playerid, 956, 1634.1094, -2237.5313, 12.8906, 0.25);
		RemoveBuildingForPlayer(playerid, 955, 2060.1172, -1897.6406, 12.9297, 0.25);
		RemoveBuildingForPlayer(playerid, 956, 2480.8594, -1959.2734, 12.9609, 0.25);
		RemoveBuildingForPlayer(playerid, 955, 1928.7344, -1772.4453, 12.9453, 0.25);
		RemoveBuildingForPlayer(playerid, 956, 2139.5156, -1161.4844, 23.3594, 0.25);
		RemoveBuildingForPlayer(playerid, 955, 1154.7266, -1460.8906, 15.1563, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, -19.0391, -57.8359, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1776, -36.1484, -57.8750, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, -16.1172, -91.6406, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1776, -17.5469, -91.7109, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1776, -16.5313, -140.2969, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, -15.1016, -140.2266, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1776, -33.8750, -186.7656, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, -32.4453, -186.6953, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, -35.7266, -140.2266, 1003.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, 495.9688, -24.3203, 1000.7344, 0.25);
		RemoveBuildingForPlayer(playerid, 1776, 500.5625, -1.3672, 1000.7344, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, 501.8281, -1.4297, 1000.7344, 0.25);
		RemoveBuildingForPlayer(playerid, 1775, 373.8281, -178.1406, 1000.7344, 0.25);
		RemoveBuildingForPlayer(playerid, 1977, 316.8750, -140.3516, 998.5859, 0.25);
		RemoveBuildingForPlayer(playerid, 14843, 266.3516, 81.1953, 1001.2813, 0.25);
		RemoveBuildingForPlayer(playerid, 17350, -54.9922, -1130.7266, 4.5781, 0.25);// trucker
		RemoveBuildingForPlayer(playerid, 1447, -89.9297, -1133.7500, 1.3906, 0.25);
		RemoveBuildingForPlayer(playerid, 1438, -87.0547, -1132.6797, 0.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 17072, -54.9922, -1130.7266, 4.5781, 0.25);
		RemoveBuildingForPlayer(playerid, 17073, -56.1250, -1130.1719, 4.4922, 0.25);
		RemoveBuildingForPlayer(playerid, 1462, -84.3750, -1116.0938, 0.2578, 0.25);
		RemoveBuildingForPlayer(playerid, 1447, -84.0547, -1117.2188, 1.3906, 0.25);
		RemoveBuildingForPlayer(playerid, 1415, -68.3516, -1104.9922, 0.2188, 0.25);
		RemoveBuildingForPlayer(playerid, 1462, -60.3594, -1116.9375, 0.2578, 0.25);
		RemoveBuildingForPlayer(playerid, 1438, -63.6719, -1125.6953, 0.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 1438, -63.4141, -1115.4141, 0.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 1415, -63.8125, -1106.4219, 0.2188, 0.25);
		RemoveBuildingForPlayer(playerid, 1257, 1918.7500, 2314.3984, 11.0938, 0.25);// baracile
		RemoveBuildingForPlayer(playerid, 1257, 1918.8672, 2115.7188, 11.0938, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1808.1250, -1859.5391, 16.3516, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1783.6719, -1859.5391, 16.3516, 0.25);
		RemoveBuildingForPlayer(playerid, 1302, 0.0, 0.0, 0.0, 6000.0);
		RemoveBuildingForPlayer(playerid, 1209, 0.0, 0.0, 0.0, 6000.0);
		RemoveBuildingForPlayer(playerid, 955, 0.0, 0.0, 0.0, 6000.0);
		RemoveBuildingForPlayer(playerid, 956, 0.0, 0.0, 0.0, 6000.0);
		RemoveBuildingForPlayer(playerid, 1775, 0.0, 0.0, 0.0, 6000.0);
		RemoveBuildingForPlayer(playerid, 1776, 0.0, 0.0, 0.0, 6000.0);
		RemoveBuildingForPlayer(playerid, 1977, 316.8750, -140.3516, 998.5859, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 2093.9297, -1762.6406, 16.4063, 0.25); // Pizza
		RemoveBuildingForPlayer(playerid, 712, 2100.8125, -1764.3750, 21.3906, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 2105.0859, -1765.6094, 10.8047, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 2114.7188, -1785.1797, 16.3984, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, 2128.3125, -1786.7109, 12.7031, 0.25);
		RemoveBuildingForPlayer(playerid, 733, 778.2109, -1207.2031, 13.5391, 0.25); // Taietor de gazon
		RemoveBuildingForPlayer(playerid, 729, 731.3906, -1223.1641, 12.5078, 0.25);
		RemoveBuildingForPlayer(playerid, 733, 717.1172, -1236.2266, 12.0625, 0.25);
		RemoveBuildingForPlayer(playerid, 726, 680.8594, -1293.3984, 12.3984, 0.25);
		RemoveBuildingForPlayer(playerid, 732, 782.7969, -1304.0781, 12.3906, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 746.4922, -1303.4141, 11.6719, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 760.4531, -1304.1328, 12.2813, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 782.3438, -1277.8359, 12.2031, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 783.0625, -1245.7969, 12.5938, 0.25);
		RemoveBuildingForPlayer(playerid, 1447, -107.0859, -1196.0859, 3.0391, 0.25); // Garbage
		RemoveBuildingForPlayer(playerid, 1412, -112.1719, -1194.7500, 3.0391, 0.25);
		RemoveBuildingForPlayer(playerid, 1413, -102.1328, -1197.1641, 2.9609, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, -98.9219, -1204.9141, 3.0391, 0.25);
		RemoveBuildingForPlayer(playerid, 985, 2497.4063, 2777.0703, 11.5313, 0.25);
		RemoveBuildingForPlayer(playerid, 986, 2497.4063, 2769.1094, 11.5313, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, -98.8750, -1199.9297, 3.0391, 0.25);
		RemoveBuildingForPlayer(playerid, 727, -73.8203, -1569.1719, 1.3516, 0.25);
		RemoveBuildingForPlayer(playerid, 3175, -64.3828, -1572.2109, 1.4063, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1774.7578, -1931.3125, 16.3750, 0.25); //Taxi LS
		RemoveBuildingForPlayer(playerid, 700, 1810.6797, -1944.6406, 11.4453, 0.25);
		RemoveBuildingForPlayer(playerid, 700, 1817.1797, -1944.6406, 11.4453, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1806.4297, -1931.6016, 16.3750, 0.25);
		RemoveBuildingForPlayer(playerid, 5024, 1748.8438, -1883.0313, 14.1875, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1774.7578, -1901.5391, 16.3750, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1806.4297, -1901.8281, 16.3750, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1836.7188, -1898.8984, 13.7344, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1747.1875, -1846.7109, 10.8047, 0.25);
		RemoveBuildingForPlayer(playerid, 1297, 937.5547, -1213.8672, 18.5938, 0.25);
		RemoveBuildingForPlayer(playerid, 5818, 954.6875, -1305.7734, 30.1406, 0.25);
		RemoveBuildingForPlayer(playerid, 1267, 953.4922, -1232.5703, 24.1328, 0.25);
		RemoveBuildingForPlayer(playerid, 717, 824.3438, -1155.3750, 23.0000, 0.25);
		RemoveBuildingForPlayer(playerid, 717, 850.9844, -1155.3750, 23.0000, 0.25);
		RemoveBuildingForPlayer(playerid, 717, 875.6094, -1155.3750, 23.0000, 0.25);
		RemoveBuildingForPlayer(playerid, 717, 895.6953, -1155.3750, 23.0000, 0.25);
		RemoveBuildingForPlayer(playerid, 717, 907.7813, -1155.3750, 23.0000, 0.25);
		RemoveBuildingForPlayer(playerid, 717, 927.6172, -1155.3750, 23.0000, 0.25);
		RemoveBuildingForPlayer(playerid, 14843, 266.3516, 81.1953, 1001.2813, 0.25);//gratii pd
		RemoveBuildingForPlayer(playerid, 656, 1096.6250, -294.4141, 72.9375, 0.25);//hitman
		RemoveBuildingForPlayer(playerid, 1340, 2327.8594, 2421.2500, 10.8594, 0.25);//lvpd
		RemoveBuildingForPlayer(playerid, 714, 1481.6484, -638.4844, 90.2422, 0.25);//palat piMp
		RemoveBuildingForPlayer(playerid, 659, 1503.7578, -720.7031, 91.6563, 0.25);
		RemoveBuildingForPlayer(playerid, 659, 1492.1250, -716.1250, 93.5000, 0.25);
		RemoveBuildingForPlayer(playerid, 1340, 388.8594, -2071.6641, 7.9453, 0.25); //Garduri Fish
		RemoveBuildingForPlayer(playerid, 3710, 2788.1563, -2455.8828, 16.7266, 0.25); // Garbage
		RemoveBuildingForPlayer(playerid, 3710, 2788.1563, -2493.9844, 16.7266, 0.25);
		RemoveBuildingForPlayer(playerid, 3744, 2771.0703, -2520.5469, 15.2188, 0.25);
		RemoveBuildingForPlayer(playerid, 3744, 2774.7969, -2534.9531, 15.2188, 0.25);
		RemoveBuildingForPlayer(playerid, 3746, 2814.2656, -2521.4922, 25.5156, 0.25);
		RemoveBuildingForPlayer(playerid, 3574, 2774.7969, -2534.9531, 15.2188, 0.25);
		RemoveBuildingForPlayer(playerid, 3574, 2771.0703, -2520.5469, 15.2188, 0.25);
		RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2501.8359, 14.6953, 0.25);
		RemoveBuildingForPlayer(playerid, 3624, 2788.1563, -2493.9844, 16.7266, 0.25);
		RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2486.9609, 14.6563, 0.25);
		RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2463.8203, 14.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1278, 2773.3438, -2479.9688, 26.7031, 0.25);
		RemoveBuildingForPlayer(playerid, 3624, 2788.1563, -2455.8828, 16.7266, 0.25);
		RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2448.4766, 14.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 1278, 2773.3438, -2443.1719, 26.7031, 0.25);
		RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2501.8359, 14.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 3761, 2797.5156, -2486.8281, 14.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2486.9609, 14.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2463.8203, 14.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 3761, 2797.5156, -2448.3438, 14.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2448.4766, 14.6328, 0.25);
		RemoveBuildingForPlayer(playerid, 3620, 2814.2656, -2521.4922, 25.5156, 0.25);
		RemoveBuildingForPlayer(playerid, 3474, 2523.9688, 2818.4922, 16.7422, 0.25);
		RemoveBuildingForPlayer(playerid, 1491, 2543.8516, -1306.3828, 1053.6250, 0.25);// USA MAFII
		RemoveBuildingForPlayer(playerid, 1491, 2543.8359, -1303.3594, 1053.6250, 0.25);// USA MAFII
		RemoveBuildingForPlayer(playerid, 3778, 200.4844, -1875.0000, 3.0781, 0.25);
		RemoveBuildingForPlayer(playerid, 3615, 200.4844, -1875.0000, 3.0781, 0.25);

		
	}

	//loading stuff
	LoadServerMap(playerid);
	LoadPTextDraws(playerid);
	LoadBeeHivePlace(playerid);
    //LoadChristmasStuff(playerid);

 	// VARIABILELE
 	timerpacanele[playerid] = -1;
	rundapacanele[playerid] = -1;
	for(new i = 0; i < 10; i++) IcoanaPacanele[playerid][i] = 0;
	gPlayerUsingLoopingAnim[playerid] = 0;  BusCheckk[playerid] = 0;
	TypeName[playerid] = 0;					RaceCP[playerid] = 0;
	SelectChar[playerid] = 0; 				HidePM[playerid] = 0;
	PhoneOnline[playerid] = 0; 				SelectCharID[playerid] = 0;
	SelectCharPlace[playerid] = 0;			ChosenSkin[playerid] = 0;
	UsingDrugs[playerid] = 0; 				CurrentMoney[playerid] = 0;
	UsedFind[playerid] = 0; 				CP[playerid] = 0;
	Vending[playerid] = 0;                  PlayerInfo[playerid][pFirstAnswer] = 0;
	MoneyMessage[playerid] = 0; 			CheatRapidAnn[playerid] = 0;
	RepairOffer[playerid] = 999; 			RepairPrice[playerid] = 0;
	RepairCar[playerid] = 0; 				TalkingLive[playerid] = 0;
	LiveOffer[playerid] = 999; 				TakingLesson[playerid] = 0;
	RefillOffer[playerid] = 999; 			RefillPrice[playerid] = 0;
	DrugOffer[playerid] = 999; 				PlayerCuffed[playerid] = 0;
	PlayerCuffedTime[playerid] = 0; 		DrugPrice[playerid] = 0;
	RegistrationStep[playerid] = 0; 		PlayerCuffed2[playerid] = 0;
	DrugGram[playerid] = 0; 				HouseOffer[playerid] = 999;
	HouseID[playerid] = 0;				 	HousePrice[playerid] = 0;
	MedicTime[playerid] = 0;				WantedFarmer[playerid] = 0;
	NeedMedicTime[playerid] = 0; 			PlacedNews[playerid] = 0;
	GoChase[playerid] = 999; 				GetChased[playerid] = 999;
	OnDuty[playerid] = 0;                   ofercar[playerid] = -1;
	carprice[playerid] = 0;                 primesccar[playerid] = 0;
	CarID[playerid] = -1;                  	cartype[playerid] = 0;
	Diceid[playerid] = 999;					JobCar[playerid] = -1;
	GotHit[playerid] = 0; 					MedicCall[playerid] = 0;
	SafeTime[playerid] = 60;				TaxiCall[playerid] = 0;
	PlayerTied[playerid] = 0; 				TaxiFare[playerid] = 0;
	TaxiAccepted[playerid] = -1;			MedicAccepted[playerid] = -1;
	Listening[playerid] = -1;				InMinerJob[playerid] = 0;
	Slapped[playerid]=0;					minerloot[playerid] = 0;
	Mobile[playerid] = -1; 					ShowDMG[playerid] = 1;
	Spectate[playerid] = -1; 				PlayerDrunk[playerid] = 0;
	PlayerDrunkTime[playerid] = 0; 			Unspec[playerid][sLocal] = -1;
 	PlayerInfo[playerid][pNewbieEnabled] = 1;
	GarbageCollected[playerid] = 0;			DrugTimer[playerid] = 0;
 	flymode[playerid] = 0;					
 	tradecars[playerid] = -1;               tradecars2[playerid] = -1;
	tradetype[playerid] = -1;               tradetype2[playerid] = -1;
	tradeofferer[playerid] = -1;            tradediff[playerid] = 0;
 	ConsumingMoney[playerid] = 0;           hiddenoffer[playerid] = 999;
 	hiddenprice[playerid] = 0;              IsPlayerAFK[playerid] = 0;
    gLastCar[playerid] = 0; 				FirstSpawn[playerid] = 0;
	FactionOffer[playerid] = 999;			SellHouseID[playerid] = -1;
	gNews[playerid] = 0; 					BigEar[playerid] = 0;
	gFam[playerid] = 0;						examcar[playerid] = -1;
    hudactivated[playerid] = 0;				PhoneOnlineCalls[playerid] = 0;
	gPlayerLogged[playerid] = 0;           	PlayerInfo[playerid][pPetStatus] = 0;
	gPlayerLogTries[playerid] = 0; 			gPlayerAccount[playerid] = 0;
 	gPlayerSpawned[playerid] = 0;           ReportTime[playerid] = 0;
	FreeOffer[playerid] = -1;               TowAcc[playerid] = 0;
	FreePrice[playerid] = 0; 				PlayerTazeTime[playerid] = 0;
	PlayerStoned[playerid] = 0; 			TicketOffer[playerid] = 999;
	TicketMoney[playerid] = 0; 				TutTime[playerid] = 0;
 	FreePlayer[playerid] = -1;				TaxiMoneySpent[playerid] = 0;
	TurfsDisp[playerid] = 0; 				PlayerInfo[playerid][pCash] = dollah;
	NoFuel[playerid] = 0; 					LastBiz[playerid] = -1;
	LastBizTime[playerid] = 0;				FactionSpec[playerid] = 0;
	HireCar[playerid] = -1; 				gPlayerAnimLibsPreloaded[playerid] = 0;
	TransferOffer[playerid] = 999;			TaxiTimer[playerid] = 0;
	TransferMoney[playerid] = 0; 			AdvPlayer[playerid] = 0;
	pizzaprize[playerid] = 0;				QuestWait[playerid] = 0;
	InHouse[playerid] = -1; 				InBussines[playerid] = -1;
	targetfind[playerid] = -1; 				HaveNewbie[playerid] = -1;
	adminacceptedhelp[playerid] = -1;       TimerQuestion[playerid] = -1;
	MatsHolding[playerid] = 0;				GarbageTimer[playerid] = 0;
	MatsOffer[playerid] = -1; 				MatsPrice[playerid] = 0;
	MatsAmmo[playerid] = 0; 				SellgunOffer[playerid] = -1;
	SellgunPrice[playerid] = 0; 			SellgunMats[playerid] = 0;
	SellgunAmmo[playerid] = 0; 				SellgunID[playerid] = 0;
	pizzaj[playerid] = 0; 					farmerc[playerid] = 0;
	farmertime[playerid] = 50;              airprize[playerid] = 0;
	togfind[playerid] = 0;				 	TrashID[playerid] = -1;
	bizid[playerid] = 0; 					bizprice[playerid] = 0;
	bizoffer[playerid] = 999; 				BusinessRob[playerid] = 0;
	playerdeath[playerid] = 0; 				curatj[playerid] = 0;
	tazer[playerid] = 0; 					HelperTimer[playerid] = 0;
	OnlineTime[playerid] = 0;				SkinSelect[playerid] = 1;
	Clanidoff[playerid] = 999; 				OnlineTimeToday[playerid] = 0;
	PlayerHandsup[playerid] = 0;			Freezed[playerid] = 0;
	Trucker[playerid] = 0;					RobTime[playerid] = -1;
	SellTradeID[playerid] = -1;				CanSpectate[playerid] = 1;
	wantedlost[playerid] = 1799;			SellTradePrice[playerid] = 0;
	PizzaCP[playerid] = 0;					SellTradeTimer[playerid] = 0;
	Dicem[playerid] = 999; 					Undercover[playerid] = 0;
	Refueling[playerid] = 0;				InHQ[playerid] = -1;
	raceoff[playerid] = 999;				reportcheater[playerid] = -1;
	toglc[playerid] = 0;					reportreason[playerid] = 0;
	togsurf[playerid] = 0;					AirCP[playerid] = 0;
	fight2[playerid] = 999;					playerreported[playerid] = -1;
	taxim[playerid] = 0;					RentTime[playerid] = 0;
	shotTime[playerid] = 0;					RentMoneySpent[playerid] = 0;
    shot[playerid] = 0;						TaxiMoneyEarned[playerid] = 0;
	DeathP[playerid] = 0;                   EnterInModShop[playerid] = 0;
    timersoo[playerid] = 0;					FreeExpire[playerid] = 0;
    somatee[playerid] = 1;					somated[playerid] = -1;
    CheckBus[playerid] = 0;                 JobStep[playerid] = 0;
    busc[playerid] = 0;                     viddd[playerid] = 0;
 	GotoMats[playerid] = 0;					airj[playerid] = 0;
 	Trucker3[playerid] = 0;					Trucker4[playerid] = 0;
 	Trucker2[playerid] = 0;                 AreFaina[playerid] = 0;
 	CarJacker[playerid] = 0;                JackAcc[playerid] = 0;
 	Fishing[playerid] = 0;                  FishTimer[playerid] = 0;
 	TipPeste[playerid] = 0;                 SelFac[playerid] = 0;
 	BuyCar[playerid] = -1;                  PlayerInfo[playerid][pNewbieTimeout] = 0;
	HelperTimer[playerid] = 0;				timernewbie[playerid] = 0;
	HaveHelmet[playerid] = 0;				WantedTimer[playerid] = 0;
	CreateVEHID[playerid] = -1;				CreateVEH[playerid] = -1;
	SellHiddenID[playerid] = -1;			SellHiddenPrice[playerid] = 0;
	BlockVehUse[playerid] = 0;				FireworkTimer[playerid] = 0;
	TogVIP[playerid] = 1;					RentCar[playerid] = -1;
	TaxiDriver[playerid] = -1;				AdminDuty[playerid] = 0;
	HealTimer[playerid] = 0;				TogBid[playerid] = 1;
	BreachID[playerid] = 0;					login[playerid] = 0;
	toge[playerid] = 0;						togarrests[playerid] = 0;
	Asteapta[playerid] = -1;				adutytime[playerid] = 0;
 	PlayerInfo[playerid][pDrunkLevelLast] = 0;	EnableBoast[playerid] = 0;
 	PlayerInfo[playerid][pFPS] = 0;			packageson[playerid] = 0;
 	PlayerInfo[playerid][pPaintBallG] = 0;
 	PlayerInfo[playerid][pPaintBallKills] = 0;
 	PlayerInfo[playerid][pPaintBallVoted] = 0;
 	PlayerInfo[playerid][pPaintBallVoted2] = 0;
 	PlayerInfo[playerid][pNextNotification] = 0;
	PlayerInfo[playerid][pRaceG] = -1;
	PlayerInfo[playerid][pRaceVoted] = 0;
	PlayerInfo[playerid][pJobVehicle] = 0;
	BeeCar[playerid] = 0;
	PlayerInfo[playerid][pBlockedAcc] = 0;
	fctdeelay[playerid] = 0;
	builddeelay[playerid] = 0;
	RainbowOn[playerid] = 0;
	RainbowCarID[playerid] = -1;
	RainbowCarIN[playerid] = -1;
	StrawCP[playerid] = 0;
	InDmvTest[playerid] = 0;
	InLicenceTest[playerid] = 0;
	LicenceQtime[playerid] = 0;
	DmvQtime[playerid] = 0;
	HelperDuty[playerid] = 0;
	InOpenCase[playerid] = 0;
	CaseOpening[playerid] = 0;
	RegSex[playerid] = 0;
	RegAge[playerid] = 0;
	RegLanguage[playerid] = 0;
	HideDmvTds(playerid);
	ChangeClothes[playerid] = 0;
	EnterVehicle[playerid] = -1;
	for(new obj = 0; obj < questobjectss; obj++)  {
		DestroyDynamicPickup(PlayerInfo[playerid][pObject][obj]);
		DestroyDynamicMapIcon(PlayerInfo[playerid][pMapIcon][obj]);
	}
	strdel(LastText[playerid], 0, 128);
	format(LiveQuestion[playerid], 128, "NULL");
	format(PlayerInfo[playerid][pNormalName], 30, "NULL");
	format(somatename[playerid], 30, "NULL");
	format(reporttext[playerid], 30, "NULL");
	format(WantName[playerid], 30, "NULL");
	format(KeepPassword[playerid], 129, "NULL");
	format(WantBillName[playerid], 128, "bluffs.ga");
	format(AdvMSG[playerid], 256, "");
	format(PlayerInfo[playerid][pNewbieQuestion], 256, "NULL");
	//Delete Personal Car Variables
	for(new idd; idd < MAX_PERSONAL_VEHICLES; idd++)
	{
		PlayerInfo[playerid][pCarID][idd]			= 0;
		PlayerInfo[playerid][pCar][idd]				= -1;
		PlayerInfo[playerid][pCarModel][idd] 		= 0;
		PlayerInfo[playerid][pCarLocX][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLocY][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLocZ][idd] 		= 0.0;
		PlayerInfo[playerid][pCarAngle][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLLocX][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLLocY][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLLocZ][idd] 		= 0.0;
		PlayerInfo[playerid][pCarAngle2][idd] 		= 0.0;
		PlayerInfo[playerid][pCarBuyTime][idd]		= 0;
		PlayerInfo[playerid][pCarColor1][idd] 		= 1;
		PlayerInfo[playerid][pCarColor2][idd] 		= 1;
		PlayerInfo[playerid][pCarStage][idd] 		= 0;
		PlayerInfo[playerid][pCarLock][idd] 		= 0;
		PlayerInfo[playerid][pCarInsPrice][idd] 	= 0;
		PlayerInfo[playerid][pCarIns][idd] 			= 0;
		PlayerInfo[playerid][pCarKM][idd] 			= 0.0;
		PlayerInfo[playerid][pCarVIP][idd]			= 0;
		PlayerInfo[playerid][pCarNeon][idd]			= 0;
		PlayerInfo[playerid][pCarVipColors][idd]	= 0;
		PlayerInfo[playerid][pCarKMLast][idd]		= 0;
		PlayerInfo[playerid][pCarHP][idd] 			= 0.0;
		PlayerInfo[playerid][pCarDamage1][idd] 		= 0;
		PlayerInfo[playerid][pCarDamage2][idd] 		= 0;
		PlayerInfo[playerid][pCarDamage3][idd] 		= 0;
		PlayerInfo[playerid][pCarDamage4][idd] 		= 0;
		PlayerInfo[playerid][pCarGas][idd] 			= 100;
		PlayerInfo[playerid][pCarGasMax][idd] 		= 100;
		PlayerInfo[playerid][pCarPaintJ][idd] 		= 6;
		PlayerInfo[playerid][pCarBlock][idd]		= 0;
		PlayerInfo[playerid][pCarEvent][idd]		= 0;
		CarVipName[playerid][idd] = "";
		CarPlate[playerid][idd] = "";
		CarOwner[playerid][idd] = "";
		PlayerInfo[playerid][pCarVipXPos][idd] 		= 0.0;
		PlayerInfo[playerid][pCarVipYPos][idd] 		= 0.0;
		PlayerInfo[playerid][pCarVipZPos][idd] 		= 0.0;
		PlayerInfo[playerid][pCarVipRXPos][idd] 	= 0.0;
		PlayerInfo[playerid][pCarVipRYPos][idd] 	= 0.0;
		PlayerInfo[playerid][pCarVipRZPos][idd] 	= 0.0;
		for(new s; s < 17; s++)
		{
			CarMod[playerid][idd][s] = 0;
		}
	}

	GivePlayerCash(playerid,PlayerInfo[playerid][pCash]);
	if(PlayerInfo[playerid][pPetStatus] == 1 && PlayerInfo[playerid][pPet] == 1) RemovePet(playerid);
	// ANTI WEAPON CHEAT
	WeaponData[playerid][0] = false; 			WeaponData[playerid][1] = false;
	WeaponData[playerid][2] = false;			WeaponData[playerid][3] = false;
	WeaponData[playerid][4] = false; 			WeaponData[playerid][5] = false;
	WeaponData[playerid][6] = false; 			WeaponData[playerid][7] = false;
	WeaponData[playerid][8] = false; 			WeaponData[playerid][9] = false;
	WeaponData[playerid][10] = false; 			WeaponData[playerid][11] = false;
	WeaponData[playerid][12] = false;

	//Anti connect clan
	new playername[30];
	GetPlayerName(playerid, playername, sizeof(playername));
	foreach(new ids : Player)
	{
		if(!strcmp(playername, PlayerInfo[ids][pNormalName], true))
		{
			SS(playerid, COLOR_LIGHTRED, "Este deja logat cineva cu acest nick.", "Someone is already logged in with this nickname.");
            KickEx(playerid);
			return 1;
		}
	}

	// ANTI MONEY CHEAT
	TimerAtuPlayer[playerid] = SetTimerEx("UpdatePlayer", 2000, true, "d", playerid);

    // COLOR ON LOGIN
	SetPlayerColor(playerid,COLOR_GRAD2);

	// RESET WANTED
	ClearWanted(playerid);

	// TEAM PLAYER
	if(PlayerInfo[playerid][pMember] == 0)
	{
	    gTeam[playerid] = 3;
    	PlayerInfo[playerid][pTeam] = 3;
	}
	else if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pMember] == 8)
	{
	    gTeam[playerid] = 2;
    	PlayerInfo[playerid][pTeam] = 2;
	}
	else if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pMember] == 10)
	{
	    gTeam[playerid] = 5;
    	PlayerInfo[playerid][pTeam] = 5;
	}
	else if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pMember] == 14)
	{
	    gTeam[playerid] = 4;
    	PlayerInfo[playerid][pTeam] = 4;
	}
	else if(PlayerInfo[playerid][pMember] == 11)
	{
	    gTeam[playerid] = 11;
    	PlayerInfo[playerid][pTeam] = 11;
	}
	else if(PlayerInfo[playerid][pMember] == 7)
	{
	    gTeam[playerid] = 7;
    	PlayerInfo[playerid][pTeam] = 7;
	}
	BanCheck(playerid);
	return 1;
}

forward LoadServerMap(playerid);
public LoadServerMap(playerid) {
	RemoveBuildingForPlayer(playerid, 700, 1192.1016, -1738.0000, 13.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1192.1016, -1733.0156, 14.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1192.5625, -1723.8828, 12.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1198.3203, -1724.5859, 14.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1204.4844, -1724.8516, 13.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1508.4453, -1668.7422, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1294, 1397.4844, -933.8281, 38.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 3754, 1417.2813, -945.8516, 39.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 5024, 1748.8438, -1883.0313, 14.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1808.1250, -1859.5391, 16.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1822.5703, -1763.2578, 15.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1832.8359, -1751.5078, 15.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1820.8359, -1741.1484, 15.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1128.7344, -1518.4922, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1111.2578, -1512.3594, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1106.4375, -1501.3750, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1134.0781, -1500.3750, 22.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1123.2500, -1500.5313, 22.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1124.3672, -1476.9844, 22.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1133.2266, -1476.2266, 22.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1144.3984, -1512.7891, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1152.3828, -1502.5391, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1467.4688, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1467.4688, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1456.4375, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1456.4375, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1445.1016, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1445.1016, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1434.0703, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1434.0703, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 615, 1110.5469, -1416.7266, 13.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 615, 1147.6016, -1416.8750, 13.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 1112.6172, -1389.8672, 15.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 5811, 1131.1953, -1380.4219, 17.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 1141.9844, -1346.1094, 13.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 1148.6797, -1385.1875, 13.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1388, 1238.3750, -1258.2813, 57.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1391, 1238.3750, -1258.2734, 44.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1352.9375, -942.9688, 36.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1378.3594, -956.8516, 36.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1390.3359, -936.3359, 36.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1366.0625, -922.5547, 36.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 1294, 1363.6016, -915.5547, 37.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 3763, 1459.1797, -783.2656, 124.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1483.3750, -855.3281, 58.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 1493.3438, -848.0391, 62.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 166.5781, -1434.6094, 35.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 736, 1018.0547, 740.8125, 20.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 736, 1042.2969, 751.2656, 20.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 736, 1027.5078, 744.6328, 20.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 736, 1060.3750, 751.2656, 20.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 736, 1068.4063, 748.7266, 20.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 736, 1069.1953, 761.9063, 20.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 736, 1095.3750, 774.2891, 20.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3516, 1776.9922, 828.9688, 12.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3516, 1811.7422, 822.9297, 12.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 3516, 1783.5391, 863.4375, 12.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 3516, 1817.5469, 857.6797, 13.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3336, 423.0781, 771.7500, 4.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 3347, 1114.2969, -353.8203, 72.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 3347, 1107.5938, -358.5156, 72.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 13451, 1146.1406, -369.1328, 49.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1164.0156, -416.6328, 21.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1214.8516, -411.2578, 5.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1249.8281, -406.2891, 1.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3335, 1570.2422, 132.2969, 28.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1042.1328, -408.6328, 63.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 3425, 1015.0938, -361.1016, 84.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1042.8125, -368.1953, 73.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1094.4141, -367.9688, 72.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1092.7109, -327.0625, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1095.3984, -329.8203, 73.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1095.3828, -327.4766, 73.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1092.7969, -321.4844, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1092.9063, -315.9688, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1093.1953, -299.2969, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 13206, 1072.9531, -289.1797, 72.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1093.3047, -293.7813, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1108.7891, -424.8359, 40.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 3175, 1107.5938, -358.5156, 72.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 3253, 1106.6406, -319.8750, 73.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1106.4922, -330.0234, 73.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1100.9141, -329.9297, 73.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1106.5469, -328.1641, 73.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1101.2891, -329.5313, 72.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 3250, 1110.2422, -298.9453, 73.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 672, 1097.4688, -314.2109, 73.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 3175, 1114.2969, -353.8203, 72.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1117.5781, -330.2109, 73.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1112.0000, -330.1250, 73.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -88.1094, -1598.7188, 1.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -86.5703, -1595.1406, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3173, -93.0938, -1593.5234, 1.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -93.6797, -1588.0781, 1.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 3174, -75.1719, -1596.3047, 1.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -79.2578, -1593.4688, 1.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -74.8203, -1607.2578, 3.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -72.4141, -1596.7734, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -74.1875, -1583.9922, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3175, -101.8203, -1577.6875, 1.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1457, -91.0156, -1576.6250, 3.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -100.8203, -1580.4219, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -93.2109, -1569.4844, 1.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 3175, -77.9375, -1581.3125, 1.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1472, -75.5859, -1581.0703, 2.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 727, -73.8203, -1569.1719, 1.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 3173, -90.6406, -1562.9375, 1.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -77.0625, -1542.6016, 1.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -70.4141, -1604.3750, 3.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -66.2891, -1601.2266, 3.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1457, -71.0000, -1574.0859, 3.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 3175, -64.3828, -1572.2109, 1.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -62.2734, -1569.2891, 1.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -61.6641, -1573.4609, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -53.8125, -1585.8594, 3.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -56.0625, -1575.6563, 1.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -50.8281, -1581.7656, 3.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -47.5547, -1577.6484, 3.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -44.5625, -1573.3672, 3.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -64.0000, -1550.2578, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3175, -55.2813, -1557.4531, 1.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -56.1563, -1560.4609, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 727, -49.3984, -1560.0078, 1.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 3174, -44.2891, -1561.3125, 1.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -43.7422, -1563.6875, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3173, -67.2344, -1544.2188, 1.5547, 0.25);
	CreateObject(13725, -89.31469, -1573.69543, -1.35250,   0.00000, 0.00000, 230.00000);
	CreateObject(8650, 86.98557, -1511.82690, 3.64540,   0.00000, 0.00000, 133.64000);
	CreateObject(8650, -2.63270, -1532.33972, 2.72690,   -3.68000, 0.00000, 73.84000);
	CreateObject(8650, 17.85126, -1538.29004, 4.08690,   -3.68000, 0.00000, 73.84000);
	return 1;
}

forward LoadChristmasStuff(playerid);
public LoadChristmasStuff(playerid) {
	RemoveBuildingForPlayer(playerid, 1290, 1696.8594, -741.0547, 56.1016, 0.25);
	CreateObject(19076, 131.70480, 1914.11145, 17.67140,   0.00000, 0.00000, 0.00000);
	CreateObject(19056, 130.68896, 1915.23572, 18.56770,   0.00000, 0.00000, 0.00000);
	CreateObject(19056, 132.60768, 1915.16614, 18.56770,   0.00000, 0.00000, 0.00000);
	CreateObject(19076, 2031.86072, 1020.90381, 9.75990,   0.00000, 0.00000, 0.00000);
	CreateObject(19056, 2033.19946, 1019.84442, 10.41630,   0.00000, 0.00000, 0.00000);
	CreateObject(19056, 2032.87097, 1021.78351, 10.41630,   0.00000, 0.00000, 0.00000);
	CreateObject(19076, 2299.68628, 2428.36084, 9.77770,   0.00000, 0.00000, 0.00000);
	CreateObject(19056, 2300.75391, 2427.05615, 10.45750,   0.00000, 0.00000, 0.00000);
	CreateObject(19056, 2298.45288, 2427.17554, 10.45750,   0.00000, 0.00000, 0.00000);
	CreateObject(19076, 1697.34021, -740.88483, 49.99600,   0.00000, 0.00000, 0.00000);
	CreateObject(19076, 1124.19189, -1469.30725, 14.69480,   0.00000, 0.00000, 0.00000);
	CreateObject(19076, 1133.87939, -1469.36951, 14.69480,   0.00000, 0.00000, 0.00000);
	CreateObject(19056, 1122.92969, -1468.24475, 15.38990,   0.00000, 0.00000, 0.00000);
	CreateObject(19056, 1125.49036, -1468.87878, 15.38990,   0.00000, 0.00000, 0.00000);
	CreateObject(19056, 1124.52686, -1467.35229, 15.38990,   0.00000, 0.00000, 0.00000);
	CreateObject(19056, 1132.19287, -1469.84375, 15.38990,   0.00000, 0.00000, 0.00000);
	CreateObject(19056, 1133.64771, -1468.48230, 15.38990,   0.00000, 0.00000, 0.00000);
	CreateObject(19056, 1135.66602, -1469.22412, 15.38990,   0.00000, 0.00000, 0.00000);
	CreateObject(19076, 1511.39258, -1676.35083, 13.04392,   0.00000, 0.00000, 0.00000);
	CreateObject(19056, 1510.98718, -1675.04346, 13.64600,   0.00000, 0.00000, 0.00000);
	CreateObject(19056, 1512.63733, -1677.15369, 13.64600,   0.00000, 0.00000, 0.00000);
	CreateObject(19056, 1512.19653, -1675.74536, 13.64600,   0.00000, 0.00000, 0.00000);
	CreateObject(19076, 1163.35596, -1720.17017, 12.92740,   0.00000, 0.00000, 0.00000);
	CreateObject(19056, 1164.20422, -1719.10474, 13.43980,   0.00000, 0.00000, 0.00000);
	CreateObject(19056, 1163.95862, -1721.17090, 13.43980,   0.00000, 0.00000, 0.00000);
	CreateObject(19056, 1165.26929, -1720.37451, 13.43980,   0.00000, 0.00000, 0.00000);
	CreateObject(19056, 1162.64502, -1721.69299, 13.43980,   0.00000, 0.00000, 0.00000);
	CreateObject(19056, 1162.61304, -1719.70789, 13.43980,   0.00000, 0.00000, 0.00000);
	CreateObject(19076, -1898.51208, 241.97960, 39.99370,   0.00000, 0.00000, 0.00000);
	CreateObject(19076, 1820.79041, 817.37183, 9.76890,   0.00000, 0.00000, 0.00000);
	return 1;
}

forward LoadBeeHivePlace(playerid);
public LoadBeeHivePlace(playerid) {
	//beehive
	RemoveBuildingForPlayer(playerid, 3339, 1297.2813, 173.5781, 19.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 3340, 1308.3984, 168.1406, 19.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3341, 1281.2266, 158.0938, 19.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 3343, 1295.9844, 158.7422, 19.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 3343, 1305.0391, 184.9141, 19.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 3345, 1305.2656, 152.7734, 19.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3344, 1313.9688, 179.8438, 19.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 3594, 1265.5703, 153.3828, 19.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 3170, 1281.2266, 158.0938, 19.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 3594, 1280.9297, 147.3125, 20.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3168, 1295.9844, 158.7422, 19.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 3172, 1305.2656, 152.7734, 19.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1301.2578, 147.3828, 18.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 780, 1301.5938, 154.5078, 19.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 3594, 1271.3125, 163.3906, 19.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1281.5156, 165.5313, 18.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 1297.0703, 179.2266, 19.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 1293.5547, 163.8828, 19.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 3168, 1305.0391, 184.9141, 19.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 3169, 1297.2813, 173.5781, 19.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 775, 1301.2734, 164.2656, 19.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 764, 1303.6328, 173.3984, 18.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3171, 1313.9688, 179.8438, 19.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 3167, 1308.3984, 168.1406, 19.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1308.2656, 174.2891, 18.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 1313.3203, 167.0313, 19.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 709, 1358.1484, 166.5234, 19.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, 1276.1172, 190.2266, 18.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 1318.3828, 196.0547, 19.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 13441, 1338.0625, 198.7344, 30.0234, 0.25);
	CreateObject(17298, 1306.58960, 173.48270, 25.10000,   0.00000, 0.02000, -15.56000);
	return 1;
}

forward LoadPTextDraws(playerid);
public LoadPTextDraws(playerid)
{
	RegisterTD[playerid][0] = CreatePlayerTextDraw(playerid, 229.199966, 136.239913, "~n~");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][0], 0.759199, 21.028266);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][0], 424.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][0], 1021552213);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][0], 8716287);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][0], 1);

	RegisterTD[playerid][1] = CreatePlayerTextDraw(playerid, 326.799957, 136.239929, "Welcome_to_rpg.evils.ro!");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][1], 0.388799, 1.779199);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][1], 0.000000, 195.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][1], 255);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][1], 1);

	RegisterTD[playerid][2] = CreatePlayerTextDraw(playerid, 325.999877, 164.613220, "Please_complete_fields_to_register_this_account!");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][2], 0.252799, 1.547731);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][2], 2);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][2], 1);

	RegisterTD[playerid][3] = CreatePlayerTextDraw(playerid, 326.499938, 189.653335, "Account: ionutdrg45bombarusa");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][3], 0.206400, 1.241598);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][3], 0.000000, 194.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][3], 2);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][3], 153);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][3], 1);

	RegisterTD[playerid][4] = CreatePlayerTextDraw(playerid, 326.000061, 220.613403, "Password: click to add");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][4], 0.206400, 1.241598);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][4], 15.000000, 80.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][4], 2);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][4], 153);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterTD[playerid][4], true);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][4], 1);

	RegisterTD[playerid][5] = CreatePlayerTextDraw(playerid, 283.599182, 252.720458, "Age: click to add");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][5], 0.206400, 1.241598);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][5], 15.000000, 69.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][5], 2);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][5], -1);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][5], 153);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterTD[playerid][5], 1);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][5], 1);

	RegisterTD[playerid][6] = CreatePlayerTextDraw(playerid, 321.999969, 285.573394, "Register");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][6], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][6], 15.000000, 69.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][6], 2);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][6], -1);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][6], 255);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterTD[playerid][6], true);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][6], 1);

	RegisterTD[playerid][7] = CreatePlayerTextDraw(playerid, 241.999954, 311.706756, "-_to_add_an_email_adress_please_visit_our_panel");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][7], 0.220798, 1.271466);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][7], 1);

	RegisterTD[playerid][8] = CreatePlayerTextDraw(playerid, 326.800018, 337.093475, "Error!_You_need_to_complete_all_fields_to_register!");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][8], 0.205595, 1.137066);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][8], 15.000000, 195.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][8], 2);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][8], -1);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][8], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][8], -16777168);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterTD[playerid][8], true);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][8], 1);

	RegisterTD[playerid][9] = CreatePlayerTextDraw(playerid, 369.199218, 252.720382, "Sex: click to select");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][9], 0.206400, 1.241598);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][9], 15.000000, 68.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][9], 2);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][9], -1);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][9], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][9], 153);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][9], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterTD[playerid][9], true);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][9], 1);

	RegisterTD[playerid][10] = CreatePlayerTextDraw(playerid, 254.000076, 222.106674, "RO");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][10], 0.211199, 0.920530);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][10], 15.000549, 40.186805);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][10], 2);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][10], -1);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][10], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][10], 153);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][10], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][10], 1);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterTD[playerid][10], 1);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][10], 1);

	RegisterTD[playerid][11] = CreatePlayerTextDraw(playerid, 398.800109, 222.106643, "EN");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][11], 0.211199, 0.920530);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][11], 15.000549, 40.186805);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][11], 2);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][11], 16711935);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][11], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][11], 153);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][11], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][11], 1);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][11], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterTD[playerid][11], true);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][11], 1);

	IncorrectTD[playerid][0] = CreatePlayerTextDraw(playerid, 307.600006, 261.339996, "Incorrect password! Attemps - 2/3");
	PlayerTextDrawLetterSize(playerid, IncorrectTD[playerid][0], 0.338401, 1.630952);
	PlayerTextDrawTextSize(playerid, IncorrectTD[playerid][0], 701.199890, 269.546783);
	PlayerTextDrawAlignment(playerid, IncorrectTD[playerid][0], 2);
	PlayerTextDrawColor(playerid, IncorrectTD[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, IncorrectTD[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, IncorrectTD[playerid][0], -1357180368);
	PlayerTextDrawSetShadow(playerid, IncorrectTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, IncorrectTD[playerid][0], 0);
	PlayerTextDrawFont(playerid, IncorrectTD[playerid][0], 1);

	IncorrectTD[playerid][1] = CreatePlayerTextDraw(playerid, 440.799835, 256.853179, "x");
	PlayerTextDrawLetterSize(playerid, IncorrectTD[playerid][1], 0.273999, 0.913066);
	PlayerTextDrawTextSize(playerid, IncorrectTD[playerid][1], 7.466666, 7.466666);
	PlayerTextDrawAlignment(playerid, IncorrectTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, IncorrectTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, IncorrectTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, IncorrectTD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, IncorrectTD[playerid][1], 51);
	PlayerTextDrawFont(playerid, IncorrectTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, IncorrectTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, IncorrectTD[playerid][1], true);

	LoginTD[playerid][0] = CreatePlayerTextDraw(playerid, 226.999954, 159.303619, "usebox");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][0], 0.621333, 11.078518);
	PlayerTextDrawTextSize(playerid, LoginTD[playerid][0], 394.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, LoginTD[playerid][0], 0);
	PlayerTextDrawUseBox(playerid, LoginTD[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, LoginTD[playerid][0], 821276485);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][0], 0);
	PlayerTextDrawFont(playerid, LoginTD[playerid][0], 0);

	LoginTD[playerid][1] = CreatePlayerTextDraw(playerid, 310.333404, 159.303726, "usebox");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][1], 0.268999, 1.193482);
	PlayerTextDrawTextSize(playerid, LoginTD[playerid][1], 0.000000, 167.000000);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, LoginTD[playerid][1], 0);
	PlayerTextDrawUseBox(playerid, LoginTD[playerid][1], true);
	PlayerTextDrawBoxColor(playerid, LoginTD[playerid][1], 255);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][1], 0);
	PlayerTextDrawFont(playerid, LoginTD[playerid][1], 1);

	LoginTD[playerid][2] = CreatePlayerTextDraw(playerid, 307.666625, 158.059219, "Welcome back to rpg.bluffs.ga!");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][2], 0.256333, 1.259852);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][2], 2);
	PlayerTextDrawColor(playerid, LoginTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][2], 51);
	PlayerTextDrawFont(playerid, LoginTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][2], 1);

	LoginTD[playerid][3] = CreatePlayerTextDraw(playerid, 310.666656, 180.044479, "Please enter your password below!~n~Te rugam introdu parola mai jos!");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][3], 0.185332, 1.052443);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][3], 2);
	PlayerTextDrawColor(playerid, LoginTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][3], 51);
	PlayerTextDrawFont(playerid, LoginTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][3], 1);

	LoginTD[playerid][4] = CreatePlayerTextDraw(playerid, 310.666595, 213.644454, "enter password");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][4], 0.238333, 1.185184);
	PlayerTextDrawTextSize(playerid, LoginTD[playerid][4], 15.000549, 70.186805);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][4], 2);
	PlayerTextDrawColor(playerid, LoginTD[playerid][4], -1523963137);
	PlayerTextDrawUseBox(playerid, LoginTD[playerid][4], true);
	PlayerTextDrawBoxColor(playerid, LoginTD[playerid][4], 255);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][4], 1);
	PlayerTextDrawFont(playerid, LoginTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, LoginTD[playerid][4], true);

	LoginTD[playerid][5] = CreatePlayerTextDraw(playerid, 310.666503, 233.140731, "login");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][5], 0.238333, 1.185184);
	PlayerTextDrawTextSize(playerid, LoginTD[playerid][5], 15.600036, 70.186805);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][5], 2);
	PlayerTextDrawColor(playerid, LoginTD[playerid][5], 16711935);
	PlayerTextDrawUseBox(playerid, LoginTD[playerid][5], true);
	PlayerTextDrawBoxColor(playerid, LoginTD[playerid][5], 255);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][5], 1);
	PlayerTextDrawFont(playerid, LoginTD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, LoginTD[playerid][5], true);

	DmgInformer[playerid][0] = CreatePlayerTextDraw(playerid, 460.000335, 409.173522, "Bogdan_Gangsteru did 48.00 damage to you");
	PlayerTextDrawLetterSize(playerid, DmgInformer[playerid][0], 0.191599, 1.092266);
	PlayerTextDrawAlignment(playerid, DmgInformer[playerid][0], 2);
	PlayerTextDrawColor(playerid, DmgInformer[playerid][0], -2147483393);
	PlayerTextDrawSetShadow(playerid, DmgInformer[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, DmgInformer[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, DmgInformer[playerid][0], 51);
	PlayerTextDrawFont(playerid, DmgInformer[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, DmgInformer[playerid][0], 1);

	DmgInformer[playerid][1] = CreatePlayerTextDraw(playerid, 451.199981, 398.720031, "You did 48.00 damage to Bogdan_Gangsteru");
	PlayerTextDrawLetterSize(playerid, DmgInformer[playerid][1], 0.197999, 1.077333);
	PlayerTextDrawAlignment(playerid, DmgInformer[playerid][1], 2);
	PlayerTextDrawColor(playerid, DmgInformer[playerid][1], 8388863);
	PlayerTextDrawSetShadow(playerid, DmgInformer[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, DmgInformer[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, DmgInformer[playerid][1], 51);
	PlayerTextDrawFont(playerid, DmgInformer[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, DmgInformer[playerid][1], 1);

	OpencaseTD[playerid][0] = CreatePlayerTextDraw(playerid, 444.400024, 206.833328, "usebox");
	PlayerTextDrawLetterSize(playerid, OpencaseTD[playerid][0], 0.000000, 15.446296);
	PlayerTextDrawTextSize(playerid, OpencaseTD[playerid][0], 199.600006, 0.000000);
	PlayerTextDrawAlignment(playerid, OpencaseTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, OpencaseTD[playerid][0], 0);
	PlayerTextDrawUseBox(playerid, OpencaseTD[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, OpencaseTD[playerid][0], 102);
	PlayerTextDrawSetShadow(playerid, OpencaseTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, OpencaseTD[playerid][0], 0);
	PlayerTextDrawFont(playerid, OpencaseTD[playerid][0], 0);

	OpencaseTD[playerid][1] = CreatePlayerTextDraw(playerid, 292.800018, 202.346664, "Opencase");
	PlayerTextDrawLetterSize(playerid, OpencaseTD[playerid][1], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, OpencaseTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, OpencaseTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, OpencaseTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, OpencaseTD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, OpencaseTD[playerid][1], 51);
	PlayerTextDrawFont(playerid, OpencaseTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, OpencaseTD[playerid][1], 1);

	OpencaseTD[playerid][6] = CreatePlayerTextDraw(playerid, 296.000000, 320.320037, "Open");
	PlayerTextDrawLetterSize(playerid, OpencaseTD[playerid][6], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, OpencaseTD[playerid][6], 340.000000, 20.000000);
	PlayerTextDrawAlignment(playerid, OpencaseTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, OpencaseTD[playerid][6], -5963521);
	PlayerTextDrawUseBox(playerid, OpencaseTD[playerid][6], true);
	PlayerTextDrawBoxColor(playerid, OpencaseTD[playerid][6], 255);
	PlayerTextDrawSetShadow(playerid, OpencaseTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, OpencaseTD[playerid][6], 1);
	PlayerTextDrawBackgroundColor(playerid, OpencaseTD[playerid][6], 51);
	PlayerTextDrawFont(playerid, OpencaseTD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, OpencaseTD[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, OpencaseTD[playerid][6], true);

	OpencaseTD[playerid][7] = CreatePlayerTextDraw(playerid, 328.399993, 234.459991, "_");
	PlayerTextDrawTextSize(playerid, OpencaseTD[playerid][7], -100, 80);
	PlayerTextDrawAlignment(playerid, OpencaseTD[playerid][7], 1);
	PlayerTextDrawUseBox(playerid, OpencaseTD[playerid][7], true);
	PlayerTextDrawBoxColor(playerid, OpencaseTD[playerid][7], 0xFFFFFF00);
	PlayerTextDrawFont(playerid, OpencaseTD[playerid][7], TEXT_DRAW_FONT_MODEL_PREVIEW);
	PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 18631); //Display model 18631 (interrogation sign)
	//PlayerTextDrawSetPreviewModel(playerid,  OpencaseTD[playerid][7], 411);
    //PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 0); //Display model 0 (CJ Skin)
    //PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 18646); //Display model 18646 (police light object)

	OpencaseTD[playerid][8] = CreatePlayerTextDraw(playerid, 380.800170, 261.333953, "20 premium points");
	PlayerTextDrawLetterSize(playerid, OpencaseTD[playerid][8], 0.282799, 1.263999);
	PlayerTextDrawAlignment(playerid, OpencaseTD[playerid][8], 2);
	PlayerTextDrawColor(playerid, OpencaseTD[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, OpencaseTD[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, OpencaseTD[playerid][8], 1);
	PlayerTextDrawBackgroundColor(playerid, OpencaseTD[playerid][8], 51);
	PlayerTextDrawFont(playerid, OpencaseTD[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, OpencaseTD[playerid][8], 1);

	OpencaseTD[playerid][9] = CreatePlayerTextDraw(playerid, 364.800018, 235.946655, "Prize");
	PlayerTextDrawLetterSize(playerid, OpencaseTD[playerid][9], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, OpencaseTD[playerid][9], 1);
	PlayerTextDrawColor(playerid, OpencaseTD[playerid][9], -1);
	PlayerTextDrawSetShadow(playerid, OpencaseTD[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, OpencaseTD[playerid][9], 1);
	PlayerTextDrawBackgroundColor(playerid, OpencaseTD[playerid][9], 51);
	PlayerTextDrawFont(playerid, OpencaseTD[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, OpencaseTD[playerid][9], 1);

	OpencaseTD[playerid][10] = CreatePlayerTextDraw(playerid, 432.799987, 207.573348, "x");
	PlayerTextDrawLetterSize(playerid, OpencaseTD[playerid][10], 0.429998, 0.741333);
	PlayerTextDrawTextSize(playerid, OpencaseTD[playerid][10], 7.466666, 7.466666);
	PlayerTextDrawAlignment(playerid, OpencaseTD[playerid][10], 2);
	PlayerTextDrawColor(playerid, OpencaseTD[playerid][10], -1);
	PlayerTextDrawUseBox(playerid, OpencaseTD[playerid][10], true);
	PlayerTextDrawBoxColor(playerid, OpencaseTD[playerid][10], 0x000000FF);
	PlayerTextDrawSetShadow(playerid, OpencaseTD[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, OpencaseTD[playerid][10], 1);
	PlayerTextDrawBackgroundColor(playerid, OpencaseTD[playerid][10], 51);
	PlayerTextDrawFont(playerid, OpencaseTD[playerid][10], 1);
	PlayerTextDrawSetProportional(playerid, OpencaseTD[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, OpencaseTD[playerid][10], true);

	TradeTD[playerid][0] = CreatePlayerTextDraw(playerid, 167.666549, 155.155548, "usebox");
	PlayerTextDrawLetterSize(playerid, TradeTD[playerid][0], 0.786332, 18.968301);
	PlayerTextDrawTextSize(playerid, TradeTD[playerid][0], 463.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, TradeTD[playerid][0], 0);
	PlayerTextDrawUseBox(playerid, TradeTD[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, TradeTD[playerid][0], 111);
	PlayerTextDrawSetShadow(playerid, TradeTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, TradeTD[playerid][0], 0);
	PlayerTextDrawFont(playerid, TradeTD[playerid][0], 0);

	TradeTD[playerid][1] = CreatePlayerTextDraw(playerid, 174.000000, 157.644439, "player1");
	PlayerTextDrawLetterSize(playerid, TradeTD[playerid][1], 0.238664, 0.911405);
	PlayerTextDrawAlignment(playerid, TradeTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, TradeTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, TradeTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, TradeTD[playerid][1], 1);

	TradeTD[playerid][2] = CreatePlayerTextDraw(playerid, 455.999938, 158.888916, "player2");
	PlayerTextDrawLetterSize(playerid, TradeTD[playerid][2], 0.238664, 0.911405);
	PlayerTextDrawAlignment(playerid, TradeTD[playerid][2], 3);
	PlayerTextDrawColor(playerid, TradeTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, TradeTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, TradeTD[playerid][2], 1);

	TradeTD[playerid][3] = CreatePlayerTextDraw(playerid, 184.333221, 248.073974, "click_to_add_an_item_1");
	PlayerTextDrawLetterSize(playerid, TradeTD[playerid][3], 0.268000, 1.035851);
	PlayerTextDrawTextSize(playerid, TradeTD[playerid][3], 281.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, TradeTD[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, TradeTD[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, TradeTD[playerid][3], 255);
	PlayerTextDrawSetShadow(playerid, TradeTD[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, TradeTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, TradeTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, TradeTD[playerid][3], true);

	TradeTD[playerid][4] = CreatePlayerTextDraw(playerid, 184.333236, 212.399963, "click_to_add_an_item_1");
	PlayerTextDrawLetterSize(playerid, TradeTD[playerid][4], 0.268000, 1.035851);
	PlayerTextDrawTextSize(playerid, TradeTD[playerid][4], 281.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, TradeTD[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, TradeTD[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, TradeTD[playerid][4], 255);
	PlayerTextDrawSetShadow(playerid, TradeTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, TradeTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, TradeTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, TradeTD[playerid][4], true);

	TradeTD[playerid][5] = CreatePlayerTextDraw(playerid, 355.000030, 212.814804, "click_to_add_an_item_2");
	PlayerTextDrawLetterSize(playerid, TradeTD[playerid][5], 0.268000, 1.035851);
	PlayerTextDrawTextSize(playerid, TradeTD[playerid][5], 452.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, TradeTD[playerid][5], -1);
	PlayerTextDrawUseBox(playerid, TradeTD[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, TradeTD[playerid][5], 255);
	PlayerTextDrawSetShadow(playerid, TradeTD[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, TradeTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, TradeTD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, TradeTD[playerid][5], true);

	TradeTD[playerid][6] = CreatePlayerTextDraw(playerid, 214.666549, 287.066619, "Ready1");
	PlayerTextDrawLetterSize(playerid, TradeTD[playerid][6], 0.253333, 1.297183);
	PlayerTextDrawTextSize(playerid, TradeTD[playerid][6], 243.000000, 20.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, TradeTD[playerid][6], 255);
	PlayerTextDrawUseBox(playerid, TradeTD[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, TradeTD[playerid][6], 16711935);
	PlayerTextDrawSetShadow(playerid, TradeTD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, TradeTD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, TradeTD[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, TradeTD[playerid][6], true);

	TradeTD[playerid][7] = CreatePlayerTextDraw(playerid, 384.666564, 286.651763, "Ready2");
	PlayerTextDrawLetterSize(playerid, TradeTD[playerid][7], 0.253333, 1.297183);
	PlayerTextDrawTextSize(playerid, TradeTD[playerid][7], 413.000000, 20.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, TradeTD[playerid][7], 255);
	PlayerTextDrawUseBox(playerid, TradeTD[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, TradeTD[playerid][7], 16711935);
	PlayerTextDrawSetShadow(playerid, TradeTD[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, TradeTD[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, TradeTD[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, TradeTD[playerid][7], true);

	TradeTD[playerid][8] = CreatePlayerTextDraw(playerid, 355.666687, 247.659255, "click_to_add_an_item_2");
	PlayerTextDrawLetterSize(playerid, TradeTD[playerid][8], 0.268000, 1.035851);
	PlayerTextDrawTextSize(playerid, TradeTD[playerid][8], 452.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, TradeTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, TradeTD[playerid][8], -1);
	PlayerTextDrawUseBox(playerid, TradeTD[playerid][8], 1);
	PlayerTextDrawBoxColor(playerid, TradeTD[playerid][8], 255);
	PlayerTextDrawSetShadow(playerid, TradeTD[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, TradeTD[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, TradeTD[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, TradeTD[playerid][8], true);

	TradeTD[playerid][9] = CreatePlayerTextDraw(playerid, 317.666503, 154.325912, "Trade_System");
	PlayerTextDrawLetterSize(playerid, TradeTD[playerid][9], 0.330332, 1.309628);
	PlayerTextDrawAlignment(playerid, TradeTD[playerid][9], 2);
	PlayerTextDrawColor(playerid, TradeTD[playerid][9], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[playerid][9], 255);
	PlayerTextDrawFont(playerid, TradeTD[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, TradeTD[playerid][9], 1);

	TradeTD[playerid][10] = CreatePlayerTextDraw(playerid, 283.333404, 302.414855, "waiting_for_ready");
	PlayerTextDrawLetterSize(playerid, TradeTD[playerid][10], 0.224333, 1.239109);
	PlayerTextDrawAlignment(playerid, TradeTD[playerid][10], 1);
	PlayerTextDrawColor(playerid, TradeTD[playerid][10], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[playerid][10], 255);
	PlayerTextDrawFont(playerid, TradeTD[playerid][10], 1);
	PlayerTextDrawSetProportional(playerid, TradeTD[playerid][10], 1);

	TradeTD[playerid][11] = CreatePlayerTextDraw(playerid, 191.000015, 228.992568, "-_vip,_neon_purple,_stage_3/3,_colors:_226/226");
	PlayerTextDrawLetterSize(playerid, TradeTD[playerid][11], 0.126000, 0.774518);
	PlayerTextDrawAlignment(playerid, TradeTD[playerid][11], 1);
	PlayerTextDrawColor(playerid, TradeTD[playerid][11], -1);
	PlayerTextDrawSetShadow(playerid, TradeTD[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, TradeTD[playerid][11], 255);
	PlayerTextDrawFont(playerid, TradeTD[playerid][11], 1);
	PlayerTextDrawSetProportional(playerid, TradeTD[playerid][11], 1);

	LicenceTD[playerid][0] = CreatePlayerTextDraw(playerid, 556.400268, 176.966735, "usebox");
	PlayerTextDrawLetterSize(playerid, LicenceTD[playerid][0], 0.000000, 18.018148);
	PlayerTextDrawTextSize(playerid, LicenceTD[playerid][0], 110.799957, 0.000000);
	PlayerTextDrawAlignment(playerid, LicenceTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, LicenceTD[playerid][0], 0);
	PlayerTextDrawUseBox(playerid, LicenceTD[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, LicenceTD[playerid][0], 102);
	PlayerTextDrawSetShadow(playerid, LicenceTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, LicenceTD[playerid][0], 0);
	PlayerTextDrawFont(playerid, LicenceTD[playerid][0], 0);

	LicenceTD[playerid][1] = CreatePlayerTextDraw(playerid, 556.399902, 315.846771, "usebox");
	PlayerTextDrawLetterSize(playerid, LicenceTD[playerid][1], 0.000000, -0.479629);
	PlayerTextDrawTextSize(playerid, LicenceTD[playerid][1], 110.800048, 0.000000);
	PlayerTextDrawAlignment(playerid, LicenceTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, LicenceTD[playerid][1], 0);
	PlayerTextDrawUseBox(playerid, LicenceTD[playerid][1], true);
	PlayerTextDrawBoxColor(playerid, LicenceTD[playerid][1], -2139062017);
	PlayerTextDrawSetShadow(playerid, LicenceTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, LicenceTD[playerid][1], 0);
	PlayerTextDrawFont(playerid, LicenceTD[playerid][1], 0);

	LicenceTD[playerid][2] = CreatePlayerTextDraw(playerid, 126.399879, 317.333282, "- at 3/3 bad answers the exam will be failed");
	PlayerTextDrawLetterSize(playerid, LicenceTD[playerid][2], 0.256399, 0.771197);
	PlayerTextDrawAlignment(playerid, LicenceTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, LicenceTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, LicenceTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, LicenceTD[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, LicenceTD[playerid][2], 51);
	PlayerTextDrawFont(playerid, LicenceTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, LicenceTD[playerid][2], 1);

	LicenceTD[playerid][3] = CreatePlayerTextDraw(playerid, 125.599975, 177.706573, "00:30");
	PlayerTextDrawLetterSize(playerid, LicenceTD[playerid][3], 0.373997, 1.488000);
	PlayerTextDrawAlignment(playerid, LicenceTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, LicenceTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, LicenceTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, LicenceTD[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, LicenceTD[playerid][3], 51);
	PlayerTextDrawFont(playerid, LicenceTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, LicenceTD[playerid][3], 1);

	LicenceTD[playerid][4] = CreatePlayerTextDraw(playerid, 556.399719, 215.793518, "usebox");
	PlayerTextDrawLetterSize(playerid, LicenceTD[playerid][4], 0.000000, -0.950740);
	PlayerTextDrawTextSize(playerid, LicenceTD[playerid][4], 110.799995, 0.000000);
	PlayerTextDrawAlignment(playerid, LicenceTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, LicenceTD[playerid][4], 0);
	PlayerTextDrawUseBox(playerid, LicenceTD[playerid][4], true);
	PlayerTextDrawBoxColor(playerid, LicenceTD[playerid][4], -1061109505);
	PlayerTextDrawSetShadow(playerid, LicenceTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, LicenceTD[playerid][4], 0);
	PlayerTextDrawFont(playerid, LicenceTD[playerid][4], 0);

	LicenceTD[playerid][5] = CreatePlayerTextDraw(playerid, 323.999847, 192.639953, "Ce esti obligat sa faci atunci cand un politist te someaza?");
	PlayerTextDrawLetterSize(playerid, LicenceTD[playerid][5], 0.249999, 1.637333);
	PlayerTextDrawAlignment(playerid, LicenceTD[playerid][5], 2);
	PlayerTextDrawColor(playerid, LicenceTD[playerid][5], -65281);
	PlayerTextDrawSetShadow(playerid, LicenceTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, LicenceTD[playerid][5], 1);
	PlayerTextDrawBackgroundColor(playerid, LicenceTD[playerid][5], 51);
	PlayerTextDrawFont(playerid, LicenceTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, LicenceTD[playerid][5], 1);

	LicenceTD[playerid][6] = CreatePlayerTextDraw(playerid, 547.199951, 176.213348, "3/3");
	PlayerTextDrawLetterSize(playerid, LicenceTD[playerid][6], 0.414000, 1.301333);
	PlayerTextDrawAlignment(playerid, LicenceTD[playerid][6], 3);
	PlayerTextDrawColor(playerid, LicenceTD[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, LicenceTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, LicenceTD[playerid][6], 1);
	PlayerTextDrawBackgroundColor(playerid, LicenceTD[playerid][6], 51);
	PlayerTextDrawFont(playerid, LicenceTD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, LicenceTD[playerid][6], 1);

	LicenceTD[playerid][7] = CreatePlayerTextDraw(playerid, 132.799987, 239.679977, "a) ma opresc la marginea drumului");
	PlayerTextDrawLetterSize(playerid, LicenceTD[playerid][7], 0.253200, 0.860799);
	PlayerTextDrawTextSize(playerid, LicenceTD[playerid][7], 246.399948, 20.000000);
	PlayerTextDrawAlignment(playerid, LicenceTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, LicenceTD[playerid][7], -65281);
	PlayerTextDrawUseBox(playerid, LicenceTD[playerid][7], true);
	PlayerTextDrawBoxColor(playerid, LicenceTD[playerid][7], -1061109505);
	PlayerTextDrawSetShadow(playerid, LicenceTD[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, LicenceTD[playerid][7], 1);
	PlayerTextDrawBackgroundColor(playerid, LicenceTD[playerid][7], 51);
	PlayerTextDrawFont(playerid, LicenceTD[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, LicenceTD[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, LicenceTD[playerid][7], true);

	LicenceTD[playerid][8] = CreatePlayerTextDraw(playerid, 277.600189, 238.933273, "b) ma deconectez de pe server");
	PlayerTextDrawLetterSize(playerid, LicenceTD[playerid][8], 0.238799, 0.853332);
	PlayerTextDrawTextSize(playerid, LicenceTD[playerid][8], 373.599792, 20.000000);
	PlayerTextDrawAlignment(playerid, LicenceTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, LicenceTD[playerid][8], -65281);
	PlayerTextDrawUseBox(playerid, LicenceTD[playerid][8], true);
	PlayerTextDrawBoxColor(playerid, LicenceTD[playerid][8], -1061109505);
	PlayerTextDrawSetShadow(playerid, LicenceTD[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, LicenceTD[playerid][8], 1);
	PlayerTextDrawBackgroundColor(playerid, LicenceTD[playerid][8], 51);
	PlayerTextDrawFont(playerid, LicenceTD[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, LicenceTD[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, LicenceTD[playerid][8], true);

	LicenceTD[playerid][9] = CreatePlayerTextDraw(playerid, 435.200164, 239.679901, "c) fug pana politistul imi pierde urma");
	PlayerTextDrawLetterSize(playerid, LicenceTD[playerid][9], 0.225999, 0.868266);
	PlayerTextDrawTextSize(playerid, LicenceTD[playerid][9], 539.199279, 20.00000);
	PlayerTextDrawAlignment(playerid, LicenceTD[playerid][9], 1);
	PlayerTextDrawColor(playerid, LicenceTD[playerid][9], -65281);
	PlayerTextDrawUseBox(playerid, LicenceTD[playerid][9], true);
	PlayerTextDrawBoxColor(playerid, LicenceTD[playerid][9], -1061109505);
	PlayerTextDrawSetShadow(playerid, LicenceTD[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, LicenceTD[playerid][9], 1);
	PlayerTextDrawBackgroundColor(playerid, LicenceTD[playerid][9], 51);
	PlayerTextDrawFont(playerid, LicenceTD[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, LicenceTD[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, LicenceTD[playerid][9], true);

	LicenceTD[playerid][10] = CreatePlayerTextDraw(playerid, 339.200164, 279.253509, "Choose the correct answer!");
	PlayerTextDrawLetterSize(playerid, LicenceTD[playerid][10], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, LicenceTD[playerid][10], 2);
	PlayerTextDrawColor(playerid, LicenceTD[playerid][10], -16776961);
	PlayerTextDrawSetShadow(playerid, LicenceTD[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, LicenceTD[playerid][10], 1);
	PlayerTextDrawBackgroundColor(playerid, LicenceTD[playerid][10], 51);
	PlayerTextDrawFont(playerid, LicenceTD[playerid][10], 1);
	PlayerTextDrawSetProportional(playerid, LicenceTD[playerid][10], 1);

	LicenceTD[playerid][11] = CreatePlayerTextDraw(playerid, 125.599952, 326.293304, "- after theoretical test you will start a practical test");
	PlayerTextDrawLetterSize(playerid, LicenceTD[playerid][11], 0.250799, 0.771199);
	PlayerTextDrawAlignment(playerid, LicenceTD[playerid][11], 1);
	PlayerTextDrawColor(playerid, LicenceTD[playerid][11], -1);
	PlayerTextDrawSetShadow(playerid, LicenceTD[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, LicenceTD[playerid][11], 1);
	PlayerTextDrawBackgroundColor(playerid, LicenceTD[playerid][11], 51);
	PlayerTextDrawFont(playerid, LicenceTD[playerid][11], 1);
	PlayerTextDrawSetProportional(playerid, LicenceTD[playerid][11], 1);

	DmvTd[playerid][0] = CreatePlayerTextDraw(playerid, 556.400268, 176.966735, "usebox");
	PlayerTextDrawLetterSize(playerid, DmvTd[playerid][0], 0.000000, 18.018148);
	PlayerTextDrawTextSize(playerid, DmvTd[playerid][0], 110.799957, 0.000000);
	PlayerTextDrawAlignment(playerid, DmvTd[playerid][0], 1);
	PlayerTextDrawColor(playerid, DmvTd[playerid][0], 0);
	PlayerTextDrawUseBox(playerid, DmvTd[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, DmvTd[playerid][0], 102);
	PlayerTextDrawSetShadow(playerid, DmvTd[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, DmvTd[playerid][0], 0);
	PlayerTextDrawFont(playerid, DmvTd[playerid][0], 0);

	DmvTd[playerid][1] = CreatePlayerTextDraw(playerid, 556.399902, 315.846771, "usebox");
	PlayerTextDrawLetterSize(playerid, DmvTd[playerid][1], 0.000000, -0.479629);
	PlayerTextDrawTextSize(playerid, DmvTd[playerid][1], 110.800048, 0.000000);
	PlayerTextDrawAlignment(playerid, DmvTd[playerid][1], 1);
	PlayerTextDrawColor(playerid, DmvTd[playerid][1], 0);
	PlayerTextDrawUseBox(playerid, DmvTd[playerid][1], true);
	PlayerTextDrawBoxColor(playerid, DmvTd[playerid][1], -2139062017);
	PlayerTextDrawSetShadow(playerid, DmvTd[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, DmvTd[playerid][1], 0);
	PlayerTextDrawFont(playerid, DmvTd[playerid][1], 0);

	DmvTd[playerid][2] = CreatePlayerTextDraw(playerid, 126.399879, 317.333282, "- at 3/3 bad answers the exam will be failed");
	PlayerTextDrawLetterSize(playerid, DmvTd[playerid][2], 0.256399, 0.771197);
	PlayerTextDrawAlignment(playerid, DmvTd[playerid][2], 1);
	PlayerTextDrawColor(playerid, DmvTd[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, DmvTd[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, DmvTd[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, DmvTd[playerid][2], 51);
	PlayerTextDrawFont(playerid, DmvTd[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, DmvTd[playerid][2], 1);

	DmvTd[playerid][3] = CreatePlayerTextDraw(playerid, 125.599975, 177.706573, "00:30");
	PlayerTextDrawLetterSize(playerid, DmvTd[playerid][3], 0.373997, 1.488000);
	PlayerTextDrawAlignment(playerid, DmvTd[playerid][3], 1);
	PlayerTextDrawColor(playerid, DmvTd[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, DmvTd[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, DmvTd[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, DmvTd[playerid][3], 51);
	PlayerTextDrawFont(playerid, DmvTd[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, DmvTd[playerid][3], 1);

	DmvTd[playerid][4] = CreatePlayerTextDraw(playerid, 556.399719, 215.793518, "usebox");
	PlayerTextDrawLetterSize(playerid, DmvTd[playerid][4], 0.000000, -0.950740);
	PlayerTextDrawTextSize(playerid, DmvTd[playerid][4], 110.799995, 0.000000);
	PlayerTextDrawAlignment(playerid, DmvTd[playerid][4], 1);
	PlayerTextDrawColor(playerid, DmvTd[playerid][4], 0);
	PlayerTextDrawUseBox(playerid, DmvTd[playerid][4], true);
	PlayerTextDrawBoxColor(playerid, DmvTd[playerid][4], -1061109505);
	PlayerTextDrawSetShadow(playerid, DmvTd[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, DmvTd[playerid][4], 0);
	PlayerTextDrawFont(playerid, DmvTd[playerid][4], 0);

	DmvTd[playerid][5] = CreatePlayerTextDraw(playerid, 323.999847, 192.639953, "Ce esti obligat sa faci atunci cand un politist te someaza?");
	PlayerTextDrawLetterSize(playerid, DmvTd[playerid][5], 0.249999, 1.637333);
	PlayerTextDrawAlignment(playerid, DmvTd[playerid][5], 2);
	PlayerTextDrawColor(playerid, DmvTd[playerid][5], -65281);
	PlayerTextDrawSetShadow(playerid, DmvTd[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, DmvTd[playerid][5], 1);
	PlayerTextDrawBackgroundColor(playerid, DmvTd[playerid][5], 51);
	PlayerTextDrawFont(playerid, DmvTd[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, DmvTd[playerid][5], 1);

	DmvTd[playerid][6] = CreatePlayerTextDraw(playerid, 547.199951, 176.213348, "3/3");
	PlayerTextDrawLetterSize(playerid, DmvTd[playerid][6], 0.414000, 1.301333);
	PlayerTextDrawAlignment(playerid, DmvTd[playerid][6], 3);
	PlayerTextDrawColor(playerid, DmvTd[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, DmvTd[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, DmvTd[playerid][6], 1);
	PlayerTextDrawBackgroundColor(playerid, DmvTd[playerid][6], 51);
	PlayerTextDrawFont(playerid, DmvTd[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, DmvTd[playerid][6], 1);

	DmvTd[playerid][7] = CreatePlayerTextDraw(playerid, 132.799987, 239.679977, "a) ma opresc la marginea drumului");
	PlayerTextDrawLetterSize(playerid, DmvTd[playerid][7], 0.253200, 0.860799);
	PlayerTextDrawTextSize(playerid, DmvTd[playerid][7], 246.399948, 20.000000);
	PlayerTextDrawAlignment(playerid, DmvTd[playerid][7], 1);
	PlayerTextDrawColor(playerid, DmvTd[playerid][7], -65281);
	PlayerTextDrawUseBox(playerid, DmvTd[playerid][7], true);
	PlayerTextDrawBoxColor(playerid, DmvTd[playerid][7], -1061109505);
	PlayerTextDrawSetShadow(playerid, DmvTd[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, DmvTd[playerid][7], 1);
	PlayerTextDrawBackgroundColor(playerid, DmvTd[playerid][7], 51);
	PlayerTextDrawFont(playerid, DmvTd[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, DmvTd[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, DmvTd[playerid][7], true);

	DmvTd[playerid][8] = CreatePlayerTextDraw(playerid, 277.600189, 238.933273, "b) ma deconectez de pe server");
	PlayerTextDrawLetterSize(playerid, DmvTd[playerid][8], 0.238799, 0.853332);
	PlayerTextDrawTextSize(playerid, DmvTd[playerid][8], 373.599792, 20.000000);
	PlayerTextDrawAlignment(playerid, DmvTd[playerid][8], 1);
	PlayerTextDrawColor(playerid, DmvTd[playerid][8], -65281);
	PlayerTextDrawUseBox(playerid, DmvTd[playerid][8], true);
	PlayerTextDrawBoxColor(playerid, DmvTd[playerid][8], -1061109505);
	PlayerTextDrawSetShadow(playerid, DmvTd[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, DmvTd[playerid][8], 1);
	PlayerTextDrawBackgroundColor(playerid, DmvTd[playerid][8], 51);
	PlayerTextDrawFont(playerid, DmvTd[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, DmvTd[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, DmvTd[playerid][8], true);

	DmvTd[playerid][9] = CreatePlayerTextDraw(playerid, 435.200164, 239.679901, "c) fug pana politistul imi pierde urma");
	PlayerTextDrawLetterSize(playerid, DmvTd[playerid][9], 0.225999, 0.868266);
	PlayerTextDrawTextSize(playerid, DmvTd[playerid][9], 539.199279, 20.00000);
	PlayerTextDrawAlignment(playerid, DmvTd[playerid][9], 1);
	PlayerTextDrawColor(playerid, DmvTd[playerid][9], -65281);
	PlayerTextDrawUseBox(playerid, DmvTd[playerid][9], true);
	PlayerTextDrawBoxColor(playerid, DmvTd[playerid][9], -1061109505);
	PlayerTextDrawSetShadow(playerid, DmvTd[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, DmvTd[playerid][9], 1);
	PlayerTextDrawBackgroundColor(playerid, DmvTd[playerid][9], 51);
	PlayerTextDrawFont(playerid, DmvTd[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, DmvTd[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, DmvTd[playerid][9], true);

	DmvTd[playerid][10] = CreatePlayerTextDraw(playerid, 339.200164, 279.253509, "Choose the correct answer!");
	PlayerTextDrawLetterSize(playerid, DmvTd[playerid][10], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, DmvTd[playerid][10], 2);
	PlayerTextDrawColor(playerid, DmvTd[playerid][10], -16776961);
	PlayerTextDrawSetShadow(playerid, DmvTd[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, DmvTd[playerid][10], 1);
	PlayerTextDrawBackgroundColor(playerid, DmvTd[playerid][10], 51);
	PlayerTextDrawFont(playerid, DmvTd[playerid][10], 1);
	PlayerTextDrawSetProportional(playerid, DmvTd[playerid][10], 1);

	DmvTd[playerid][11] = CreatePlayerTextDraw(playerid, 125.599952, 326.293304, "- after theoretical test you will start a practical test");
	PlayerTextDrawLetterSize(playerid, DmvTd[playerid][11], 0.250799, 0.771199);
	PlayerTextDrawAlignment(playerid, DmvTd[playerid][11], 1);
	PlayerTextDrawColor(playerid, DmvTd[playerid][11], -1);
	PlayerTextDrawSetShadow(playerid, DmvTd[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, DmvTd[playerid][11], 1);
	PlayerTextDrawBackgroundColor(playerid, DmvTd[playerid][11], 51);
	PlayerTextDrawFont(playerid, DmvTd[playerid][11], 1);
	PlayerTextDrawSetProportional(playerid, DmvTd[playerid][11], 1);

	TextLogo[playerid] = CreatePlayerTextDraw(playerid, 638.000122, 1.259251, "ionutdrg45_/_rpg.bluffs.ga");
	PlayerTextDrawLetterSize(playerid, TextLogo[playerid], 0.227333, 1.085630);
	PlayerTextDrawAlignment(playerid, TextLogo[playerid], 3);
	PlayerTextDrawColor(playerid, TextLogo[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TextLogo[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, TextLogo[playerid], 255);
	PlayerTextDrawFont(playerid, TextLogo[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TextLogo[playerid], 1);

	PayDayTimer[playerid] = CreatePlayerTextDraw(playerid, 633.999877, 433.081756, "Next_payday_in_59_30");
	PlayerTextDrawLetterSize(playerid, PayDayTimer[playerid], 0.256999, 1.085628);
	PlayerTextDrawAlignment(playerid, PayDayTimer[playerid], 3);
	PlayerTextDrawColor(playerid, PayDayTimer[playerid], -1);
	PlayerTextDrawSetShadow(playerid, PayDayTimer[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, PayDayTimer[playerid], 255);
	PlayerTextDrawFont(playerid, PayDayTimer[playerid], 1);
	PlayerTextDrawSetProportional(playerid, PayDayTimer[playerid], 1);

	BeehiveTimer[playerid] = CreatePlayerTextDraw(playerid, 633.333435, 422.711334, "Beehivecollecttime:59:00");
	PlayerTextDrawLetterSize(playerid, BeehiveTimer[playerid], 0.203666, 0.969481);
	PlayerTextDrawAlignment(playerid, BeehiveTimer[playerid], 3);
	PlayerTextDrawColor(playerid, BeehiveTimer[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BeehiveTimer[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, BeehiveTimer[playerid], 255);
	PlayerTextDrawFont(playerid, BeehiveTimer[playerid], 1);
	PlayerTextDrawSetProportional(playerid, BeehiveTimer[playerid], 1);

	CasinoDrawPlayer[playerid][0] = CreatePlayerTextDraw(playerid, 276.000000, 338.240020, "$50.000");
	PlayerTextDrawLetterSize(playerid, CasinoDrawPlayer[playerid][0], 0.405999, 1.338666);
	PlayerTextDrawAlignment(playerid, CasinoDrawPlayer[playerid][0], 1);
	PlayerTextDrawColor(playerid, CasinoDrawPlayer[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, CasinoDrawPlayer[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, CasinoDrawPlayer[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, CasinoDrawPlayer[playerid][0], 51);
	PlayerTextDrawFont(playerid, CasinoDrawPlayer[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, CasinoDrawPlayer[playerid][0], 1);

	PacaneleTD[0] = CreatePlayerTextDraw(playerid, -10.500000, 111.250000, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[0], 658.000000, 246.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[0], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[0], 170);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[0], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[0], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[0], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[0], 4);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[0], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[0], 0);

	PacaneleTD[1] = CreatePlayerTextDraw(playerid, 155.500000, 124.812500, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[1], 348.000000, 217.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[1], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[1], 1515870975);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[1], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[1], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[1], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[1], 4);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[1], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[1], 0);

	PacaneleTD[2] = CreatePlayerTextDraw(playerid, 159.000000, 139.299896, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[2], 0.460002, 180.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[2], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[2], -1105322241);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[2], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[2], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[2], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[2], 4);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[2], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[2], 0);

	PacaneleTD[3] = CreatePlayerTextDraw(playerid, 137.500000, 111.074989, "]");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[3], 1.271500, 3.966874);
	PlayerTextDrawAlignment(playerid, PacaneleTD[3], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[3], -65281);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[3], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[3], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[3], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[3], 2);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[3], 1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[3], 0);

	PacaneleTD[4] = CreatePlayerTextDraw(playerid, 137.500000, 317.574981, "]");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[4], 1.271500, 3.966874);
	PlayerTextDrawAlignment(playerid, PacaneleTD[4], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[4], -65281);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[4], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[4], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[4], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[4], 2);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[4], 1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[4], 0);

	PacaneleTD[5] = CreatePlayerTextDraw(playerid, 477.500000, 110.637481, "]");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[5], 1.271500, 3.966874);
	PlayerTextDrawAlignment(playerid, PacaneleTD[5], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[5], -65281);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[5], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[5], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[5], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[5], 2);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[5], 1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[5], 0);

	PacaneleTD[6] = CreatePlayerTextDraw(playerid, 477.000000, 318.887481, "]");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[6], 1.271500, 3.966874);
	PlayerTextDrawAlignment(playerid, PacaneleTD[6], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[6], -65281);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[6], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[6], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[6], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[6], 2);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[6], 1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[6], 0);

	PacaneleTD[7] = CreatePlayerTextDraw(playerid, 497.700012, 140.412597, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[7], 0.460002, 180.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[7], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[7], -1105322241);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[7], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[7], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[7], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[7], 4);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[7], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[7], 0);

	PacaneleTD[8] = CreatePlayerTextDraw(playerid, 168.700012, 132.100097, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[8], 323.000000, 0.280000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[8], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[8], -1105322241);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[8], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[8], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[8], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[8], 4);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[8], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[8], 0);

	PacaneleTD[9] = CreatePlayerTextDraw(playerid, 165.700012, 338.162597, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[9], 323.000000, 0.280000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[9], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[9], -1105322241);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[9], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[9], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[9], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[9], 4);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[9], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[9], 0);

	PacaneleTD[10] = CreatePlayerTextDraw(playerid, 161.000000, 133.125000, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[10], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[10], 90.000000, 90.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[10], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[10], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[10], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[10], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[10], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[10], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[10], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[10], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[10], 1276);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[10], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[11] = CreatePlayerTextDraw(playerid, 253.305603, 134.025054, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[11], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[11], 90.000000, 90.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[11], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[11], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[11], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[11], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[11], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[11], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[11], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[11], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[11], 1276);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[11], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[12] = CreatePlayerTextDraw(playerid, 360.005462, 131.587219, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[12], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[12], 90.000000, 90.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[12], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[12], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[12], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[12], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[12], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[12], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[12], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[12], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[12], 1276);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[12], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[13] = CreatePlayerTextDraw(playerid, 176.000000, 209.625183, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[13], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[13], 77.000000, 75.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[13], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[13], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[13], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[13], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[13], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[13], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[13], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[13], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[13], 1240);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[13], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[14] = CreatePlayerTextDraw(playerid, 270.000000, 209.625183, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[14], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[14], 77.000000, 75.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[14], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[14], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[14], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[14], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[14], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[14], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[14], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[14], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[14], 1240);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[14], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[15] = CreatePlayerTextDraw(playerid, 373.500000, 210.062683, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[15], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[15], 77.000000, 75.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[15], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[15], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[15], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[15], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[15], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[15], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[15], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[15], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[15], 1240);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[15], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[16] = CreatePlayerTextDraw(playerid, 174.500000, 269.562683, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[16], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[16], 77.000000, 75.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[16], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[16], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[16], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[16], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[16], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[16], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[16], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[16], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[16], 1274);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[16], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[17] = CreatePlayerTextDraw(playerid, 272.000000, 270.437683, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[17], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[17], 77.000000, 75.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[17], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[17], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[17], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[17], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[17], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[17], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[17], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[17], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[17], 1274);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[17], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[18] = CreatePlayerTextDraw(playerid, 375.400024, 268.812957, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[18], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[18], 77.000000, 75.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[18], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[18], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[18], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[18], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[18], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[18], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[18], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[18], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[18], 1274);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[18], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[19] = CreatePlayerTextDraw(playerid, -4.599975, 355.437957, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[19], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[19], 29.000000, 21.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[19], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[19], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[19], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[19], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[19], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[19], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[19], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[19], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[19], 1274);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[19], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[20] = CreatePlayerTextDraw(playerid, 9.200021, 355.437957, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[20], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[20], 29.000000, 21.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[20], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[20], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[20], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[20], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[20], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[20], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[20], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[20], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[20], 1274);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[20], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[21] = CreatePlayerTextDraw(playerid, 24.500061, 355.300476, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[21], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[21], 29.000000, 21.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[21], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[21], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[21], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[21], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[21], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[21], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[21], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[21], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[21], 1274);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[21], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[22] = CreatePlayerTextDraw(playerid, 49.500000, 360.187500, "=_$100,000,000");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[22], 0.298499, 1.005000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[22], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[22], 1018445055);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[22], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[22], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[22], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[22], 1);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[22], 1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[22], 0);

	PacaneleTD[23] = CreatePlayerTextDraw(playerid, 147.900054, 354.400421, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[23], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[23], 29.000000, 21.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[23], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[23], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[23], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[23], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[23], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[23], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[23], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[23], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[23], 1240);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[23], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[24] = CreatePlayerTextDraw(playerid, 168.501312, 354.400421, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[24], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[24], 29.000000, 21.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[24], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[24], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[24], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[24], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[24], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[24], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[24], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[24], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[24], 1240);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[24], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[25] = CreatePlayerTextDraw(playerid, 189.602600, 354.400421, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[25], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[25], 29.000000, 21.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[25], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[25], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[25], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[25], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[25], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[25], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[25], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[25], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[25], 1240);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[25], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[26] = CreatePlayerTextDraw(playerid, 217.099945, 359.750000, "=_$75,000,000");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[26], 0.298499, 1.005000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[26], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[26], 1018445055);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[26], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[26], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[26], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[26], 1);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[26], 1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[26], 0);

	PacaneleTD[27] = CreatePlayerTextDraw(playerid, 305.702697, 354.812866, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[27], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[27], 29.000000, 21.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[27], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[27], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[27], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[27], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[27], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[27], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[27], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[27], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[27], 1247);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[27], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[28] = CreatePlayerTextDraw(playerid, 326.702697, 354.375366, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[28], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[28], 29.000000, 21.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[28], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[28], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[28], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[28], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[28], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[28], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[28], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[28], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[28], 1247);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[28], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[29] = CreatePlayerTextDraw(playerid, 346.302734, 354.037872, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[29], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[29], 29.000000, 21.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[29], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[29], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[29], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[29], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[29], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[29], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[29], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[29], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[29], 1247);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[29], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[30] = CreatePlayerTextDraw(playerid, 371.599945, 360.187500, "=_$50,000,000");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[30], 0.298499, 1.005000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[30], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[30], 1018445055);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[30], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[30], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[30], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[30], 1);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[30], 1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[30], 0);

	PacaneleTD[31] = CreatePlayerTextDraw(playerid, 453.302734, 357.100372, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[31], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[31], 29.000000, 21.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[31], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[31], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[31], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[31], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[31], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[31], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[31], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[31], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[31], 1276);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[31], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[32] = CreatePlayerTextDraw(playerid, 469.802734, 357.100372, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[32], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[32], 29.000000, 21.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[32], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[32], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[32], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[32], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[32], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[32], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[32], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[32], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[32], 1276);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[32], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[33] = CreatePlayerTextDraw(playerid, 485.203704, 357.100372, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[33], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[33], 29.000000, 21.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[33], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[33], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[33], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[33], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[33], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[33], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[33], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[33], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[33], 1276);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[33], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[34] = CreatePlayerTextDraw(playerid, 509.099975, 362.812500, "=_$150,000");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[34], 0.298499, 1.005000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[34], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[34], 1018445055);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[34], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[34], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[34], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[34], 1);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[34], 1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[34], 0);

	PacaneleTD[35] = CreatePlayerTextDraw(playerid, -1.796295, 376.787872, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[35], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[35], 29.000000, 21.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[35], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[35], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[35], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[35], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[35], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[35], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[35], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[35], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[35], 1254);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[35], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[36] = CreatePlayerTextDraw(playerid, 18.703704, 377.300323, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[36], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[36], 29.000000, 21.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[36], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[36], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[36], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[36], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[36], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[36], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[36], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[36], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[36], 1254);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[36], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[37] = CreatePlayerTextDraw(playerid, 38.203659, 377.200317, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[37], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[37], 29.000000, 21.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[37], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[37], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[37], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[37], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[37], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[37], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[37], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[37], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[37], 1254);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[37], 0.000000, 0.000000, 0.000000, 1.000000);

	PacaneleTD[38] = CreatePlayerTextDraw(playerid, 65.099975, 381.187500, "=_$100,000");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[38], 0.298499, 1.005000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[38], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[38], 1018445055);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[38], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[38], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[38], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[38], 1);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[38], 1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[38], 0);

	PacaneleTD[40] = CreatePlayerTextDraw(playerid, 462.703674, 116.450317, "");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[40], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PacaneleTD[40], 106.000000, 121.000000);
	PlayerTextDrawAlignment(playerid, PacaneleTD[40], 1);
	PlayerTextDrawColor(playerid, PacaneleTD[40], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[40], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[40], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[40], 0);
	PlayerTextDrawFont(playerid, PacaneleTD[40], 5);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[40], 0);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[40], 0);
	PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[40], 19610);
	PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[40], 40.000000, 0.000000, 15.000000, 1.000000);

	PacaneleTD[41] = CreatePlayerTextDraw(playerid, 577.698974, 102.124992, "Your_Cash:_$3,655,844");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[41], 0.258000, 1.040001);
	PlayerTextDrawAlignment(playerid, PacaneleTD[41], 2);
	PlayerTextDrawColor(playerid, PacaneleTD[41], 515120895);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[41], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[41], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[41], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[41], 1);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[41], 1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[41], 0);

	PacaneleTD[42] = CreatePlayerTextDraw(playerid, 583.400878, 155.500000, "BET:");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[42], 0.540000, 1.228126);
	PlayerTextDrawAlignment(playerid, PacaneleTD[42], 2);
	PlayerTextDrawColor(playerid, PacaneleTD[42], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[42], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[42], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[42], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[42], 1);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[42], 1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[42], 0);

	PacaneleTD[43] = CreatePlayerTextDraw(playerid, 537.198974, 175.187500, "<");
	PlayerTextDrawTextSize(playerid, PacaneleTD[43], 10.0,10.0);
	PlayerTextDrawLetterSize(playerid, PacaneleTD[43], 0.540000, 1.228126);
	PlayerTextDrawAlignment(playerid, PacaneleTD[43], 2);
	PlayerTextDrawColor(playerid, PacaneleTD[43], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[43], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[43], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[43], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[43], 1);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[43], 1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[43], 0);
	PlayerTextDrawSetSelectable(playerid, PacaneleTD[43], true);

	PacaneleTD[44] = CreatePlayerTextDraw(playerid, 627.177124, 175.187500, ">");
	PlayerTextDrawTextSize(playerid, PacaneleTD[44], 10.0,10.0);
	PlayerTextDrawLetterSize(playerid, PacaneleTD[44], 0.540000, 1.228126);
	PlayerTextDrawAlignment(playerid, PacaneleTD[44], 2);
	PlayerTextDrawColor(playerid, PacaneleTD[44], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[44], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[44], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[44], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[44], 1);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[44], 1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[44], 0);
	PlayerTextDrawSetSelectable(playerid, PacaneleTD[44], true);

	PacaneleTD[45] = CreatePlayerTextDraw(playerid, 582.698974, 176.062500, "$50,000,000");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[45], 0.258000, 1.040001);
	PlayerTextDrawAlignment(playerid, PacaneleTD[45], 2);
	PlayerTextDrawColor(playerid, PacaneleTD[45], 515120895);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[45], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[45], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[45], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[45], 1);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[45], 1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[45], 0);

	PacaneleTD[46] = CreatePlayerTextDraw(playerid, 549.198974, 189.625000, "MIN");
	PlayerTextDrawTextSize(playerid, PacaneleTD[46], 10.0,10.0);
	PlayerTextDrawLetterSize(playerid, PacaneleTD[46], 0.258000, 1.040001);
	PlayerTextDrawAlignment(playerid, PacaneleTD[46], 2);
	PlayerTextDrawColor(playerid, PacaneleTD[46], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[46], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[46], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[46], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[46], 1);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[46], 1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[46], 0);
	PlayerTextDrawSetSelectable(playerid, PacaneleTD[46], true);

	PacaneleTD[47] = CreatePlayerTextDraw(playerid, 609.800415, 190.937500, "MAX");
	PlayerTextDrawTextSize(playerid, PacaneleTD[47], 10.0,10.0);
	PlayerTextDrawLetterSize(playerid, PacaneleTD[47], 0.258000, 1.040001);
	PlayerTextDrawAlignment(playerid, PacaneleTD[47], 2);
	PlayerTextDrawColor(playerid, PacaneleTD[47], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[47], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[47], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[47], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[47], 1);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[47], 1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[47], 0);
	PlayerTextDrawSetSelectable(playerid, PacaneleTD[47], true);

	PacaneleTD[48] = CreatePlayerTextDraw(playerid, 587.099975, 266.562500, "SPIN");
	PlayerTextDrawTextSize(playerid, PacaneleTD[48], 30.0,30.0);
	PlayerTextDrawLetterSize(playerid, PacaneleTD[48], 0.657999, 1.735625);
	PlayerTextDrawAlignment(playerid, PacaneleTD[48], 2);
	PlayerTextDrawColor(playerid, PacaneleTD[48], 1018445055);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[48], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[48], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[48], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[48], 1);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[48], 1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[48], 0);
	PlayerTextDrawSetSelectable(playerid, PacaneleTD[48], true);

	PacaneleTD[49] = CreatePlayerTextDraw(playerid, 70.599975, 221.062500, "~r~LOSE");
	PlayerTextDrawLetterSize(playerid, PacaneleTD[49], 0.657999, 1.735625);
	PlayerTextDrawAlignment(playerid, PacaneleTD[49], 2);
	PlayerTextDrawColor(playerid, PacaneleTD[49], 1018445055);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[49], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[49], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[49], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[49], 1);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[49], 1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[49], 0);

	PacaneleTD[50] = CreatePlayerTextDraw(playerid, 589.800415, 205.937500, "+10.000$");
	PlayerTextDrawTextSize(playerid, PacaneleTD[50], 10.0,10.0);
	PlayerTextDrawLetterSize(playerid, PacaneleTD[50], 0.258000, 1.040001);
	PlayerTextDrawAlignment(playerid, PacaneleTD[50], 2);
	PlayerTextDrawColor(playerid, PacaneleTD[50], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[50], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[50], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[50], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[50], 1);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[50], 1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[50], 0);
	PlayerTextDrawSetSelectable(playerid, PacaneleTD[50], true);

	PacaneleTD[51] = CreatePlayerTextDraw(playerid, 589.800415, 220.937500, "+100.000$");
	PlayerTextDrawTextSize(playerid, PacaneleTD[51], 10.0,10.0);
	PlayerTextDrawLetterSize(playerid, PacaneleTD[51], 0.258000, 1.040001);
	PlayerTextDrawAlignment(playerid, PacaneleTD[51], 2);
	PlayerTextDrawColor(playerid, PacaneleTD[51], -1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[51], 0);
	PlayerTextDrawSetOutline(playerid, PacaneleTD[51], 0);
	PlayerTextDrawBackgroundColor(playerid, PacaneleTD[51], 255);
	PlayerTextDrawFont(playerid, PacaneleTD[51], 1);
	PlayerTextDrawSetProportional(playerid, PacaneleTD[51], 1);
	PlayerTextDrawSetShadow(playerid, PacaneleTD[51], 0);
	PlayerTextDrawSetSelectable(playerid, PacaneleTD[51], true);

	PlayerTextDrawSetProportional(playerid, PaintBallText[playerid], 1);
	PaintBallText[playerid] = CreatePlayerTextDraw(playerid, 1.599968, 310.080230, " ");
	PlayerTextDrawLetterSize(playerid, PaintBallText[playerid], 0.217200, 1.473333);
	PlayerTextDrawAlignment(playerid, PaintBallText[playerid], 1);
	PlayerTextDrawColor(playerid, PaintBallText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, PaintBallText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, PaintBallText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, PaintBallText[playerid], 51);
	PlayerTextDrawFont(playerid, PaintBallText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, PaintBallText[playerid], 1);

	Speedd[playerid] = CreatePlayerTextDraw(playerid, 541.600280, 358.400329, "Speed: 128 km/h");
	PlayerTextDrawLetterSize(playerid, Speedd[playerid], 0.297998, 1.540266);
	PlayerTextDrawAlignment(playerid, Speedd[playerid], 1);
	PlayerTextDrawColor(playerid, Speedd[playerid], -1);
	PlayerTextDrawSetShadow(playerid, Speedd[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Speedd[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, Speedd[playerid], 51);
	PlayerTextDrawFont(playerid, Speedd[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Speedd[playerid], 1);

	Fuell[playerid] = CreatePlayerTextDraw(playerid, 541.226379, 373.333129, "Fuel: 100 L"); 
	PlayerTextDrawLetterSize(playerid, Fuell[playerid], 0.297998, 1.540266);
	PlayerTextDrawAlignment(playerid, Fuell[playerid], 1);
	PlayerTextDrawColor(playerid, Fuell[playerid], -1);
	PlayerTextDrawSetShadow(playerid, Fuell[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Fuell[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, Fuell[playerid], 51);
	PlayerTextDrawFont(playerid, Fuell[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Fuell[playerid], 1);

	Odom[playerid] = CreatePlayerTextDraw(playerid, 541.600219, 386.773284, " ");
	PlayerTextDrawLetterSize(playerid, Odom[playerid], 0.297998, 1.540266);
	PlayerTextDrawAlignment(playerid, Odom[playerid], 1);
	PlayerTextDrawColor(playerid, Odom[playerid], -1);
	PlayerTextDrawSetShadow(playerid, Odom[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Odom[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, Odom[playerid], 51);
	PlayerTextDrawFont(playerid, Odom[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Odom[playerid], 1);

	carlocked[playerid] = CreatePlayerTextDraw(playerid, 542.400146, 399.466430, " ");
	PlayerTextDrawLetterSize(playerid, carlocked[playerid], 0.297998, 1.540266);
	PlayerTextDrawAlignment(playerid, carlocked[playerid], 1);
	PlayerTextDrawColor(playerid, carlocked[playerid], -1);
	PlayerTextDrawSetShadow(playerid, carlocked[playerid], 0);
	PlayerTextDrawSetOutline(playerid, carlocked[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, carlocked[playerid], 51);
	PlayerTextDrawFont(playerid, carlocked[playerid], 1);
	PlayerTextDrawSetProportional(playerid, carlocked[playerid], 1);

	farmspeed[playerid] = CreatePlayerTextDraw(playerid, 632.799987, 341.226745, "(!) Your moving speed needs to be higher than 25 KM/H");
	PlayerTextDrawLetterSize(playerid, farmspeed[playerid], 0.181999, 1.226666);
	PlayerTextDrawAlignment(playerid, farmspeed[playerid], 3);
	PlayerTextDrawColor(playerid, farmspeed[playerid], 8388863);
	PlayerTextDrawSetShadow(playerid, farmspeed[playerid], 0);
	PlayerTextDrawSetOutline(playerid, farmspeed[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, farmspeed[playerid], 51);
	PlayerTextDrawFont(playerid, farmspeed[playerid], 1);
	PlayerTextDrawSetProportional(playerid, farmspeed[playerid], 1);

	farmtime[playerid] = CreatePlayerTextDraw(playerid, 632.000000, 312.106658, "Work 45 more seconds to get your reward");
	PlayerTextDrawLetterSize(playerid, farmtime[playerid], 0.213999, 1.301333);
	PlayerTextDrawAlignment(playerid, farmtime[playerid], 3);
	PlayerTextDrawColor(playerid, farmtime[playerid], -1);
	PlayerTextDrawSetShadow(playerid, farmtime[playerid], 0);
	PlayerTextDrawSetOutline(playerid, farmtime[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, farmtime[playerid], 51);
	PlayerTextDrawFont(playerid, farmtime[playerid], 1);
	PlayerTextDrawSetProportional(playerid, farmtime[playerid], 1);

	farmwanted[playerid] = CreatePlayerTextDraw(playerid, 631.200012, 327.040100, "(!) Go back to the farm or you risk wanted!");
	PlayerTextDrawLetterSize(playerid, farmwanted[playerid], 0.174000, 1.226666);
	PlayerTextDrawAlignment(playerid, farmwanted[playerid], 3);
	PlayerTextDrawColor(playerid, farmwanted[playerid], 8388863);
	PlayerTextDrawSetShadow(playerid, farmwanted[playerid], 0);
	PlayerTextDrawSetOutline(playerid, farmwanted[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, farmwanted[playerid], 51);
	PlayerTextDrawFont(playerid, farmwanted[playerid], 1);
	PlayerTextDrawSetProportional(playerid, farmwanted[playerid], 1);

	TimeLeftWar1[playerid] = CreatePlayerTextDraw(playerid, 501.600036, 221.759963, " ");
	PlayerTextDrawLetterSize(playerid, TimeLeftWar1[playerid], 0.332400, 2.264533);
	PlayerTextDrawAlignment(playerid, TimeLeftWar1[playerid], 1);
	PlayerTextDrawColor(playerid, TimeLeftWar1[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TimeLeftWar1[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TimeLeftWar1[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, TimeLeftWar1[playerid], 255);
	PlayerTextDrawFont(playerid, TimeLeftWar1[playerid], 2);
	PlayerTextDrawSetProportional(playerid, TimeLeftWar1[playerid], 1);

	Jailtime[playerid] = CreatePlayerTextDraw(playerid, 488.799987, 128.426467, " ");
	PlayerTextDrawLetterSize(playerid, Jailtime[playerid], 0.174798, 1.114666);
	PlayerTextDrawAlignment(playerid, Jailtime[playerid], 1);
	PlayerTextDrawColor(playerid, Jailtime[playerid], -1);
	PlayerTextDrawSetShadow(playerid, Jailtime[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Jailtime[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, Jailtime[playerid], 51);
	PlayerTextDrawFont(playerid, Jailtime[playerid], 2);
	PlayerTextDrawSetProportional(playerid, Jailtime[playerid], 1);

	Bus1[playerid] = CreatePlayerTextDraw(playerid, 256.000030, 351.431243, "Please wait a moment...");
	PlayerTextDrawLetterSize(playerid, Bus1[playerid], 0.292799, 1.614933);
	PlayerTextDrawColor(playerid, Bus1[playerid], -136734721);
	PlayerTextDrawSetShadow(playerid, Bus1[playerid], 1);
	PlayerTextDrawSetOutline(playerid, Bus1[playerid], 1);
	PlayerTextDrawFont(playerid, Bus1[playerid], 1);

	Bus2[playerid] = CreatePlayerTextDraw(playerid, 270.000030, 364.373382, " ");
	PlayerTextDrawLetterSize(playerid, Bus2[playerid], 0.206000, 1.525333);
	PlayerTextDrawColor(playerid, Bus2[playerid], -1);
	PlayerTextDrawSetShadow(playerid, Bus2[playerid], 1);
	PlayerTextDrawSetOutline(playerid, Bus2[playerid], 1);
	PlayerTextDrawFont(playerid, Bus2[playerid], 1);

	TextDrawSpec[playerid][1] = CreatePlayerTextDraw(playerid, 224.799926, 317.333343, " ");
	PlayerTextDrawLetterSize(playerid, TextDrawSpec[playerid][1], 0.392397, 2.219732);
	PlayerTextDrawAlignment(playerid, TextDrawSpec[playerid][1], 1);
	PlayerTextDrawColor(playerid, TextDrawSpec[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, TextDrawSpec[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, TextDrawSpec[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, TextDrawSpec[playerid][1], 255);
	PlayerTextDrawFont(playerid, TextDrawSpec[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, TextDrawSpec[playerid][1], 1);

	TextDrawSpec[playerid][2] = CreatePlayerTextDraw(playerid, 224.800003, 336.746551, " ");
	PlayerTextDrawLetterSize(playerid, TextDrawSpec[playerid][2], 0.434798, 2.092799);
	PlayerTextDrawAlignment(playerid, TextDrawSpec[playerid][2], 1);
	PlayerTextDrawColor(playerid, TextDrawSpec[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, TextDrawSpec[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, TextDrawSpec[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, TextDrawSpec[playerid][2], 255);
	PlayerTextDrawFont(playerid, TextDrawSpec[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, TextDrawSpec[playerid][2], 1);

	TextDrawSpec[playerid][3] = CreatePlayerTextDraw(playerid, 225.599975, 356.159973, " ");
	PlayerTextDrawLetterSize(playerid, TextDrawSpec[playerid][3], 0.437999, 2.182399);
	PlayerTextDrawAlignment(playerid, TextDrawSpec[playerid][3], 1);
	PlayerTextDrawColor(playerid, TextDrawSpec[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, TextDrawSpec[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, TextDrawSpec[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, TextDrawSpec[playerid][3], 255);
	PlayerTextDrawFont(playerid, TextDrawSpec[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, TextDrawSpec[playerid][3], 1);

	TextDrawSpec[playerid][4] = CreatePlayerTextDraw(playerid, 226.400039, 375.573486, " ");
	PlayerTextDrawLetterSize(playerid, TextDrawSpec[playerid][4], 0.408400, 2.040534);
	PlayerTextDrawAlignment(playerid, TextDrawSpec[playerid][4], 1);
	PlayerTextDrawColor(playerid, TextDrawSpec[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, TextDrawSpec[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, TextDrawSpec[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, TextDrawSpec[playerid][4], 255);
	PlayerTextDrawFont(playerid, TextDrawSpec[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, TextDrawSpec[playerid][4], 1);

	TextDrawSpec[playerid][5] = CreatePlayerTextDraw(playerid, 226.399963, 394.240020, " ");
	PlayerTextDrawLetterSize(playerid, TextDrawSpec[playerid][5], 0.430000, 1.958400);
	PlayerTextDrawAlignment(playerid, TextDrawSpec[playerid][5], 1);
	PlayerTextDrawColor(playerid, TextDrawSpec[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, TextDrawSpec[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, TextDrawSpec[playerid][5], 1);
	PlayerTextDrawBackgroundColor(playerid, TextDrawSpec[playerid][5], 255);
	PlayerTextDrawFont(playerid, TextDrawSpec[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, TextDrawSpec[playerid][5], 1);

	HUD[1][playerid] = CreatePlayerTextDraw(playerid,575.999633, 66.370399, " ");
	PlayerTextDrawLetterSize(playerid, HUD[1][playerid], 0.279333, 1.052443);
	PlayerTextDrawAlignment(playerid, HUD[1][playerid], 2);
	PlayerTextDrawColor(playerid, HUD[1][playerid], -1);
	PlayerTextDrawSetShadow(playerid, HUD[1][playerid], 0);
	PlayerTextDrawSetOutline(playerid, HUD[1][playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, HUD[1][playerid], 51);
	PlayerTextDrawFont(playerid, HUD[1][playerid], 1);
	PlayerTextDrawSetProportional(playerid, HUD[1][playerid], 1);

	HUD[2][playerid] = CreatePlayerTextDraw(playerid,575.666320, 43.970417, " ");
	PlayerTextDrawLetterSize(playerid, HUD[2][playerid], 0.279333, 1.052443);
	PlayerTextDrawAlignment(playerid, HUD[2][playerid], 2);
	PlayerTextDrawColor(playerid, HUD[2][playerid], -1);
	PlayerTextDrawSetShadow(playerid, HUD[2][playerid], 0);
	PlayerTextDrawSetOutline(playerid, HUD[2][playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, HUD[2][playerid], 51);
	PlayerTextDrawFont(playerid, HUD[2][playerid], 1);
	PlayerTextDrawSetProportional(playerid, HUD[2][playerid], 1);

	HUD[3][playerid] = CreatePlayerTextDraw(playerid, 549.333435, 39.837100, " ");
	PlayerTextDrawLetterSize(playerid, HUD[3][playerid], 0.323666, 0.923851);
	PlayerTextDrawAlignment(playerid, HUD[3][playerid], 1);
	PlayerTextDrawColor(playerid, HUD[3][playerid], -1);
	PlayerTextDrawSetShadow(playerid, HUD[3][playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, HUD[3][playerid], 255);
	PlayerTextDrawFont(playerid, HUD[3][playerid], 1);
	PlayerTextDrawSetProportional(playerid, HUD[3][playerid], 1);

	RentCarText[playerid] = CreatePlayerTextDraw(playerid, 45.333335, 320.237182, " ");
	PlayerTextDrawLetterSize(playerid, RentCarText[playerid], 0.240000, 1.300000);
	PlayerTextDrawAlignment(playerid, RentCarText[playerid], 1);
	PlayerTextDrawColor(playerid, RentCarText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, RentCarText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, RentCarText[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, RentCarText[playerid], 255);
	PlayerTextDrawFont(playerid, RentCarText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, RentCarText[playerid], 1);

	Packages[playerid] = CreatePlayerTextDraw(playerid, 631.199829, 335.253356, "Packages in plane: 20 packages");
	PlayerTextDrawLetterSize(playerid, Packages[playerid], 0.223599, 1.682133);
	PlayerTextDrawAlignment(playerid, Packages[playerid], 3);
	PlayerTextDrawColor(playerid, Packages[playerid], -1);
	PlayerTextDrawSetShadow(playerid, Packages[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Packages[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, Packages[playerid], 51);
	PlayerTextDrawFont(playerid, Packages[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Packages[playerid], 1);

	Tutorial[playerid] = CreatePlayerTextDraw(playerid, 280.000000, 377.000000, "~y~Tutorial");
	PlayerTextDrawLetterSize(playerid, Tutorial[playerid], 0.420000, 1.500000);
	PlayerTextDrawSetShadow(playerid, Tutorial[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Tutorial[playerid], 1);
	PlayerTextDrawFont(playerid, Tutorial[playerid], 2);

	Step[playerid] = CreatePlayerTextDraw(playerid, 282.000000, 390.000000, " ");
	PlayerTextDrawLetterSize(playerid, Step[playerid], 0.470000, 1.500000);
	PlayerTextDrawSetShadow(playerid, Step[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Step[playerid], 1);
	PlayerTextDrawFont(playerid, Step[playerid], 2);

	BusJob[playerid] = CreatePlayerTextDraw(playerid, 284.000091, 375.573822, "~y~ bus driver job");
	PlayerTextDrawLetterSize(playerid, BusJob[playerid], 0.200399, 1.196799);
	PlayerTextDrawAlignment(playerid, BusJob[playerid], 1);
	PlayerTextDrawColor(playerid, BusJob[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BusJob[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BusJob[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BusJob[playerid], 51);
	PlayerTextDrawFont(playerid, BusJob[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BusJob[playerid], 1);

	BusCheck[playerid] = CreatePlayerTextDraw(playerid, 284.000091, 384.533905, " ");
	PlayerTextDrawLetterSize(playerid, BusCheck[playerid], 0.200399, 1.196799);
	PlayerTextDrawAlignment(playerid, BusCheck[playerid], 1);
	PlayerTextDrawColor(playerid, BusCheck[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BusCheck[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BusCheck[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BusCheck[playerid], 51);
	PlayerTextDrawFont(playerid, BusCheck[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BusCheck[playerid], 1);

	DMVexam[playerid] = CreatePlayerTextDraw(playerid, 284.000091, 375.573822, "~y~PRACTICAL EXAM");
	PlayerTextDrawLetterSize(playerid, DMVexam[playerid], 0.200399, 1.196799);
	PlayerTextDrawAlignment(playerid, DMVexam[playerid], 1);
	PlayerTextDrawColor(playerid, DMVexam[playerid], -1);
	PlayerTextDrawSetShadow(playerid, DMVexam[playerid], 0);
	PlayerTextDrawSetOutline(playerid, DMVexam[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, DMVexam[playerid], 255);
	PlayerTextDrawFont(playerid, DMVexam[playerid], 2);
	PlayerTextDrawSetProportional(playerid, DMVexam[playerid], 1);

	DMVcheck[playerid] = CreatePlayerTextDraw(playerid, 284.000091, 384.533905, " ");
	PlayerTextDrawLetterSize(playerid, DMVcheck[playerid], 0.200399, 1.196799);
	PlayerTextDrawAlignment(playerid, DMVcheck[playerid], 1);
	PlayerTextDrawColor(playerid, DMVcheck[playerid], -1);
	PlayerTextDrawSetShadow(playerid, DMVcheck[playerid], 0);
	PlayerTextDrawSetOutline(playerid, DMVcheck[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, DMVcheck[playerid], 255);
	PlayerTextDrawFont(playerid, DMVcheck[playerid], 2);
	PlayerTextDrawSetProportional(playerid, DMVcheck[playerid], 1);

	WantedText[playerid] = CreatePlayerTextDraw(playerid, 488.799987, 128.426467, " ");
	PlayerTextDrawLetterSize(playerid, WantedText[playerid], 0.174798, 1.114666);
	PlayerTextDrawAlignment(playerid, WantedText[playerid], 1);
	PlayerTextDrawColor(playerid, WantedText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, WantedText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, WantedText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, WantedText[playerid], 51);
	PlayerTextDrawFont(playerid, WantedText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, WantedText[playerid], 1);

	UndercoverText[playerid] = CreatePlayerTextDraw(playerid, 272.000152, 384.533905, "~r~(you are undercover)");
	PlayerTextDrawBackgroundColor(playerid, UndercoverText[playerid], 255);
	PlayerTextDrawFont(playerid, UndercoverText[playerid], 1);
	PlayerTextDrawLetterSize(playerid, UndercoverText[playerid], 0.278798, 1.353599);
	PlayerTextDrawColor(playerid, UndercoverText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, UndercoverText[playerid], 0);
	PlayerTextDrawSetProportional(playerid, UndercoverText[playerid], 1);
	PlayerTextDrawSetShadow(playerid, UndercoverText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, UndercoverText[playerid], 0);

	Reportss[playerid] = CreatePlayerTextDraw(playerid, 500.000274, 96.651863, " ");
	PlayerTextDrawLetterSize(playerid, Reportss[playerid], 0.191333, 1.960887);
	PlayerTextDrawAlignment(playerid, Reportss[playerid], 1);
	PlayerTextDrawColor(playerid, Reportss[playerid], -1);
	PlayerTextDrawSetShadow(playerid, Reportss[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Reportss[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, Reportss[playerid], 51);
	PlayerTextDrawFont(playerid, Reportss[playerid], 2);
	PlayerTextDrawSetProportional(playerid, Reportss[playerid], 1);

	RaceTD[playerid][0] = CreatePlayerTextDraw(playerid, 152.400070, 239.686676, "usebox");
	PlayerTextDrawLetterSize(playerid, RaceTD[playerid][0], 0.000000, 6.853699);
	PlayerTextDrawTextSize(playerid, RaceTD[playerid][0], 6.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, RaceTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, RaceTD[playerid][0], 0);
	PlayerTextDrawUseBox(playerid, RaceTD[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, RaceTD[playerid][0], 102);
	PlayerTextDrawSetShadow(playerid, RaceTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, RaceTD[playerid][0], 0);
	PlayerTextDrawFont(playerid, RaceTD[playerid][0], 0);

	RaceTD[playerid][1] = CreatePlayerTextDraw(playerid, 79.200004, 237.439819, "Race Stats");
	PlayerTextDrawLetterSize(playerid, RaceTD[playerid][1], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, RaceTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, RaceTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, RaceTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, RaceTD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, RaceTD[playerid][1], 51);
	PlayerTextDrawFont(playerid, RaceTD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, RaceTD[playerid][1], 1);

	RaceTD[playerid][2] = CreatePlayerTextDraw(playerid, 79.199943, 254.613327, "Position: 24/25");
	PlayerTextDrawLetterSize(playerid, RaceTD[playerid][2], 0.365999, 1.532799);
	PlayerTextDrawAlignment(playerid, RaceTD[playerid][2], 2);
	PlayerTextDrawColor(playerid, RaceTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, RaceTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, RaceTD[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, RaceTD[playerid][2], 51);
	PlayerTextDrawFont(playerid, RaceTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, RaceTD[playerid][2], 1);

	RaceTD[playerid][3] = CreatePlayerTextDraw(playerid, 79.199974, 272.533294, "Checkpoints: 23/24");
	PlayerTextDrawLetterSize(playerid, RaceTD[playerid][3], 0.369199, 1.376000);
	PlayerTextDrawAlignment(playerid, RaceTD[playerid][3], 2);
	PlayerTextDrawColor(playerid, RaceTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, RaceTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, RaceTD[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, RaceTD[playerid][3], 51);
	PlayerTextDrawFont(playerid, RaceTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, RaceTD[playerid][3], 1);

	RaceTD[playerid][4] = CreatePlayerTextDraw(playerid, 80.800003, 285.226623, "First: NuamnumeSRLGRT");
	PlayerTextDrawLetterSize(playerid, RaceTD[playerid][4], 0.297998, 1.898666);
	PlayerTextDrawAlignment(playerid, RaceTD[playerid][4], 2);
	PlayerTextDrawColor(playerid, RaceTD[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, RaceTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, RaceTD[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, RaceTD[playerid][4], 51);
	PlayerTextDrawFont(playerid, RaceTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, RaceTD[playerid][4], 1);

	FindTXD[playerid][0] = CreatePlayerTextDraw(playerid, 269.333374, 357.570251, " ");
	PlayerTextDrawLetterSize(playerid, FindTXD[playerid][0], 0.193999, 1.653925);
	PlayerTextDrawAlignment(playerid, FindTXD[playerid][0], 1);
	PlayerTextDrawColor(playerid, FindTXD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, FindTXD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, FindTXD[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, FindTXD[playerid][0], 51);
	PlayerTextDrawFont(playerid, FindTXD[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, FindTXD[playerid][0], 1);

	FindTXD[playerid][1] = CreatePlayerTextDraw(playerid, 270.333343, 371.259185, " ");
	PlayerTextDrawLetterSize(playerid, FindTXD[playerid][1], 0.203666, 1.454815);
	PlayerTextDrawAlignment(playerid, FindTXD[playerid][1], 1);
	PlayerTextDrawColor(playerid, FindTXD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, FindTXD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, FindTXD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, FindTXD[playerid][1], 51);
	PlayerTextDrawFont(playerid, FindTXD[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, FindTXD[playerid][1], 1);

	TextJos[playerid] = CreatePlayerTextDraw(playerid, 307.000061, 398.222290, " ");
	PlayerTextDrawLetterSize(playerid, TextJos[playerid], 0.220666, 1.197629);
	PlayerTextDrawAlignment(playerid, TextJos[playerid], 2);
	PlayerTextDrawColor(playerid, TextJos[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TextJos[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TextJos[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, TextJos[playerid], 51);
	PlayerTextDrawFont(playerid, TextJos[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TextJos[playerid], 1);

	BJusebox1[playerid] = CreatePlayerTextDraw(playerid, 502.999969, 105.203735, "usebox");
	PlayerTextDrawLetterSize(playerid, BJusebox1[playerid], 0.000000, 28.213373);
	PlayerTextDrawTextSize(playerid, BJusebox1[playerid], 138.666625, 0.000000);
	PlayerTextDrawAlignment(playerid, BJusebox1[playerid], 1);
	PlayerTextDrawColor(playerid, BJusebox1[playerid], 0);
	PlayerTextDrawUseBox(playerid, BJusebox1[playerid], true);
	PlayerTextDrawBoxColor(playerid, BJusebox1[playerid], 102);
	PlayerTextDrawSetShadow(playerid, BJusebox1[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJusebox1[playerid], 0);
	PlayerTextDrawFont(playerid, BJusebox1[playerid], 0);

	BJusebox2[playerid] = CreatePlayerTextDraw(playerid, 133.000061, 163.692596, "usebox");
	PlayerTextDrawLetterSize(playerid, BJusebox2[playerid], 0.000000, 15.999383);
	PlayerTextDrawTextSize(playerid, BJusebox2[playerid], 45.000015, 0.000000);
	PlayerTextDrawAlignment(playerid, BJusebox2[playerid], 1);
	PlayerTextDrawColor(playerid, BJusebox2[playerid], 0);
	PlayerTextDrawUseBox(playerid, BJusebox2[playerid], true);
	PlayerTextDrawBoxColor(playerid, BJusebox2[playerid], 102);
	PlayerTextDrawSetShadow(playerid, BJusebox2[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJusebox2[playerid], 0);
	PlayerTextDrawFont(playerid, BJusebox2[playerid], 0);

	BJusebox3[playerid] = CreatePlayerTextDraw(playerid, 596.333068, 164.107452, "usebox");
	PlayerTextDrawLetterSize(playerid, BJusebox3[playerid], 0.000000, 15.999385);
	PlayerTextDrawTextSize(playerid, BJusebox3[playerid], 508.000152, 0.000000);
	PlayerTextDrawAlignment(playerid, BJusebox3[playerid], 1);
	PlayerTextDrawColor(playerid, BJusebox3[playerid], 0);
	PlayerTextDrawUseBox(playerid, BJusebox3[playerid], true);
	PlayerTextDrawBoxColor(playerid, BJusebox3[playerid], 102);
	PlayerTextDrawSetShadow(playerid, BJusebox3[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJusebox3[playerid], 0);
	PlayerTextDrawFont(playerid, BJusebox3[playerid], 0);

	BJDealerText[playerid] = CreatePlayerTextDraw(playerid, 298.999969, 108.681503, "Dealer");
	PlayerTextDrawLetterSize(playerid, BJDealerText[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, BJDealerText[playerid], 1);
	PlayerTextDrawColor(playerid, BJDealerText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJDealerText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJDealerText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BJDealerText[playerid], 51);
	PlayerTextDrawFont(playerid, BJDealerText[playerid], 0);
	PlayerTextDrawSetProportional(playerid, BJDealerText[playerid], 1);

	BJPlayerText[playerid] = CreatePlayerTextDraw(playerid, 300.333435, 235.614761, "Player");
	PlayerTextDrawLetterSize(playerid, BJPlayerText[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, BJPlayerText[playerid], 1);
	PlayerTextDrawColor(playerid, BJPlayerText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJPlayerText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJPlayerText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BJPlayerText[playerid], 51);
	PlayerTextDrawFont(playerid, BJPlayerText[playerid], 0);
	PlayerTextDrawSetProportional(playerid, BJPlayerText[playerid], 1);

	BJBlackJackText[playerid] = CreatePlayerTextDraw(playerid, 64.000007, 154.311111, "Blackjack");
	PlayerTextDrawLetterSize(playerid, BJBlackJackText[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, BJBlackJackText[playerid], 1);
	PlayerTextDrawColor(playerid, BJBlackJackText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJBlackJackText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJBlackJackText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BJBlackJackText[playerid], 51);
	PlayerTextDrawFont(playerid, BJBlackJackText[playerid], 0);
	PlayerTextDrawSetProportional(playerid, BJBlackJackText[playerid], 1);

	BJScoreText[playerid] = CreatePlayerTextDraw(playerid, 535.999572, 153.481521, "Score");
	PlayerTextDrawLetterSize(playerid, BJScoreText[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, BJScoreText[playerid], 1);
	PlayerTextDrawColor(playerid, BJScoreText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJScoreText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJScoreText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BJScoreText[playerid], 51);
	PlayerTextDrawFont(playerid, BJScoreText[playerid], 0);
	PlayerTextDrawSetProportional(playerid, BJScoreText[playerid], 1);

	BJDealText[playerid] = CreatePlayerTextDraw(playerid, 89.600028, 182.186599, "DEAL: ~n~250.000$");
	PlayerTextDrawLetterSize(playerid, BJDealText[playerid], 0.237999, 1.002665);
	PlayerTextDrawAlignment(playerid, BJDealText[playerid], 2);
	PlayerTextDrawColor(playerid, BJDealText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJDealText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJDealText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BJDealText[playerid], 51);
	PlayerTextDrawFont(playerid, BJDealText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BJDealText[playerid], 1);

	BJBalanceText[playerid] = CreatePlayerTextDraw(playerid, 88.000000, 212.799987, "Balance: ~n~1.000.000.000$");
	PlayerTextDrawLetterSize(playerid, BJBalanceText[playerid], 0.186000, 1.039999);
	PlayerTextDrawAlignment(playerid, BJBalanceText[playerid], 2);
	PlayerTextDrawColor(playerid, BJBalanceText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJBalanceText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJBalanceText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BJBalanceText[playerid], 51);
	PlayerTextDrawFont(playerid, BJBalanceText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BJBalanceText[playerid], 1);

	BJDealButtonText[playerid] = CreatePlayerTextDraw(playerid, 89.599975, 245.653335, "Deal");
	PlayerTextDrawLetterSize(playerid, BJDealButtonText[playerid], 0.249999, 1.383466);
	PlayerTextDrawTextSize(playerid, BJDealButtonText[playerid], 10,25);
	PlayerTextDrawAlignment(playerid, BJDealButtonText[playerid], 2);
	PlayerTextDrawColor(playerid, BJDealButtonText[playerid], -65281);
	PlayerTextDrawUseBox(playerid, BJDealButtonText[playerid], true);
	PlayerTextDrawBoxColor(playerid, BJDealButtonText[playerid], 255);
	PlayerTextDrawSetShadow(playerid, BJDealButtonText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJDealButtonText[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, BJDealButtonText[playerid], 51);
	PlayerTextDrawFont(playerid, BJDealButtonText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BJDealButtonText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, BJDealButtonText[playerid], true);

	BJEnterBetText[playerid] = CreatePlayerTextDraw(playerid, 88.800018, 279.999816, "Enter bet amount");
	PlayerTextDrawLetterSize(playerid, BJEnterBetText[playerid], 0.179599, 1.278934);
	PlayerTextDrawTextSize(playerid, BJEnterBetText[playerid], 10,45);
	PlayerTextDrawAlignment(playerid, BJEnterBetText[playerid], 2);
	PlayerTextDrawColor(playerid, BJEnterBetText[playerid], -65281);
	PlayerTextDrawUseBox(playerid, BJEnterBetText[playerid], true);
	PlayerTextDrawBoxColor(playerid, BJEnterBetText[playerid], 255);
	PlayerTextDrawSetShadow(playerid, BJEnterBetText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJEnterBetText[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, BJEnterBetText[playerid], 51);
	PlayerTextDrawFont(playerid, BJEnterBetText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BJEnterBetText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, BJEnterBetText[playerid], true);

	BJClearBetText[playerid] = CreatePlayerTextDraw(playerid, 552.799743, 292.692993, "Clear Bet");
	PlayerTextDrawLetterSize(playerid, BJClearBetText[playerid], 0.153199, 1.062399);
	PlayerTextDrawTextSize(playerid, BJClearBetText[playerid], 10,60);
	PlayerTextDrawAlignment(playerid, BJClearBetText[playerid], 2);
	PlayerTextDrawColor(playerid, BJClearBetText[playerid], -65281);
	PlayerTextDrawUseBox(playerid, BJClearBetText[playerid], true);
	PlayerTextDrawBoxColor(playerid, BJClearBetText[playerid], 255);
	PlayerTextDrawSetShadow(playerid, BJClearBetText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJClearBetText[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, BJClearBetText[playerid], 51);
	PlayerTextDrawFont(playerid, BJClearBetText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BJClearBetText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, BJClearBetText[playerid], true);

	BJHitOptionText[playerid] = CreatePlayerTextDraw(playerid, 549.600219, 212.053268, "HIT");
	PlayerTextDrawLetterSize(playerid, BJHitOptionText[playerid], 0.526000, 0.890666);
	PlayerTextDrawTextSize(playerid, BJHitOptionText[playerid], 10,60);
	PlayerTextDrawAlignment(playerid, BJHitOptionText[playerid], 2);
	PlayerTextDrawColor(playerid, BJHitOptionText[playerid], -65281);
	PlayerTextDrawUseBox(playerid, BJHitOptionText[playerid], true);
	PlayerTextDrawBoxColor(playerid, BJHitOptionText[playerid], 255);
	PlayerTextDrawSetShadow(playerid, BJHitOptionText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJHitOptionText[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, BJHitOptionText[playerid], 51);
	PlayerTextDrawFont(playerid, BJHitOptionText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BJHitOptionText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, BJHitOptionText[playerid], true);

	BJStandOptionText[playerid] = CreatePlayerTextDraw(playerid, 550.400024, 229.226669, "STAND");
	PlayerTextDrawLetterSize(playerid, BJStandOptionText[playerid], 0.349999, 0.965333);
	PlayerTextDrawTextSize(playerid, BJStandOptionText[playerid], 10,60);
	PlayerTextDrawAlignment(playerid, BJStandOptionText[playerid], 2);
	PlayerTextDrawColor(playerid, BJStandOptionText[playerid], -65281);
	PlayerTextDrawUseBox(playerid, BJStandOptionText[playerid], true);
	PlayerTextDrawBoxColor(playerid, BJStandOptionText[playerid], 255);
	PlayerTextDrawSetShadow(playerid, BJStandOptionText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJStandOptionText[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, BJStandOptionText[playerid], 51);
	PlayerTextDrawFont(playerid, BJStandOptionText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BJStandOptionText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, BJStandOptionText[playerid], true);

	BJreset[playerid] = CreatePlayerTextDraw(playerid, 548.799987, 255.360000, "Reset");
	PlayerTextDrawLetterSize(playerid, BJreset[playerid], 0.230000, 1.338666);
	PlayerTextDrawTextSize(playerid, BJreset[playerid], 10, 25);
	PlayerTextDrawAlignment(playerid, BJreset[playerid], 2);
	PlayerTextDrawColor(playerid, BJreset[playerid], -65281);
	PlayerTextDrawUseBox(playerid, BJreset[playerid], true);
	PlayerTextDrawBoxColor(playerid, BJreset[playerid], 255);
	PlayerTextDrawSetShadow(playerid, BJreset[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJreset[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, BJreset[playerid], 51);
	PlayerTextDrawFont(playerid, BJreset[playerid], 1);
	PlayerTextDrawSetProportional(playerid, BJreset[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, BJreset[playerid], true);

	BJDealerScoreText[playerid] = CreatePlayerTextDraw(playerid, 527.333068, 177.540725, "DEALER: 21");
	PlayerTextDrawLetterSize(playerid, BJDealerScoreText[playerid], 0.199999, 1.384296);
	PlayerTextDrawAlignment(playerid, BJDealerScoreText[playerid], 1);
	PlayerTextDrawColor(playerid, BJDealerScoreText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJDealerScoreText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJDealerScoreText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BJDealerScoreText[playerid], 51);
	PlayerTextDrawFont(playerid, BJDealerScoreText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BJDealerScoreText[playerid], 1);

	BJPlayerScoreText[playerid] = CreatePlayerTextDraw(playerid, 527.666687, 192.059295, "PLAYER: 21");
	PlayerTextDrawLetterSize(playerid, BJPlayerScoreText[playerid], 0.203999, 1.309629);
	PlayerTextDrawAlignment(playerid, BJPlayerScoreText[playerid], 1);
	PlayerTextDrawColor(playerid, BJPlayerScoreText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJPlayerScoreText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJPlayerScoreText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BJPlayerScoreText[playerid], 51);
	PlayerTextDrawFont(playerid, BJPlayerScoreText[playerid], 2);
	PlayerTextDrawSetProportional(playerid, BJPlayerScoreText[playerid], 1);

	BJDealerCard1[playerid] = CreatePlayerTextDraw(playerid, 158.000000, 137.718521, "LD_CARD:cd9d");
	PlayerTextDrawLetterSize(playerid, BJDealerCard1[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, BJDealerCard1[playerid], 59.000000, 87.111114);
	PlayerTextDrawAlignment(playerid, BJDealerCard1[playerid], 1);
	PlayerTextDrawColor(playerid, BJDealerCard1[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJDealerCard1[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJDealerCard1[playerid], 0);
	PlayerTextDrawFont(playerid, BJDealerCard1[playerid], 4);

	BJDealerCard2[playerid] = CreatePlayerTextDraw(playerid, 226.333328, 138.133331, "LD_CARD:cd11c");
	PlayerTextDrawLetterSize(playerid, BJDealerCard2[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, BJDealerCard2[playerid], 60.666671, 86.696304);
	PlayerTextDrawAlignment(playerid, BJDealerCard2[playerid], 1);
	PlayerTextDrawColor(playerid, BJDealerCard2[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJDealerCard2[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJDealerCard2[playerid], 0);
	PlayerTextDrawFont(playerid, BJDealerCard2[playerid], 4);

	BJDealerCard3[playerid] = CreatePlayerTextDraw(playerid, 295.000000, 138.548156, "LD_CARD:cdback");
	PlayerTextDrawLetterSize(playerid, BJDealerCard3[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, BJDealerCard3[playerid], 60.666656, 86.696273);
	PlayerTextDrawAlignment(playerid, BJDealerCard3[playerid], 1);
	PlayerTextDrawColor(playerid, BJDealerCard3[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJDealerCard3[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJDealerCard3[playerid], 0);
	PlayerTextDrawFont(playerid, BJDealerCard3[playerid], 4);

	BJDealerCard4[playerid] = CreatePlayerTextDraw(playerid, 363.000000, 138.548156, "LD_CARD:cdback");
	PlayerTextDrawLetterSize(playerid, BJDealerCard4[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, BJDealerCard4[playerid], 57.333312, 87.111114);
	PlayerTextDrawAlignment(playerid, BJDealerCard4[playerid], 1);
	PlayerTextDrawColor(playerid, BJDealerCard4[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJDealerCard4[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJDealerCard4[playerid], 0);
	PlayerTextDrawFont(playerid, BJDealerCard4[playerid], 4);

	BJDealerCard5[playerid] = CreatePlayerTextDraw(playerid, 425.666656, 138.548156, "LD_CARD:cdback");
	PlayerTextDrawLetterSize(playerid, BJDealerCard5[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, BJDealerCard5[playerid], 57.000000, 87.111114);
	PlayerTextDrawAlignment(playerid, BJDealerCard5[playerid], 1);
	PlayerTextDrawColor(playerid, BJDealerCard5[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJDealerCard5[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJDealerCard5[playerid], 0);
	PlayerTextDrawFont(playerid, BJDealerCard5[playerid], 4);

	BJPlayerCard1[playerid] = CreatePlayerTextDraw(playerid, 157.666656, 265.066650, "LD_CARD:cd13s");
	PlayerTextDrawLetterSize(playerid, BJPlayerCard1[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, BJPlayerCard1[playerid], 59.666687, 84.622222);
	PlayerTextDrawAlignment(playerid, BJPlayerCard1[playerid], 1);
	PlayerTextDrawColor(playerid, BJPlayerCard1[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJPlayerCard1[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJPlayerCard1[playerid], 0);
	PlayerTextDrawFont(playerid, BJPlayerCard1[playerid], 4);

	BJPlayerCard2[playerid] = CreatePlayerTextDraw(playerid, 226.000000, 265.066650, "LD_CARD:cd2s");
	PlayerTextDrawLetterSize(playerid, BJPlayerCard2[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, BJPlayerCard2[playerid], 59.333312, 85.037048);
	PlayerTextDrawAlignment(playerid, BJPlayerCard2[playerid], 1);
	PlayerTextDrawColor(playerid, BJPlayerCard2[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJPlayerCard2[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJPlayerCard2[playerid], 0);
	PlayerTextDrawFont(playerid, BJPlayerCard2[playerid], 4);

	BJPlayerCard3[playerid] = CreatePlayerTextDraw(playerid, 293.333343, 265.481475, "LD_CARD:cd5c");
	PlayerTextDrawLetterSize(playerid, BJPlayerCard3[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, BJPlayerCard3[playerid], 61.666656, 84.622222);
	PlayerTextDrawAlignment(playerid, BJPlayerCard3[playerid], 1);
	PlayerTextDrawColor(playerid, BJPlayerCard3[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJPlayerCard3[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJPlayerCard3[playerid], 0);
	PlayerTextDrawFont(playerid, BJPlayerCard3[playerid], 4);

	BJPlayerCard4[playerid] = CreatePlayerTextDraw(playerid, 365.000000, 265.481475, "LD_CARD:cdback");
	PlayerTextDrawLetterSize(playerid, BJPlayerCard4[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, BJPlayerCard4[playerid], 58.333312, 84.207397);
	PlayerTextDrawAlignment(playerid, BJPlayerCard4[playerid], 1);
	PlayerTextDrawColor(playerid, BJPlayerCard4[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJPlayerCard4[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJPlayerCard4[playerid], 0);
	PlayerTextDrawFont(playerid, BJPlayerCard4[playerid], 4);

	BJPlayerCard5[playerid] = CreatePlayerTextDraw(playerid, 429.666687, 265.066650, "LD_CARD:cdback");
	PlayerTextDrawLetterSize(playerid, BJPlayerCard5[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, BJPlayerCard5[playerid], 55.333312, 84.622222);
	PlayerTextDrawAlignment(playerid, BJPlayerCard5[playerid], 1);
	PlayerTextDrawColor(playerid, BJPlayerCard5[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BJPlayerCard5[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BJPlayerCard5[playerid], 0);
	PlayerTextDrawFont(playerid, BJPlayerCard5[playerid], 4);
	return 1;
}

forward LoadSTextDraws();
public LoadSTextDraws()
{
	AdminHUD = TextDrawCreate(3.333359, 433.911621, "FPS: ~g~101~w~ / Ping: ~r~50~w~ / Tick: ~g~200~w~ / Reports: ~r~10~w~ / Cheaters: ~r~10~w~ / Anim: ~y~1000~w~");
	TextDrawLetterSize(AdminHUD, 0.172999, 1.023407);
	TextDrawAlignment(AdminHUD, 1);
	TextDrawColor(AdminHUD, -1);
	TextDrawSetShadow(AdminHUD, 0);
	TextDrawBackgroundColor(AdminHUD, 255);
	TextDrawFont(AdminHUD, 1);
	TextDrawSetProportional(AdminHUD, 1);

	CasinoDraw[0] = TextDrawCreate(501.200347, 235.206771, "usebox");
	TextDrawLetterSize(CasinoDraw[0], 0.000000, 15.419635);
	TextDrawTextSize(CasinoDraw[0], 158.000015, 0.000000);
	TextDrawAlignment(CasinoDraw[0], 1);
	TextDrawColor(CasinoDraw[0], 0);
	TextDrawUseBox(CasinoDraw[0], true);
	TextDrawBoxColor(CasinoDraw[0], 102);
	TextDrawSetShadow(CasinoDraw[0], 0);
	TextDrawSetOutline(CasinoDraw[0], 0);
	TextDrawBackgroundColor(CasinoDraw[0], 255);
	TextDrawFont(CasinoDraw[0], 0);

	CasinoDraw[1] = TextDrawCreate(212.399963, 179.206680, "usebox");
	TextDrawLetterSize(CasinoDraw[1], 0.000000, 5.493700);
	TextDrawTextSize(CasinoDraw[1], 157.999954, 0.000000);
	TextDrawAlignment(CasinoDraw[1], 1);
	TextDrawColor(CasinoDraw[1], 0);
	TextDrawUseBox(CasinoDraw[1], true);
	TextDrawBoxColor(CasinoDraw[1], -16776961);
	TextDrawSetShadow(CasinoDraw[1], 0);
	TextDrawSetOutline(CasinoDraw[1], 0);
	TextDrawFont(CasinoDraw[1], 0);

	CasinoDraw[2] = TextDrawCreate(212.399734, 179.206634, "usebox");
	TextDrawLetterSize(CasinoDraw[2], 0.000000, 5.679996);
	TextDrawTextSize(CasinoDraw[2], 252.399948, 0.000000);
	TextDrawAlignment(CasinoDraw[2], 1);
	TextDrawColor(CasinoDraw[2], 0);
	TextDrawUseBox(CasinoDraw[2], true);
	TextDrawBoxColor(CasinoDraw[2], 255);
	TextDrawSetShadow(CasinoDraw[2], 0);
	TextDrawSetOutline(CasinoDraw[2], 0);
	TextDrawBackgroundColor(CasinoDraw[2], 255);
	TextDrawFont(CasinoDraw[2], 0);

	CasinoDraw[3] = TextDrawCreate(306.800109, 179.206665, "usebox");
	TextDrawLetterSize(CasinoDraw[3], 0.000000, 5.508515);
	TextDrawTextSize(CasinoDraw[3], 252.399917, 0.000000);
	TextDrawAlignment(CasinoDraw[3], 1);
	TextDrawColor(CasinoDraw[3], 0);
	TextDrawUseBox(CasinoDraw[3], true);
	TextDrawBoxColor(CasinoDraw[3], -16776961);
	TextDrawSetShadow(CasinoDraw[3], 0);
	TextDrawSetOutline(CasinoDraw[3], 0);
	TextDrawFont(CasinoDraw[3], 0);

	CasinoDraw[4] = TextDrawCreate(354.000091, 179.206710, "usebox");
	TextDrawLetterSize(CasinoDraw[4], 0.000000, 5.588519);
	TextDrawTextSize(CasinoDraw[4], 300.400054, 0.000000);
	TextDrawAlignment(CasinoDraw[4], 1);
	TextDrawColor(CasinoDraw[4], 0);
	TextDrawUseBox(CasinoDraw[4], true);
	TextDrawBoxColor(CasinoDraw[4], 255);
	TextDrawSetShadow(CasinoDraw[4], 0);
	TextDrawSetOutline(CasinoDraw[4], 0);
	TextDrawFont(CasinoDraw[4], 0);

	CasinoDraw[5] = TextDrawCreate(405.200225, 179.206710, "usebox");
	TextDrawLetterSize(CasinoDraw[5], 0.000000, 5.582592);
	TextDrawTextSize(CasinoDraw[5], 347.600219, 0.000000);
	TextDrawAlignment(CasinoDraw[5], 1);
	TextDrawColor(CasinoDraw[5], 0);
	TextDrawUseBox(CasinoDraw[5], true);
	TextDrawBoxColor(CasinoDraw[5], -16776961);
	TextDrawSetShadow(CasinoDraw[5], 0);
	TextDrawSetOutline(CasinoDraw[5], 0);
	TextDrawFont(CasinoDraw[5], 0);

	CasinoDraw[6] = TextDrawCreate(453.200012, 179.206665, "usebox");
	TextDrawLetterSize(CasinoDraw[6], 0.000000, 5.588519);
	TextDrawTextSize(CasinoDraw[6], 398.799987, 0.000000);
	TextDrawAlignment(CasinoDraw[6], 1);
	TextDrawColor(CasinoDraw[6], 0);
	TextDrawUseBox(CasinoDraw[6], true);
	TextDrawBoxColor(CasinoDraw[6], 255);
	TextDrawSetShadow(CasinoDraw[6], 0);
	TextDrawSetOutline(CasinoDraw[6], 0);
	TextDrawFont(CasinoDraw[6], 0);

	CasinoDraw[7] = TextDrawCreate(501.199890, 179.206604, "usebox");
	TextDrawLetterSize(CasinoDraw[7], 0.000000, 5.502587);
	TextDrawTextSize(CasinoDraw[7], 446.800018, 0.000000);
	TextDrawAlignment(CasinoDraw[7], 1);
	TextDrawColor(CasinoDraw[7], 0);
	TextDrawUseBox(CasinoDraw[7], true);
	TextDrawBoxColor(CasinoDraw[7], -16776961);
	TextDrawSetShadow(CasinoDraw[7], 0);
	TextDrawSetOutline(CasinoDraw[7], 0);
	TextDrawFont(CasinoDraw[7], 0);

	CasinoDraw[8] = TextDrawCreate(333.999969, 179.206680, "usebox");
	TextDrawLetterSize(CasinoDraw[8], 0.000000, 5.576664);
	TextDrawTextSize(CasinoDraw[8], 319.599914, 0.000000);
	TextDrawAlignment(CasinoDraw[8], 1);
	TextDrawColor(CasinoDraw[8], 0);
	TextDrawUseBox(CasinoDraw[8], true);
	TextDrawBoxColor(CasinoDraw[8], -1);
	TextDrawSetShadow(CasinoDraw[8], 0);
	TextDrawSetOutline(CasinoDraw[8], 0);
	TextDrawFont(CasinoDraw[8], 0);

	CasinoDraw[12] = TextDrawCreate(226.400070, 265.066619, "win 2x");
	TextDrawLetterSize(CasinoDraw[12], 0.449999, 1.600000);
	TextDrawTextSize(CasinoDraw[12], 10, 60);
	TextDrawAlignment(CasinoDraw[12], 2);
	TextDrawColor(CasinoDraw[12], -1);
	TextDrawUseBox(CasinoDraw[12], true);
	TextDrawBoxColor(CasinoDraw[12], -16776961);
	TextDrawSetShadow(CasinoDraw[12], 0);
	TextDrawSetOutline(CasinoDraw[12], 0);
	TextDrawBackgroundColor(CasinoDraw[12], -16776961);
	TextDrawFont(CasinoDraw[12], 1);
	TextDrawSetProportional(CasinoDraw[12], 1);
	TextDrawSetSelectable(CasinoDraw[12], true);

	CasinoDraw[13] = TextDrawCreate(333.599975, 265.066650, "win 14x");
	TextDrawLetterSize(CasinoDraw[13], 0.449999, 1.600000);
	TextDrawTextSize(CasinoDraw[13], 10, 60);
	TextDrawAlignment(CasinoDraw[13], 2);
	TextDrawColor(CasinoDraw[13], -1);
	TextDrawUseBox(CasinoDraw[13], true);
	TextDrawBoxColor(CasinoDraw[13], 16711935);
	TextDrawSetShadow(CasinoDraw[13], 0);
	TextDrawSetOutline(CasinoDraw[13], 0);
	TextDrawBackgroundColor(CasinoDraw[13], 16711935);
	TextDrawFont(CasinoDraw[13], 1);
	TextDrawSetProportional(CasinoDraw[13], 1);
	TextDrawSetSelectable(CasinoDraw[13], true);

	CasinoDraw[14] = TextDrawCreate(431.999938, 265.813201, "win 2x");
	TextDrawLetterSize(CasinoDraw[14], 0.449999, 1.600000);
	TextDrawTextSize(CasinoDraw[14], 10, 60);
	TextDrawAlignment(CasinoDraw[14], 2);
	TextDrawColor(CasinoDraw[14], -1);
	TextDrawUseBox(CasinoDraw[14], true);
	TextDrawBoxColor(CasinoDraw[14], 255);
	TextDrawSetShadow(CasinoDraw[14], 0);
	TextDrawSetOutline(CasinoDraw[14], 0);
	TextDrawBackgroundColor(CasinoDraw[14], 255);
	TextDrawFont(CasinoDraw[14], 1);
	TextDrawSetProportional(CasinoDraw[14], 1);
	TextDrawSetSelectable(CasinoDraw[14], true);

	CasinoDraw[16] = TextDrawCreate(223.999969, 286.719909, "0 Bets~n~0$");
	TextDrawLetterSize(CasinoDraw[16], 0.225999, 1.375998);
	TextDrawAlignment(CasinoDraw[16], 2);
	TextDrawColor(CasinoDraw[16], -1);
	TextDrawSetShadow(CasinoDraw[16], 0);
	TextDrawSetOutline(CasinoDraw[16], 1);
	TextDrawBackgroundColor(CasinoDraw[16], 51);
	TextDrawFont(CasinoDraw[16], 1);
	TextDrawSetProportional(CasinoDraw[16], 1);

	CasinoDraw[17] = TextDrawCreate(332.000000, 287.466674, "0 Bets~n~0$");
	TextDrawLetterSize(CasinoDraw[17], 0.229999, 1.338665);
	TextDrawAlignment(CasinoDraw[17], 2);
	TextDrawColor(CasinoDraw[17], -1);
	TextDrawSetShadow(CasinoDraw[17], 0);
	TextDrawSetOutline(CasinoDraw[17], 1);
	TextDrawBackgroundColor(CasinoDraw[17], 51);
	TextDrawFont(CasinoDraw[17], 1);
	TextDrawSetProportional(CasinoDraw[17], 1);

	CasinoDraw[18] = TextDrawCreate(438.399993, 288.959960, "0 Bets~n~0$");
	TextDrawLetterSize(CasinoDraw[18], 0.241999, 1.226665);
	TextDrawAlignment(CasinoDraw[18], 2);
	TextDrawColor(CasinoDraw[18], -1);
	TextDrawSetShadow(CasinoDraw[18], 0);
	TextDrawSetOutline(CasinoDraw[18], 1);
	TextDrawBackgroundColor(CasinoDraw[18], 51);
	TextDrawFont(CasinoDraw[18], 1);
	TextDrawSetProportional(CasinoDraw[18], 1);

	CasinoDraw[19] = TextDrawCreate(332.800415, 358.400085, "WAITING FOR BETS..");
	TextDrawLetterSize(CasinoDraw[19], 0.449999, 1.600000);
	TextDrawAlignment(CasinoDraw[19], 2);
	TextDrawColor(CasinoDraw[19], -1);
	TextDrawSetShadow(CasinoDraw[19], 0);
	TextDrawSetOutline(CasinoDraw[19], 1);
	TextDrawBackgroundColor(CasinoDraw[19], 51);
	TextDrawFont(CasinoDraw[19], 1);
	TextDrawSetProportional(CasinoDraw[19], 1);
	return 1;
}

forward ClearCrime(playerid);
public ClearCrime(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new string[50];
		format(string, sizeof(string), "********");
		strmid(PlayerInfo[playerid][pVictim], string, 0, strlen(string), 255);
		strmid(PlayerInfo[playerid][pAccused], string, 0, strlen(string), 255);
		format(string, sizeof(string), "Fara Crima");
		strmid(PlayerInfo[playerid][pCrime1], string, 0, strlen(string), 255);
		strmid(PlayerInfo[playerid][pCrime2], string, 0, strlen(string), 255);
		strmid(PlayerInfo[playerid][pCrime3], string, 0, strlen(string), 255);
		Update(playerid,pCrime1x);
		Update(playerid,pCrime2x);
		Update(playerid,pCrime3x);
		Update(playerid,pAccusedx);
		Update(playerid,pVictimx);
	}
	return 1;
}

forward GetWeekDay();
public GetWeekDay()
{
	new year,month,day;
    getdate(year, month, day);

	new
		weekday,
		j,
		e;

	if(month <= 2)
	{
		month += 12;
		--year;
	}

	j = year % 100;
	e = year / 100;

	switch ((day + (month+1)*26/10 + j + j/4 + e/4 - 2*e) % 7)
	{
		case 0: weekday = 1;
		case 1: weekday = 2;
		case 2: weekday = 3;
		case 3: weekday = 4;
		case 4: weekday = 5;
		case 5: weekday = 6;
		case 6: weekday = 7;
	}
	return weekday;
}

forward SendLeaderMessage(leader, color, string[]);
public SendLeaderMessage(leader, color, string[])
{
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pLeader] == leader  && gPlayerLogged[i] != 0)
	    {
			SendClientMessage(i, color, string);
		}
	}
	return 1;
}

forward SendToClan(groupid, colour, string[]);
public SendToClan(groupid, colour, string[])
{
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pClan] == groupid && gPlayerLogged[i] != 0)
		{
			SendClientMessage(i, colour, string);
		}
	}
	return 1;
}

forward RACtime(playerid);
public RACtime(playerid)
{
	for(new car = 1; car <= MAX_VEHICLES; car++)
	{
		new nu = 0;
		if(!IsVehicleOccupied(car))
		{
			foreach(new i : Player)
			{
				if(viddd[i] == car) nu = 1;
				for(new v; v < MAX_PERSONAL_VEHICLES; v++)
				{
					if(PlayerInfo[i][pCarID][v] == car) nu = 1;
				}
			}
			if(nu == 0) SetVehicleToRespawn(car);
		}

	}
	return 1;
}

stock GetDistancePlayerVeh(playerid, veh) {

	new
	    Float:Floats[7];

	GetPlayerPos(playerid, Floats[0], Floats[1], Floats[2]);
	GetVehiclePos(veh, Floats[3], Floats[4], Floats[5]);
	Floats[6] = floatsqroot((Floats[3]-Floats[0])*(Floats[3]-Floats[0])+(Floats[4]-Floats[1])*(Floats[4]-Floats[1])+(Floats[5]-Floats[2])*(Floats[5]-Floats[2]));

	return floatround(Floats[6]);
}

stock doesVehicleExist(vehicleid) {

    if(GetVehicleModel(vehicleid) >= 400) {
		return 1;
	}
	return 0;
}

stock GetClosestVehicle(playerid, exception = INVALID_VEHICLE_ID) {
    new
		Float:Distance,
		target = -1;

    for(new v; v < MAX_VEHICLES; v++) if(doesVehicleExist(v)) {
        if(v != exception && (target < 0 || Distance > GetDistancePlayerVeh(playerid, v))) {
            target = v;
            Distance = GetDistancePlayerVeh(playerid, v);
        }
    }
    return target;
}

// ONPLAYERDISCONNECT
public OnPlayerDisconnect(playerid, reason)
{
	if(somated[playerid] != -1)
	{
		if(PlayerInfo[playerid][pWantedLevel] > 0 && wantedvar[playerid] == 0)
		{
			new string[256];
			foreach(new i : Player)
			{
				if(IsPlayerConnected(i))
				{
					new wakaname2[MAX_PLAYER_NAME], price = PlayerInfo[playerid][pWantedLevel] * 100, streap[MAX_PLAYER_NAME];
					if(IsACop(i) && CrimInRange(50.0, playerid,i) && OnDuty[i] == 1)
					{
						GetPlayerName(playerid, streap, sizeof(streap));
						GetPlayerName(i, wakaname2, sizeof(wakaname2));
						GameTextForPlayer(i, "Running Suspect bonus!", 5000, 1);
						format(string, sizeof(string), "You recieved $%d bonus for catch the suspect %s.", price, streap);
						SendClientMessage(i, COLOR_DBLUE, string);
						new var[356], wtime;
						if(SvarInfo[1][svValue] == 0) wtime = 300*PlayerInfo[playerid][pWantedLevel];
						else wtime = 150*PlayerInfo[playerid][pWantedLevel];
						mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `JailTime`='%d',`Jailed`= '1',`WantedLevel`='0' WHERE `name`='%s'",wtime,PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,var,"","");
						format(string, sizeof(string), "********");
						strmid(PlayerInfo[playerid][pVictim], string, 0, strlen(string), 255);
						strmid(PlayerInfo[playerid][pAccused], string, 0, strlen(string), 255);
						format(string, sizeof(string), "Fara Crima");
						if(SvarInfo[1][svValue] == 0) PlayerInfo[playerid][pJailTime]=300*PlayerInfo[playerid][pWantedLevel];
						else PlayerInfo[playerid][pJailTime]=150*PlayerInfo[playerid][pWantedLevel];
						PlayerInfo[playerid][pJailed] = 1;
						PlayerInfo[playerid][pWantedLevel] = 0;
						PlayerInfo[playerid][pWantedDeaths] += 1;
						WantedPoints[playerid] = 0;
						ClearCrime(playerid);
						strmid(PlayerInfo[playerid][pCrime1], string, 0, strlen(string), 255);
						strmid(PlayerInfo[playerid][pCrime2], string, 0, strlen(string), 255);
						strmid(PlayerInfo[playerid][pCrime3], string, 0, strlen(string), 255);
						Update(playerid,pCrime1x);
						Update(playerid,pCrime2x);
						Update(playerid,pCrime3x);
						Update(playerid,pAccusedx);
						Update(playerid,pVictimx);
						GivePlayerCash(i, price);
						wantedvar[playerid] = 1;
						format(string, sizeof(string), "Dispatch: %s has been killed by No One and will be in jail for %d seconds, over.",streap,PlayerInfo[playerid][pJailTime]);
						SendTeamMessage(8, COLOR_LIGHTBLUE, string);
						SendTeamMessage(3, COLOR_LIGHTBLUE, string);
						SendTeamMessage(2, COLOR_LIGHTBLUE, string);
						SendTeamMessage(1, COLOR_LIGHTBLUE, string);
						PlayerInfo[i][Raport3]++;
						Update(i, Raport3x);
					}
				}
			}
			SendTeamMessage(1, COLOR_LIGHTBLUE, string);
			SendTeamMessage(2, COLOR_LIGHTBLUE, string);
			SendTeamMessage(3, COLOR_LIGHTBLUE, string);
			SendTeamMessage(8, COLOR_LIGHTBLUE, string);
		}
		else if(PlayerInfo[playerid][pWantedLevel] < 1)
		{
			new string[256],var100[256],sendername[30];
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "Unknown");
			strmid(PlayerInfo[playerid][pVictim], string, 0, strlen(string), 255);
			Update(playerid,pVictimx);
			if(strcmp(PlayerInfo[playerid][pCrime1], "Fara Crima", true) == 0)
			{
		    	format(string,sizeof(string),"disconnect during a chase");
				strmid(PlayerInfo[playerid][pCrime1], string, 0, strlen(string), 255);
				Update(playerid,pCrime1x);
			}
			else if(strcmp(PlayerInfo[playerid][pCrime2], "Fara Crima", true) == 0)
			{
		    	format(string,sizeof(string),"disconnect during a chase");
				strmid(PlayerInfo[playerid][pCrime2], string, 0, strlen(string), 255);
				Update(playerid,pCrime2x);
			}
			else if(strcmp(PlayerInfo[playerid][pCrime3], "Fara Crima", true) == 0)
			{
		    	format(string,sizeof(string),"disconnect during a chase");
				strmid(PlayerInfo[playerid][pCrime3], string, 0, strlen(string), 255);
				Update(playerid,pCrime3x);
			}
			else if(strcmp(PlayerInfo[playerid][pCrime1],  "Fara Crima", true) == 0 && strcmp(PlayerInfo[playerid][pCrime2], "Fara Crima", true) == 0 && strcmp(PlayerInfo[playerid][pCrime3], "Fara Crima", true) == 0) { }
			else
			{
				format(string,sizeof(string),"disconnect during a chase");
				strmid(PlayerInfo[playerid][pCrime1], string, 0, strlen(string), 255);
				Update(playerid,pCrime1x);
				format(string, sizeof(string), "Fara Crima");
				strmid(PlayerInfo[playerid][pCrime2], string, 0, strlen(string), 255);
				strmid(PlayerInfo[playerid][pCrime3], string, 0, strlen(string), 255);
				Update(playerid,pCrime2x);
				Update(playerid,pCrime3x);
			}
			format(string, sizeof(string), "Dispatch: %s is now wanted for disconnecting during a chase.",sendername);
			SendTeamMessage(1, COLOR_DBLUE, string);
			SendTeamMessage(2, COLOR_DBLUE, string);
			SendTeamMessage(3, COLOR_DBLUE, string);
			SendTeamMessage(8, COLOR_DBLUE, string);
			PlayerInfo[playerid][pWantedLevel] = (2+PlayerInfo[playerid][pWantedLevel]);
			Update(playerid,pWantedLevelx);
			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','Nivelul tau de wanted a fost modificat (+2) pentru ca te-ai deconectat in timp ce erai urmarit de politie.')",PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,var100,"","");
		}
	}
	if(CaseOpening[playerid] != 0)
	{
		KillTimer(opencasetimer[playerid]);
		CaseOpening[playerid] = 0;
	}
	if(PlayerInfo[playerid][pPetStatus] == 1 && PlayerInfo[playerid][pPet] == 1) RemovePet(playerid);
	if(PlayerInfo[playerid][pJobVehicle] != 0) CancelJob(playerid);
	if(BeeCar[playerid] != 0) BeeCancel(playerid);
	if(InMinerJob[playerid] != 0) MinerCancel(playerid);
	if(InStrawberryJob[playerid] != 0) StrawberryCancel(playerid);
	if(PlayerInfo[playerid][pBeePlaced] != 0) DestroyBeeHiveObjects(playerid);
	// PAYDAY SAVE
    if(gPlayerLogged[playerid] != 0)
	{
		Update(playerid, pPayDayx);
		Update(playerid, pFpunishx);
		Update(playerid, pConnectTimex);
		Update(playerid, pBank);
		Update(playerid, pCashx);
		Update(playerid, pExpx);
		Update(playerid, pJailedx);
		Update(playerid, pJailTimex);
		Update(playerid, pLevelx);
		Update(playerid, pOnlineTimeTodayx);
	}
	for(new obj = 0; obj < questobjectss; obj++)
	{
		DestroyDynamicMapIcon(PlayerInfo[playerid][pMapIcon][obj]);
		DestroyDynamicPickup(PlayerInfo[playerid][pObject][obj]);
		PlayerInfo[playerid][pObject][obj] = 0;
		PlayerInfo[playerid][pMapIcon][obj] = 0;
	}
	TextDrawHideForPlayer(playerid, AdminHUD);
	pnsmoney[playerid] = 0;
	RepairTime[playerid] = 0;
	foreach(new i : Player)
	{
		if(IsACop(playerid))
		{
			if(caser[playerid] == i)
			{
				cased[i] --;
				caser[playerid] = 1001;
			}
		}
	}
	cased[playerid] = 0;
	caser[playerid] = 1001;

    if(PlayerInfo[playerid][pMember] > 0)
	{
	    new namex[25],disc[84];
	    GetPlayerName(playerid,namex,sizeof(namex));
		switch(reason)
    	{
        	case 0: format(disc,sizeof(disc),"%s from your group has disconnected (crash).",namex);
        	case 1: format(disc,sizeof(disc),"%s from your group has disconnected (quit).",namex);
			case 2: format(disc,sizeof(disc),"%s from your group has disconnected (banned/kicked).",namex);
    	}
    	SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, disc);
	}
	if(PlayerInfo[playerid][pClan] > 0)
	{
	    new namex[25],disc[84];
	    GetPlayerName(playerid,namex,sizeof(namex));
		switch(reason)
    	{
        	case 0: format(disc,sizeof(disc),"%s from your clan has disconnected (crash).",namex);
        	case 1: format(disc,sizeof(disc),"%s from your clan has disconnected (quit).",namex);
			case 2: format(disc,sizeof(disc),"%s from your clan has disconnected (banned/kicked).",namex);
    	}
    	SendToClan(PlayerInfo[playerid][pClan], COLOR_GENANNOUNCE, disc);
	}
	if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pHelper] > 0)
	{
		new string2[128],namee[30];
		GetPlayerName(playerid, namee, sizeof(namee));
		switch(reason)
		{
			case 0: format(string2, sizeof(string2), "Quitbot: %s left the game (crash).",namee);
			case 1: format(string2, sizeof(string2), "Quitbot: %s left the game (quit).",namee);
			case 2: format(string2, sizeof(string2), "Quitbot: %s left the game (banned/kicked).",namee);
		}
		ABroadCast(COLOR_ADMCHAT, string2,1);
		HLChat(COLOR_ADMCHAT,string2);
	}
	if(CarCollisions[playerid] == 1)
	{
		DisableRemoteVehicleCollisions(playerid, 0);
		CarCollisions[playerid] = 0;
	}
	if(PlayerInfo[playerid][pPaintBallG] > 0)
 	{
  		new string [128],sendername[30];
    	GetPlayerName(playerid, sendername, sizeof(sendername));
		foreach(new i : Player)
		{
  			if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
	    	{
      			format(string,sizeof(string),"(Paint){FFFFFF} %s has left the paintball arena.", sendername);
	        	SendClientMessage(i, COLOR_ARENA, string);
			}
		}
		curatj[playerid] = 0;
		for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
		PlayerTextDrawHide(playerid, PaintBallText[playerid]);
		SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
		paintp[PlayerInfo[playerid][pPaintBallG]]--;
  		PlayerInfo[playerid][pPaintBallG] = 0;
    	PlayerInfo[playerid][pPaintBallKills] = 0;
    	PlayerInfo[playerid][pPaintBallVoted] = 0;
    	PlayerInfo[playerid][pPaintBallVoted2] = 0;
     	ResetPlayerWeaponsEx(playerid);
	    ResetPlayerWeapons(playerid);
	    SetPlayerArmourEx(playerid, 0);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid,0);
	    SetPlayerToTeamColor(playerid);
	    SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
	    SetPlayerPos(playerid, 1154.7026,-1440.1458,15.7969);
	}
	if(PlayerInfo[playerid][pRaceG] == 0)
 	{
  		new string [128],sendername[30];
    	GetPlayerName(playerid, sendername, sizeof(sendername));
		foreach(new i : Player)
		{
  			if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
	    	{
      			format(string,sizeof(string),"(Race){FFFFFF} %s has left the race arena.", sendername);
	        	SendClientMessage(i, COLOR_ARENA, string);
			}
		}
		SetPlayerHealthEx(playerid, 100.0);
		curatj[playerid] = 0;
		for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
		PlayerTextDrawHide(playerid, PaintBallText[playerid]);
		racep--;
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerPos(playerid, 1102.4310,-1458.1349,15.7969);
		RaceCP[playerid] = 0;
		DisablePlayerRaceCheckpoint(playerid);
		StopAudioStreamForPlayer(playerid);
		DisableRemoteVehicleCollisions(playerid, 0);
		if(racet > -1)
		{
			for(new cs; cs < 20; cs++)
			{
				if(rcarid[cs] == GetPlayerVehicleID(playerid))
				{
					DestroyVehicle(rcarid[cs]);
					rcarid[cs] = 0;
				}
			}
			foreach(new x : Player)
			{
				if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && x != playerid)
				{
					if(RacePos[x] > RacePos[playerid]) RacePos[x]--;
				}
			}
		}
		PlayerInfo[playerid][pRaceG] = -1;
		PlayerTextDrawHide(playerid, RaceTD[playerid][0]);
		PlayerTextDrawHide(playerid, RaceTD[playerid][1]);
		PlayerTextDrawHide(playerid, RaceTD[playerid][2]);
		PlayerTextDrawHide(playerid, RaceTD[playerid][3]);
		PlayerTextDrawHide(playerid, RaceTD[playerid][4]);
	}
	if(TaxiFare[playerid] > 0 && PlayerInfo[playerid][pMember] == 13)
	{
		TaxiFare[playerid] = 0;
		TaxiMoneyEarned[playerid] = 0;
		PlayerTextDrawHide(playerid, RentCarText[playerid]);
		foreach(new x : Player)
		{
			if(TaxiDriver[x] == playerid)
			{
				TaxiDriver[x] = -1;
				TaxiTimer[x] = 0;
				TaxiMoneySpent[x] = 0;
				PlayerTextDrawHide(x, RentCarText[x]);
			}
		}
	}
	if(PlayerInfo[playerid][pFlyMode] > 0)
	{
	    SetPlayerHealth(playerid, 100);
		SetPlayerArmour(playerid, 0);
		//StopFly(playerid);
		PlayerInfo[playerid][pFlyMode] = 0;
	}

	if(TakingLesson[playerid] == 1 || examcar[playerid] != -1)
	{
		PlayerTextDrawHide(playerid, DMVexam[playerid]);
		PlayerTextDrawHide(playerid, DMVcheck[playerid]);
		DestroyVehicle(examcar[playerid]);
		DisableRemoteVehicleCollisions(playerid, 0);
		examcar[playerid] = -1;
        TakingLesson[playerid] = 0;
	    DisablePlayerRaceCheckpoint(playerid);
	}

	if(AdvPlayer[playerid] != 0)
	{
		KillTimer(AdvTimer[playerid]);
		AdvPlayer[playerid] = 0;
		format(AdvMSG[playerid], 256, "");
	}

	new qqerry[128];
	mysql_format(SQL,qqerry, sizeof(qqerry), "UPDATE `users` SET `Status` = '0' WHERE `id` = '%d'", PlayerInfo[playerid][pSQLID]);
    mysql_tquery(SQL,qqerry,"","");
	mysql_format(SQL,qqerry, sizeof(qqerry), "UPDATE `friends` SET `Status` = '0' WHERE `FriendID` = '%d'", PlayerInfo[playerid][pSQLID]);
    mysql_tquery(SQL,qqerry,"","");

	if(viddd[playerid] != 0)
	{
	    DestroyVehicle(viddd[playerid]);
	    viddd[playerid] = 0;
	}

    PlayerTextDrawHide(playerid, TimeLeftWar1[playerid]);
    //KillTimer(timerfree1[playerid]);
	PlayerTextDrawHide(playerid, UndercoverText[playerid]);
	PlayerTextDrawHide(playerid, HUD[1][playerid]);
	PlayerTextDrawHide(playerid, HUD[2][playerid]);
	PlayerTextDrawHide(playerid, HUD[3][playerid]);
	PlayerTextDrawHide(playerid, Reportss[playerid]);
	PlayerTextDrawHide(playerid, RentCarText[playerid]);
	PlayerTextDrawHide(playerid, WantedText[playerid]);
	PlayerTextDrawHide(playerid, RaceTD[playerid][0]);
	PlayerTextDrawHide(playerid, RaceTD[playerid][1]);
	PlayerTextDrawHide(playerid, RaceTD[playerid][2]);
	PlayerTextDrawHide(playerid, RaceTD[playerid][3]);
	PlayerTextDrawHide(playerid, RaceTD[playerid][4]);
	DespawnCar(playerid);
    if(HireCar[playerid] > 0)
    {
		HireCar[playerid] = -1;
	}
	if(RentCar[playerid] >= 0)
	{
		RentCar[playerid] = -1;
	}
	if(TaxiAccepted[playerid] != -1 && PlayerInfo[playerid][pMember] == 13)
	{
		new string[128];
		format(string, sizeof(string), "Taxi driver %s left the game.", PlayerInfo[playerid][pNormalName]);
		SendClientMessage(TaxiAccepted[playerid], COLOR_YELLOW, string);
		TaxiCall[TaxiAccepted[playerid]] = 0;
		TaxiAccepted[playerid] = -1;
		targetfind[playerid] = -1;
		UsedFind[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
		PlayerTextDrawHide(playerid, FindTXD[playerid][0]);
		PlayerTextDrawHide(playerid, FindTXD[playerid][1]);
	}
	if(MedicAccepted[playerid] != -1 && PlayerInfo[playerid][pMember] == 14)
	{
		new string[128];
		format(string, sizeof(string), "Medic %s left the game.", PlayerInfo[playerid][pNormalName]);
		SendClientMessage(MedicAccepted[playerid], COLOR_YELLOW, string);
		MedicCall[MedicAccepted[playerid]] = 0;
		MedicAccepted[playerid] = -1;
		targetfind[playerid] = -1;
		UsedFind[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
		PlayerTextDrawHide(playerid, FindTXD[playerid][0]);
		PlayerTextDrawHide(playerid, FindTXD[playerid][1]);
	}

	// HITMAN
	if(GotHit[playerid] > 0)
	{
	    if(GetChased[playerid] < 999)
	    {
	        if(IsPlayerConnected(GetChased[playerid]))
	        {
	        	SendClientMessage(GetChased[playerid], COLOR_YELLOW, "Your hit has left the server.");
	            GoChase[GetChased[playerid]] = 999;
		        togfind[GetChased[playerid]] = 0;
		        PlayerInfo[GetChased[playerid]][pHitT] = 0;
				new string[124];
				mysql_format(SQL, string, sizeof(string), "UPDATE users SET `HitT`='%d' WHERE `name`='%s'", PlayerInfo[GetChased[playerid]][pHitT], PlayerInfo[GetChased[playerid]][pNormalName]);
		        mysql_tquery(SQL,string,"","");
			}
	    }
	}
	if(GoChase[playerid] != 999)
	{
		GotHit[GoChase[playerid]] = 0;
		GetChased[GoChase[playerid]] = 999;
		GoChase[playerid] = 999;
	}
	GetChased[playerid] = 999;					 GotHit[playerid] = 0;

	// TIMER MONEY
	KillTimer(TimerAtuPlayer[playerid]);

	// LAST LOGIN
	new y,m,d,h,mi,sec;
	getdate(y,m,d);
	gettime(h,mi,sec);
	h+=SERVER_HOUR_FIX;
	if(h == 24) h = 0;
	new str[184];
	mysql_format(SQL,str,sizeof(str), "UPDATE users SET `lastOn`='%d-%02d-%02d %02d:%02d:%02d' WHERE `name`='%s'",y,m,d,h,mi,sec,PlayerInfo[playerid][pNormalName]);
	mysql_tquery(SQL,str,"","");

	#if ACTIVE_QUEST == 1
		for(new xx = 0; xx < questobjectss; xx++)
		{
			if(PlayerInfo[playerid][pQuestObjects][xx] != 0)
			{
				DestroyDynamicPickup(PlayerInfo[playerid][pObject][xx]);
				PlayerInfo[playerid][pObject][xx] = 0;
			}
		}
	#endif

	// MESAJ DECONECTARE
 	new wakaname2[25],
		string2[64];
	GetPlayerName(playerid, wakaname2, sizeof(wakaname2));
	switch(reason)
	{
		case 0: format(string2,sizeof(string2),"%s has timed out from the server (crash).",wakaname2);
		case 1: format(string2,sizeof(string2),"%s has left the server.",wakaname2);
		case 2: format(string2,sizeof(string2),"%s has been kicked or banned from the server.",wakaname2);
	}
	ProxDetector(20.0, playerid, string2, COLOR_GENANNOUNCE,COLOR_GENANNOUNCE,COLOR_GENANNOUNCE,COLOR_GENANNOUNCE,COLOR_GENANNOUNCE);
	foreach(new i : Player)
	{
		if(IsPlayerConnected(Mobile[playerid]))
		{
			if(Mobile[playerid] != -1)
			{
				CellTime[Mobile[playerid]] = 0;
				CellTime[playerid] = 0;
				Mobile[Mobile[playerid]] = -1;
				SetPlayerSpecialAction(Mobile[playerid],SPECIAL_ACTION_STOPUSECELLPHONE);
				Mobile[playerid] = -1;
				PlayerInfo[playerid][pSpeaker] = 0;
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			}
		}
		if(targetfind[i] == playerid)
		{
		    targetfind[i] = -1;
		    UsedFind[i] = 0;
		    DisablePlayerCheckpoint(i);
	        GameTextForPlayer(i, "~r~Your target left the game.", 5000, 1);
			if(IsACop(i))
			{
				if(caser[i] == playerid)
				{
					caser[i] = 0;
				}
			}
			PlayerTextDrawHide(i, FindTXD[i][0]);
			PlayerTextDrawHide(i, FindTXD[i][1]);
		}
		if(PlayerInfo[i][pPhoneBlocked][playerid] == 1) PlayerInfo[i][pPhoneBlocked][playerid] = 0;
	}
	for(new x; x < MAX_PLAYERS; x++)
	{
		PlayerInfo[playerid][pPhoneBlocked][x] = 0;
	}
	tazer[playerid] = 0;						curatj[playerid] = 0;
	playerdeath[playerid] = 0;
	bizid[playerid] = 0; 						bizprice[playerid] = 0;
	bizoffer[playerid] = 999;					PlayerInfo[playerid][pSleeping] = 0;
	adminacceptedhelp[playerid] = -1;			DeletePVar(playerid, "Help");
	SellgunOffer[playerid] = -1;				SellgunPrice[playerid] = 0;
	SellgunMats[playerid] = 0;					SellgunAmmo[playerid] = 0;
	SellgunID[playerid] = 0;					pizzaj[playerid] = 0;
	requestingevent[playerid] = 0;              PlayerInfo[playerid][pFishes] = 0;
	eventorganizer[playerid] = 0;				togfind[playerid] = 0;
    PlayerCuffed2[playerid] = 0;                Listening[playerid] = -1;
	Clanidoff[playerid] = 999;					toge[playerid] = 0;
	antirem[playerid] = 0; 						PlayerInfo[playerid][pJailed] = 0;
  	wantedlost[playerid] = 1799;                Trucker[playerid] = 0;
	Diceid[playerid] = 999;                     PlayerHandsup[playerid] = 0;
	Dicem[playerid] = 999; 					   	TaxiFare[playerid] = 0;
	Refueling[playerid] = 0;					togarrests[playerid] = 0;
 	InHQ[playerid] = -1;						InHouse[playerid] = -1;
	InBussines[playerid] = -1; 					raceoff[playerid] = 999;
	toglc[playerid] = 0;						PlayerInfo[playerid][pHUD1] = 0;
	togsurf[playerid] = 0;						Freezed[playerid] = 0;
    taxim[playerid] = 0;						PlayerInfo[playerid][pHUD2] = 0;
	somated[playerid] = -1;						TaxiDriver[playerid] = -1;
	somatee[playerid] = 1;						timersoo[playerid] = 0;
	ReportTime[playerid] = 0;                   PlayerInfo[playerid][pHUD3] = 0;
 	hudactivated[playerid] = 0;					PlayerInfo[playerid][pWantedLevel] = 0;
    Vending[playerid] = 0;                      PlayerInfo[playerid][pFishPrice] = 0;
	FactionOffer[playerid] = 999;               PlayerInfo[playerid][pHUD4] = 0;	
	TowAcc[playerid] = 0;
	CheckBus[playerid] = 0;                     JobStep[playerid] = 0;
	viddd[playerid] = 0;                        Trucker2[playerid] = 0;
	Trucker3[playerid] = 0;						
	Trucker4[playerid] = 0;                     AreFaina[playerid] = 0;
	CarJacker[playerid] = 0;                    JackAcc[playerid] = 0;
	Fishing[playerid] = 0;                      FishTimer[playerid] = 0;
	TipPeste[playerid] = 0;                     SelFac[playerid] = 0;
	BuyCar[playerid] = -1;                      EnterInModShop[playerid] = 0;
	PlayerInfo[playerid][pNMuted] = 0;			TaxiCall[playerid] = 0;
	WantedPoints[playerid] = 0;                 PlayerInfo[playerid][pJailTime] = 0;
	CreateVEHID[playerid] = -1;					CreateVEH[playerid] = -1;
	Asteapta[playerid] = -1;
	PlayerInfo[playerid][pJailed] = 0;
	PlayerInfo[playerid][pHelper] = 0;
	PlayerInfo[playerid][pAdmin] = 0;
	PlayerInfo[playerid][pClan] = 0;
	PlayerInfo[playerid][pMember] = 0;
	InBlackJackGame[playerid] = 0;	
	DmgLastH[playerid] = 0;
	DmgLastD[playerid] = 0;
	RegSex[playerid] = 0;
	RegAge[playerid] = 0;
	RegLanguage[playerid] = 0;
	format(LiveQuestion[playerid], 128, "NULL");
	format(reporttext[playerid], 30, "NULL");
	format(WantName[playerid], 30, "NULL");
	format(KeepPassword[playerid], 129, "NULL");
	format(WantBillName[playerid], 128, "bluffs.ga");
	format(somatename[playerid], 30, "NULL");

	if(RouletteInGame[playerid] == 1) {
		TotalBet--;
		RouletteInGame[playerid] = 0;
		betsumma[playerid] = 0;
	}
    return 1;
}

forward SetPlayerSpawn(playerid);
public SetPlayerSpawn(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		InHouse[playerid] = -1;
		InBussines[playerid] = -1;
		InHQ[playerid] = -1;
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerSkinEx(playerid);
	    if(PlayerInfo[playerid][pTut] == 0)
	    {
			gNews[playerid] = 1;
			TogglePlayerControllable(playerid, 0);
			RegistrationStep[playerid] = 1;
			TutTime[playerid] = 1;
			new sendername[30],stringy[128];
			GetPlayerName(playerid, sendername,  sizeof(sendername));
			SendClientMessage(playerid, COLOR_TEAL, "----------------------------------------------------------------------------");
			format(stringy,sizeof(stringy),"Welcome to %s, %s.",SERVER_NAME, sendername);
			SendClientMessage(playerid, COLOR_YELLOW, stringy);
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid, 9994);
			SetPlayerPosEx(playerid, 1742.9814,-1863.0938,16.2048);
			InterpolateCameraPos(playerid, 1804.1313,-1732.0179,21.7294, 1037.3715,-1732.7358,25.2859, 30000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid,1441.6654,-1732.0317,18.0373,1037.3715,-1732.7358,25.2859, 30000, CAMERA_MOVE);
			return 1;
		}
		new rand,
			house = PlayerInfo[playerid][pPhousekey],
			house2 = PlayerInfo[playerid][pRented];
		if(PlayerInfo[playerid][pPaintBallG] >= 1)
		{
			if(PlayerInfo[playerid][pGunLic] == 0 || PlayerInfo[playerid][pWantedLevel] != 0) 
			{
				SendClientMessage(playerid, COLOR_ARENA, "(Paint){FFFFFF} You have been kicked out of arena because you don't have gun licence or you have wanted.");
				cmd_paintleave(playerid, "");
				return 1;
			}
		    curatj[playerid] = 1;
		    SetPlayerToTeamColor(playerid);
		    if(PlayerInfo[playerid][pPaintBallG] == 2 && paintt[PlayerInfo[playerid][pPaintBallG]] > 0)
		    {
		        SetPlayerArmourEx(playerid, 100.0);
			}
			if(PlayerInfo[playerid][pPaintBallG] == 1 || PlayerInfo[playerid][pPaintBallG] == 2)
			{
		    	if(paintg[PlayerInfo[playerid][pPaintBallG]] == 1 && paintt[PlayerInfo[playerid][pPaintBallG]] > 0)
		    	{
		        	GivePlayerWeaponEx(playerid, 24, 1000);
		        	GivePlayerWeaponEx(playerid, 31, 1000);
		        	GivePlayerWeaponEx(playerid, 16, 1);
		        	GivePlayerWeaponEx(playerid, 41, 1000);
				}
				else if(paintg[PlayerInfo[playerid][pPaintBallG]] == 2 && paintt[PlayerInfo[playerid][pPaintBallG]] > 0)
		    	{
		        	GivePlayerWeaponEx(playerid, 5, 1);
				}
				else if(paintg[PlayerInfo[playerid][pPaintBallG]] == 3 && paintt[PlayerInfo[playerid][pPaintBallG]] > 0)
		    	{
		       	 	GivePlayerWeaponEx(playerid, 9, 1);
				}
			}
			else if(PlayerInfo[playerid][pPaintBallG] == 3 && paintt[PlayerInfo[playerid][pPaintBallG]] > 0)
			{
				if(PlayerInfo[playerid][pPaintBallKills] >= 0 && PlayerInfo[playerid][pPaintBallKills] <= 1) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 24, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 2 && PlayerInfo[playerid][pPaintBallKills] <= 3) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 29, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 4 && PlayerInfo[playerid][pPaintBallKills] <= 5) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 28, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 6 && PlayerInfo[playerid][pPaintBallKills] <= 7) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 33, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 8 && PlayerInfo[playerid][pPaintBallKills] <= 9) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 32, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 10 && PlayerInfo[playerid][pPaintBallKills] <= 11) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 25, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 12 && PlayerInfo[playerid][pPaintBallKills] <= 13) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 26, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 14 && PlayerInfo[playerid][pPaintBallKills] <= 15) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 34, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 16 && PlayerInfo[playerid][pPaintBallKills] <= 17) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 27, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 18 && PlayerInfo[playerid][pPaintBallKills] <= 19) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 31, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 20 && PlayerInfo[playerid][pPaintBallKills] <= 21) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 30, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 22 && PlayerInfo[playerid][pPaintBallKills] <= 23) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 23, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 24 && PlayerInfo[playerid][pPaintBallKills] <= 25) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 22, 1000); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 26 && PlayerInfo[playerid][pPaintBallKills] <= 27) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 9, 1); }
				else if(PlayerInfo[playerid][pPaintBallKills] >= 28) { ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid); GivePlayerWeaponEx(playerid, 4, 1); }
			}
			else if(PlayerInfo[playerid][pPaintBallG] == 4 && paintt[PlayerInfo[playerid][pPaintBallG]] > 0)
			{
			    GivePlayerWeaponEx(playerid, 24, 1000);
			}
			if(paintm[PlayerInfo[playerid][pPaintBallG]] == 1)
			{
   				rand = random(sizeof(gRandomSpawnRC));
			    SetPlayerPosEx(playerid,gRandomSpawnRC[rand][0],gRandomSpawnRC[rand][1],gRandomSpawnRC[rand][2]);
			    SetPlayerSkin(playerid, 250);
			    SetPlayerInterior(playerid, 10);
			    if(PlayerInfo[playerid][pPaintBallG] == 1)
			    {
			    	SetPlayerVirtualWorld(playerid,125);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 2)
			    {
			    	SetPlayerVirtualWorld(playerid,126);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 3)
			    {
			    	SetPlayerVirtualWorld(playerid,127);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 4)
			    {
			    	SetPlayerVirtualWorld(playerid,128);
				}
			    SetTimerEx("UnFreezeStation", 100, false, "i", playerid);
			}
			else if(paintm[PlayerInfo[playerid][pPaintBallG]] == 2)
			{
   				rand = random(sizeof(gRandomSpawnTennis));
			    SetPlayerPosEx(playerid,gRandomSpawnTennis[rand][0],gRandomSpawnTennis[rand][1],gRandomSpawnTennis[rand][2]);
			    SetPlayerSkin(playerid, 96);
	     		SetPlayerWorldBounds(playerid, -2712.4683, -2792.2351,-229.3094, -274.6794);
	     		SetPlayerInterior(playerid, 0);
			    if(PlayerInfo[playerid][pPaintBallG] == 1)
			    {
			    	SetPlayerVirtualWorld(playerid,125);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 2)
			    {
			    	SetPlayerVirtualWorld(playerid,126);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 3)
			    {
			    	SetPlayerVirtualWorld(playerid,127);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 4)
			    {
			    	SetPlayerVirtualWorld(playerid,128);
				}
			    SetTimerEx("UnFreezeStation", 100, false, "i", playerid);
			}
			else if(paintm[PlayerInfo[playerid][pPaintBallG]] == 3)
			{
   				rand = random(sizeof(gRandomSpawnFarm));
			    SetPlayerPosEx(playerid,gRandomSpawnFarm[rand][0],gRandomSpawnFarm[rand][1],gRandomSpawnFarm[rand][2]);
			    SetPlayerSkin(playerid, 158);
			    SetPlayerWorldBounds(playerid, 135.3258, -287.9915, 57.6137 ,-74.2723);
			    SetPlayerInterior(playerid, 0);
			    if(PlayerInfo[playerid][pPaintBallG] == 1)
			    {
			    	SetPlayerVirtualWorld(playerid,125);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 2)
			    {
			    	SetPlayerVirtualWorld(playerid,126);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 3)
			    {
			    	SetPlayerVirtualWorld(playerid,127);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 4)
			    {
			    	SetPlayerVirtualWorld(playerid,128);
				}
			    SetTimerEx("UnFreezeStation", 100, false, "i", playerid);
			}
			else if(paintm[PlayerInfo[playerid][pPaintBallG]] == 4)
			{
   				rand = random(sizeof(gRandomSpawnBeach));
			    SetPlayerPosEx(playerid,gRandomSpawnBeach[rand][0],gRandomSpawnBeach[rand][1],gRandomSpawnBeach[rand][2]);
			    SetPlayerSkin(playerid, 97);
				SetPlayerWorldBounds(playerid, 630, 430, -1800 , -1900);
			    SetPlayerInterior(playerid, 0);
			    if(PlayerInfo[playerid][pPaintBallG] == 1)
			    {
			    	SetPlayerVirtualWorld(playerid,125);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 2)
			    {
			    	SetPlayerVirtualWorld(playerid,126);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 3)
			    {
			    	SetPlayerVirtualWorld(playerid,127);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 4)
			    {
			    	SetPlayerVirtualWorld(playerid,128);
				}
			    SetTimerEx("UnFreezeStation", 100, false, "i", playerid);
			}
			else if(paintm[PlayerInfo[playerid][pPaintBallG]] == 5)
			{
   				rand = random(sizeof(gRandomSpawnLSPD));
			    SetPlayerPosEx(playerid,gRandomSpawnLSPD[rand][0],gRandomSpawnLSPD[rand][1],gRandomSpawnLSPD[rand][2]);
			    SetPlayerSkin(playerid, 285);
			    SetPlayerWorldBounds(playerid, 1558.4261, 1387.0891, -1578.9333, -1776.6854);
			    SetPlayerInterior(playerid, 0);
			    if(PlayerInfo[playerid][pPaintBallG] == 1)
			    {
			    	SetPlayerVirtualWorld(playerid,125);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 2)
			    {
			    	SetPlayerVirtualWorld(playerid,126);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 3)
			    {
			    	SetPlayerVirtualWorld(playerid,127);
				}
				else if(PlayerInfo[playerid][pPaintBallG] == 4)
			    {
			    	SetPlayerVirtualWorld(playerid,128);
				}
			    SetTimerEx("UnFreezeStation", 100, false, "i", playerid);
			}
			return 1;
		}
		if(PlayerInfo[playerid][pRaceG] == 0)
		{
			if(PlayerInfo[playerid][pRaceG] == 0 && racet > 0 || PlayerInfo[playerid][pRaceG] == 0 && racers <= 10)
			{
				new string[128],sendername[30];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				foreach(new i : Player)
				{
					if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
					{
						format(string,sizeof(string),"(Race){FFFFFF} %s has left the race arena.", sendername);
						SendClientMessage(i, COLOR_ARENA, string);
					}
				}
				SetPlayerHealthEx(playerid, 100.0);
				curatj[playerid] = 0;
				for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
				PlayerTextDrawHide(playerid, PaintBallText[playerid]);
				racep--;
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid,0);
				SetPlayerPos(playerid, 1102.4310,-1458.1349,15.7969);
				RaceCP[playerid] = 0;
				DisablePlayerRaceCheckpoint(playerid);
				StopAudioStreamForPlayer(playerid);
				DisableRemoteVehicleCollisions(playerid, 0);
				if(racet > -1)
				{
					for(new cs; cs < 20; cs++)
					{
						if(rcarid[cs] == GetPlayerVehicleID(playerid))
						{
							DestroyVehicle(rcarid[cs]);
							rcarid[cs] = 0;
						}
					}
					foreach(new x : Player)
					{
						if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && x != playerid)
						{
							if(RacePos[x] > RacePos[playerid]) RacePos[x]--;
						}
					}
				}
				PlayerInfo[playerid][pRaceG] = -1;
				PlayerTextDrawHide(playerid, RaceTD[playerid][0]);
				PlayerTextDrawHide(playerid, RaceTD[playerid][1]);
				PlayerTextDrawHide(playerid, RaceTD[playerid][2]);
				PlayerTextDrawHide(playerid, RaceTD[playerid][3]);
				PlayerTextDrawHide(playerid, RaceTD[playerid][4]);
			}
			if(PlayerInfo[playerid][pRaceG] == 0 && racers > 10)
			{
				SetPlayerPos(playerid, -40.3110,1508.9723,1000.9155);
				SetPlayerVirtualWorld(playerid, 1);
			}
			return 1;
		}
		if(BeforeSpectate[playerid][pSpectating])
  		{
   			SetPlayerVirtualWorld(playerid, BeforeSpectate[playerid][pWorld]);
   			SetPlayerInterior(playerid, BeforeSpectate[playerid][pInt]);

   			if(BeforeSpectate[playerid][pState] == PLAYER_STATE_DRIVER)
    		PutPlayerInVehicle(playerid, BeforeSpectate[playerid][pInVehicle], 0);

   			else if(BeforeSpectate[playerid][pState] == PLAYER_STATE_PASSENGER)
    			PutPlayerInVehicle(playerid, BeforeSpectate[playerid][pInVehicle], 1 + random(3));

   			else
    			SetPlayerPos(playerid, BeforeSpectate[playerid][pOldPos][0], BeforeSpectate[playerid][pOldPos][1], BeforeSpectate[playerid][pOldPos][2]);

   			BeforeSpectate[playerid][pSpectating] = false;
   			return 1;
  		}
		if(PlayerInfo[playerid][pJailed] == 1)
		{
			SetPlayerWantedLevel(playerid, 0);
			PlayerTextDrawHide(playerid, WantedText[playerid]);
			SetPlayerInterior(playerid, 6);
			rand = random(sizeof(gRandomJailSpawns));
			SetPlayerPosEx(playerid,gRandomJailSpawns[rand][0],gRandomJailSpawns[rand][1],gRandomJailSpawns[rand][2]);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnFreezeStation", 1000, false, "i", playerid);
			if(PlayerInfo[playerid][pVirtualPD] == 3)
			{
			    SetPlayerVirtualWorld(playerid, 3);
			}
			else
			{
			    SetPlayerVirtualWorld(playerid, 0);
			}
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 2)
		{
			PlayerTextDrawHide(playerid, WantedText[playerid]);
			SetPlayerInterior(playerid, 10);
			rand = random(sizeof(gRandomAJailSpawns));
			SetPlayerPosEx(playerid,gRandomAJailSpawns[rand][0],gRandomAJailSpawns[rand][1],gRandomAJailSpawns[rand][2]);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnFreezeStation", 1000, false, "i", playerid);
			return 1;
		}
		if(house != 999 || house2 != -1)
		{
		    if(PlayerInfo[playerid][pSpawnChange] == 1)
		    {
		    	if(house2 != -1) house = house2;
				SetPlayerToTeamColor(playerid);
				SetPlayerInterior(playerid,HouseInfo[house][hInterior]);
				SetPlayerPosEx(playerid, HouseInfo[house][hExitx], HouseInfo[house][hExity],HouseInfo[house][hExitz]);
                SetPlayerVirtualWorld(playerid, HouseInfo[house][hVirtual]);
				PlayerInfo[playerid][pLocal] = house;
				PlayerInfo[playerid][pInt] = HouseInfo[house][hInterior];
				InHouse[playerid] = house;
				if(strlen(housestring[InHouse[playerid]]) > 0)
				{
    				StopAudioStreamForPlayer(playerid);
					PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
				}
				return 1;
			}
		}
		if(PlayerInfo[playerid][pMember] != 0)
		{
			new fid = PlayerInfo[playerid][pMember];
			SetPlayerToTeamColor(playerid);
			SetPlayerPosEx(playerid, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]);
			SetPlayerInterior(playerid, DynamicFactions[fid][fInterior]);
			SetPlayerVirtualWorld(playerid, DynamicFactions[fid][fVirtual]);
			PlayerInfo[playerid][pInt] = DynamicFactions[fid][fInterior];
			InHQ[playerid] = fid;
			return 1;
		}
	    if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8) // Tow Car Company
	    {
	        SetPlayerToTeamColor(playerid);
			SetPlayerPosEx(playerid, 246.8886,64.7381,1003.6406);
			SetPlayerInterior(playerid,6);
			PlayerInfo[playerid][pInt] = 6;
			InHQ[playerid] = 8;
			SetPlayerVirtualWorld(playerid, 3);
	        return 1;
	    }
	    if(PlayerInfo[playerid][pMember] == 0 || PlayerInfo[playerid][pLeader] == 0) // Civilian
	    {
			SetPlayerPosEx(playerid, 1213.9047,-1747.8059,13.5947);
			SetPlayerFacingAngle(playerid, 6.9127);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
	        return 1;
	    }
	    if((gTeam[playerid]) == 3)
	    {
			SetPlayerPosEx(playerid, 1213.9047,-1747.8059,13.5947);
			SetPlayerFacingAngle(playerid, 6.9127);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			return 1;
		}
	    else
	    {
			SetPlayerToTeamColor(playerid);
			if(PlayerInfo[playerid][pOrigin] == 1) // Europa
			{
				SetPlayerPosEx(playerid, 1213.9047,-1747.8059,13.5947);
				SetPlayerFacingAngle(playerid, 6.9127);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerVirtualWorld(playerid, 0);
			}
			else if(PlayerInfo[playerid][pOrigin] == 2) // America
			{
				SetPlayerPosEx(playerid, 1213.9047,-1747.8059,13.5947);
				SetPlayerFacingAngle(playerid, 6.9127);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerVirtualWorld(playerid, 0);
			}
			else if(PlayerInfo[playerid][pOrigin] == 3) // Asia
			{
				SetPlayerPosEx(playerid, 1213.9047,-1747.8059,13.5947);
				SetPlayerFacingAngle(playerid, 6.9127);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerVirtualWorld(playerid, 0);
			}
			else if(PlayerInfo[playerid][pOrigin] == 4) // Africa
			{
				SetPlayerPosEx(playerid, 1213.9047,-1747.8059,13.5947);
				SetPlayerFacingAngle(playerid, 6.9127);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerVirtualWorld(playerid, 0);
			}
			else if(PlayerInfo[playerid][pOrigin] == 5) // Australia
			{
				SetPlayerPosEx(playerid, 1213.9047,-1747.8059,13.5947);
				SetPlayerFacingAngle(playerid, 6.9127);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerVirtualWorld(playerid, 0);
			}
			else
			{
                SetPlayerPosEx(playerid,358.0976,-1841.3488,5.1257);
				SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid, 90.0);
		        SetPlayerCameraPos(playerid,1460.0, -1324.0, 287.2);
			    SetPlayerCameraLookAt(playerid,1374.5, -1291.1, 239.0);
	            PlayerPlaySound(playerid, 1097,-119.9460,23.1096,12.2238);
			}
		}
		SetTimerEx("UpdateSecondary", 3000, false, "i", playerid);
	}
	return 1;
}

forward UpdateSecondary(playerid);
public UpdateSecondary(playerid)
{
    if(gPlayerLogged[playerid] != 0)
	{
		Update(playerid, pConnectTimex);
		Update(playerid, pBank);
		Update(playerid, pCashx);
		Update(playerid, pExpx);
		Update(playerid, pPayDayx);
		Update(playerid, pJailTimex);
		Update(playerid, pOnlineTimeTodayx);
	}
	return 1;
}

forward HideDmg1(playerid);
public HideDmg1(playerid)
{
	DmgLastH[playerid] = 0;
	PlayerTextDrawHide(playerid, DmgInformer[playerid][1]);
	return 1;
}

forward HideDmg0(playerid);
public HideDmg0(playerid)
{
	DmgLastD[playerid] = 0;
	PlayerTextDrawHide(playerid, DmgInformer[playerid][0]);
	return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if(hittype == 2)
	{
		foreach(new i : Player)
		{
			if(Spectate[i] == playerid)
			{
				if(PlayerInfo[i][pAdmin] >= 1)
				{
					if(ShowDMG[i] == 1)
					{
						new name[30],string[128],wName[64];
						GetPlayerName(playerid, name, sizeof(name));
						GetWeaponNameEx(weaponid,wName,sizeof(wName));
						format(string, sizeof(string),"DMG: %s did damage to vehicle %d using weapon %s.",name,hitid,wName);
						SendSplitMessage(i, COLOR_DARKPINK, string);
					}
				}
			}
		}
	}
	if(hittype == 1)
	{
		foreach(new i : Player)
		{
			if(Spectate[i] == playerid)
			{
				DMInfo[playerid][0] = fX;
				DMInfo[playerid][1] = fY;
				DMInfo[playerid][2] = fZ;
			}
		}
	}
	new Float:health;
	GetPlayerHealth(playerid, health);
	if(IsWeaponWithAmmo(weaponid) && weaponid != 38 && health > 0)
    {
    	if(PlayerInfo[playerid][pGunLic] == 0 && TakingLesson[playerid] == 0) return NightBot(playerid, "Possible weapon hack");
    	if(GetPlayerWeaponAmmo(playerid,weaponid) - 1 == 0 && TakingLesson[playerid] == 1)
    	{
			PlayerInfo[playerid][pGunLic] = 1;
			PlayerInfo[playerid][pGunLicT] = 100;
			TakingLesson[playerid] = 0;
			new str1[128];
			mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET `GunLic`='1',`GunLicT`='100' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str1,"","");
			SS(playerid, COLOR_WHITE, "Felicitari! Ai primit licenta de arme!", "Exam finished! You can now use weapons!");
    		return 1;
    	}
        new count = 0;
        if(weaponid != CurrentWeapon[playerid]) CurrentWeapon[playerid] = weaponid, CurrentAmmo[playerid] = GetPlayerWeaponAmmo(playerid,weaponid), count++;
        if(GetPlayerWeaponAmmo(playerid,weaponid) > CurrentAmmo[playerid] || GetPlayerWeaponAmmo(playerid,weaponid) < CurrentAmmo[playerid])
        {
            CurrentAmmo[playerid] = GetPlayerWeaponAmmo(playerid,weaponid);
            NoReloading[playerid] = 0;
            count++;
        }
        if(GetPlayerWeaponAmmo(playerid,weaponid) != 0 && GetPlayerWeaponAmmo(playerid,weaponid) == CurrentAmmo[playerid] && count == 0)
        {
            NoReloading[playerid]++;
            if(NoReloading[playerid] >= 5 && CheatRapidAnn[playerid] == 0 && PlayerInfo[playerid][pAdmin] < 6)
            {
                new string[128];
                NoReloading[playerid] = 0;
                CurrentWeapon[playerid] = 0;
                CurrentAmmo[playerid] = 0;
                CheatRapidAnn[playerid] = 20;
                SlapPlayer(playerid);
                format(string,sizeof(string), "AdmWarning: %s(id %d) is suspected to using rapid fire.",PlayerInfo[playerid][pNormalName], playerid);
                ABroadCast(COLOR_RED, string, 1);
                /*GetPlayerIp(playerid, playerip, sizeof(playerip));
                time = gettime() + (30*86400);
			    format(string,sizeof(string),"Ban: %s has been banned by AdmBot for 30 days, reason: Cheats (rapid-fire).",PlayerInfo[playerid][pNormalName]);
				SendClientMessageToAll(COLOR_LIGHTRED, string);
		   		mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', %d, 0, 0, 1, %d)",
				PlayerInfo[playerid][pNormalName],"AdmBot","Cheats (rapid-fire)",playerip,30,time);
				mysql_tquery(SQL,str,"","");
				new var100[256];
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','0','2','%d','%s','%s','%s','%d')", PlayerInfo[playerid][pSQLID],30,"Cheats (rapid-fire)",PlayerInfo[playerid][pNormalName],"Admbot",gettime());
				mysql_tquery(SQL,var100,"","");
				KickEx(playerid);*/
            }
        }
    }
	return 1;
}

stock GetPlayerWeaponAmmo(playerid,weaponid)
{
    new wd[2][13];
    for(new i; i<13; i++) GetPlayerWeaponData(playerid,i,wd[0][i],wd[1][i]);
    for(new i; i<13; i++)
    {
        
        if(weaponid == wd[0][i]) return wd[1][i];
    }
    return 0;
}

stock IsWeaponWithAmmo(weaponid)
{
    switch(weaponid)
    {
        
        case 16..18, 22..39, 41..42: return 1;
        default: return 0;
    }
    return 0;

}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	if(damagedid != INVALID_PLAYER_ID)
    {
	 	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
		if(GetPlayerSurfingVehicleID(playerid) != INVALID_VEHICLE_ID) return 1;
		if(PlayerInfo[playerid][pPaintBallG] > 0)
		{
		    PlayerPlaySound(playerid,17802,0.0,0.0,0.0);
		}
		new fpm,fkm;
    	fpm = PlayerInfo[playerid][pMember];
    	fkm = PlayerInfo[damagedid][pMember];
    	for(new turf = 1; turf < sizeof(TurfInfo); turf++)
		{
         	if(IsPlayerInTurf(playerid, turf) && IsPlayerInTurf(damagedid, turf))
         	{
                if(IsAMember(playerid) && IsAMember(damagedid))
                {
	             	if(WarInfo[turf][wFaction] == fpm && WarInfo[turf][wAttacker] == fkm || WarInfo[turf][wFaction] == fkm && WarInfo[turf][wAttacker] == fpm)
	             	{
	             	    PlayerPlaySound(playerid,17802,0.0,0.0,0.0);
					}
				}
			}
		}
		if(PlayerInfo[damagedid][pPaintBallG] > 0)
		{
		    if(paintrs[PlayerInfo[damagedid][pPaintBallG]] > 0)
		    {
		    	SetPlayerHealthEx(damagedid, 100.0);
			}
		}
		if(playerdeath[damagedid] == 0)
		{
			if(weaponid == 34 && PlayerInfo[damagedid][pPaintBallG] < 1)
		    {
		        SetPlayerHealthEx(damagedid, 0.0);
		        SetPlayerArmourEx(damagedid, 0.0);
		        OnPlayerDeath(damagedid,playerid,weaponid);
				playerdeath[damagedid] = 1;
				return 1;
		    }
		    new Float: HP, Float: AP ;
			GetPlayerHealthEx(damagedid,HP);
			GetPlayerArmourEx(damagedid,AP);
			if( AP >= amount )
			{
				SetPlayerArmourEx ( damagedid, AP - amount );
			}
			else if( AP <= 0 )
			{
				new Float: remainHP = HP - amount;
				SetPlayerHealthEx ( damagedid, remainHP );
				if( remainHP <= 1 )
				{
					OnPlayerDeath( damagedid, playerid, weaponid );
					SetPlayerHealthEx ( damagedid, 0.0 );
					playerdeath[damagedid] = 1;
				}
			}
			else
			{
				new Float: remainHP = HP + ( AP - amount );
				SetPlayerArmourEx ( damagedid, 0.0 );
				SetPlayerHealthEx ( damagedid, remainHP );
				if( remainHP <= 1 )
				{
					OnPlayerDeath( damagedid, playerid, weaponid );
					SetPlayerHealthEx ( damagedid, 0.0 );
					playerdeath[damagedid] = 1;
				}
			}
			if(PlayerCuffed[damagedid] == 1)
			{
				SetPlayerHealthEx(damagedid,100);
			}
			if(PlayerInfo[damagedid][pSleeping] == 1)
			{
				SetPlayerHealthEx(damagedid, 100);
			}
			if(tazer[playerid] == 1 && IsACop(playerid) && weaponid == 23)
			{
				if(IsACop(damagedid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't taze a cop.");
				if(PlayerCuffed[damagedid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is already tazed.");
				if(PlayerInfo[damagedid][pSleeping] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is sleeping.");
				if(GetDistanceBetweenPlayers(playerid,damagedid) < 15)
				{
					new string[126],sendername[25],giveplayer[25];
					GetPlayerName(playerid,sendername,sizeof(sendername));
					GetPlayerName(damagedid,giveplayer,sizeof(giveplayer));
					format(string, sizeof(string), "* %s tazed %s for 8 seconds.", sendername ,giveplayer);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					TogglePlayerControllable(damagedid, 0);
					PlayerCuffed[damagedid] = 1;
					PlayerCuffedTime[damagedid] = 8;
				}
			}
		}
		foreach(new i : Player)
		{
			if(Spectate[i] == playerid)
			{
				if(PlayerInfo[i][pAdmin] >= 1)
				{
					if(ShowDMG[i] == 1)
					{
						new string[256],name[30],wName[64],name2[30];
						GetPlayerName(playerid, name, sizeof(name));
						GetPlayerName(damagedid, name2, sizeof(name2));
						GetWeaponNameEx(weaponid,wName,sizeof(wName));
						format(string, sizeof(string),"DMG: %s did %f damage to %s using weapon %s. [hit: %f %f %f] [bodypart: %d]",name,amount,name2,wName,DMInfo[playerid][0],DMInfo[playerid][1],DMInfo[playerid][2],bodypart);
						SendSplitMessage(i, COLOR_DARKPINK, string);
					}
				}
			}
		}
		if(PlayerInfo[playerid][pHUD4] == 1)
		{
			DmgLastH[playerid] += amount;
			new string[128],name2[30];
			GetPlayerName(damagedid, name2, sizeof(name2));
			format(string, sizeof(string),"You did %.2f damage to %s.",DmgLastH[playerid],name2);
			PlayerTextDrawSetString(playerid, DmgInformer[playerid][1], string);
			PlayerTextDrawShow(playerid, DmgInformer[playerid][1]);
			SetTimerEx("HideDmg1",2000, false, "i", playerid);
		}
		if(PlayerInfo[damagedid][pHUD4] == 1)
		{
			DmgLastD[damagedid] += amount;
			new string[128],name[30];
			GetPlayerName(playerid, name, sizeof(name));
			format(string, sizeof(string),"%s did %.2f damage to you.",name,DmgLastD[damagedid]);
			PlayerTextDrawSetString(damagedid, DmgInformer[damagedid][0], string);
			PlayerTextDrawShow(damagedid, DmgInformer[damagedid][0]);
			SetTimerEx("HideDmg0",2000, false, "i", damagedid);
		}
	}
	if((weaponid == WEAPON_PARACHUTE && amount > 10) || (weaponid == WEAPON_FLOWER && amount > 10) || (weaponid == WEAPON_NITESTICK && amount > 10)) {
		new string[256],sendername[25];
	    GetPlayerName(playerid,sendername,sizeof(sendername));
		format(string, sizeof(string), "(N) %s (%d, level %d) can use fake damage #1, damage: %.2f.",sendername, playerid, PlayerInfo[playerid][pLevel], amount);
        ABroadCast(COLOR_RED,string,1);
		return 0;
	}
	if(amount > 10.0 && amount != 54.12 && weaponid == 0) {
		new string[256],sendername[25];
	    GetPlayerName(playerid,sendername,sizeof(sendername));
		format(string, sizeof(string), "(N) %s (%d, level %d) can use fake damage #2, damage: %.2f.",sendername, playerid, PlayerInfo[playerid][pLevel], amount);
        ABroadCast(COLOR_RED,string,1);
		return 0;
	}
	if(amount > 9.8 && amount < 9.9 && weaponid == WEAPON_M4) {
		new string[256],sendername[25];
	    GetPlayerName(playerid,sendername,sizeof(sendername));
		format(string, sizeof(string), "(N) %s (%d, level %d) can use silent aimbot #1, damage: %.2f.",sendername, playerid, PlayerInfo[playerid][pLevel], amount);
        ABroadCast(COLOR_RED,string,1);
		return 0;
	}
	if(amount == 46 && weaponid == WEAPON_DEAGLE) {
		new string[256],sendername[25];
	    GetPlayerName(playerid,sendername,sizeof(sendername));
		format(string, sizeof(string), "(N) %s (%d, level %d) can use silent aimbot #2, damage: %.2f.",sendername, playerid, PlayerInfo[playerid][pLevel], amount);
        ABroadCast(COLOR_RED,string,1);
		return 0;
	}
	if(amount == 24.642856 && weaponid == WEAPON_RIFLE) {
		new string[256],sendername[25];
	    GetPlayerName(playerid,sendername,sizeof(sendername));
		format(string, sizeof(string), "(N) %s (%d, level %d) can use silent aimbot #3, damage: %.2f.",sendername, playerid, PlayerInfo[playerid][pLevel], amount);
        ABroadCast(COLOR_RED,string,1);
		return 0;
	}
	if(amount == 9.857147 && weaponid == WEAPON_AK47) {
		new string[256],sendername[25];
	    GetPlayerName(playerid,sendername,sizeof(sendername));
		format(string, sizeof(string), "(N) %s (%d, level %d) can use silent aimbot #4, damage: %.2f.",sendername, playerid, PlayerInfo[playerid][pLevel], amount);
        ABroadCast(COLOR_RED,string,1);
		return 0;
	}
	if(amount < 0)
	{
		new string[256],sendername[25];
	    GetPlayerName(playerid,sendername,sizeof(sendername));
		format(string, sizeof(string), "(N) %s (%d, level %d) can use global kill, damage: %.2f.",sendername, playerid, PlayerInfo[playerid][pLevel], amount);
        ABroadCast(COLOR_RED,string,1);
		return 1;
	}
	return 1;
}

stock GetName(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid,name,sizeof(name));
	return name;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(gPlayerLogged[playerid] == 0) return 1;
	new string[256];
	Listening[playerid] = -1;
	if(RainbowOn[playerid] == 1) 
	{
		ChangeVehicleColor(RainbowCarID[playerid],PlayerInfo[playerid][pCarColor1][RainbowCarIN[playerid]],PlayerInfo[playerid][pCarColor2][RainbowCarIN[playerid]]);
		RainbowOn[playerid] = 0;
		RainbowCarID[playerid] = -1;
		RainbowCarIN[playerid] = -1;
		SendClientMessage(playerid, COLOR_DARKPINK, "Rainbow mode disabled.");
	}
	if(BusinessRob[playerid] > 0)
	{
		DisablePlayerCheckpoint(playerid);
		BusinessRob[playerid] = 0;
		RobTime[playerid] = -1;
		SendClientMessage(playerid, COLOR_ROB, "Rob failed. You died.");
	}
	if(PlayerInfo[playerid][pFishes] != 0)
	{
		PlayerInfo[playerid][pFishes] = 0;
		SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} You lose the fish because you dead.");
	}
	if(AreFaina[playerid] != 0)
	{
		AreFaina[playerid] = 0;
		SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} You lose the flour bag because you dead.");
	}
	if(flymode[playerid] == 1)
	{
	    flymode[playerid] = 0;
		StopFly(playerid);
	}
  	if(TakingLesson[playerid] == 1 || examcar[playerid] != -1)
	{
    	TakingLesson[playerid] = 0;
		DestroyVehicle(examcar[playerid]);
		DisableRemoteVehicleCollisions(playerid, 0);
		examcar[playerid] = -1;
    	DisablePlayerRaceCheckpoint(playerid);
    	PlayerTextDrawHide(playerid, DMVexam[playerid]);
    	PlayerTextDrawHide(playerid, DMVcheck[playerid]);
	}
	if(PlayerCuffed2[playerid] == 1)
	{
	    PlayerCuffed2[playerid] = 0;
    	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
    	RemovePlayerAttachedObject(playerid,9);
    	if(PlayerInfo[playerid][pPet] != 0 && PlayerInfo[playerid][pPetStatus] != 0) AttachPet(playerid);
	}
	if(gPlayerCheckpointStatus[playerid] > 4 && gPlayerCheckpointStatus[playerid] < 11)
	{
		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
	}
	new caller = Mobile[playerid];
	if(caller != -1)
	{
		SendClientMessage(caller,  COLOR_GRAD2, "The line just went dead....");
		CellTime[caller] = 0;
		CellTime[playerid] = 0;
		Mobile[caller] = -1;
		Mobile[playerid] = -1;
		CellTime[playerid] = 0;
	}
	if(killerid != INVALID_PLAYER_ID)
	{
	    new var100[256],playername[30],killername[30];
		GetPlayerName(playerid,playername,sizeof(playername));
		GetPlayerName(killerid,killername,sizeof(killername));
		new Float: distance = GetDistanceBetweenPlayers(playerid, killerid);
	    mysql_format(SQL, var100, sizeof(var100), "INSERT INTO kill_logs (`playerid`,`killerid`,`reason`,`playername`,`killername`,`distance`) VALUES ('%d','%d','%d','%s','%s','%.0f')", PlayerInfo[playerid][pSQLID],PlayerInfo[killerid][pSQLID],reason,playername,killername,distance);
		mysql_tquery(SQL,var100,"","");
		if(PlayerInfo[killerid][pQuest2] == 2 && !IsACop(killerid) && IsACop(playerid))
		{
			if(PlayerInfo[killerid][pQuestNeed2] > PlayerInfo[killerid][pQuestProgress2])
			{
				PlayerInfo[killerid][pQuestProgress2]++;
				Update(killerid, pQuestProgress2x);
				if(PlayerInfo[killerid][pQuestProgress2] >= PlayerInfo[killerid][pQuestNeed2])
				{
					FinishQuest2(killerid, 2);
				}
				else
				{
					new str[128];
					if(PlayerInfo[killerid][pLanguage] == 1)
					{
						format(str, sizeof(str),"Quest [Kill %d cops] progress: %d/%d",PlayerInfo[killerid][pQuestNeed2],PlayerInfo[killerid][pQuestProgress2],PlayerInfo[killerid][pQuestNeed2]);
						SendClientMessage(killerid, COLOR_YELLOW, str);
					}
					else
					{
						format(str, sizeof(str),"Progres pentru misiunea [Omoara %d politisti]: %d/%d",PlayerInfo[killerid][pQuestNeed2],PlayerInfo[killerid][pQuestProgress2],PlayerInfo[killerid][pQuestNeed2]);
						SendClientMessage(killerid, COLOR_YELLOW, str);
					}
				}
			}
		}
	    if(PlayerInfo[playerid][pWantedLevel] >= 1)
		{
		    new copkill=0, price = PlayerInfo[playerid][pWantedLevel] * 100, count, str23[MAX_STRING], lastname[30], streap[30], timejail;
		    if((PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pMember] != 2 && PlayerInfo[playerid][pMember] != 3 && PlayerInfo[playerid][pMember] != 8))
			{
			    for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i))
					{
					    if((IsACop(i) && CrimInRange(50.0, playerid,i) && OnDuty[i] == 1)|| (IsACop(i) && killerid == i))
						{
						    if(OnDuty[i] != 1) return 1;
							GetPlayerName(killerid, lastname, sizeof(lastname));
							GetPlayerName(playerid, streap, sizeof(streap));
							count++;
							GameTextForPlayer(i, "Running Suspect bonus!", 5000, 1);
							format(string, sizeof(string), "You recieved $%d bonus for catch the suspect %s.", price, streap);
							SendClientMessage(i, COLOR_DBLUE, string);
							ConsumingMoney[i] = 1;
							GivePlayerCash(i, price);
							new idfac = PlayerInfo[i][pMember];
                        	DynamicFactions[idfac][fBank] += price;
							mysql_format(SQL,str23,sizeof(str23),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'", DynamicFactions[idfac][fBank], idfac);
							mysql_tquery(SQL,str23,"","");
							PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
							if(SvarInfo[1][svValue] == 0) timejail = PlayerInfo[playerid][pWantedLevel]*300;
							else timejail = PlayerInfo[playerid][pWantedLevel]*150;
							format(string, sizeof(string),"Dispatch: %s has been killed by %s and will be in jail for %d seconds, over.",streap,lastname,timejail);
							copkill = 1;
							PlayerInfo[killerid][Raport3]++;
							Update(killerid, Raport3x);
						}
					}
				}
				if(copkill == 1)
				{
					SendTeamMessage(1, COLOR_LIGHTBLUE, string);
					SendTeamMessage(2, COLOR_LIGHTBLUE, string);
					SendTeamMessage(3, COLOR_LIGHTBLUE, string);
					SendTeamMessage(8, COLOR_LIGHTBLUE, string);
					if(SvarInfo[1][svValue] == 0) PlayerInfo[playerid][pJailTime] = (PlayerInfo[playerid][pWantedLevel])*(300);
					else PlayerInfo[playerid][pJailTime] = (PlayerInfo[playerid][pWantedLevel])*(150);
					format(string, sizeof(string), "Because you got killed, you lost $%s and you will be taken to jail. You are no longer a criminal.", FormatNumber(price));
					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					PlayerInfo[playerid][pJailed] = 1;
					PlayerInfo[playerid][pWantedLevel] = 0;
					PlayerInfo[playerid][pWantedDeaths] += 1;
					WantedPoints[playerid] = 0;
					GivePlayerCash(playerid, - price);
					Update(playerid,pWantedLevelx);
					Update(playerid,pJailedx);
					Update(playerid,pJailTimex);
					ClearCrime(playerid);
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("UnFreezeStation", 1000, false, "i", playerid);
				}
			}
		}
		new name[MAX_PLAYER_NAME],
		Float:px,
		Float:py,
		Float:pz;
		gPlayerUsingLoopingAnim[playerid] = 0;
		gPlayerSpawned[playerid] = 0;
		GetPlayerName(playerid, name, sizeof(name));
		PlayerInfo[playerid][pLocal] = 255;
		GetPlayerPos(playerid, px, py, pz);
		new currentveh = GetPlayerVehicleID(playerid);
		playerdeath[playerid] = 0;
		curatj[playerid] = 0;
		PlayerEnterTime[playerid]+=221;
		if(GetPlayerState(killerid) == PLAYER_STATE_DRIVER && !IsAPlane(currentveh))
		{
		    GetPlayerName(playerid,name,sizeof(name));
		    new kill[25];
		    GetPlayerName(killerid,kill,sizeof(kill));
			format(string, sizeof(string), "Notice: {FFFFFF}%s has been killed by %s by drive-by.",name, kill);
            ABroadCast(COLOR_RED2,string,1);
		}
		if(XDeaths[playerid] == 0)
	    {
	       LastDeath[playerid] = gettime();
	    }
	    XDeaths[playerid]++;
	    if(XDeaths[playerid] == 2)
	    {
	        if((gettime() - LastDeath[playerid]) <= 2 && PlayerInfo[playerid][pPaintBallG] == 0)
	        {
	            NightBot(playerid, "Cheats (fake damage) #4");
	            return 1;
	        }
	        else if((gettime() - LastDeath[playerid]) > 2)
	        {
	            XDeaths[playerid]=0;
	        }
	    }
		foreach(new ids : Player)
		{
			if(Spectate[ids] == killerid)
			{
				new weaponname[50];
				GetWeaponNameEx(reason, weaponname, sizeof(weaponname));
				format(var100, sizeof(var100),"%s was killed by %s, reason: %s, distance: %.0fm",playername,killername,weaponname,GetDistanceBetweenPlayers(killerid,playerid));
				SendClientMessage(ids, COLOR_RED2, var100);
			}
		}
		foreach(new ds : Player)
		{
			if(PlayerInfo[ds][pAdmin] >= 1)
			{
				if(Spectate[ds] != -1)
				{
					if(GetDistanceBetweenPlayers(playerid,Spectate[ds]) <= 100.0)
					{
						if(Spectate[ds] != killerid)
						{
							new namexs[30],weaponname[50];
							GetWeaponNameEx(reason, weaponname, sizeof(weaponname));
							if(killerid != INVALID_PLAYER_ID)
							{
								format(namexs, sizeof(namexs),"%s",killername);
							}
							else
							{
								format(namexs, sizeof(namexs),"No One",killername);
							}
							format(var100, sizeof(var100),"%s was killed by %s, reason: %s",playername,namexs,weaponname);
							SendClientMessage(ds, COLOR_LIGHTGREEN3, var100);
						}
						KillTimer(deathdeletetime[ds]);
						SendDeathMessageToPlayer(ds, killerid, playerid, reason);
						deathdeletetime[ds] = SetTimerEx("DeleteDeathMessage",30000,0,"d",ds);
					}
				}
			}
		}
 		if(killerid == playerid)
		{
            NightBot(killerid, "Cheats (fake damage) #3");
            return 1;
		}
		if(reason == 38 && GetPlayerState(killerid) != PLAYER_STATE_DRIVER)
		{
			new kickname[25];
			if(IsPlayerConnected(killerid))
			{
				if(PlayerInfo[killerid][pAdmin] == 0 && PlayerInfo[killerid][pHelper] == 0)
				{
					GetPlayerName(killerid, kickname, sizeof(kickname));
					format(string, sizeof(string), "(N) %s (%d, level %d) killed a player using a minigun.",kickname,killerid,PlayerInfo[killerid][pLevel]);
					ABroadCast(COLOR_RED,string,1);
				}
			}
		}
		if(gPlayerUsingLoopingAnim[playerid])
		{
	    	gPlayerUsingLoopingAnim[playerid] = 0;
		}
	    new fpm,fkm;
    	fpm = PlayerInfo[playerid][pMember];
    	fkm = PlayerInfo[killerid][pMember];
    	for(new turf = 1; turf < sizeof(TurfInfo); turf++)
		{
         	if(IsPlayerInTurf(playerid, turf) && IsPlayerInTurf(killerid, turf))
         	{
                if(IsAMember(playerid) && IsAMember(killerid))
                {
	             	if(WarInfo[turf][wFaction] == fpm && WarInfo[turf][wAttacker] == fkm || WarInfo[turf][wFaction] == fkm && WarInfo[turf][wAttacker] == fpm)
	             	{
				     	if(fkm == WarInfo[turf][wAttacker] || fkm == WarInfo[turf][wFaction])
					 	{
					     	WarScoreF[fkm][turf] += 1;
					 	}
	                 	ucideri[killerid][turf] ++;
	                 	decese[playerid][turf] ++;
						PlayerInfo[killerid][Raport1]++;
						Update(killerid, Raport1x);
						PlayerInfo[playerid][Raport2]++;
						Update(playerid, Raport2x);
	                 	foreach(new i : Player)
	                 	{
	                 	    new fpm2;
	                 	    fpm2 = PlayerInfo[i][pMember];
	                 	    if(IsAMember(i))
                			{
                			    if(WarInfo[turf][wFaction] == fpm2 || WarInfo[turf][wAttacker] == fpm2)
  								{
                			    	SendDeathMessageToPlayer(i, killerid, playerid, reason);
								}
							}
						}
	                 	if(PlayerInfo[killerid][pMember] == WarInfo[turf][wAttacker])
	                 	{
		                 	if((ucideri[killerid][turf]-decese[killerid][turf]) > bestscoreat[turf])
		                 	{
		                     	bestscoreat[turf] = (ucideri[killerid][turf]-decese[killerid][turf]);
		                     	bestmemberat[turf] = killerid;
		                 	}
	                 	}
	                 	if(PlayerInfo[killerid][pMember] == WarInfo[turf][wFaction])
	                 	{
		                 	if((ucideri[killerid][turf]-decese[killerid][turf]) > bestscoredf[turf])
		                 	{
		                     	bestscoredf[turf] = (ucideri[killerid][turf]-decese[killerid][turf]);
		                     	bestmemberdf[turf] = killerid;
		                 	}
	                 	}
	                 	if(PlayerInfo[playerid][pMember] == WarInfo[turf][wAttacker])
	                 	{
	                 		if((ucideri[playerid][turf]-decese[playerid][turf]) < worstscoreat[turf])
							{
								worstscoreat[turf] = (ucideri[playerid][turf]-decese[playerid][turf]);
								worstmemberat[turf] = playerid;
							}
						}
	                 	if(PlayerInfo[playerid][pMember] == WarInfo[turf][wFaction])
	                 	{
	                 		if((ucideri[playerid][turf]-decese[playerid][turf]) < worstscoredf[turf])
							{
								worstscoredf[turf] = (ucideri[playerid][turf]-decese[playerid][turf]);
								worstmemberdf[turf] = playerid;
							}
						}
	                 	format(string, sizeof(string), "You have killed %s (%d).", GetName(playerid), playerid);
	                 	SendClientMessage(killerid, COLOR_GENANNOUNCE, string);
	                 	format(string, sizeof(string), "You have been killed by %s (%d).", GetName(killerid), killerid);
	                 	SendClientMessage(playerid, COLOR_GENANNOUNCE, string);
						SpawnPlayer(playerid);
						SetPlayerVirtualWorld(playerid, DynamicFactions[PlayerInfo[playerid][pMember]][fVirtual]);
	                 	return 1;
					}
             	}
         	}
    	}
		if(PlayerInfo[playerid][pPaintBallG] > 0)
		{
		    foreach(new iddd : Player)
		    {
		        if(PlayerInfo[iddd][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
		        {
					SendDeathMessageToPlayer(iddd, killerid, playerid, reason);
				}
			}
		    PlayerInfo[killerid][pPaintBallKills]++;

		    PlayerInfo[killerid][pPaintKills]++;
		    Update(killerid, pPaintKillsx);
		    PlayerInfo[playerid][pPaintDeaths]++;
		    Update(playerid, pPaintDeathsx);

		    format(string,sizeof(string),"You have been killed by %s.", GetName(killerid));
		    SendClientMessage(playerid, COLOR_GENANNOUNCE, string);

		    format(string,sizeof(string),"You have killed %s. You now have %d kills.", GetName(playerid), PlayerInfo[killerid][pPaintBallKills]);
		    SendClientMessage(killerid, COLOR_GENANNOUNCE, string);

			if(PlayerInfo[killerid][pQuest2] == 3)
			{
				if(PlayerInfo[killerid][pQuestNeed2] > PlayerInfo[killerid][pQuestProgress2])
				{
					PlayerInfo[killerid][pQuestProgress2]++;
					Update(killerid, pQuestProgress2x);
					if(PlayerInfo[killerid][pQuestProgress2] >= PlayerInfo[killerid][pQuestNeed2])
					{
						FinishQuest2(killerid, 3);
					}
					else
					{
						new str[128];
						if(PlayerInfo[killerid][pLanguage] == 1)
						{
							format(str, sizeof(str),"Quest [Kill %d players at paintball] progress: %d/%d",PlayerInfo[killerid][pQuestNeed2],PlayerInfo[killerid][pQuestProgress2],PlayerInfo[killerid][pQuestNeed2]);
							SendClientMessage(killerid, COLOR_YELLOW, str);
						}
						else
						{
							format(str, sizeof(str),"Progres pentru misiunea [Omoara %d playeri la Paintball]: %d/%d",PlayerInfo[killerid][pQuestNeed2],PlayerInfo[killerid][pQuestProgress2],PlayerInfo[killerid][pQuestNeed2]);
							SendClientMessage(killerid, COLOR_YELLOW, str);
						}
					}
				}
			}

			new paintrankup = 0;
			if(PlayerInfo[killerid][pPaintKills] == 10) paintrankup = 1;
			else if(PlayerInfo[killerid][pPaintKills] == 30) paintrankup = 2;
			else if(PlayerInfo[killerid][pPaintKills] == 50) paintrankup = 3;
			else if(PlayerInfo[killerid][pPaintKills] == 70) paintrankup = 4;
			else if(PlayerInfo[killerid][pPaintKills] == 90) paintrankup = 5;
			else if(PlayerInfo[killerid][pPaintKills] == 110) paintrankup = 6;
			else if(PlayerInfo[killerid][pPaintKills] == 130) paintrankup = 7;
			else if(PlayerInfo[killerid][pPaintKills] == 150) paintrankup = 8;
			else if(PlayerInfo[killerid][pPaintKills] == 170) paintrankup = 9;
			else if(PlayerInfo[killerid][pPaintKills] == 190) paintrankup = 10;
			else if(PlayerInfo[killerid][pPaintKills] == 210) paintrankup = 11;
			else if(PlayerInfo[killerid][pPaintKills] == 230) paintrankup = 12;
			else if(PlayerInfo[killerid][pPaintKills] == 250) paintrankup = 13;
			else if(PlayerInfo[killerid][pPaintKills] == 270) paintrankup = 14;
			else if(PlayerInfo[killerid][pPaintKills] == 290) paintrankup = 15;
			else if(PlayerInfo[killerid][pPaintKills] == 310) paintrankup = 16;
			else if(PlayerInfo[killerid][pPaintKills] == 330) paintrankup = 17;
			else if(PlayerInfo[killerid][pPaintKills] == 350) paintrankup = 18;

			if(paintrankup != 0)
			{
				PlayerInfo[killerid][pPaintRank] = paintrankup;
				Update(killerid, pPaintRankx);
				new randpp = 1 + random(5), randmoney = 50000 + random(100000);
				PlayerInfo[killerid][pPremiumPoints] += randpp;
				Update(killerid, pPremiumPointsx);
				GivePlayerCash(killerid, randmoney);
				new paintstr[128];
				format(paintstr, sizeof(paintstr), "Wow, you're an amazing killer and now your paintball rank is %s. Reward: %d premium points and %s$.",PaintRankName[paintrankup],randpp, FormatNumber(randmoney));
				SendClientMessage(killerid, COLOR_ARENA, paintstr);
			}

		    if(PlayerInfo[killerid][pPaintBallG] == 3)
			{
			    if(PlayerInfo[killerid][pPaintBallKills] == 2) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 29, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 4) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 28, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 6) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 33, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 8) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 32, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 10) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 25, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 12) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 26, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 14) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 34, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 16) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 27, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 18) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 31, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 20) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 30, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 22) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 23, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 24) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 22, 1000); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 26) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 9, 1); }
				else if(PlayerInfo[killerid][pPaintBallKills] == 28) { ResetPlayerWeaponsEx(killerid); ResetPlayerWeapons(killerid); GivePlayerWeaponEx(killerid, 4, 1); }
			}

		    if(PlayerInfo[killerid][pPaintBallKills] == 29 && PlayerInfo[killerid][pPaintBallG] == 3)
		    {
		        foreach(new i : Player)
				{
  					if(PlayerInfo[i][pPaintBallG] == 3)
   					{
  						format(string,sizeof(string),"(Paint){FFFFFF} Round over! Winner: %s - 29 kills.",GetName(killerid));
  						
						SendClientMessage(i, COLOR_ARENA, string);
						SendClientMessage(i, COLOR_ARENA, "(Paint){FFFFFF} Use /votemap to vote for a map.");
						ResetPlayerWeaponsEx(i);
		    			ResetPlayerWeapons(i);
		    			SetPlayerArmourEx(i, 0);
		    			SetPlayerHealthEx(i,100);
		    			PlayerInfo[i][pPaintBallKills] = 0;
		    			PlayerInfo[i][pPaintBallVoted] = 0;
		    			PlayerInfo[i][pPaintBallVoted2] = 0;
		    			for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
					}
				}
				PlayerInfo[killerid][pPaintWon]++;
  				Update(killerid, pPaintWonx);
				GivePlayerCash(killerid, 100000);
				SS(killerid, COLOR_ARENA, "(Paint){FFFFFF} Felicitari ai primit 100,000$ pentru ca ai castigat runda!", "(Paint){FFFFFF} Good job, you recieved 100,000$ for win the round!");
				KillTimer(paintrun3);
				paintt[3] = 0;
				paintrs[3] = 31;
				preparepaint3 = SetTimer("PrepareRoundPaintBall3", 1000, 1);
				PaintWinner[3] = -1;
				PaintBallWinnerKills[3] = 0;
				paintvotem[3][0] = 0;
				paintvotem[3][1] = 0;
				paintvotem[3][2] = 0;
				paintvotem[3][3] = 0;
				paintvotem[3][4] = 0;
				mapvoted[3] = 0;
		    }
		    if(PlayerInfo[killerid][pPaintBallKills] > PaintBallWinnerKills[PlayerInfo[playerid][pPaintBallG]])
		    {
				PaintWinner[PlayerInfo[playerid][pPaintBallG]] = killerid;
				PaintBallWinnerKills[PlayerInfo[playerid][pPaintBallG]] = PlayerInfo[killerid][pPaintBallKills];
				foreach(new i : Player)
				{
				    if(IsPlayerConnected(i))
				    {
				        if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
				        {
				    		format(string,sizeof(string),"(Paint){FFFFFF} %s is in the lead with %d kills.",GetName(killerid),PaintBallWinnerKills[PlayerInfo[playerid][pPaintBallG]]);
				    		SendClientMessage(i, COLOR_ARENA, string);
						}
					}
				}
			}
			return 1;
		}
		if(PlayerInfo[playerid][pHeadValue] > 0)
		{
	    	if(IsPlayerConnected(killerid))
	    	{
		    	if(PlayerInfo[killerid][pMember] == 11)
		    	{
		        	if(GoChase[killerid] == playerid)
		        	{
						new killer[MAX_PLAYER_NAME];
						GetPlayerName(killerid, killer, sizeof(killer));
						GivePlayerCash(killerid, PlayerInfo[playerid][pHeadValue]);
						if(Undercover[killerid] == 1 && PhoneOnline[killerid] == 1 && GetDistanceBetweenPlayers(killerid,playerid) >= 100)
						{
							format(string,256,"%s has succesfully completed the contract on %s for $%s, distance: %.0fm.",killer,name,FormatNumber(PlayerInfo[playerid][pHeadValue]),GetDistanceBetweenPlayers(killerid,playerid));
							PlayerInfo[playerid][Raport1]++;
							Update(playerid, Raport1x);
						}
						else if(Undercover[killerid] == 1 && PhoneOnline[killerid] == 1 && GetDistanceBetweenPlayers(killerid,playerid) < 100 && reason == 4)
						{
							format(string,256,"%s has succesfully completed the contract on %s for $%s, distance: %.0fm (knife).",killer,name,FormatNumber(PlayerInfo[playerid][pHeadValue]),GetDistanceBetweenPlayers(killerid,playerid));
							PlayerInfo[playerid][Raport1]++;
							Update(playerid, Raport1x);
						}
						else if(Undercover[killerid] == 0)
						{
							format(string,256,"%s failed to complete the contract on %s for $%s, distance: %.0fm. Fail reason: not undercover.",killer,name,FormatNumber(PlayerInfo[playerid][pHeadValue]),GetDistanceBetweenPlayers(killerid,playerid));
						}
						else if(PhoneOnline[killerid] == 0)
						{
							format(string,256,"%s failed to complete the contract on %s for $%s, distance: %.0fm. Fail reason: phone turned on.",killer,name,FormatNumber(PlayerInfo[playerid][pHeadValue]),GetDistanceBetweenPlayers(killerid,playerid));
						}
						else if(GetDistanceBetweenPlayers(killerid,playerid) <= 99)
						{
							format(string,256,"%s failed to complete the contract on %s for $%s, distance: %.0fm. Fail reason: distance/weapon.",killer,name,FormatNumber(PlayerInfo[playerid][pHeadValue]),GetDistanceBetweenPlayers(killerid,playerid));
						}
						SendFamilyMessage(11, COLOR_TEAL, string);
						PlayerInfo[playerid][pHeadValue] = 0;
						GotHit[playerid] = 0;
						GetChased[playerid] = 999;
						GoChase[killerid] = 999;
						new str[256];
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `HeadValue`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,str,"","");
				        togfind[killerid] = 0;
			            PlayerInfo[killerid][pHitT] = 180;
			            PlayerInfo[killerid][Raport1]++;
			            Update(killerid,Raport1x);
				        mysql_format(SQL, string, sizeof(string), "UPDATE users SET `HitT`='%d' WHERE `name`='%s'", PlayerInfo[killerid][pHitT], PlayerInfo[killerid][pNormalName]);
				        mysql_tquery(SQL,string,"","");
					}
				}
			}
			return 1;
		}
		if(gTeam[playerid] == 3)
		{
 			if(IsPlayerConnected(killerid))
   			{
 	    		if(gTeam[killerid] == 3 || gTeam[killerid] == 4 || gTeam[killerid] == 5 || (gTeam[killerid] == 11 && GoChase[killerid] == 999))
   	    		{
 	        		new namekill[25];
   	        		GetPlayerName(killerid,namekill,sizeof(namekill));
					strmid(WantedName[playerid], namekill, 0, strlen(namekill), 255);
					WantedReason[playerid] = reason;
					format(string,sizeof(string),"{408080}Ai fost atacat de %s. Ai 60 de secunde sa folosesti /call 112 pentru a raporta incidentul.",GetName(killerid));
					SendClientMessage(playerid,COLOR_WHITE,string);
					WantedTimer[playerid] = 60;
	    		}
    		}
	    	return 1;
		}
		if(gTeam[playerid] == 7)
		{
 			if(IsPlayerConnected(killerid))
   			{
 	    		if(gTeam[killerid] == 3 || gTeam[killerid] == 4 || gTeam[killerid] == 5 || (gTeam[killerid] == 11 && GoChase[killerid] == 999))
   	    		{
 	        		new namekill[25];
   	        		GetPlayerName(killerid,namekill,sizeof(namekill));
					strmid(WantedName[playerid], namekill, 0, strlen(namekill), 255);
					WantedReason[playerid] = reason;
					format(string,sizeof(string),"{408080}Ai fost atacat de %s. Ai 60 de secunde sa folosesti /call 112 pentru a raporta incidentul.",GetName(killerid));
					SendClientMessage(playerid,COLOR_WHITE,string);
					WantedTimer[playerid] = 60;
	    		}
    		}
	    	return 1;
		}
		if(gTeam[playerid] == 4)
		{
 			if(IsPlayerConnected(killerid))
   			{
 	    		if(gTeam[killerid] == 3 || gTeam[killerid] == 4 || gTeam[killerid] == 5 || (gTeam[killerid] == 11 && GoChase[killerid] == 999))
   	    		{
 	        		new namekill[25];
   	        		GetPlayerName(killerid,namekill,sizeof(namekill));
					strmid(WantedName[playerid], namekill, 0, strlen(namekill), 255);
					WantedReason[playerid] = reason;
					format(string,sizeof(string),"{408080}Ai fost atacat de %s. Ai 60 de secunde sa folosesti /call 112 pentru a raporta incidentul.",GetName(killerid));
					SendClientMessage(playerid,COLOR_WHITE,string);
					WantedTimer[playerid] = 60;
	    		}
    		}
	    	return 1;
		}
		if(gTeam[playerid] == 5)
		{
 			if(IsPlayerConnected(killerid))
   			{
 	    		if(gTeam[killerid] == 3 || gTeam[killerid] == 4 || (gTeam[killerid] == 11 && GoChase[killerid] == 999))
   	    		{
 	        		new namekill[25];
   	        		GetPlayerName(killerid,namekill,sizeof(namekill));
					strmid(WantedName[playerid], namekill, 0, strlen(namekill), 255);
					WantedReason[playerid] = reason;
					format(string,sizeof(string),"{408080}Ai fost atacat de %s. Ai 60 de secunde sa folosesti /call 112 pentru a raporta incidentul.",GetName(killerid));
					SendClientMessage(playerid,COLOR_WHITE,string);
					WantedTimer[playerid] = 60;
	    		}
    		}
	    	return 1;
		}
		if(gTeam[playerid] == 11)
		{
 			if(IsPlayerConnected(killerid))
   			{
 	    		if(gTeam[killerid] == 3 || gTeam[killerid] == 4 || gTeam[killerid] == 5)
   	    		{
 	        		new namekill[25];
   	        		GetPlayerName(killerid,namekill,sizeof(namekill));
					strmid(WantedName[playerid], namekill, 0, strlen(namekill), 255);
					WantedReason[playerid] = reason;
					format(string,sizeof(string),"{408080}Ai fost atacat de %s. Ai 60 de secunde sa folosesti /call 112 pentru a raporta incidentul.",GetName(killerid));
					SendClientMessage(playerid,COLOR_WHITE,string);
					WantedTimer[playerid] = 60;
	    		}
    		}
	    	return 1;
		}
		killerid = INVALID_PLAYER_ID;
	}
	return 1;
}

new legalmods[48][22] = {
        {400, 1024,1021,1020,1019,1018,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {401, 1145,1144,1143,1142,1020,1019,1017,1013,1007,1006,1005,1004,1003,1001,0000,0000,0000,0000},
        {404, 1021,1020,1019,1017,1016,1013,1007,1002,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {405, 1023,1021,1020,1019,1018,1014,1001,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {410, 1024,1023,1021,1020,1019,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
		{415, 1023,1019,1018,1017,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {418, 1021,1020,1016,1006,1002,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {420, 1021,1019,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {421, 1023,1021,1020,1019,1018,1016,1014,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {422, 1021,1020,1019,1017,1013,1007,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {426, 1021,1019,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {436, 1022,1021,1020,1019,1017,1013,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
        {439, 1145,1144,1143,1142,1023,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
        {477, 1021,1020,1019,1018,1017,1007,1006,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {478, 1024,1022,1021,1020,1013,1012,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {489, 1024,1020,1019,1018,1016,1013,1006,1005,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
        {491, 1145,1144,1143,1142,1023,1021,1020,1019,1018,1017,1014,1007,1003,0000,0000,0000,0000,0000},
        {492, 1016,1006,1005,1004,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {496, 1143,1142,1023,1020,1019,1017,1011,1007,1006,1003,1002,1001,0000,0000,0000,0000,0000,0000},
        {500, 1024,1021,1020,1019,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {516, 1021,1020,1019,1018,1017,1016,1015,1007,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
        {517, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1016,1007,1003,1002,0000,0000,0000,0000,0000},
        {518, 1145,1144,1143,1142,1023,1020,1018,1017,1013,1007,1006,1005,1003,1001,0000,0000,0000,0000},
        {527, 1021,1020,1018,1017,1015,1014,1007,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {529, 1023,1020,1019,1018,1017,1012,1011,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000},
        {534, 1185,1180,1179,1178,1127,1126,1125,1124,1123,1122,1106,1101,1100,0000,0000,0000,0000,0000},
        {535, 1121,1120,1119,1118,1117,1116,1115,1114,1113,1110,1109,0000,0000,0000,0000,0000,0000,0000},
        {536, 1184,1183,1182,1181,1128,1108,1107,1105,1104,1103,0000,0000,0000,0000,0000,0000,0000,0000},
        {540, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1004,1001,0000,0000,0000,0000},
        {542, 1145,1144,1021,1020,1019,1018,1015,1014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {546, 1145,1144,1143,1142,1024,1023,1019,1018,1017,1007,1006,1004,1002,1001,0000,0000,0000,0000},
        {547, 1143,1142,1021,1020,1019,1018,1016,1003,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {549, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1012,1011,1007,1003,1001,0000,0000,0000,0000},
        {550, 1145,1144,1143,1142,1023,1020,1019,1018,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000},
        {551, 1023,1021,1020,1019,1018,1016,1006,1005,1003,1002,0000,0000,0000,0000,0000,0000,0000,0000},
        {558, 1168,1167,1166,1165,1164,1163,1095,1094,1093,1092,1091,1090,1089,1088,0000,0000,0000,0000},
        {559, 1173,1162,1161,1160,1159,1158,1072,1071,1070,1069,1068,1067,1066,1065,0000,0000,0000,0000},
        {560, 1170,1169,1141,1140,1139,1138,1033,1032,1031,1030,1029,1028,1027,1026,0000,0000,0000,0000},
        {561, 1157,1156,1155,1154,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1031,1030,1027,1026},
        {562, 1172,1171,1149,1148,1147,1146,1041,1040,1039,1038,1037,1036,1035,1034,0000,0000,0000,0000},
        {565, 1153,1152,1151,1150,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,0000,0000,0000,0000},
        {567, 1189,1188,1187,1186,1133,1132,1131,1130,1129,1102,0000,0000,0000,0000,0000,0000,0000,0000},
        {575, 1177,1176,1175,1174,1099,1044,1043,1042,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {576, 1193,1192,1191,1190,1137,1136,1135,1134,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {580, 1023,1020,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {589, 1145,1144,1024,1020,1018,1017,1016,1013,1007,1006,1005,1004,1000,0000,0000,0000,0000,0000},
        {600, 1022,1020,1018,1017,1013,1007,1006,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {603, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000}
};

public OnVehicleMod(playerid, vehicleid, componentid)
{
	new vehicleide = GetVehicleModel(vehicleid),
    	modok = islegalcarmod(vehicleide, componentid);

    if((GetPlayerInterior(playerid) == 0 && PlayerInfo[playerid][pAdmin] < 1) || !modok)
    {
		new name[25],string[128];
		GetPlayerName(playerid,name,sizeof(name));
		format(string, sizeof(string), "(N) %s (%d, level %d) has tunned car %d with component %d.",name,playerid,PlayerInfo[playerid][pLevel],vehicleid,componentid);
        ABroadCast(COLOR_RED,string,1);
    }
    
    if(IsAnOwnableCar(vehicleid))
	{
		foreach(new i : Player)
		{
			for(new v; v < MAX_PERSONAL_VEHICLES; v++)
			{
				if(PlayerInfo[i][pCarID][v] == vehicleid)
					cUpdate(playerid, v, cModsx);
			}
		}
		SaveComponent(vehicleid, componentid);
	}
    return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(IsAnOwnableCar(vehicleid))
	{
		foreach(new i : Player)
		{
			for(new v; v < MAX_PERSONAL_VEHICLES; v++)
			{
				if(PlayerInfo[i][pCarID][v] == vehicleid)
				{
					PlayerInfo[i][pCarPaintJ][v] = paintjobid;
					cUpdate(playerid, v, cPaintJx);
				}
			}
		}
	}
	return 1;
}

stock iswheelmodel(modelid) {

    new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};

    for(new I = 0, b = sizeof(wheelmodels); I != b; ++I) {
        if(modelid == wheelmodels[I])
            return true;

    }

    return false;
}

stock IllegalCarNitroIde(carmodel) {

    new illegalvehs[29] = { 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449 };

    for(new I = 0, b = sizeof(illegalvehs); I != b; ++I) {

        if(carmodel == illegalvehs[I])
            return true;

    }

    return false;
}

// assumes player is in a car - make sure it is.
stock illegal_nos_vehicle(PlayerID) {

    new carid = GetPlayerVehicleID(PlayerID);
    new playercarmodel = GetVehicleModel(carid);

    return IllegalCarNitroIde(playercarmodel);

}

stock islegalcarmod(vehicleide, componentid) {

    new modok = false;

    // stereo, hydraulics & nos (1x 2x 3x) are special.
    if( (iswheelmodel(componentid)) || (componentid == 1086) || (componentid == 1087) || ((componentid >= 1008) && (componentid <= 1010))) {

        new nosblocker = IllegalCarNitroIde(vehicleide);

        if(!nosblocker)
            modok = true;

    } 
    else
    {

        // check if the specified model CAN use this particular mod.
        for(new I = 0, b = sizeof(legalmods); I != b; ++I) {

            if(legalmods[I][0] == vehicleide) { // first is car IDE

                for(new J = 1; J < 22; J++) { // start with 1
                    if(legalmods[I][J] == componentid)
                        modok = true;
                }

            }

        }

    }

    return modok;
}

forward Truckerr1(playerid);
public Truckerr1(playerid)
{
	if(!IsATruck(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not the driver!");
    new string1[MAX_STRING],string2[MAX_STRING],string3[MAX_STRING],string4[MAX_STRING],string5[MAX_STRING],string6[MAX_STRING],allstrings[MAX_STRING];
    new Float: Position[3],
    	Float: Distance[19];
	GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[2][0], CHKTruck[2][1], CHKTruck[2][2]);
	Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[4][0], CHKTruck[4][1], CHKTruck[4][2]);
	Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[11][0], CHKTruck[11][1], CHKTruck[11][2]);
	Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[10][0], CHKTruck[10][1], CHKTruck[10][2]);
	Distance[5] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[7][0], CHKTruck[7][1], CHKTruck[7][2]);
	Distance[6] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[6][0], CHKTruck[6][1], CHKTruck[6][2]);
	Distance[7] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[8][0], CHKTruck[8][1], CHKTruck[8][2]);
	Distance[8] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[9][0], CHKTruck[9][1], CHKTruck[9][2]);
	Distance[9] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[3][0], CHKTruck[3][1], CHKTruck[3][2]);
	Distance[10] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[5][0], CHKTruck[5][1], CHKTruck[5][2]);
	Distance[11] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[12][0], CHKTruck[12][1], CHKTruck[12][2]);
	Distance[12] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[13][0], CHKTruck[13][1], CHKTruck[13][2]);
	Distance[13] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[17][0], CHKTruck[17][1], CHKTruck[17][2]);
	Distance[14] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[15][0], CHKTruck[15][1], CHKTruck[15][2]);
	Distance[15] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[16][0], CHKTruck[16][1], CHKTruck[16][2]);
	Distance[16] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[14][0], CHKTruck[14][1], CHKTruck[14][2]);
 	format(string1,sizeof(string1),"{FFFFFF}LS Pizza Delivery\t%.0fm\t{568203}legal\n{FFFFFF}LS Chop Shop\t%.0fm\t{FF0000}illegal\n{FFFFFF}LV Chuckup\t%.0fm\t{FF0000}illegal",Distance[1],Distance[2],Distance[3]);
 	format(string2,sizeof(string2),"{FFFFFF}LV Pirate Ship\t%.0fm\t{FF0000}illegal\n{FFFFFF}LV Clothing Store\t%.0fm\t{568203}legal\n{FFFFFF}LV Gas Station\t%.0fm\t{FF0000}explosive",Distance[4],Distance[5],Distance[6]);
  	format(string3,sizeof(string3),"{FFFFFF}LV Burger Shot\t%.0fm\t{568203}legal\n{FFFFFF}LV Pool\t%.0fm\t{568203}legal\n{FFFFFF}LS 8 Track\t%.0fm\t{568203}legal",Distance[7],Distance[8],Distance[9]);
  	format(string4,sizeof(string4),"{FFFFFF}LS Crack House\t%.0fm\t{FF0000}illegal\n{FFFFFF}SF Ship\t%.0fm\t{568203}legal\n{FFFFFF}SF Gas Station\t%.0fm\t{FF0000}explosive",Distance[10],Distance[11],Distance[12]);
   	format(string5,sizeof(string5),"{FFFFFF}SF Homies Sharp\t%.0fm\t{568203}legal\n{FFFFFF}SF Supa Save!\t%.0fm\t{FF0000}illegal\n{FFFFFF}SF Restaurant\t%.0fm\t{FF0000}illegal",Distance[13],Distance[14],Distance[15]);
    format(string6,sizeof(string6),"{FFFFFF}SF Pier 69 Pizza Place\t%.0fm\t{568203}legal",Distance[16]);
    format(allstrings,sizeof(allstrings), "Destination\tDistance\tType\n%s\n%s\n%s\n%s\n%s\n%s", string1, string2, string3, string4, string5, string6);
    ShowPlayerDialog(playerid, DIALOG_TRUCKER1, DIALOG_STYLE_TABLIST_HEADERS, "Choose destination", allstrings, "Ok", "Cancel");
    return 1;
}

forward Truckerr2(playerid);
public Truckerr2(playerid)
{
    if(!IsATruck(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not the driver!");
	new string1[MAX_STRING],string2[MAX_STRING],string3[MAX_STRING],string4[MAX_STRING],allstrings[MAX_STRING];
 	new Float: Position[3],
  		Float: Distance[19];
	GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[11][0], CHKTruck[11][1], CHKTruck[11][2]);
	Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[10][0], CHKTruck[10][1], CHKTruck[10][2]);
	Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[7][0], CHKTruck[7][1], CHKTruck[7][2]);
	Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[6][0], CHKTruck[6][1], CHKTruck[6][2]);
	Distance[5] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[8][0], CHKTruck[8][1], CHKTruck[8][2]);
	Distance[6] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[9][0], CHKTruck[9][1], CHKTruck[9][2]);
	Distance[7] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[0][0], CHKTruck[0][1], CHKTruck[0][2]);
	Distance[8] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[12][0], CHKTruck[12][1], CHKTruck[12][2]);
	Distance[9] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[13][0], CHKTruck[13][1], CHKTruck[13][2]);
	Distance[10] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[17][0], CHKTruck[17][1], CHKTruck[17][2]);
	Distance[11] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[15][0], CHKTruck[15][1], CHKTruck[15][2]);
	Distance[12] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[16][0], CHKTruck[16][1], CHKTruck[16][2]);
 	format(string1,sizeof(string1),"{FFFFFF}LV Chuckup\t%.0fm\t{FF0000}illegal\n{FFFFFF}LV Pirate Ship\t%.0fm\t{FF0000}illegal\n{FFFFFF}LV Clothing Store\t%.0fm\t{568203}legal",Distance[1],Distance[2],Distance[3]);
 	format(string2,sizeof(string2),"{FFFFFF}LV Gas Station\t%.0fm\t{FF0000}explosive\n{FFFFFF}LV Burger Shot\t%.0fm\t{568203}legal\n{FFFFFF}LV Pool\t%.0fm\t{568203}legal",Distance[4],Distance[5],Distance[6]);
 	format(string3,sizeof(string3),"{FFFFFF}LS Gas Station\t%.0fm\t{FF0000}explosive\n{FFFFFF}SF Ship\t%.0fm\t{568203}legal\n{FFFFFF}SF Gas Station\t%.0fm\t{FF0000}explosive",Distance[7],Distance[8],Distance[9]);
 	format(string4,sizeof(string4),"{FFFFFF}SF Homies Sharp\t%.0fm\t{568203}legal\n{FFFFFF}SF Supa Save!\t%.0fm\t{FF0000}illegal\n{FFFFFF}SF Restaurant\t%.0fm\t{FF0000}illegal",Distance[10],Distance[11],Distance[12]);
 	format(allstrings,sizeof(allstrings), "Destination\tDistance\tType\n%s\n%s\n%s\n%s", string1, string2, string3, string4);
 	ShowPlayerDialog(playerid, DIALOG_TRUCKER2, DIALOG_STYLE_TABLIST_HEADERS, "Choose destination", allstrings, "Ok", "Cancel");
 	return 1;
}

forward Truckerr3(playerid);
public Truckerr3(playerid)
{
    if(!IsATruck(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not the driver!");
    new string1[MAX_STRING],string2[MAX_STRING],string3[MAX_STRING],string4[MAX_STRING],allstrings[MAX_STRING];
    new Float: Position[3],
		Float: Distance[19];
	GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[2][0], CHKTruck[2][1], CHKTruck[2][2]);
	Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[4][0], CHKTruck[4][1], CHKTruck[4][2]);
	Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[3][0], CHKTruck[3][1], CHKTruck[3][2]);
	Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[5][0], CHKTruck[5][1], CHKTruck[5][2]);
	Distance[5] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[1][0], CHKTruck[1][1], CHKTruck[1][2]);
	Distance[6] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[0][0], CHKTruck[0][1], CHKTruck[0][2]);
	Distance[7] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[12][0], CHKTruck[12][1], CHKTruck[12][2]);
	Distance[8] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[13][0], CHKTruck[13][1], CHKTruck[13][2]);
	Distance[9] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[17][0], CHKTruck[17][1], CHKTruck[17][2]);
	Distance[10] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[15][0], CHKTruck[15][1], CHKTruck[15][2]);
	Distance[11] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[16][0], CHKTruck[16][1], CHKTruck[16][2]);
	Distance[12] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[14][0], CHKTruck[14][1], CHKTruck[14][2]);
 	format(string1,sizeof(string1),"{FFFFFF}LS Pizza Delivery\t%.0fm\t{568203}legal\n{FFFFFF}LS Chop Shop\t%.0fm\t{FF0000}illegal\n{FFFFFF}LS 8 Track\t%.0fm\t{568203}legal",Distance[1],Distance[2],Distance[3]);
 	format(string2,sizeof(string2),"{FFFFFF}LS Crack House\t%.0fm\t{FF0000}illegal\n{FFFFFF}LS 24/7 Store\t%.0fm\t{568203}legal\n{FFFFFF}LS Gas Station\t%.0fm\t{FF0000}explosive",Distance[4],Distance[5],Distance[6]);
 	format(string3,sizeof(string3),"{FFFFFF}SF Ship\t%.0fm\t{568203}legal\n{FFFFFF}SF Gas Station\t%.0fm\t{FF0000}explosive\n{FFFFFF}SF Homies Sharp\t%.0fm\t{568203}legal",Distance[7],Distance[8],Distance[9]);
 	format(string4,sizeof(string4),"{FFFFFF}SF Supa Save!\t%.0fm\t{FF0000}illegal\n{FFFFFF}SF Restaurant\t%.0fm\t{FF0000}illegal\n{FFFFFF}SF Pier 69 Pizza Place\t%.0fm\t{568203}legal",Distance[10],Distance[11],Distance[12]);
    format(allstrings,sizeof(allstrings), "Destination\tDistance\tType\n%s\n%s\n%s\n%s", string1, string2, string3, string4);
    ShowPlayerDialog(playerid, DIALOG_TRUCKER3, DIALOG_STYLE_TABLIST_HEADERS, "Choose destination", allstrings, "Ok", "Cancel");
	return 1;
}

forward Truckerr4(playerid);
public Truckerr4(playerid)
{
    if(!IsATruck(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not the driver!");
    new string1[MAX_STRING],string2[MAX_STRING],string3[MAX_STRING],string4[MAX_STRING],allstrings[MAX_STRING];
    new Float: Position[3],
    	Float: Distance[19];
	GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[2][0], CHKTruck[2][1], CHKTruck[2][2]);
	Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[4][0], CHKTruck[4][1], CHKTruck[4][2]);
	Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[11][0], CHKTruck[11][1], CHKTruck[11][2]);
	Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[10][0], CHKTruck[10][1], CHKTruck[10][2]);
	Distance[5] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[7][0], CHKTruck[7][1], CHKTruck[7][2]);
	Distance[6] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[6][0], CHKTruck[6][1], CHKTruck[6][2]);
	Distance[7] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[8][0], CHKTruck[8][1], CHKTruck[8][2]);
	Distance[8] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[9][0], CHKTruck[9][1], CHKTruck[9][2]);
	Distance[9] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[3][0], CHKTruck[3][1], CHKTruck[3][2]);
	Distance[10] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[5][0], CHKTruck[5][1], CHKTruck[5][2]);
	Distance[11] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[1][0], CHKTruck[1][1], CHKTruck[1][2]);
	Distance[12] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], CHKTruck[0][0], CHKTruck[0][1], CHKTruck[0][2]);
	format(string1,sizeof(string1),"{FFFFFF}LS Pizza Delivery\t%.0fm\t{568203}legal\n{FFFFFF}LS Chop Shop\t%.0fm\t{FF0000}illegal\n{FFFFFF}LV Chuckup\t%.0fm\t{FF0000}illegal",Distance[1],Distance[2],Distance[3]);
	format(string2,sizeof(string2),"{FFFFFF}LV Pirate Ship\t%.0fm\t{FF0000}illegal\n{FFFFFF}LV Clothing Store\t%.0fm\t{568203}legal\n{FFFFFF}LV Gas Station\t%.0fm\t{FF0000}explosive",Distance[4],Distance[5],Distance[6]);
	format(string3,sizeof(string3),"{FFFFFF}LV Burger Shot\t%.0fm\t{568203}legal\n{FFFFFF}LV Pool\t%.0fm\t{568203}legal\n{FFFFFF}LS 8 Track\t%.0fm\t{568203}legal",Distance[7],Distance[8],Distance[9]);
	format(string4,sizeof(string4),"{FFFFFF}LS Crack House\t%.0fm\t{FF0000}illegal\n{FFFFFF}LS 24/7 Store\t%.0fm\t{568203}legal\n{FFFFFF}LS Gas Station\t%.0fm\t{FF0000}explosive",Distance[10],Distance[11],Distance[12]);
	format(allstrings,sizeof(allstrings), "Destination\tDistance\tType\n%s\n%s\n%s\n%s", string1, string2, string3, string4);
	ShowPlayerDialog(playerid, DIALOG_TRUCKER4, DIALOG_STYLE_TABLIST_HEADERS, "Choose destination", allstrings, "Ok", "Cancel");
	return 1;
}

forward AfterSpray(playerid);
public AfterSpray(playerid)
{
	new carid = GetPlayerVehicleID(playerid),
		Float:health,
		string[MAX_STRING];
    if(IsPlayerInRangeOfPoint(playerid,15.0,1025.0671,-1023.7895,32.1016))
	{
	    GetVehicleHealth(carid, health);
	    if(health == 1000.0)
	    {
			Cash[playerid] -= BizzInfo[36][bEntranceCost];
			Update(playerid, pCashx);
			BizzInfo[36][bTill] += BizzInfo[36][bEntranceCost];
			new str[128];
			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='36'",BizzInfo[36][bTill]);
			mysql_tquery(SQL,str,"","");
			format(string,sizeof(string),"~r~-%d$", BizzInfo[36][bEntranceCost]);
   			GameTextForPlayer(playerid, string, 5000, 1);
			return 1;
		}
	}
	if(IsPlayerInRangeOfPoint(playerid,15.0,719.9537,-457.2771,16.3359))
	{
	    GetVehicleHealth(carid, health);
	    if(health == 1000.0)
	    {
			new str[128];
			Cash[playerid] -= BizzInfo[34][bEntranceCost];
			Update(playerid, pCashx);
			BizzInfo[34][bTill] += BizzInfo[34][bEntranceCost];
			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='34'",BizzInfo[34][bTill]);
			mysql_tquery(SQL,str,"","");
			format(string,sizeof(string),"~r~-%d$", BizzInfo[34][bEntranceCost]);
   			GameTextForPlayer(playerid, string, 5000, 1);
			return 1;
		}
	}
	if(IsPlayerInRangeOfPoint(playerid,15.0,487.4134,-1740.1738,11.1370))
	{
	    GetVehicleHealth(carid, health);
	    if(health == 1000.0)
	    {
			Cash[playerid] -= BizzInfo[37][bEntranceCost];
			Update(playerid, pCashx);
			BizzInfo[37][bTill] += BizzInfo[37][bEntranceCost];
			new str[128];
			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='37'",BizzInfo[37][bTill]);
			mysql_tquery(SQL,str,"","");
			format(string,sizeof(string),"~r~-%d$", BizzInfo[37][bEntranceCost]);
   			GameTextForPlayer(playerid, string, 5000, 1);
			return 1;
		}
	}
	if(IsPlayerInRangeOfPoint(playerid,15.0,2065.5911,-1831.4495,13.5469))
	{
	    GetVehicleHealth(carid, health);
	    if(health == 1000.0)
	    {
			new str[128];
			Cash[playerid] -= BizzInfo[35][bEntranceCost];
			Update(playerid, pCashx);
			BizzInfo[35][bTill] += BizzInfo[35][bEntranceCost];
			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='35'",BizzInfo[35][bTill]);
			mysql_tquery(SQL,str,"","");
			format(string,sizeof(string),"~r~-%d$", BizzInfo[35][bEntranceCost]);
   			GameTextForPlayer(playerid, string, 5000, 1);
			return 1;
		}
	}
	if(IsPlayerInRangeOfPoint(playerid,15.0,1974.3198,2162.7249,11.0703))
	{
	    GetVehicleHealth(carid, health);
	    if(health == 1000.0)
	    {
   			Cash[playerid] -= BizzInfo[40][bEntranceCost];
			Update(playerid, pCashx);
			BizzInfo[40][bTill] += BizzInfo[40][bEntranceCost];
			new str[128];
			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='40'",BizzInfo[40][bTill]);
			mysql_tquery(SQL,str,"","");
			format(string,sizeof(string),"~r~-%d$", BizzInfo[40][bEntranceCost]);
   			GameTextForPlayer(playerid, string, 5000, 1);
			return 1;
		}
	}
	if(IsPlayerInRangeOfPoint(playerid,15.0,-100.1086,1117.3312,19.7417))
	{
	    GetVehicleHealth(carid, health);
	    if(health == 1000.0)
	    {
			Cash[playerid] -= BizzInfo[41][bEntranceCost];
			Update(playerid, pCashx);
			BizzInfo[41][bTill] += BizzInfo[41][bEntranceCost];
			new str[128];
			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='41'",BizzInfo[41][bTill]);
			mysql_tquery(SQL,str,"","");
			format(string,sizeof(string),"~r~-%d$", BizzInfo[41][bEntranceCost]);
   			GameTextForPlayer(playerid, string, 5000, 1);
			return 1;
		}
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{
    SetPlayerHealthEx(playerid, 100);
    SetPlayerArmourEx(playerid, 0);
	TextDrawShowForPlayer(playerid, Time);
	TextDrawShowForPlayer(playerid, Date);
    SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
    if(PlayerInfo[playerid][pJobVehicle] != 0) CancelJob(playerid);
    if(BeeCar[playerid] != 0) BeeCancel(playerid);
	if(InMinerJob[playerid] != 0) MinerCancel(playerid);
	if(InStrawberryJob[playerid] != 0) StrawberryCancel(playerid);
    if(PlayerInfo[playerid][pPet] != 0 && PlayerInfo[playerid][pPetStatus] != 0) AttachPet(playerid);
    if(PlayerInfo[playerid][pWantedLevel] >= 1)
    {
        new str1[256];
        PlayerTextDrawShow(playerid, WantedText[playerid]);
        if(PlayerInfo[playerid][pLanguage] == 2) format(str1,sizeof(str1),"WANTED SCADE IN: ~r~%d MINUTE",wantedlost[playerid]/60+1);
		else format(str1,sizeof(str1),"WANTED DECREASES IN: ~r~%d MINUTES",wantedlost[playerid]/60+1);
		PlayerTextDrawSetString(playerid, WantedText[playerid], str1);
	}
    SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	tazer[playerid] = 0;
    if(OnDuty[playerid] > 0)
	{
		if(PlayerInfo[playerid][pGunLic] == 0 && IsACop(playerid))
		{
			OnDuty[playerid] = 0;
			SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} You are now off duty because you don't have gun licence.");
			return 1;
		}
		if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
		{
			GivePlayerWeaponEx(playerid, 24, 500);
			GivePlayerWeaponEx(playerid, 3, 1);
			GivePlayerWeaponEx(playerid, 41, 500);
			GivePlayerWeaponEx(playerid, 29, 1000);
			GivePlayerWeaponEx(playerid, 31, 1000);
			SetPlayerArmourEx(playerid, 100);
			SetPlayerHealthEx(playerid, 100);
		}
		if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
 		{
			GivePlayerWeaponEx(playerid, 24, 500);
			GivePlayerWeaponEx(playerid, 3, 1);
			GivePlayerWeaponEx(playerid, 41, 500);
			GivePlayerWeaponEx(playerid, 29, 1000);
			GivePlayerWeaponEx(playerid, 31, 1000);
			SetPlayerArmourEx(playerid, 100);
			SetPlayerHealthEx(playerid, 100);
		}
		if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
 		{
			GivePlayerWeaponEx(playerid, 24, 500);
			GivePlayerWeaponEx(playerid, 41, 500);
			GivePlayerWeaponEx(playerid, 29, 1000);
			GivePlayerWeaponEx(playerid, 31, 1000);
			SetPlayerArmourEx(playerid, 100);
			SetPlayerHealthEx(playerid, 100);
		}
		if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
 		{
			GivePlayerWeaponEx(playerid, 24, 500);
			GivePlayerWeaponEx(playerid, 3, 1);
			GivePlayerWeaponEx(playerid, 41, 500);
			GivePlayerWeaponEx(playerid, 29, 1000);
			GivePlayerWeaponEx(playerid, 31, 1000);
			SetPlayerArmourEx(playerid, 100);
			SetPlayerHealthEx(playerid, 100);
		}
	}
	if(!gPlayerAnimLibsPreloaded[playerid])
	{
   		PreloadAnimLib(playerid,"BOMBER");
   		PreloadAnimLib(playerid,"RAPPING");
    	PreloadAnimLib(playerid,"SHOP");
   		PreloadAnimLib(playerid,"BEACH");
   		PreloadAnimLib(playerid,"SMOKING");
    	PreloadAnimLib(playerid,"FOOD");
    	PreloadAnimLib(playerid,"ON_LOOKERS");
    	PreloadAnimLib(playerid,"DEALER");
    	PreloadAnimLib(playerid,"MISC");
    	PreloadAnimLib(playerid,"SWEET");
    	PreloadAnimLib(playerid,"RIOT");
    	PreloadAnimLib(playerid,"PED");
    	PreloadAnimLib(playerid,"POLICE");
		PreloadAnimLib(playerid,"CRACK");
		PreloadAnimLib(playerid,"CARRY");
		PreloadAnimLib(playerid,"COP_AMBIENT");
		PreloadAnimLib(playerid,"PARK");
		PreloadAnimLib(playerid,"INT_HOUSE");
		PreloadAnimLib(playerid,"FOOD");
		gPlayerAnimLibsPreloaded[playerid] = 1;
	}
	gTeam[playerid] = PlayerInfo[playerid][pTeam];
	if(gTeam[playerid] == 4)
	{
		gTeam[playerid] = 4;
	}
	if(IsACop(playerid)){
		gTeam[playerid] = 2;
		PlayerInfo[playerid][pTeam] = 2;
	}
	if(gPlayerLogged[playerid] == 0)
	{
    	SendClientMessage(playerid, COLOR_RED2, "You need to log in first.");
    	KickEx(playerid);
		return 1;
 	}
 	ChosenSkin[playerid] = 1;
	SetPlayerSpawn(playerid);
	SetPlayerToTeamColor(playerid);
	playerdeath[playerid] = 0;
	Undercover[playerid] = 0;
	SetPlayerTeam(playerid,4);
	StopAudioStreamForPlayer(playerid);
	check_save(playerid);
	attach_objects(playerid);
	return 1;
}

// LOGS
forward Adminlog(playerid, string[], where[]);
public Adminlog(playerid, string[], where[])
{
	new query[300], escape[256];
	mysql_real_escape_string(string, escape);
	mysql_format(SQL,query,sizeof(query),"INSERT INTO log_admin (`playerid`,`log`,`where`,`time`) VALUES ('%d','%s','%s','%d')", playerid, escape, where, gettime());
	mysql_tquery(SQL,query,"","");
	return 1;
}

forward Log(playerid, string[], where[]);
public Log(playerid, string[], where[])
{
	new query[300], escape[256];
	mysql_real_escape_string(string, escape);
	mysql_format(SQL,query,sizeof(query),"INSERT INTO logs (`playerid`,`log`,`where`,`time`) VALUES ('%d','%s','%s','%d')", playerid, escape, where, gettime());
	mysql_tquery(SQL,query,"","");
	return 1;
}

forward Factionlog(factionid,psql,lsql,action[]);
public Factionlog(factionid,psql,lsql,action[])
{
	new query[300],escape[256];
	mysql_real_escape_string(action, escape);
	mysql_format(SQL,query,sizeof(query),"INSERT INTO factionlog (`factionid`,`player`,`leader`,`action`) VALUES ('%d','%d','%d','%s')",factionid,psql,lsql,escape);
	mysql_tquery(SQL,query,"","");
	return 1;
}

// OnPlayerEnterRaceCheckpoint
public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(!PlayerToPoint(50, playerid, LastPos[playerid][0], LastPos[playerid][1], LastPos[playerid][2]) && CP[playerid] != 43 && PlayerInfo[playerid][pRaceG] == -1)
	{
		if(PlayerInfo[playerid][pJobVehicle] == 0 && CarJacker[playerid] == 0 && InMinerJob[playerid] == 0 && InStrawberryJob[playerid] == 0 && BeeCar[playerid] == 0) return 1;
		else return NightBot(playerid, "Cheats (teleport-hack) #3");
	}
	new ccar = IsPlayerInAnyVehicle(playerid);
    new tmpcar = GetPlayerVehicleID(playerid);
 	if(pizzaj[playerid] == 1 && PizzaCP[playerid] == 1)
	{
		new string[128];
		DisablePlayerRaceCheckpoint(playerid);
		PizzaCP[playerid] = 0;
		pizzaj[playerid] = 0;
		format(string,sizeof(string),"(Job){FFFFFF} Pizza delivred! You won %s$.",FormatNumber(pizzaprize[playerid]));
		SendClientMessage(playerid,COLOR_JOB,string);
		if(PlayerInfo[playerid][pPet] != 0) pizzaprize[playerid]+=PlayerInfo[playerid][pPetLevel]*100;
		GivePlayerCash(playerid,pizzaprize[playerid]);
		if(PlayerInfo[playerid][pClan]!=0) {
	    	new safestring[128];
			ClanInfo[PlayerInfo[playerid][pClan]][cClanSeif]+=pizzaprize[playerid]/10;
			ClanUpdate(PlayerInfo[playerid][pClan], ClanSafex);
			PlayerInfo[playerid][pClanDep]+=pizzaprize[playerid]/10;
			Update(playerid, pClanDepx);
			format(safestring,sizeof(safestring), "(Job){FFFFFF} After your work %s$ was added in {%s}clan safe{FFFFFF}.",FormatNumber(pizzaprize[playerid]/10),ClanInfo[PlayerInfo[playerid][pClan]][cClanColor]);
			SendClientMessage(playerid,COLOR_JOB,safestring);
		}
		pizzaprize[playerid] = 0;
		PlayerInfo[playerid][pPizzaRem]--;
		PlayerInfo[playerid][pPizzaTimes]++;
		Update(playerid,pPizzaRemx);
		Update(playerid,pPizzaTimesx);
		if(PlayerInfo[playerid][pQuest2] == 1)
		{
			if(PlayerInfo[playerid][pQuestNeed2] > PlayerInfo[playerid][pQuestProgress2])
			{
				PlayerInfo[playerid][pQuestProgress2]++;
				Update(playerid, pQuestProgress2x);
				if(PlayerInfo[playerid][pQuestProgress2] >= PlayerInfo[playerid][pQuestNeed2])
				{
					FinishQuest2(playerid, 1);
				}
				else
				{
					new str[128];
					if(PlayerInfo[playerid][pLanguage] == 1)
					{
						format(str, sizeof(str),"Quest [Deliver %d pizza] progress: %d/%d",PlayerInfo[playerid][pQuestNeed2],PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
						SendClientMessage(playerid, COLOR_YELLOW, str);
					}
					else
					{
						format(str, sizeof(str),"Progres pentru misiunea [Livreaza %d pizza]: %d/%d",PlayerInfo[playerid][pQuestNeed2],PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
						SendClientMessage(playerid, COLOR_YELLOW, str);
					}
				}
			}
		}
		if(PlayerInfo[playerid][pPizzaSkill] <= 5)
		{
			if(PlayerInfo[playerid][pPizzaRem] <= 0)
			{
			    PlayerInfo[playerid][pPizzaSkill]++;
   				if(PlayerInfo[playerid][pPizzaSkill] == 2)
				{
					PlayerInfo[playerid][pPizzaRem] = 34;
				}
				else if(PlayerInfo[playerid][pPizzaSkill] == 3)
				{
					PlayerInfo[playerid][pPizzaRem] = 49;
				}
				else if(PlayerInfo[playerid][pPizzaSkill] == 4)
				{
					PlayerInfo[playerid][pPizzaRem] = 89;
				}
				else if(PlayerInfo[playerid][pPizzaSkill] == 5)
				{
					PlayerInfo[playerid][pPizzaRem] = 99;
				}
		    	Update(playerid,pPizzaSkillx);
		    	Update(playerid,pPizzaRemx);
				new stringe[128];
			    format(string,sizeof(string),"Felicitari! Ai acum skill %d pentru acest job!",PlayerInfo[playerid][pPizzaSkill]);
				format(stringe,sizeof(stringe),"Congratulations! Now you have skill %d for this job!",PlayerInfo[playerid][pPizzaSkill]);
			    SS(playerid, COLOR_YELLOW, string, stringe);
			}
		}
		packageson[playerid]--;
		if(packageson[playerid] != 0) GivePizzaCp(playerid);
		else {
			DisablePlayerRaceCheckpoint(playerid);
			PlayerTextDrawHide(playerid,Packages[playerid]);
			SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} Go to the checkpoint to get more pizza boxes.");
			PizzaCP[playerid] = 2;
			SetPlayerRaceCheckpoint(playerid,1,2114.5991,-1773.2551,13.4076,0.0,0.0,0.0,5.0);
		}
	}
	if(StrawCP[playerid] == 1)
	{
		SetTimerEx("StrawCollect",3000, false, "i", playerid);
		DisablePlayerRaceCheckpoint(playerid);
		TogglePlayerControllable(playerid, 0);
		ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,1,0,0,1,0,1);
	}
	if(StrawCP[playerid] == 2 && PlayerToPoint(3.0,playerid, -78.0348,90.0071,3.1172))
	{
		if(PlayerInfo[playerid][pQuest1] == 8)
		{
			if(PlayerInfo[playerid][pQuestNeed1] > PlayerInfo[playerid][pQuestProgress1])
			{
				PlayerInfo[playerid][pQuestProgress1]+=packageson[playerid];
				Update(playerid, pQuestProgress1x);
				if(PlayerInfo[playerid][pQuestProgress1] >= PlayerInfo[playerid][pQuestNeed1])
				{
					FinishQuest1(playerid, 8);
				}
				else
				{
					new str[128];
					if(PlayerInfo[playerid][pLanguage] == 1)
					{
						format(str, sizeof(str),"Quest [Collect %d strawberrys] progress: %d/%d",PlayerInfo[playerid][pQuestNeed1],PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
						SendClientMessage(playerid, COLOR_YELLOW, str);
					}
					else
					{
						format(str, sizeof(str),"Progres pentru misiunea [Colecteaza %d capsuni]: %d/%d",PlayerInfo[playerid][pQuestNeed1],PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
						SendClientMessage(playerid, COLOR_YELLOW, str);
					}
				}
			}
		}
		new string[128];
		packageson[playerid] = packageson[playerid]*1000 + SvarInfo[19][svValue];
		if(PlayerInfo[playerid][pPet] != 0) packageson[playerid]+=PlayerInfo[playerid][pPetLevel]*10;
		GivePlayerCash(playerid,packageson[playerid]);
		format(string,sizeof(string),"(Job){FFFFFF} You received $%s for collected strowberrys.",FormatNumber(packageson[playerid]));
		SendClientMessage(playerid, COLOR_JOB, string);
		if(PlayerInfo[playerid][pClan]!=0) {
	    	new safestring[128];
			ClanInfo[PlayerInfo[playerid][pClan]][cClanSeif]+=packageson[playerid]/10;
			ClanUpdate(PlayerInfo[playerid][pClan], ClanSafex);
			PlayerInfo[playerid][pClanDep]+=packageson[playerid]/10;
			Update(playerid, pClanDepx);
			format(safestring,sizeof(safestring), "(Job){FFFFFF} After your work %s$ was added in {%s}clan safe{FFFFFF}.",FormatNumber(packageson[playerid]/10),ClanInfo[PlayerInfo[playerid][pClan]][cClanColor]);
			SendClientMessage(playerid,COLOR_JOB,safestring);
		}
		BizzInfo[61][bTill] += packageson[playerid]/100;
		new str2[128];
		mysql_format(SQL, str2, sizeof(str2), "UPDATE `bizz` SET `Till`='%d' WHERE `Type`='19'", BizzInfo[61][bTill]);
		mysql_tquery(SQL, str2, "", "");
		PlayerInfo[playerid][pStrawRem]--;
		PlayerInfo[playerid][pStrawTimes]++;
		Update(playerid,pStrawRemx);
		Update(playerid,pStrawTimesx);
		if(PlayerInfo[playerid][pStrawSkill] <= 5)
		{
			if(PlayerInfo[playerid][pStrawRem] <= 0)
			{
			    PlayerInfo[playerid][pStrawSkill]++;
   				if(PlayerInfo[playerid][pStrawSkill] == 2)
				{
					PlayerInfo[playerid][pStrawRem] = 34;
				}
				else if(PlayerInfo[playerid][pStrawSkill] == 3)
				{
					PlayerInfo[playerid][pStrawRem] = 49;
				}
				else if(PlayerInfo[playerid][pStrawSkill] == 4)
				{
					PlayerInfo[playerid][pStrawRem] = 89;
				}
				else if(PlayerInfo[playerid][pStrawSkill] == 5)
				{
					PlayerInfo[playerid][pStrawRem] = 99;
				}
		    	Update(playerid,pStrawSkillx);
		    	Update(playerid,pStrawRemx);
				new stringe[128];
			    format(string,sizeof(string),"Felicitari! Ai acum skill %d pentru acest job!",PlayerInfo[playerid][pStrawSkill]);
				format(stringe,sizeof(stringe),"Congratulations! Now you have skill %d for this job!",PlayerInfo[playerid][pStrawSkill]);
			    SS(playerid, COLOR_YELLOW, string, stringe);
			}
		}
		StrawCP[playerid] = 1;
		packageson[playerid] = 0;
		StrawberryStart(playerid);
	}
	if(PizzaCP[playerid] == 2 && PlayerToPoint(5.0,playerid, 2114.5991,-1773.2551,13.4076))
	{
		new string[128];
		format(string, sizeof(string), "(Job){FFFFFF} %d pizza boxes was added in your scooter.",5*PlayerInfo[playerid][pPizzaSkill]);
		SendClientMessage(playerid, COLOR_JOB, string);
		PizzaCP[playerid] = 1;
		packageson[playerid] = 5*PlayerInfo[playerid][pPizzaSkill];
		GivePizzaCp(playerid);
	}
	if(AirCP[playerid] == 2 && PlayerToPoint(10.0,playerid, -1240.3885,-112.3491,44.1484))
	{
		new string[128];
		format(string, sizeof(string), "(Job){FFFFFF} %d  packages was added in plane.",5*PlayerInfo[playerid][pAirSkill]);
		SendClientMessage(playerid, COLOR_JOB, string);
		AirCP[playerid] = 1;
		packageson[playerid] = 5*PlayerInfo[playerid][pAirSkill];
		GiveAirCp(playerid);
	}
	if(airj[playerid] == 1 && AirCP[playerid] == 1 && !PlayerToPoint(10.0,playerid, -1240.3885,-112.3491,44.1484))
	{
		SetTimerEx("AirDrop",3000, false, "i", playerid);
		DisablePlayerRaceCheckpoint(playerid);
		new string[128];
		format(string,sizeof(string),"(Job){FFFFFF} Package was dropped, wait for results!");
		SendClientMessage(playerid,COLOR_JOB,string);
		packageson[playerid]--;
		format(string, sizeof(string), "Packages in plane: %d packages", packageson[playerid]);
		PlayerTextDrawSetString(playerid, Packages[playerid], string);
		PlayerTextDrawShow(playerid, Packages[playerid]);
	}
	if(RaceCP[playerid] != 0)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			if(PlayerInfo[playerid][pRaceG] == 0)
			{
				if(racem == 1)
				{
					if(RaceCP[playerid] == 1)
					{
						new count;
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && playerid != x)
							{
								if(RaceCP[x] == 1) count++;
							}
						}
						RacePos[playerid] = racep - count;
					}
					else
					{
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && playerid != x)
							{
								if(RaceCP[playerid] >= RaceCP[x] && RacePos[playerid] > RacePos[x])
								{
									new pos = RacePos[playerid];
									RacePos[playerid] = RacePos[x];
									RacePos[x] = pos;
								}
							}
						}
					}
					if(RaceCP[playerid] < 24)
					{
						new iddd = RaceCP[playerid] + 1, idd = RaceCP[playerid];
						if(RaceCP[playerid] == 23)
						{
							SetPlayerRaceCheckpoint(playerid, 1, RaceCCPos1[idd][0], RaceCCPos1[idd][1], RaceCCPos1[idd][2], 0.0, 0.0, 0.0, 10.0);
						}
						else
						{
							SetPlayerRaceCheckpoint(playerid, 0, RaceCCPos1[idd][0], RaceCCPos1[idd][1], RaceCCPos1[idd][2], RaceCCPos1[iddd][0], RaceCCPos1[iddd][1], RaceCCPos1[iddd][2], 10.0);
						}
						PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					}
					else if(RaceCP[playerid] == 24)
					{
						new string[128],namee[30],sum;
						GetPlayerName(playerid, namee, sizeof(namee));
						if(RacePos[playerid] == 1)
						{
							sum = 100000;
							format(string, sizeof(string),"(Race){FFFFFF} %s finished race %dst and received $%s.",namee,RacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
							PlayerInfo[playerid][pRaceWon]++;
							PlayerInfo[playerid][pRaceExp]+=15;
							Update(playerid, pRaceWonx);
						}
						if(RacePos[playerid] == 2)
						{
							sum = 50000;
							format(string, sizeof(string),"(Race){FFFFFF} %s finished race %dnd and received $%s.",namee,RacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
							PlayerInfo[playerid][pRaceExp]+=10;
						}
						if(RacePos[playerid] == 3)
						{
							sum = 25000;
							format(string, sizeof(string),"(Race){FFFFFF} %s finished race %drd and received $%s.",namee,RacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
							PlayerInfo[playerid][pRaceExp]+=5;
						}
						if(RacePos[playerid] > 3) format(string, sizeof(string),"(Race){FFFFFF} %s finished race %dth.",namee,RacePos[playerid]);
						PlayerInfo[playerid][pRaceExp]+=2;
						Update(playerid, pRaceExpx);
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG]) SendClientMessage(x, COLOR_ARENA, string);
						}
						PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
						if(RacePos[playerid] == 1) format(string, sizeof(string),"~r~You finished race:~n~~g~%dst",RacePos[playerid]);
						if(RacePos[playerid] == 2) format(string, sizeof(string),"~r~You finished race:~n~~g~%dnd",RacePos[playerid]);
						if(RacePos[playerid] == 3) format(string, sizeof(string),"~r~You finished race:~n~~g~%drd",RacePos[playerid]);
						if(RacePos[playerid] > 3) format(string, sizeof(string),"~r~You finished race:~n~~g~%dth",RacePos[playerid]);
						GameTextForPlayer(playerid, string, 5000, 4);
						SetPlayerHealthEx(playerid, 100.0);
						curatj[playerid] = 0;
						for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
						PlayerTextDrawHide(playerid, PaintBallText[playerid]);
						racep--;
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid,0);
						SetPlayerPos(playerid, 1102.4310,-1458.1349,15.7969);
						RaceCP[playerid] = 0;
						DisablePlayerRaceCheckpoint(playerid);
						DisableRemoteVehicleCollisions(playerid, 0);
						StopAudioStreamForPlayer(playerid);
						PlayerInfo[playerid][pRaceG] = -1;
						curatj[playerid] = 0;
						PlayerTextDrawHide(playerid, RaceTD[playerid][0]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][1]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][2]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][3]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][4]);
						for(new cs; cs < 20; cs++)
						{
							if(rcarid[cs] == GetPlayerVehicleID(playerid))
							{
								DestroyVehicle(rcarid[cs]);
								rcarid[cs] = 0;
							}
						}
					}
					if(PlayerInfo[playerid][pRaceG] != -1) RaceCP[playerid]++;
				}
				if(racem == 2)
				{
					if(RaceCP[playerid] == 1)
					{
						new count;
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && playerid != x)
							{
								if(RaceCP[x] == 1) count++;
							}
						}
						RacePos[playerid] = racep - count;
					}
					else
					{
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && playerid != x)
							{
								if(RaceCP[playerid] >= RaceCP[x] && RacePos[playerid] > RacePos[x])
								{
									new pos = RacePos[playerid];
									RacePos[playerid] = RacePos[x];
									RacePos[x] = pos;
								}
							}
						}
					}
					if(RaceCP[playerid] < 22)
					{
						new iddd = RaceCP[playerid] + 1, idd = RaceCP[playerid];
						if(RaceCP[playerid] == 21) SetPlayerRaceCheckpoint(playerid, 1, RaceCCPos2[idd][0], RaceCCPos2[idd][1], RaceCCPos2[idd][2], 0.0, 0.0, 0.0, 10.0);
						else SetPlayerRaceCheckpoint(playerid, 0, RaceCCPos2[idd][0], RaceCCPos2[idd][1], RaceCCPos2[idd][2], RaceCCPos2[iddd][0], RaceCCPos2[iddd][1], RaceCCPos2[iddd][2], 10.0);
						PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					}
					else if(RaceCP[playerid] == 22)
					{
						new string[128],namee[30],sum;
						GetPlayerName(playerid, namee, sizeof(namee));
						if(RacePos[playerid] == 1)
						{
							sum = 100000;
							format(string, sizeof(string),"(Race){FFFFFF} %s finished race %dst and received $%s.",namee,RacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
						}
						if(RacePos[playerid] == 2)
						{
							sum = 50000;
							format(string, sizeof(string),"(Race){FFFFFF} %s finished race %dnd and received $%s.",namee,RacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
						}
						if(RacePos[playerid] == 3)
						{
							sum = 25000;
							format(string, sizeof(string),"(Race){FFFFFF} %s finished race %drd and received $%s.",namee,RacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
						}
						if(RacePos[playerid] > 3) format(string, sizeof(string),"(Race){FFFFFF} %s finished race %dth.",namee,RacePos[playerid]);
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG]) SendClientMessage(x, COLOR_ARENA, string);
						}
						PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
						if(RacePos[playerid] == 1) format(string, sizeof(string),"~r~You finished race:~n~~g~%dst",RacePos[playerid]);
						if(RacePos[playerid] == 2) format(string, sizeof(string),"~r~You finished race:~n~~g~%dnd",RacePos[playerid]);
						if(RacePos[playerid] == 3) format(string, sizeof(string),"~r~You finished race:~n~~g~%drd",RacePos[playerid]);
						if(RacePos[playerid] > 3) format(string, sizeof(string),"~r~You finished race:~n~~g~%dth",RacePos[playerid]);
						GameTextForPlayer(playerid, string, 5000, 4);
						SetPlayerHealthEx(playerid, 100.0);
						curatj[playerid] = 0;
						for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
						PlayerTextDrawHide(playerid, PaintBallText[playerid]);
						racep--;
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid,0);
						SetPlayerPos(playerid, 1102.7285,-1458.2931,15.7969);
						RaceCP[playerid] = 0;
						DisablePlayerRaceCheckpoint(playerid);
						DisableRemoteVehicleCollisions(playerid, 0);
						StopAudioStreamForPlayer(playerid);
						PlayerInfo[playerid][pRaceG] = -1;
						curatj[playerid] = 0;
						PlayerTextDrawHide(playerid, RaceTD[playerid][0]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][1]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][2]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][3]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][4]);
						for(new cs; cs < 20; cs++)
						{
							if(rcarid[cs] == GetPlayerVehicleID(playerid))
							{
								DestroyVehicle(rcarid[cs]);
								rcarid[cs] = 0;
							}
						}
					}
					if(PlayerInfo[playerid][pRaceG] != -1) RaceCP[playerid]++;
				}
				if(racem == 3)
				{
					if(RaceCP[playerid] == 1)
					{
						new count;
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && playerid != x)
							{
								if(RaceCP[x] == 1) count++;
							}
						}
						RacePos[playerid] = racep - count;
					}
					else
					{
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && playerid != x)
							{
								if(RaceCP[playerid] >= RaceCP[x] && RacePos[playerid] > RacePos[x])
								{
									new pos = RacePos[playerid];
									RacePos[playerid] = RacePos[x];
									RacePos[x] = pos;
								}
							}
						}
					}
					if(RaceCP[playerid] < 24)
					{
						new iddd = RaceCP[playerid] + 1, idd = RaceCP[playerid];
						if(RaceCP[playerid] == 23)
						{
							SetPlayerRaceCheckpoint(playerid, 1, RaceCCPos3[idd][0], RaceCCPos3[idd][1], RaceCCPos3[idd][2], 0.0, 0.0, 0.0, 10.0);
						}
						else
						{
							SetPlayerRaceCheckpoint(playerid, 0, RaceCCPos3[idd][0], RaceCCPos3[idd][1], RaceCCPos3[idd][2], RaceCCPos3[iddd][0], RaceCCPos3[iddd][1], RaceCCPos3[iddd][2], 10.0);
						}
						PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
					}
					else if(RaceCP[playerid] == 24)
					{
						new string[128],namee[30],sum;
						GetPlayerName(playerid, namee, sizeof(namee));
						if(RacePos[playerid] == 1)
						{
							sum = 100000;
							format(string, sizeof(string),"(Race){FFFFFF} %s finished race %dst and received $%s.",namee,RacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
						}
						if(RacePos[playerid] == 2)
						{
							sum = 50000;
							format(string, sizeof(string),"(Race){FFFFFF} %s finished race %dnd and received $%s.",namee,RacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
						}
						if(RacePos[playerid] == 3)
						{
							sum = 25000;
							format(string, sizeof(string),"(Race){FFFFFF} %s finished race %drd and received $%s.",namee,RacePos[playerid],FormatNumber(sum));
							GivePlayerCash(playerid, sum);
						}
						if(RacePos[playerid] > 3) format(string, sizeof(string),"(Race){FFFFFF} %s finished race %dth.",namee,RacePos[playerid]);
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG]) SendClientMessage(x, COLOR_ARENA, string);
						}
						PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
						if(RacePos[playerid] == 1) format(string, sizeof(string),"~r~You finished race:~n~~g~%dst",RacePos[playerid]);
						if(RacePos[playerid] == 2) format(string, sizeof(string),"~r~You finished race:~n~~g~%dnd",RacePos[playerid]);
						if(RacePos[playerid] == 3) format(string, sizeof(string),"~r~You finished race:~n~~g~%drd",RacePos[playerid]);
						if(RacePos[playerid] > 3) format(string, sizeof(string),"~r~You finished race:~n~~g~%dth",RacePos[playerid]);
						GameTextForPlayer(playerid, string, 5000, 4);
						SetPlayerHealthEx(playerid, 100.0);
						curatj[playerid] = 0;
						for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
						PlayerTextDrawHide(playerid, PaintBallText[playerid]);
						racep--;
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid,0);
						SetPlayerPos(playerid, 1102.7285,-1458.2931,15.7969);
						RaceCP[playerid] = 0;
						DisablePlayerRaceCheckpoint(playerid);
						DisableRemoteVehicleCollisions(playerid, 0);
						StopAudioStreamForPlayer(playerid);
						PlayerInfo[playerid][pRaceG] = -1;
						curatj[playerid] = 0;
						PlayerTextDrawHide(playerid, RaceTD[playerid][0]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][1]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][2]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][3]);
						PlayerTextDrawHide(playerid, RaceTD[playerid][4]);
						for(new cs; cs < 20; cs++)
						{
							if(rcarid[cs] == GetPlayerVehicleID(playerid))
							{
								DestroyVehicle(rcarid[cs]);
								rcarid[cs] = 0;
							}
						}
					}
					if(PlayerInfo[playerid][pRaceG] != -1) RaceCP[playerid]++;
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your personal car.");
	}
	if(CP[playerid] == 99)
	{
	   DisablePlayerRaceCheckpoint(playerid);
	   CP[playerid] = 0;
	}
	if(CheckBus[playerid] >= 1 && ccar && IsABus(tmpcar))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Opreste autobuzul in checkpoint-ul rosu.");
		timerbus[playerid] = SetTimerEx("BusDriverCheck", 3000, 1, "i", playerid);
	}
	new string[MAX_STRING];
	if(CP[playerid] == 125 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid, 3,-23.6290,2505.2061,52.8105,-376.0857,2361.1533,115.4486, 10.0);
		CP[playerid] = 126;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~1~w~/~r~7");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 126 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid, 3, -376.0857,2361.1533,115.4486,-264.8182,2235.8997,75.7689, 10.0);
		CP[playerid] = 127;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~2~w~/~r~7");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 127 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid, 3, -264.8182,2235.8997,75.7689,-30.0398,2240.2852,85.7710, 10.0);
		CP[playerid] = 128;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~3~w~/~r~7");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 128 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid, 3, -30.0398,2240.2852,85.7710,268.9265,2506.2776,16.5336, 10.0);
		CP[playerid] = 129;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~4~w~/~r~7");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 129 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid, 3, 268.9265,2506.2776,16.5336,377.2713,2514.5188,16.5911, 10.0);
		CP[playerid] = 130;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~5~w~/~r~7");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 130 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid, 3, 377.2713,2514.5188,16.5911,414.6903,2509.5151,16.4844, 10.0);
		CP[playerid] = 131;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~6~w~/~r~7");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 131 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
        PlayerTextDrawHide(playerid, DMVexam[playerid]);
        PlayerTextDrawHide(playerid, DMVcheck[playerid]);
		DisablePlayerRaceCheckpoint(playerid);
		PlayerInfo[playerid][pFlyLic] = 1;
		PlayerInfo[playerid][pFlyLicT] = 100;
		TakingLesson[playerid] = 0;
		DestroyVehicle(examcar[playerid]);
		DisableRemoteVehicleCollisions(playerid, 0);
		examcar[playerid] = -1;
		new str1[128];
		mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET `FlyLic`='1',`FlyLicT`='100' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
		mysql_tquery(SQL,str1,"","");
		SS(playerid, COLOR_WHITE, "Felicitari! Ai primit licenta de zbor!", "Exam finished! You can now drive planes or helicopters!");
		CP[playerid] = 0;
	}

	if(CP[playerid] == 132 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid, 3,1951.2327,-71.5712,0.3375,1865.3180,-42.6470,0.2398, 10.0);
		CP[playerid] = 133;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~1~w~/~r~8");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 133 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid, 3, 1865.3180,-42.6470,0.2398,1946.4764,-162.4386,0.4685, 10.0);
		CP[playerid] = 134;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~2~w~/~r~8");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 134 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid, 3, 1946.4764,-162.4386,0.4685,2064.8721,-199.5656,0.4775, 10.0);
		CP[playerid] = 135;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~3~w~/~r~8");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 135 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid, 3, 2064.8721,-199.5656,0.4775,2221.6682,-231.3028,0.5875, 10.0);
		CP[playerid] = 136;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~4~w~/~r~8");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 136 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid, 3, 2221.6682,-231.3028,0.5875,2225.8740,-159.0525,0.5312, 10.0);
		CP[playerid] = 137;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~5~w~/~r~8");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 137 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid, 3, 2225.8740,-159.0525,0.5312,2099.5645,-124.2457,0.3798, 10.0);
		CP[playerid] = 138;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~6~w~/~r~8");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 138 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid, 3, 2099.5645,-124.2457,0.3798,2105.0806,-103.6200,2.1666, 10.0);
		CP[playerid] = 139;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~7~w~/~r~8");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 139 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
        PlayerTextDrawHide(playerid, DMVexam[playerid]);
        PlayerTextDrawHide(playerid, DMVcheck[playerid]);
		DisablePlayerRaceCheckpoint(playerid);
		PlayerInfo[playerid][pBoatLic] = 1;
		PlayerInfo[playerid][pBoatLicT] = 100;
		TakingLesson[playerid] = 0;
		DestroyVehicle(examcar[playerid]);
		DisableRemoteVehicleCollisions(playerid, 0);
		SetPlayerPosEx(playerid, 2105.0806,-103.6200,2.1666);
		examcar[playerid] = -1;
		new str1[128];
		mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET `BoatLic`='1',`BoatLicT`='100' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
		mysql_tquery(SQL,str1,"","");
		SS(playerid, COLOR_WHITE, "Felicitari! Ai primit licenta de navigat!", "Exam finished! You can now drive boats!");
		CP[playerid] = 0;
	}

	if(CP[playerid] == 100 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid, 0, 1045.2626,-1809.4169,13.2637,849.1470,-1767.0336,13.0397, 4.0);
		CP[playerid] = 101;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~1~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 101 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 849.1470,-1767.0336,13.0397,635.5740,-1712.8594,13.8757, 4.0);
		CP[playerid] = 102;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~2~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 102 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 635.5740,-1712.8594,13.8757,605.3907,-1672.5651,15.5764, 4.0);
		CP[playerid] = 103;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~3~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 103 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 605.3907,-1672.5651,15.5764,485.4009,-1658.0165,21.8713, 4.0);
		CP[playerid] = 104;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~4~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 104 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 485.4009,-1658.0165,21.8713,325.8313,-1640.2993,32.7597, 4.0);
		CP[playerid] = 105;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~5~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 105 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 325.8313,-1640.2993,32.7597,246.6969,-1561.6211,32.6957, 4.0);
		CP[playerid] = 106;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~6~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 106 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 246.6969,-1561.6211,32.6957,274.5565,-1478.2930,29.9500, 4.0);
		CP[playerid] = 107;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~7~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 107 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 274.5565,-1478.2930,29.9500,193.8137,-1506.6576,12.2538, 4.0);
		CP[playerid] = 108;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~8~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 108 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid, 0,193.8137,-1506.6576,12.2538,324.4604,-1400.7098,13.7601, 4.0);
		CP[playerid] = 109;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~9~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 109 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 324.4604,-1400.7098,13.7601,509.5384,-1282.4365,15.4881, 4.0);
		CP[playerid] = 110;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~10~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
    }
	else if(CP[playerid] == 110 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,0, 509.5384,-1282.4365,15.4881,599.4775,-1228.8478,17.5563, 4.0);
		CP[playerid] = 111;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~11~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 111 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid, 0, 599.4775,-1228.8478,17.5563,623.2209,-1238.7283,17.5613, 4.0);
		CP[playerid] = 112;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~12~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 112 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid,0, 623.2209,-1238.7283,17.5613,627.9891,-1319.5573,13.2599, 4.0);
		CP[playerid] = 113;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~13~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 113 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	   	DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid,0, 627.9891,-1319.5573,13.2599,716.7220,-1322.1327,13.0510, 4.0);
		CP[playerid] = 114;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~14~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 114 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid,0, 716.7220,-1322.1327,13.0510,864.1711,-1327.4478,13.1957, 4.0);
		CP[playerid] = 115;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~15~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 115 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid,0, 864.1711,-1327.4478,13.1957,1046.0955,-1328.6143,13.0441, 4.0);
		CP[playerid] = 116;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~16~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 116 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid,0, 1046.0955,-1328.6143,13.0441,1054.7998,-1383.8990,13.1580, 4.0);
		CP[playerid] = 117;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~17~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 117 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid,0, 1054.7998,-1383.8990,13.1580,1055.3480,-1464.9629,13.0095, 4.0);
		CP[playerid] = 118;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~18~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 118 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid, 0,1055.3480,-1464.9629,13.0095,1035.1870,-1557.0361,13.0122, 4.0);
		CP[playerid] = 119;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~19~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 119 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid, 0, 1035.1870,-1557.0361,13.0122,1084.2502,-1574.0663,13.0356, 4.0);
		CP[playerid] = 120;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~20~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 120 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid, 0, 1084.2502,-1574.0663,13.0356,1295.7023,-1582.3715,13.0348, 4.0);
		CP[playerid] = 121;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~21~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 121 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid, 0, 1295.7023,-1582.3715,13.0348,1295.5782,-1832.5750,13.3828, 4.0);
		CP[playerid] = 122;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~22~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 122 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
	    DisablePlayerRaceCheckpoint(playerid);
	    SetPlayerRaceCheckpoint(playerid, 1, 1295.5782,-1832.5750,13.3828,0.0,0.0,0.0, 4.0);
		CP[playerid] = 123;
		format(string, sizeof(string), "~w~CHECKPOINTS: ~r~23~w~/~r~24");
		PlayerTextDrawSetString(playerid, DMVcheck[playerid], string);
	}
	else if(CP[playerid] == 123 && ccar && IsPlayerInVehicle(playerid, examcar[playerid]))
	{
        PlayerTextDrawHide(playerid, DMVexam[playerid]);
        PlayerTextDrawHide(playerid, DMVcheck[playerid]);
		DisablePlayerRaceCheckpoint(playerid);
		PlayerInfo[playerid][pCarLic] = 1;
		PlayerInfo[playerid][pCarLicT] = 100;
		TakingLesson[playerid] = 0;
		DestroyVehicle(examcar[playerid]);
		DisableRemoteVehicleCollisions(playerid, 0);
		examcar[playerid] = -1;
		Update(playerid, pCarLicx);
		Update(playerid, pCarLicTx);
		SS(playerid, COLOR_WHITE, "Felicitari! Ai primit permisul de conducere!", "Exam finished! You can now drive any car!");
		CP[playerid] = 0;
	}
    return 1;
}

// OnPlayerLeaveRaceCheckpoint
public OnPlayerLeaveRaceCheckpoint(playerid)
{
	new tmpcar = GetPlayerVehicleID(playerid),
		ccar = IsPlayerInAnyVehicle(playerid);
	if(CheckBus[playerid] >= 1 && ccar && IsABus(tmpcar))
	{
		KillTimer(timerbus[playerid]);
	}
	return 1;
}

forward OnSecondTimer();
public OnSecondTimer()
{
	foreach(new i : Player)
	{
		if(CloseBMatch[i] > 0)
		{
			CloseBMatch[i]--;
			if(CloseBMatch[i] == 0)
			{
				BJMatch[i] = 0;
				BDeal[i] = 0;
				BDealerScore[i] = 0;
				BlackJackPlayerScore[i] = 0;
				BlackJackActions[i]=0;
				BDealerCards[i] = 0;
				BlackJackPlayerCards[i] = 0;
				BlackJackStand[i]=0;
				for(new x; x < 5; x++)
				{
					BDealerCard[i][x] = 0;
					BlackJackPlayerCard[i][x] = 0;
				}
				new text[100];
				PlayerTextDrawSetString(i, BJDealAmountText[i], "0$");
				format(text, sizeof(text), "BALANCE:~n~%s$", FormatNumber(GetPlayerCash(i)));
				PlayerTextDrawSetString(i, BJBalanceText[i], text);
				PlayerTextDrawSetString(i, BJDealerScoreText[i], "DEALER: 0");
				PlayerTextDrawSetString(i, BJPlayerScoreText[i], "PLAYER: 0");
				PlayerTextDrawSetString(i, BJDealerCard1[i], "LD_CARD:cdback");
				PlayerTextDrawSetString(i, BJDealerCard2[i], "LD_CARD:cdback");
				PlayerTextDrawSetString(i, BJDealerCard3[i], "LD_CARD:cdback");
				PlayerTextDrawSetString(i, BJDealerCard4[i], "LD_CARD:cdback");
				PlayerTextDrawSetString(i, BJDealerCard5[i], "LD_CARD:cdback");
				PlayerTextDrawSetString(i, BJPlayerCard1[i], "LD_CARD:cdback");
				PlayerTextDrawSetString(i, BJPlayerCard2[i], "LD_CARD:cdback");
				PlayerTextDrawSetString(i, BJPlayerCard3[i], "LD_CARD:cdback");
				PlayerTextDrawSetString(i, BJPlayerCard4[i], "LD_CARD:cdback");
				PlayerTextDrawSetString(i, BJPlayerCard5[i], "LD_CARD:cdback");
				PlayerTextDrawHide(i, BJWinText[i]);
			}
		}
	}
	return 1;
}

// OnPlayerEnterCheckpoint
public OnPlayerEnterCheckpoint(playerid)
{
    if(XCheckpoints[playerid] == 0)
    {
       LastCheckpoint[playerid] = gettime();
    }
    XCheckpoints[playerid]++;
    if(XCheckpoints[playerid] == 2)
    {
        if((gettime() - LastCheckpoint[playerid]) <= 2)
        {
			if(UsedFind[playerid] == 0)
			{
    /*new string[256];
				new playername[MAX_PLAYER_NAME];
				GetPlayerName(playerid, playername, sizeof(playername));
				format(string, 256, "(N) %s (%d, level %d) may be using teleport hack.", playername, playerid, PlayerInfo[playerid][pLevel]);
				ABroadCast(COLOR_RED,string,1);*/
				NightBot(playerid, "Cheats (teleport-hack)");
				XCheckpoints[playerid] = 0;
				LastCheckpoint[playerid] = 0;
			}
			else
			{
				XCheckpoints[playerid]=0;
			}
        }else
        if((gettime() - LastCheckpoint[playerid]) > 2)
        {
            XCheckpoints[playerid]=0;
        }
	}
	if(!PlayerToPoint(50, playerid,  LastPos[playerid][0], LastPos[playerid][1], LastPos[playerid][2]) && CP[playerid] != 43)
	{
		if(PlayerInfo[playerid][pJobVehicle] == 0 && CarJacker[playerid] == 0 && InMinerJob[playerid] == 0 && InStrawberryJob[playerid] == 0 && BeeCar[playerid] == 0) return 1;
		else return NightBot(playerid, "Cheats (teleport-hack) #4");
	}
	new string[MAX_STRING];
	if(GotoMats[playerid] == 1)
	{
	    DisablePlayerCheckpoint(playerid);
	    GotoMats[playerid] = 0;
	    SS(playerid, COLOR_JOB, "(Job){FFFFFF} Foloseste /getmats aici pentru a colecta materiale.", "(Job){FFFFFF} Use /getmats here for collecting materials.");
	}
	else if(MatsHolding[playerid] == 1 && CP[playerid] == 6901)
	{
	    DisablePlayerCheckpoint(playerid);
		MatsHolding[playerid] = 0;
		CP[playerid] = 0;
		new totalmats,strings[64];
		if(SvarInfo[2][svValue] == 0) totalmats = SvarInfo[4][svValue] + PlayerInfo[playerid][pArmsSkill]*300;
		else totalmats = SvarInfo[4][svValue] + 1000 + PlayerInfo[playerid][pArmsSkill]*300;
		if(PlayerInfo[playerid][pPet] != 0) totalmats+=PlayerInfo[playerid][pPetLevel]*100;
		PlayerInfo[playerid][pMats] += totalmats;
		Update(playerid,pMatsx);
		format(strings,sizeof(strings),"(Job){FFFFFF} You collected %s materials!",FormatNumber(totalmats));
		SendClientMessage(playerid, COLOR_JOB, strings);
		PlayerInfo[playerid][pArmsRem]--;
		PlayerInfo[playerid][pArmsTimes]++;
		Update(playerid,pArmsRemx);
		Update(playerid,pArmsTimesx);
		if(PlayerInfo[playerid][pQuest1] == 5)
		{
			if(PlayerInfo[playerid][pQuestNeed1] > PlayerInfo[playerid][pQuestProgress1])
			{
				PlayerInfo[playerid][pQuestProgress1] += totalmats;
				Update(playerid, pQuestProgress1x);
				if(PlayerInfo[playerid][pQuestProgress1] >= PlayerInfo[playerid][pQuestNeed1])
				{
					FinishQuest1(playerid, 5);
				}
				else
				{
					new str[128];
					if(PlayerInfo[playerid][pLanguage] == 1)
					{
						format(str, sizeof(str),"Quest [Collect %d materials] progress: %d/%d",PlayerInfo[playerid][pQuestNeed1],PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
						SendClientMessage(playerid, COLOR_YELLOW, str);
					}
					else
					{
						format(str, sizeof(str),"Progres pentru misiunea [Colecteaza %d materiale]: %d/%d",PlayerInfo[playerid][pQuestNeed1],PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
						SendClientMessage(playerid, COLOR_YELLOW, str);
					}
				}
			}
		}
		if(PlayerInfo[playerid][pArmsSkill] <= 5)
		{
			if(PlayerInfo[playerid][pArmsRem] <= 0)
			{
			    PlayerInfo[playerid][pArmsSkill]++;
   				if(PlayerInfo[playerid][pArmsSkill] == 2)
				{
					PlayerInfo[playerid][pArmsRem] = 34;
				}
				else if(PlayerInfo[playerid][pArmsSkill] == 3)
				{
					PlayerInfo[playerid][pArmsRem] = 49;
				}
				else if(PlayerInfo[playerid][pArmsSkill] == 4)
				{
					PlayerInfo[playerid][pArmsRem] = 89;
				}
				else if(PlayerInfo[playerid][pArmsSkill] == 5)
				{
					PlayerInfo[playerid][pArmsRem] = 99;
				}
		    	Update(playerid,pArmsSkillx);
		    	Update(playerid,pArmsRemx);
				new stringe[128];
			    format(string,sizeof(string),"Felicitari! Ai acum skill %d pentru acest job!",PlayerInfo[playerid][pArmsSkill]);
				format(stringe,sizeof(stringe),"Congratulations! Now you have skill %d for this job!",PlayerInfo[playerid][pArmsSkill]);
			    SS(playerid, COLOR_YELLOW, string, stringe);
			}
		}
	}
	else if(TaxiAccepted[playerid] != -1)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You have reached your destination!");
		TaxiCall[TaxiAccepted[playerid]] = 0;
		DisablePlayerCheckpoint(playerid);
		targetfind[playerid] = -1;
		UsedFind[playerid] = 0;
		TaxiAccepted[playerid] = -1;
	}
	else if(MedicAccepted[playerid] != -1)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You have reached your destination!");
		MedicCall[MedicAccepted[playerid]] = 0;
		MedicAccepted[playerid] = -1;
		DisablePlayerCheckpoint(playerid);
		targetfind[playerid] = -1;
		UsedFind[playerid] = 0;
	}
	else if(CarJacker[playerid] == 1)
	{
	    new str[MAX_STRING],
	    	money = SvarInfo[12][svValue] + random(7000);
	    DisablePlayerCheckpoint(playerid);
	    CarJacker[playerid] = 0;
	    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	    if(PlayerInfo[playerid][pPet] != 0) money+=PlayerInfo[playerid][pPetLevel]*100;
	    GivePlayerCash(playerid, money);
	    if(PlayerInfo[playerid][pClan]!=0) {
	    	new safestring[128];
			ClanInfo[PlayerInfo[playerid][pClan]][cClanSeif]+=money/10;
			ClanUpdate(PlayerInfo[playerid][pClan], ClanSafex);
			PlayerInfo[playerid][pClanDep]+=money/10;
			Update(playerid, pClanDepx);
			format(safestring,sizeof(safestring), "(Job){FFFFFF} After your work %s$ was added in {%s}clan safe{FFFFFF}.",FormatNumber(money/10),ClanInfo[PlayerInfo[playerid][pClan]][cClanColor]);
			SendClientMessage(playerid,COLOR_JOB,safestring);
		}
	    format(str,sizeof(str),"(Job){FFFFFF} You have dropped a vehicle at the crane and earned $%s!", FormatNumber(money));
	    SendClientMessage(playerid, COLOR_JOB, str);
	    JackAcc[playerid] = 120;
	}
	else if(Trucker[playerid] >= 1)
	{
    	new pertransport,skillmoney,totalmoney;
    	if(!IsPlayerInAnyVehicle(playerid)) return 1;
    	if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) && IsATruck(GetPlayerVehicleID(playerid))) return SS(playerid, COLOR_JOB, "(Job){FFFFFF} Nu ai niciun trailer atasat!", "(Job){FFFFFF} You don't have a trailer attached!");
   		DisablePlayerCheckpoint(playerid);
    	DestroyVehicle(viddd[playerid]);
    	viddd[playerid] = 0;
    	if(Trucker[playerid] == 1)
    	{
     		if(SvarInfo[2][svValue] == 0) pertransport = SvarInfo[5][svValue] + 10000;
     		else pertransport = SvarInfo[5][svValue] + 11000;
    		Trucker2[playerid] = 2;
    		SetPlayerCheckpoint(playerid,CHKTruck2[2][0],CHKTruck2[2][1],CHKTruck2[2][2],5.0);
		}
		else if(Trucker[playerid] == 2)
		{
  			if(SvarInfo[2][svValue] == 0) pertransport = SvarInfo[5][svValue] + 17000;
  			else pertransport = SvarInfo[5][svValue] + 18700;
 			Trucker2[playerid] = 2;
 			SetPlayerCheckpoint(playerid,CHKTruck2[4][0],CHKTruck2[4][1],CHKTruck2[4][2],5.0);
		}
		else if(Trucker[playerid] == 3)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = SvarInfo[5][svValue] + 17000;
		    else pertransport = SvarInfo[5][svValue] + 18700;
	    	Trucker2[playerid] = 3;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[11][0],CHKTruck2[11][1],CHKTruck2[11][2],5.0);
		}
		else if(Trucker[playerid] == 4)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = SvarInfo[5][svValue] + 17000;
		    else pertransport = SvarInfo[5][svValue] + 18700;
	    	Trucker2[playerid] = 3;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[10][0],CHKTruck2[10][1],CHKTruck2[10][2],5.0);
		}
		else if(Trucker[playerid] == 5)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = SvarInfo[5][svValue] + 10000;
		    else pertransport = SvarInfo[5][svValue] + 11000;
	    	Trucker2[playerid] = 3;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[7][0],CHKTruck2[7][1],CHKTruck2[7][2],5.0);
		}
		else if(Trucker[playerid] == 6)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = SvarInfo[5][svValue] + 25000;
		    else pertransport = SvarInfo[5][svValue] + 27500;
	    	Trucker2[playerid] = 3;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[6][0],CHKTruck2[6][1],CHKTruck2[6][2],5.0);
		}
		else if(Trucker[playerid] == 7)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = SvarInfo[5][svValue] + 10000;
		    else pertransport = SvarInfo[5][svValue] + 11000;
	    	Trucker2[playerid] = 3;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[8][0],CHKTruck2[8][1],CHKTruck2[8][2],5.0);
		}
		else if(Trucker[playerid] == 8)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = SvarInfo[5][svValue] + 10000;
		    else pertransport = SvarInfo[5][svValue] + 11000;
	    	Trucker2[playerid] = 3;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[9][0],CHKTruck2[9][1],CHKTruck2[9][2],5.0);
		}
		else if(Trucker[playerid] == 9)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = SvarInfo[5][svValue] + 10000;
		    else pertransport = SvarInfo[5][svValue] + 11000;
	    	Trucker2[playerid] = 2;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[3][0],CHKTruck2[3][1],CHKTruck2[3][2],5.0);
		}
		else if(Trucker[playerid] == 10)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = SvarInfo[5][svValue] + 17000;
		    else pertransport = SvarInfo[5][svValue] + 18700;
	    	Trucker2[playerid] = 2;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[5][0],CHKTruck2[5][1],CHKTruck2[5][2],5.0);
		}
		else if(Trucker[playerid] == 11)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = SvarInfo[5][svValue] + 10000;
		    else pertransport = SvarInfo[5][svValue] + 11000;
	    	Trucker2[playerid] = 4;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[12][0],CHKTruck2[12][1],CHKTruck2[12][2],5.0);
		}
		else if(Trucker[playerid] == 12)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = SvarInfo[5][svValue] + 27000;
		    else pertransport = SvarInfo[5][svValue] + 29700;
	    	Trucker2[playerid] = 4;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[13][0],CHKTruck2[13][1],CHKTruck2[13][2],5.0);
		}
		else if(Trucker[playerid] == 13)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = SvarInfo[5][svValue] + 10000;
		    else pertransport = SvarInfo[5][svValue] + 11000;
	    	Trucker2[playerid] = 4;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[17][0],CHKTruck2[17][1],CHKTruck2[17][2],5.0);
		}
		else if(Trucker[playerid] == 14)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = SvarInfo[5][svValue] + 17000;
		    else pertransport = SvarInfo[5][svValue] + 18700;
	    	Trucker2[playerid] = 4;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[15][0],CHKTruck2[15][1],CHKTruck2[15][2],5.0);
		}
		else if(Trucker[playerid] == 15)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = SvarInfo[5][svValue] + 17000;
		    else pertransport = SvarInfo[5][svValue] + 18700;
	    	Trucker2[playerid] = 4;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[16][0],CHKTruck2[16][1],CHKTruck2[16][2],5.0);
		}
		else if(Trucker[playerid] == 16)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = SvarInfo[5][svValue] + 10000;
		    else pertransport = SvarInfo[5][svValue] + 11000;
	    	Trucker2[playerid] = 4;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[14][0],CHKTruck2[14][1],CHKTruck2[14][2],5.0);
		}
		else if(Trucker[playerid] == 17)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = SvarInfo[5][svValue] + 27000;
		    else pertransport = SvarInfo[5][svValue] + 29700;
	    	Trucker2[playerid] = 1;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[0][0],CHKTruck2[0][1],CHKTruck2[0][2],5.0);
		}
		else if(Trucker[playerid] == 18)
		{
		    if(SvarInfo[2][svValue] == 0) pertransport = SvarInfo[5][svValue] + 10000;
		    else pertransport = SvarInfo[5][svValue] + 11000;
	    	Trucker2[playerid] = 2;
	    	SetPlayerCheckpoint(playerid,CHKTruck2[1][0],CHKTruck2[1][1],CHKTruck2[1][2],5.0);
		}
		if(SvarInfo[2][svValue] == 0) skillmoney = PlayerInfo[playerid][pTruckSkill] * 300 + random(200);
		else skillmoney = PlayerInfo[playerid][pTruckSkill] * 350;
		if(PlayerInfo[playerid][pPet] != 0) skillmoney+=PlayerInfo[playerid][pPetLevel]*100;
		totalmoney = pertransport + skillmoney;
		PlayerInfo[playerid][pTruckRem]--;
		PlayerInfo[playerid][pTruckTimes]++;
		GivePlayerCash(playerid,totalmoney);
		if(PlayerInfo[playerid][pClan]!=0) {
	    	new safestring[128];
			ClanInfo[PlayerInfo[playerid][pClan]][cClanSeif]+=totalmoney/10;
			ClanUpdate(PlayerInfo[playerid][pClan], ClanSafex);
			PlayerInfo[playerid][pClanDep]+=totalmoney/10;
			Update(playerid, pClanDepx);
			format(safestring,sizeof(safestring), "(Job){FFFFFF} After your work %s$ was added in {%s}clan safe{FFFFFF}.",FormatNumber(totalmoney/10),ClanInfo[PlayerInfo[playerid][pClan]][cClanColor]);
			SendClientMessage(playerid,COLOR_JOB,safestring);
		}
		Update(playerid,pTruckRemx);
		Update(playerid,pTruckTimesx);
		new stringe[128];
		if(PlayerInfo[playerid][pTruckSkill] <= 5)
		{
			if(PlayerInfo[playerid][pTruckRem] <= 0)
			{
			    PlayerInfo[playerid][pTruckSkill]++;
   				if(PlayerInfo[playerid][pTruckSkill] == 2)
				{
					PlayerInfo[playerid][pTruckRem] = 34;
				}
				else if(PlayerInfo[playerid][pTruckSkill] == 3)
				{
					PlayerInfo[playerid][pTruckRem] = 49;
				}
				else if(PlayerInfo[playerid][pTruckSkill] == 4)
				{
					PlayerInfo[playerid][pTruckRem] = 89;
				}
				else if(PlayerInfo[playerid][pTruckSkill] == 5)
				{
					PlayerInfo[playerid][pTruckRem] = 99;
				}
		    	Update(playerid,pTruckSkillx);
		    	Update(playerid,pTruckRemx);
			    format(string,sizeof(string),"Felicitari! Ai acum skill %d pentru acest job!",PlayerInfo[playerid][pTruckSkill]);
				format(stringe,sizeof(stringe),"Congratulations! Now you have skill %d for this job!",PlayerInfo[playerid][pTruckSkill]);
			    SS(playerid, COLOR_YELLOW, string, stringe);
			}
		}
		Trucker[playerid] = 0;
		format(string,sizeof(string),"(Job){FFFFFF} Ai primit $%s pentru livrarea marfii.",FormatNumber(totalmoney));
		format(stringe,sizeof(stringe),"(Job){FFFFFF} You received $%s for delivery.",FormatNumber(totalmoney));
		SendClientMessage(playerid, COLOR_JOB, string);
	}
	else if(Trucker2[playerid] == 1) //Langa Gas Station(primul)
	{
	    SetTimerEx("Truckerr1", 200, 0, "i",playerid);
	}
	else if(Trucker2[playerid] == 2)//IN LS
	{
	    SetTimerEx("Truckerr2", 200, 0, "i",playerid);
	}
	else if(Trucker2[playerid] == 3)//IN LV
	{
	    SetTimerEx("Truckerr3", 200, 0, "i",playerid);
	}
	else if(Trucker2[playerid] == 4)//IN SF
	{
	    SetTimerEx("Truckerr4", 200, 0, "i",playerid);
	}
	new lol = GetPlayerVehicleID(playerid);
	if(CP[playerid] == 34) // tow car
	{
	    if(IsTrailerAttachedToVehicle(lol) == 0) return SS(playerid, COLOR_JOB, "(Job){FFFFFF} Nu ai nici o masina atasata.", "(Job){FFFFFF} You don't have a car attached.");
	    if(TowAcc[playerid] == 1) return SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} You can't tow a vehicle so fast. You can tow a car / 2 minutes.");
		DisablePlayerCheckpoint(playerid);
		CP[playerid] = 0;
		TowAcc[playerid] = 1;
		new towedcar;
		towedcar = GetVehicleTrailer(GetPlayerVehicleID(playerid));
		SetVehicleToRespawn(towedcar);
		new money;
		money = SvarInfo[11][svValue] + random(5000);
		if(PlayerInfo[playerid][pPet] != 0) money += PlayerInfo[playerid][pPetLevel]*100;
		GivePlayerCash(playerid, money);
		if(PlayerInfo[playerid][pClan]!=0) {
	    	new safestring[128];
			ClanInfo[PlayerInfo[playerid][pClan]][cClanSeif]+=money/10;
			ClanUpdate(PlayerInfo[playerid][pClan], ClanSafex);
			PlayerInfo[playerid][pClanDep]+=money/10;
			Update(playerid, pClanDepx);
			format(safestring,sizeof(safestring), "(Job){FFFFFF} After your work %s$ was added in {%s}clan safe{FFFFFF}.",FormatNumber(money/10),ClanInfo[PlayerInfo[playerid][pClan]][cClanColor]);
			SendClientMessage(playerid,COLOR_JOB,safestring);
		}
		format(string,sizeof(string), "(Job){FFFFFF} You got $%s for towing this car! You can tow another car in 2 minutes!",FormatNumber(money));
		SendClientMessage(playerid,COLOR_JOB, string);
		SetTimerEx("TowAgain", 120000, 0, "i", playerid);
	}
	else if(CP[playerid] == 43) // disable point
	{
		CP[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
		SendClientMessage(playerid, COLOR_WHITE, "You have reached your destination.");
	}
	else if(CP[playerid] == 1012) //disable vehicle
	{
		CP[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
		SendClientMessage(playerid, COLOR_WHITE, "You have reached your vehicle.");
	}
	else if(CP[playerid] == 10972) //GARBAGE
	{
		CP[playerid] = 0;
		GameTextForPlayer(playerid, "~w~press ~r~y~w~ to pickup the trash bag.", 5000, 3);
		DisablePlayerCheckpoint(playerid);
	}
	else if(CP[playerid] == 10973) //GARBAGE
	{
		DisablePlayerCheckpoint(playerid);
		CP[playerid] = 0;
		if(GetPlayerVehicleID(playerid) == JobCar[playerid])
		{
			if(GarbageInCar[GetPlayerVehicleID(playerid)] == 0)
			{
				SS(playerid, COLOR_JOB, "(Job){FFFFFF} Nu exista gunoi in masina de gunoi.", "(Job){FFFFFF} There is no trash in your vehicle.");
			}
			else
			{
				PlayerInfo[playerid][pGarbageRem]--;
				PlayerInfo[playerid][pGarbageTimes]++;
				Update(playerid,pGarbageRemx);
				Update(playerid,pGarbageTimesx);
				if(PlayerInfo[playerid][pGarbageSkill] <= 5)
				{
					if(PlayerInfo[playerid][pGarbageRem] <= 0)
					{
						PlayerInfo[playerid][pGarbageSkill]++;
						if(PlayerInfo[playerid][pGarbageSkill] == 2)
						{
							PlayerInfo[playerid][pGarbageRem] = 34;
						}
						else if(PlayerInfo[playerid][pGarbageSkill] == 3)
						{
							PlayerInfo[playerid][pGarbageRem] = 49;
						}
						else if(PlayerInfo[playerid][pGarbageSkill] == 4)
						{
							PlayerInfo[playerid][pGarbageRem] = 89;
						}
						else if(PlayerInfo[playerid][pGarbageSkill] == 5)
						{
							PlayerInfo[playerid][pGarbageRem] = 99;
						}
						Update(playerid,pGarbageSkillx);
						Update(playerid,pGarbageRemx);
						new stringe[128];
						format(string,sizeof(string),"Felicitari! Ai acum skill %d pentru acest job!",PlayerInfo[playerid][pGarbageSkill]);
						format(stringe,sizeof(stringe),"Congratulations! Now you have skill %d for this job!",PlayerInfo[playerid][pGarbageSkill]);
						SS(playerid, COLOR_YELLOW, string, stringe);
					}
				}
				new money,strings[128],stringee[128];
				if(SvarInfo[2][svValue] == 0) money = GarbageInCar[GetPlayerVehicleID(playerid)] * SvarInfo[6][svValue] + PlayerInfo[playerid][pGarbageSkill]*300 + random(12000);
				else money = GarbageInCar[GetPlayerVehicleID(playerid)] * SvarInfo[6][svValue] + PlayerInfo[playerid][pGarbageSkill]*350 + random(12200);
				if(PlayerInfo[playerid][pPet] != 0) money+=PlayerInfo[playerid][pPetLevel]*100;
				GivePlayerCash(playerid, money);
				if(PlayerInfo[playerid][pClan]!=0) {
			    	new safestring[128];
					ClanInfo[PlayerInfo[playerid][pClan]][cClanSeif]+=money/10;
					ClanUpdate(PlayerInfo[playerid][pClan], ClanSafex);
					PlayerInfo[playerid][pClanDep]+=money/10;
					Update(playerid, pClanDepx);
					format(safestring,sizeof(safestring), "(Job){FFFFFF} After your work %s$ was added in {%s}clan safe{FFFFFF}.",FormatNumber(money/10),ClanInfo[PlayerInfo[playerid][pClan]][cClanColor]);
					SendClientMessage(playerid,COLOR_JOB,safestring);
				}
				format(strings, sizeof(strings),"(Job){FFFFFF} Ai primit $%s pentru %d kg de gunoi.",FormatNumber(money),GarbageInCar[GetPlayerVehicleID(playerid)]);
				format(stringee, sizeof(stringee),"(Job){FFFFFF} You received $%s for %d kg of garbage.",FormatNumber(money),GarbageInCar[GetPlayerVehicleID(playerid)]);
				SS(playerid, COLOR_JOB, strings, stringee);
				if(PlayerInfo[playerid][pQuest2] == 4)
				{
					if(PlayerInfo[playerid][pQuestNeed2] > PlayerInfo[playerid][pQuestProgress2])
					{
						PlayerInfo[playerid][pQuestProgress2] += GarbageInCar[GetPlayerVehicleID(playerid)];
						Update(playerid, pQuestProgress2x);
						if(PlayerInfo[playerid][pQuestProgress2] >= PlayerInfo[playerid][pQuestNeed2])
						{
							FinishQuest2(playerid, 4);
						}
						else
						{
							new str[128];
							if(PlayerInfo[playerid][pLanguage] == 1)
							{
								format(str, sizeof(str),"Quest [Collect and unload %d KG of garbage] progress: %d/%d",PlayerInfo[playerid][pQuestNeed2],PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
								SendClientMessage(playerid, COLOR_YELLOW, str);
							}
							else
							{
								format(str, sizeof(str),"Progres pentru misiunea [Colecteaza si descarca %d KG de gunoi]: %d/%d",PlayerInfo[playerid][pQuestNeed2],PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
								SendClientMessage(playerid, COLOR_YELLOW, str);
							}
						}
					}
				}
				GarbageInCar[GetPlayerVehicleID(playerid)] = 0;
			}
		}
		else return SS(playerid, COLOR_JOB, "(Job){FFFFFF} Nu esti intr-o masina de gunoi.", "(Job){FFFFFF} You are not in a garbage truck.");
	}
	else if(CP[playerid] == 6868)
	{
		DisablePlayerCheckpoint(playerid);
		CP[playerid] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "You have reached your destination.");
	}
	else if(CP[playerid] == 150) {
		PlayerInfo[playerid][pBeePlaced] = 1;
		PlayerInfo[playerid][pBeemin] = 59;
		PlayerInfo[playerid][pBeesec] = 60;
		
		BeeCancel(playerid);
		Update(playerid, pBeePlacedx);
		Update(playerid, pBeeminx);
		Update(playerid, pBeesecx);
		CreateBeeHiveObjects(playerid);
		SetPlayerPosEx(playerid, 1902.8530,99.2951,38.5180);
		SendClientMessage(playerid, COLOR_JOB, "(Beehives){FFFFFF} Your beehives was placed, come back in a hour to receive their product.");
	}
	else if(CP[playerid] == 546)
	{
		TogglePlayerControllable(playerid, 0);
		ApplyAnimation(playerid,"CHAINSAW","CSAW_1",4.0,1,0,0,1,6900,1);
		SetPlayerAttachedObject(playerid, 9, 19631, 6, 0.048, 0.029, 0.103, -80.0, 80.0, 0.0);
		SetTimerEx("Minerloot",7000, false, "i", playerid);
		SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} You started the mining!");
		minerloot[playerid] = 1;
	}
	else if(CP[playerid] == 547)
	{
		TogglePlayerControllable(playerid, 0);
		ApplyAnimation(playerid,"CHAINSAW","CSAW_1",4.0,1,0,0,1,6900,1);
		SetPlayerAttachedObject(playerid, 9, 19631, 6, 0.048, 0.029, 0.103, -80.0, 80.0, 0.0);
		SetTimerEx("Minerloot",7000, false, "i", playerid);
		SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} You started the mining!");
		minerloot[playerid] = 2;
	}
	else if(CP[playerid] == 548)
	{	
		TogglePlayerControllable(playerid, 0);
		ApplyAnimation(playerid,"CHAINSAW","CSAW_1",4.0,1,0,0,1,6900,1);
		SetPlayerAttachedObject(playerid, 9, 19631, 6, 0.048, 0.029, 0.103, -80.0, 80.0, 0.0);
		SetTimerEx("Minerloot",7000, false, "i", playerid);
		SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} You started the mining!");
		minerloot[playerid] = 3;
	}
	else if(CP[playerid] == 549)
	{
		TogglePlayerControllable(playerid, 0);
		ApplyAnimation(playerid,"CHAINSAW","CSAW_1",4.0,1,0,0,1,6900,1);
		SetPlayerAttachedObject(playerid, 9, 19631, 6, 0.048, 0.029, 0.103, -80.0, 80.0, 0.0);
		SetTimerEx("Minerloot",7000, false, "i", playerid);
		SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} You started the mining!");
		minerloot[playerid] = 4;
	}
	else if(CP[playerid] == 550)
	{
		new text[32];
		ClearAnimations(playerid);
		RemovePlayerAttachedObject(playerid, 9);
		new money = SvarInfo[17][svValue];
		if(minerloot[playerid] == 1) { money+=1000; text="an {E6C5A2}iron"; }
		else if(minerloot[playerid] == 2) { money+=1500; text="a {D1CCC6}silver"; }
		else if(minerloot[playerid] == 3) { money+=2000; text="a {ECF142}gold"; }
		else if(minerloot[playerid] == 4) { money+=2500; text="a {42F1E9}diamond"; }
		if(PlayerInfo[playerid][pPet] != 0) money = money + PlayerInfo[playerid][pPetLevel]*10;
		format(string, sizeof(string), "(Job){FFFFFF} You found %s{FFFFFF} and received %s$.", text,FormatNumber(money));
		SendClientMessage(playerid, COLOR_JOB, string);
		GivePlayerCash(playerid, money);
		if(PlayerInfo[playerid][pClan]!=0) {
	    	new safestring[128];
			ClanInfo[PlayerInfo[playerid][pClan]][cClanSeif]+=money/10;
			ClanUpdate(PlayerInfo[playerid][pClan], ClanSafex);
			PlayerInfo[playerid][pClanDep]+=money/10;
			Update(playerid, pClanDepx);
			format(safestring,sizeof(safestring), "(Job){FFFFFF} After your work %s$ was added in {%s}clan safe{FFFFFF}.",FormatNumber(money/10),ClanInfo[PlayerInfo[playerid][pClan]][cClanColor]);
			SendClientMessage(playerid,COLOR_JOB,safestring);
		}
		if(PlayerInfo[playerid][pQuest1] == 7)
		{
			if(PlayerInfo[playerid][pQuestNeed1] > PlayerInfo[playerid][pQuestProgress1])
			{
				PlayerInfo[playerid][pQuestProgress1]++;
				Update(playerid, pQuestProgress1x);
				if(PlayerInfo[playerid][pQuestProgress1] >= PlayerInfo[playerid][pQuestNeed1])
				{
					FinishQuest1(playerid, 7);
				}
				else
				{
					new str[128];
					if(PlayerInfo[playerid][pLanguage] == 1)
					{
						format(str, sizeof(str),"Quest [Collect %d metals from the mine] progress: %d/%d",PlayerInfo[playerid][pQuestNeed1],PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
						SendClientMessage(playerid, COLOR_YELLOW, str);
					}
					else
					{
						format(str, sizeof(str),"Progres pentru misiunea [Colecteaza %d metale din mina]: %d/%d",PlayerInfo[playerid][pQuestNeed1],PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
						SendClientMessage(playerid, COLOR_YELLOW, str);
					}
				}
			}
		}
		MinerStart(playerid);
	}
	else if(BusinessRob[playerid] == 2)//Robbing1
	{
	    new str[128],
	        rand = SvarInfo[14][svValue] + random(100000) + PlayerInfo[playerid][pRobSkill]*1000;
	    DisablePlayerCheckpoint(playerid);
		GivePlayerCash(playerid, rand);
    	format(str, 128,"(+) Money earned from the rob: $%s. Rob time: %d seconds.", FormatNumber(rand), RobTime[playerid]);
    	SendClientMessage(playerid, COLOR_GREEN, str);
    	BusinessRob[playerid] = 1;
		new rando = random(sizeof(gRandomRob2));
		SetPlayerCheckpoint(playerid, gRandomRob2[rando][0],gRandomRob2[rando][1],gRandomRob2[rando][2], 4.0);
	}
	else if(BusinessRob[playerid] == 1)//Robbing2
	{
	    new str[128],
	        rand = SvarInfo[14][svValue] + random(100000) + PlayerInfo[playerid][pRobSkill]*1000;
		PlayerInfo[playerid][pRobTimes]++;
		PlayerInfo[playerid][pRobRem]--;
		Update(playerid, pRobTimesx);
		Update(playerid, pRobRemx);
	    DisablePlayerCheckpoint(playerid);
		GivePlayerCash(playerid, rand);
    	format(str, 128,"(+) Money earned from the rob: $%s. Rob time: %d seconds.", FormatNumber(rand), RobTime[playerid]);
    	SendClientMessage(playerid, COLOR_GREEN, str);
    	BusinessRob[playerid] = 0;
		RobTime[playerid] = -1;
		if(PlayerInfo[playerid][pRobSkill] <= 5)
		{
			if(PlayerInfo[playerid][pRobRem] <= 0)
			{
				PlayerInfo[playerid][pRobSkill]++;
				if(PlayerInfo[playerid][pRobSkill] == 2)
				{
					PlayerInfo[playerid][pRobRem] = 34;
				}
				else if(PlayerInfo[playerid][pRobSkill] == 3)
				{
					PlayerInfo[playerid][pRobRem] = 49;
				}
				else if(PlayerInfo[playerid][pRobSkill] == 4)
				{
					PlayerInfo[playerid][pRobRem] = 89;
				}
				else if(PlayerInfo[playerid][pRobSkill] == 5)
				{
					PlayerInfo[playerid][pRobRem] = 99;
				}
				Update(playerid,pRobSkillx);
				Update(playerid,pRobRemx);
				new stringe[128];
				format(string,sizeof(string),"Felicitari! Ai acum skill %d pentru rob!",PlayerInfo[playerid][pRobSkill]);
				format(stringe,sizeof(stringe),"Congratulations! Now you have skill %d for rob!",PlayerInfo[playerid][pRobSkill]);
				SS(playerid, COLOR_YELLOW, string, stringe);
			}
		}
	}
	else
	{
		switch (gPlayerCheckpointStatus[playerid])
		{
			case CHECKPOINT_LOCATE:
		    {
				DisablePlayerCheckpoint(playerid);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
			}
		}
	}
	return 1;
}


public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	new Menu:CurrentMenu = GetPlayerMenu(playerid);
	if(!IsValidMenu(CurrentMenu)) return 1;
	ShowMenuForPlayer(CurrentMenu, playerid);
	TogglePlayerControllable(playerid,1);
	return 1;
}

forward SetAllPlayerCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi, num);
public SetAllPlayerCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi, num)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetPlayerCheckpoint(i,allx,ally,allz, radi);
			if(num != 255)
			{
				gPlayerCheckpointStatus[i] = num;
			}
		}
	}
	return 1;
}

forward SetAllCopCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi);
public SetAllCopCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(gTeam[i] == 2)
			{
				SetPlayerCheckpoint(i,allx,ally,allz, radi);
			}
		}
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	EnterVehicle[playerid] = vehicleid;
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	new string[500],
		vehicleid = GetPlayerVehicleID(playerid);
	if( newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_PASSENGER)
	{
	    StopAudioStreamForPlayer(playerid);
		Listening[playerid] = -1;
	}
	if( (newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER) && (oldstate != PLAYER_STATE_DRIVER && oldstate != PLAYER_STATE_PASSENGER) )
	{
		if( EnterVehicle[playerid] != GetPlayerVehicleID(playerid)) NightBot(playerid, "Cheats (possible troll-hack)");
		else EnterVehicle[playerid] = -1;
	}
	if(newstate == PLAYER_STATE_ONFOOT)
	{
		PlayerTextDrawHide(playerid, Fuell[playerid]);
		PlayerTextDrawHide(playerid, Speedd[playerid]);
		PlayerTextDrawHide(playerid, Odom[playerid]);
		PlayerTextDrawHide(playerid, carlocked[playerid]);
		if(PlayerInfo[playerid][pJobVehicle] != 0) CancelJob(playerid);
		if(BeeCar[playerid] != 0) BeeCancel(playerid);
		if(InMinerJob[playerid] != 0) MinerCancel(playerid);
		if(InStrawberryJob[playerid] != 0) StrawberryCancel(playerid);
		if(CarJacker[playerid] > 0)
		{
		    DisablePlayerCheckpoint(playerid);
		    CarJacker[playerid] = 0;
		    JackAcc[playerid] = 0;
		}
		if(CP[playerid] == 340 || CP[playerid] == 341 || CP[playerid] == 342 || CP[playerid] == 343 || CP[playerid] == 344 || CP[playerid] == 345 || CP[playerid] == 346 || CP[playerid] == 347)
		{
			DisablePlayerCheckpoint(playerid);
			CP[playerid] = 0;
		}
		if(CP[playerid] == 34)
		{
		    TowAcc[playerid] = 1;
		    CP[playerid] = 0;
		    DisablePlayerCheckpoint(playerid);
		    SetTimerEx("TowAgain", 120000, 0, "i", playerid);
		}
		if(TaxiTimer[playerid] > 0 && TaxiDriver[playerid] != -1)
		{
			TaxiTimer[playerid] = 0;
			PlayerTextDrawHide(playerid, RentCarText[playerid]);
			new name[30], name1[30];
			GetPlayerName(TaxiDriver[playerid], name, sizeof(name));
			GetPlayerName(playerid, name1, sizeof(name1));
			format(string, sizeof(string), "* %s gets off the cab and pays $%s to %s.", name1, FormatNumber(TaxiMoneySpent[playerid]), name);
			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			TaxiCall[playerid] = 0;
			if(TaxiMoneySpent[playerid] >= 100)
			{
				new varxx[256],are;
				format(varxx, sizeof(varxx), "SELECT * FROM `antifraudaraport` WHERE `pid1`='%d' AND `pid2`='%d'", PlayerInfo[TaxiDriver[playerid]][pSQLID], PlayerInfo[playerid][pSQLID]);
				new Cache: ab = mysql_query(SQL, varxx);
				if(cache_get_row_count() > 0) are = 1;
				cache_delete(ab);
				if(are == 0)
				{
					PlayerInfo[TaxiDriver[playerid]][Raport1]++;
					Update(TaxiDriver[playerid], Raport1x);
					mysql_format(SQL, varxx, sizeof(varxx), "INSERT INTO `antifraudaraport` (`pid1`,`pid2`,`time`) VALUES ('%d','%d','%d')", PlayerInfo[TaxiDriver[playerid]][pSQLID], PlayerInfo[playerid][pSQLID], (gettime() + 900));
					mysql_tquery(SQL,varxx,"","");
				}
			}
			TaxiMoneySpent[playerid] = 0;
			TaxiDriver[playerid] = -1;
		}
		if(TaxiFare[playerid] > 0)
		{
			PlayerTextDrawHide(playerid, RentCarText[playerid]);
			TaxiFare[playerid] = 0;
			TaxiMoneyEarned[playerid] = 0;
			foreach(new x : Player)
			{
				if(TaxiDriver[x] == playerid)
				{
					TaxiDriver[x] = -1;
					TaxiMoneySpent[x] = 0;
					TaxiTimer[x] = 0;
					PlayerTextDrawHide(x, RentCarText[playerid]);
				}
			}
		}
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
	}
	if(newstate == PLAYER_STATE_WASTED)
	{
	    StopAudioStreamForPlayer(playerid);
	    if(PlayerInfo[playerid][pWantedLevel] >= 1)
		{
		    new copkill=0, price = PlayerInfo[playerid][pWantedLevel] * 100, str23[MAX_STRING], string3[256], string4[256], lastname[30], timejail;
		    if((PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pMember] != 2 && PlayerInfo[playerid][pMember] != 3 && PlayerInfo[playerid][pMember] != 8))
			{
			    for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i))
					{
					    if(IsACop(i) && CrimInRange(50.0, playerid,i) && OnDuty[i] == 1)
						{
							if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
							{
								new streap[MAX_PLAYER_NAME];
								GetPlayerName(playerid, streap, sizeof(streap));
								GetPlayerName(i, lastname, sizeof(lastname));
								format(string, sizeof(string), "You recieved $%d bonus for catch the suspect %s.", price, streap);
								SendClientMessage(i, COLOR_DBLUE, string3);
								GameTextForPlayer(i, "Running Suspect bonus!", 5000, 1);
								ConsumingMoney[i] = 1;
								GivePlayerCash(i, price);
								new idfac = PlayerInfo[i][pMember];
								DynamicFactions[idfac][fBank] += price;
								mysql_format(SQL,str23,sizeof(str23),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'", DynamicFactions[idfac][fBank], idfac);
								mysql_tquery(SQL,str23,"","");
								PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
								copkill = 1;
								if(SvarInfo[1][svValue] == 0) timejail = PlayerInfo[playerid][pWantedLevel]*300;
								else timejail = PlayerInfo[playerid][pWantedLevel]*150;
								format(string, sizeof(string), "Dispatch: %s has been killed by No One and will be in jail for %d seconds, over.",streap,timejail);
								PlayerInfo[playerid][Raport3]++;
								Update(playerid, Raport3x);
							}
						}
					}
				}
				if(copkill == 1)
				{
					if(SvarInfo[1][svValue] == 0) PlayerInfo[playerid][pJailTime] = (PlayerInfo[playerid][pWantedLevel])*(300);
					else PlayerInfo[playerid][pJailTime] = (PlayerInfo[playerid][pWantedLevel])*(150);
					format(string4, sizeof(string4), "Because you got killed, you lost $%s and you will be taken to jail. You are no longer a criminal.", FormatNumber(price));
					SendClientMessage(playerid, COLOR_LIGHTRED, string4);
					PlayerInfo[playerid][pJailed] = 1;
					PlayerInfo[playerid][pWantedLevel] = 0;
					PlayerInfo[playerid][pWantedDeaths] += 1;
					WantedPoints[playerid] = 0;
					GivePlayerCash(playerid, - price);
					new streap[30];
					GetPlayerName(playerid, streap, sizeof(streap));
					format(string3, sizeof(string3), "Dispatch: %s has been killed by No One and will be in jail for %d seconds, over.",streap,PlayerInfo[playerid][pJailTime]);
					SendTeamMessage(1, COLOR_LIGHTBLUE, string3);
					SendTeamMessage(2, COLOR_LIGHTBLUE, string3);
					SendTeamMessage(3, COLOR_LIGHTBLUE, string3);
					SendTeamMessage(8, COLOR_LIGHTBLUE, string3);
					Update(playerid,pWantedLevelx);
					Update(playerid,pJailedx);
					Update(playerid,pJailTimex);
					ClearCrime(playerid);
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("UnFreezeStation", 1000, false, "i", playerid);
				}
			}
		}
	}
	if(newstate == PLAYER_STATE_PASSENGER) // TAXI & BUSSES
	{
	    new name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid, name, sizeof(name));
	    if(vehRadio[vehicleid] > 0)
	    {
	        if(vehRadio[vehicleid] == 1)
	    	{
	    		StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://stream.profm.ro:8012/profm.mp3");
			}
			else if(vehRadio[vehicleid] == 2)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://live.radiobandit.ro:8000");
			}
			else if(vehRadio[vehicleid] == 3)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://radiotaraf.com/live.m3u");
			}
			else if(vehRadio[vehicleid] == 4)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://live.radiohot.ro:8000/");
			}
			else if(vehRadio[vehicleid] == 5)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://dance.radiogangsta.ro:8800");
			}
			else if(vehRadio[vehicleid] == 6)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://live.radiogangsta.ro:8800");
			}
			else if(vehRadio[vehicleid] == 7)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://7619.live.streamtheworld.com:80/977_HITS_SC");
			}
			else if(vehRadio[vehicleid] == 8)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://7639.live.streamtheworld.com:80/977_MIX_SC");
			}
			else if(vehRadio[vehicleid] == 9)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://7579.live.streamtheworld.com:80/977_ALTERN_SC");
			}
			else if(vehRadio[vehicleid] == 10)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://www.listenlive.eu/bbcradio1.m3u");
			}
			else if(vehRadio[vehicleid] == 11)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://dubstep.fm/128.pls");
			}
			else if(vehRadio[vehicleid] == 12)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://www.radio-hit.ro/asculta.m3u");
			}
			else if(vehRadio[vehicleid] == 13)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://live.radioclubmix.ro:9999");
			}
			else if(vehRadio[vehicleid] == 14)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://80.86.106.136/listen.pls");
			}
			else if(vehRadio[vehicleid] == 15)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://www.radiozu.ro/live.m3u");
			}
			else if(vehRadio[vehicleid] == 16)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://livemp3.radiopopular.ro:7777");
			}
			else if(vehRadio[vehicleid] == 17)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://radio.trap.fm/listen128.pls");
			}
			else if(vehRadio[vehicleid] == 18)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://radiotequila.ro/hiphop.m3u");
			}
			else if(vehRadio[vehicleid] == 19)
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, customRadio[vehicleid]);
			}
			Listening[playerid] = vehRadio[vehicleid]-1;
		}
		if(IsAnTaxi(vehicleid) && PlayerInfo[playerid][pMember] != 13)
		{
			foreach(new i : Player)
			{
				if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == 0 && PlayerInfo[i][pMember] == 13)
				{
					if(TaxiFare[i] > 0)
					{
						new randomtime = 10 + random(7);
						TaxiTimer[playerid] = randomtime;
						GivePlayerCash(playerid, -TaxiFare[i]);
						GivePlayerCash(i, TaxiFare[i]);
						TaxiMoneySpent[playerid] += TaxiFare[i];
						TaxiMoneyEarned[i] += TaxiFare[i];
						TaxiDriver[playerid] = i;
						format(string, sizeof(string), "money spent so far: ~g~$%d", TaxiMoneySpent[playerid]);
						PlayerTextDrawSetString(playerid, RentCarText[playerid], string);
						PlayerTextDrawShow(playerid, RentCarText[playerid]);
						format(string, sizeof(string), "money earned: ~g~$%d", TaxiMoneyEarned[i]);
						PlayerTextDrawSetString(i, RentCarText[i], string);
						PlayerTextDrawShow(i, RentCarText[i]);
					}
				}
			}
		}
        new gun,tmp;
        GetPlayerWeaponData(playerid,5,gun,tmp);
        #pragma unused tmp
        if(gun)SetPlayerArmedWeapon(playerid,gun);
        else SetPlayerArmedWeapon(playerid,0);
	    return 1;
	}
    if(oldstate == PLAYER_STATE_DRIVER)
    {
        StopAudioStreamForPlayer(playerid);
		if((GetTickCount()-PlayerEnterTime[playerid]) < 220 && Slapped[playerid] == 0 && PlayerInfo[playerid][pAdmin] == 0)
        {
   /*new anticar[300];
			format(anticar, sizeof(anticar), "(N) %s (%d, level %d) may be using vehicle teleport (Car Circle, Floating cars etc).",GetName(playerid),playerid,PlayerInfo[playerid][pLevel]);
        	ABroadCast(COLOR_RED,anticar,1);*/
        	NightBot(playerid, "Cheats (vehicle teleport)");
		}
		return 1;
    }
	if(newstate == PLAYER_STATE_DRIVER)
	{
		SetPlayerArmedWeapon(playerid, 0);
 		if(vehRadio[vehicleid] == 1)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://stream.profm.ro:8012/profm.mp3");
		}
		else if(vehRadio[vehicleid] == 2)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://live.radiobandit.ro:8000");
		}
		else if(vehRadio[vehicleid] == 3)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://radiotaraf.com/live.m3u");
		}
		else if(vehRadio[vehicleid] == 4)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://live.radiohot.ro:8000/");
		}
		else if(vehRadio[vehicleid] == 5)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://dance.radiogangsta.ro:8800");
		}
		else if(vehRadio[vehicleid] == 6)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://live.radiogangsta.ro:8800");
		}
		else if(vehRadio[vehicleid] == 7)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://7619.live.streamtheworld.com:80/977_HITS_SC");
		}
		else if(vehRadio[vehicleid] == 8)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://7639.live.streamtheworld.com:80/977_MIX_SC");
		}
		else if(vehRadio[vehicleid] == 9)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://7579.live.streamtheworld.com:80/977_ALTERN_SC");
		}
		else if(vehRadio[vehicleid] == 10)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://www.listenlive.eu/bbcradio1.m3u");
		}
		else if(vehRadio[vehicleid] == 11)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://dubstep.fm/128.pls");
		}
		else if(vehRadio[vehicleid] == 12)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://www.radio-hit.ro/asculta.m3u");
		}
		else if(vehRadio[vehicleid] == 13)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://live.radioclubmix.ro:9999");
		}
		else if(vehRadio[vehicleid] == 14)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://80.86.106.136/listen.pls");
		}
		else if(vehRadio[vehicleid] == 15)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://www.radiozu.ro/live.m3u");
		}
		else if(vehRadio[vehicleid] == 16)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://livemp3.radiopopular.ro:7777");
		}
		else if(vehRadio[vehicleid] == 17)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://radio.trap.fm/listen128.pls");
		}
		else if(vehRadio[vehicleid] == 18)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, "http://radiotequila.ro/hiphop.m3u");
		}
		else if(vehRadio[vehicleid] == 19)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, customRadio[vehicleid]);
		}
		Listening[playerid] = vehRadio[vehicleid]-1;
		new newcar = GetPlayerVehicleID(playerid);
		GetVehiclePos(newcar, old_veh_pos[newcar][0], old_veh_pos[newcar][1], old_veh_pos[newcar][2]);
		if(PlayerInfo[playerid][pQuest1] == 3)
		{
			if(GetVehicleModel(newcar) == PlayerInfo[playerid][pQuestCar])
			{
				QuestCarKM[newcar] = PlayerInfo[playerid][pQuestProgress1];
			}
		}
	    if(!IsABoat(newcar))
	    {
			PlayerEnterTime[playerid] = GetTickCount();
		}
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		new engine,lights,alarm,doors,bonnet,boot,objective;
	    if(vehEngine[newcar] == 0)
	    {
			GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
		    SetVehicleParamsEx(newcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
		}
		else if(vehEngine[newcar] == 1)
		{
			GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(newcar,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		}
		if(Gas[newcar] == 0)
		{
	        TogglePlayerControllable(playerid, 0);
	        NoFuel[playerid] = 1;
		}
		if(IsABoat(newcar))
		{
		    if(PlayerInfo[playerid][pBoatLic] < 1)
			{
                if(TakingLesson[playerid] == 1) { }
                else 
                {
				    SendClientMessage(playerid,COLOR_GREY, "You don't have a boat license.");
				    SlapPlayer(playerid); 
				}
			}
		}
		else if(IsAPlane(newcar))
		{
		    if(PlayerInfo[playerid][pFlyLic] < 1)
			{
			    if(TakingLesson[playerid] == 1) { }
			    else 
			    {
				    SendClientMessage(playerid, COLOR_GREY, "You don't have a flying license.");
				    SlapPlayer(playerid); 
				}
			}
		}
		else
		{
			if(PlayerInfo[playerid][pCarLic] < 1)
			{
			    if(IsABike(newcar) || IsAPlane(newcar) || GetVehicleModel(newcar) == 462) { }
			    else
			    {
					if(TakingLesson[playerid] == 1) { }
					else 
					{
					 	SendClientMessage(playerid,COLOR_GREY, "You don't have a driving license.");
	                    SlapPlayer(playerid);
					}
				}
			}
		}
		for(new cl=1;cl<=clanss;cl++)
		{
			new strr[128];
			for(new vv; vv < MAX_CLAN_VEHICLES; vv++)
				if(ClanInfo[cl][cCarID][vv] == newcar) 
				{ 
					if(PlayerInfo[playerid][pClan] == cl) { 
						KillTimer(destroytimer[cl][vv]);
					}
					else
					{
						SlapPlayer(playerid); 
						format(strr,sizeof(strr),"This %s (model %d, ID %d) is locked to clan  %s (%d).",aVehicleNames[ClanInfo[cl][cCarModel][vv] - 400],ClanInfo[cl][cCarModel][vv],ClanInfo[cl][cCarID][vv],ClanInfo[cl][cClanName],cl);
						SendClientMessage(playerid, COLOR_WHITE, strr);
						return 1;
					}
				}
		}
		//Done with car check
		for(new x = 0; x < sizeof(VehicleInfo); x++)
		{
			if(VehicleInfo[x][vehCarID] == newcar)
			{
				if(VehicleInfo[x][vehGroup] != 0 && VehicleInfo[x][vehGroup] != 30)
				{
					new strr[128];
					if(PlayerInfo[playerid][pMember] == VehicleInfo[x][vehGroup]) 
					{ 
						if(OnDuty[playerid] != 1 && PlayerInfo[playerid][pMember] != 7) { SlapPlayer(playerid); SendClientMessage(playerid,COLOR_WHITE, "You are not on duty."); }
					}
					else
					{
						if(AdminDuty[playerid] == 1)
						{
							format(strr,sizeof(strr),"This %s (model %d, ID %d) is locked to group %s (%d).",aVehicleNames[GetVehicleModel(VehicleInfo[x][vehCarID]) - 400],GetVehicleModel(VehicleInfo[x][vehCarID]),VehicleInfo[x][vehCarID],DynamicFactions[VehicleInfo[x][vehGroup]][fName],VehicleInfo[x][vehGroup]);
							SendClientMessage(playerid, COLOR_WHITE, strr);
						}
						else
						{
		                    SlapPlayer(playerid); 
							format(strr,sizeof(strr),"This vehicle is locked to group %s.",DynamicFactions[VehicleInfo[x][vehGroup]][fName]);
							SendClientMessage(playerid, COLOR_WHITE, strr);
						}
						return 1;
					}
				}
				if(VehicleInfo[x][vehRank] != 1)
				{
					if(PlayerInfo[playerid][pRank] < VehicleInfo[x][vehRank])
					{
						if(PlayerInfo[playerid][pRank] < VehicleInfo[x][vehRank])
						{
							new strr[128];
							if(AdminDuty[playerid] == 1)
							{
								format(strr,sizeof(strr),"This %s (model %d, ID %d) is locked to group %s (%d).",aVehicleNames[GetVehicleModel(VehicleInfo[x][vehCarID]) - 400],GetVehicleModel(VehicleInfo[x][vehCarID]),VehicleInfo[x][vehCarID],DynamicFactions[VehicleInfo[x][vehGroup]][fName],VehicleInfo[x][vehGroup]);
								SendClientMessage(playerid, COLOR_WHITE, strr);
							}
							else if(VehicleInfo[x][vehGroup] != 0 && PlayerInfo[playerid][pMember] != VehicleInfo[x][vehGroup])
							{
								SlapPlayer(playerid);
								format(strr,sizeof(strr),"This vehicle is locked to group %s.",DynamicFactions[VehicleInfo[x][vehGroup]][fName]);
								SendClientMessage(playerid, COLOR_WHITE, strr);
							}
							else
							{
								SlapPlayer(playerid);
								format(strr,sizeof(strr),"You need rank %d to drive this car.",VehicleInfo[x][vehRank]);
								SendClientMessage(playerid, COLOR_WHITE, strr);
							}
							if(OnDuty[playerid] != 1 && PlayerInfo[playerid][pMember] != 7) { SlapPlayer(playerid); SendClientMessage(playerid,COLOR_WHITE, "You are not on duty."); }
							return 1;
						}
						return 1;
					}
				}
				if(VehicleInfo[x][vehJob] != 0)
				{
					if(AdminDuty[playerid] != 1)
					{
						if(VehicleInfo[x][vehJob] == 8 && PlayerInfo[playerid][pJob] != 8)
						{
							SlapPlayer(playerid);
							SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} You need to be a mechanic to drive this car.");
						}
						if(VehicleInfo[x][vehJob] == 10 && PlayerInfo[playerid][pJob] != 10)
						{
							SlapPlayer(playerid);
							SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} You need to be a garbage man to drive this car.");
						}
						else if(VehicleInfo[x][vehJob] == 10) {
							new carid = VehicleInfo[x][vehCarID];
							if(JobCar[playerid] != carid) GarbageInCar[carid] = 0;
							if(JobCar[playerid] != -1 && carid != JobCar[playerid])
							{
								SetVehicleToRespawnEx(JobCar[playerid]);
								JobCar[playerid] = -1;
							}
							JobCar[playerid] = carid;
							if(GarbageInCar[carid] == 0) SS(playerid, COLOR_JOB, "(Job){FFFFFF} Foloseste /collecttrash pentru a incepe sa colectezi gunoiul.","(Job){FFFFFF} Use /collecttrash for start to collect the garbage.");
							else SS(playerid, COLOR_JOB, "(Job){FFFFFF} Foloseste /unloadtrash pentru a descarca gunoiul colectat si a fi platit sau foloseste /collecttrash pentru a colecta mai mult gunoi.","(Job){FFFFFF} Use /unloadtrash for drop garbage collected and get money or use /collecttrash for collect more garbage.");
						}
					}
					else
					{
						new strr[128];
						format(strr,sizeof(strr),"This %s (model %d, ID %d) is locked to job %d.",aVehicleNames[GetVehicleModel(VehicleInfo[x][vehCarID]) - 400],GetVehicleModel(VehicleInfo[x][vehCarID]),VehicleInfo[x][vehCarID],VehicleInfo[x][vehJob]);
						SendClientMessage(playerid, COLOR_WHITE, strr);
					}
				}
			}
		}
		if(IsABike(newcar))
		{
            TogglePlayerControllable(playerid, 1);
            vehEngine[vehicleid] = 1;
            GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
		    SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		}
		if(IsARentCar(newcar))
		{
			if(GetPlayerCash(playerid) < 20)
			{
			    RemovePlayerFromVehicle(playerid);
				return 1;
			}
			PlayerTextDrawSetString(playerid, RentCarText[playerid], "rentcar cost: ~g~$0");
			PlayerTextDrawShow(playerid, RentCarText[playerid]);
			RentTime[playerid] = 1;
			RentMoneySpent[playerid] = 0;
			if(RentCar[playerid] != newcar)
			{
				SS(playerid, COLOR_WHITE, "Masina inchiriata. Foloseste /lock pentru a incuia usile masinii. Vei plati $20/10 secunde cat timp folosesti masina.", "Car rented. Use /lock to lock your new rented car. You will pay $20 / 10 seconds when you are using the car.");
				SS(playerid, COLOR_WHITE, "Masina va fi respawnata dupa 30 minute daca nu este folosita.", "The car will be respawned after 30 minutes when not in use.");
				RentCar[playerid] = newcar;
				foreach(new i : Player)
				{
					if(i != playerid && RentCar[i] == RentCar[playerid])
					{
						RentCar[i] = -1;
						RentTime[i] = 0;
						RentMoneySpent[i] = 0;
						PlayerTextDrawHide(i, RentCarText[i]);
						SendClientMessage(i, COLOR_WHITE, "Your car was rented by another player!");
						SendClientMessage(i, COLOR_WHITE, "Lock it next time if you don't want it to be stolen!");
					}
				}
			}
        }
		if(IsAnOwnableCar(newcar))
		{
			foreach(new i : Player)
			{
				for(new v; v < MAX_PERSONAL_VEHICLES; v++)
				{
					if(PlayerInfo[i][pCarID][v] == newcar)
					{
						if(PlayerInfo[i][pCarIns][v] == 0)
						{
							if(i == playerid)
							{
								format(string, sizeof(string), "Do you want to pay $%s to repair your car?", FormatNumber(PlayerInfo[i][pCarInsPrice][v]));
								ShowPlayerDialog(playerid, DIALOG_CARDAMAGE, DIALOG_STYLE_MSGBOX, "Pay for insurance!", string, "Pay", "Cancel");
							}
							else
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, COLOR_WHITE, "Can't drive this car until the owner pay the insurance.");
							}
						}
					}
				}
			}
    	}
		if(IsAnOwnableCar(newcar))
		{
			new stringtext[100],vip[64];
			format(stringtext,sizeof(stringtext),"~r~~h~~h~~h~~h~%s",aVehicleNames[GetVehicleModel(GetPlayerVehicleID(playerid))-400]);
			GameTextForPlayer(playerid, stringtext, 5000, 1);
			foreach(new i : Player)
			{
				for(new v; v < MAX_PERSONAL_VEHICLES; v++)
				{
					if(PlayerInfo[i][pCarID][v] == newcar)
					{
						if(PlayerInfo[i][pCarVIP][v] > 0) format(vip, sizeof(vip), "{FFFF00}[VIP]");
						else format(vip, sizeof(vip), "");
						if(PlayerInfo[i][pCarStage][v] > 0) format(vip, sizeof(vip), "%s {31a010}[S:%d/3]", vip, PlayerInfo[i][pCarStage][v]);

						if(PlayerInfo[playerid][pCarNeon][v] == 1) format(vip, sizeof(vip), "%s {E02121}[N]", vip);
						else if(PlayerInfo[playerid][pCarNeon][v] == 2) format(vip, sizeof(vip), "%s {28E128}[N]", vip);
						else if(PlayerInfo[playerid][pCarNeon][v] == 3) format(vip, sizeof(vip), "%s {DCE617}[N]", vip);
						else if(PlayerInfo[playerid][pCarNeon][v] == 4) format(vip, sizeof(vip), "%s {E617CA}[N]", vip);
						else if(PlayerInfo[playerid][pCarNeon][v] == 5) format(vip, sizeof(vip), "%s {1E5EE0}[N]", vip);

						if(PlayerInfo[i][pCarColor1][v] >= 128 || PlayerInfo[i][pCarColor2][v] >= 128)
						{
							format(string,sizeof(string),"This %s (ID %d) is owned by %s | Age: %d days | Odometer: %.0f km | Insurance: $%d (%d points) | Hidden colors: %d, %d %s",aVehicleNames[PlayerInfo[i][pCarModel][v] - 400],PlayerInfo[i][pCar][v],PlayerInfo[i][pNormalName],GetDaysFromTimestamp(PlayerInfo[i][pCarBuyTime][v]),PlayerInfo[i][pCarKM][v],PlayerInfo[i][pCarInsPrice][v],PlayerInfo[i][pCarIns][v],PlayerInfo[i][pCarColor1][v],PlayerInfo[i][pCarColor2][v],vip);
							SendSplitMessage(playerid, COLOR_WHITE, string);
						}
						else
						{
							format(string,sizeof(string),"This %s (ID %d) is owned by %s | Age: %d days | Odometer: %.0f km | Insurance: $%d (%d points) %s",aVehicleNames[PlayerInfo[i][pCarModel][v] - 400],PlayerInfo[i][pCar][v],PlayerInfo[i][pNormalName],GetDaysFromTimestamp(PlayerInfo[i][pCarBuyTime][v]),PlayerInfo[i][pCarKM][v],PlayerInfo[i][pCarInsPrice][v],PlayerInfo[i][pCarIns][v],vip);
							SendSplitMessage(playerid, COLOR_WHITE, string);
						}
					}
				}
			}
		}
		else
		{
			if(IsARentCar(newcar))
			{
				GameTextForPlayer(playerid, "~g~car rented", 5000, 1);
			}
			else
			{
				new stringtext[100];
				format(stringtext,sizeof(stringtext),"~g~~h~%s",aVehicleNames[GetVehicleModel(GetPlayerVehicleID(playerid))-400]);
				GameTextForPlayer(playerid, stringtext, 5000, 1);
			}
		}
		gLastCar[playerid] = newcar;
		gLastDriver[newcar] = playerid;
	}
	if(newstate == PLAYER_STATE_SPAWNED)
	{
		new Float: lwx, Float:lwy, Float:lwz;
		GetPlayerPos(playerid, lwx, lwy, lwz);
		if((lwz > 530.0 && PlayerInfo[playerid][pInt] == 0) || PlayerToPoint(1000.0, playerid, -1041.9,-1868.4,79.1)) //the highest land point in sa = 526.8
		{
			SetPlayerSpawn(playerid);
		}
		if(WantedPoints[playerid] > 0)
		{
		    PlayerInfo[playerid][pWantedDeaths] += 1;
		}
		if(PlayerInfo[playerid][pPremiumAccount] > 0)
		{
		    SetPlayerHealthEx(playerid, 100.0);
		}
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		gPlayerSpawned[playerid] = 1;
		SafeTime[playerid] = 60;
	}
	return 1;
}

forward CarCheck();
public CarCheck()
{
	new string[256];
	foreach(new j : Player)
	{
	    if(IsPlayerConnected(j))
	    {
		    new Float:health;
		    GetPlayerHealth(j, health);
			SetPlayerHealthEx(j, health - 1.0);
			if(GetPlayerCash(j) < 0)
			{
			    if(MoneyMessage[j]==0)
			    {
				    format(string, sizeof(string), "You are in debt, you have till next Time Check to get: $%d or you go to jail.", GetPlayerCash(j));
					SendClientMessage(j, COLOR_LIGHTRED, string);
					MoneyMessage[j] = 1;
				}
			}
			else
			{
			    MoneyMessage[j] = 0;
			}
		}
	}
	return 1;
}

forward CarTow(carid);
public CarTow(carid)
{
	foreach(new i : Player)
	{
		if(IsPlayerInVehicle(i, carid))
		{
			return 0;
		}
	}
	return 1;
}

forward LocateCar(car,playerid);
public LocateCar(car,playerid)
{
    new Float:x,Float:y,Float:z,Float:xx,Float:yy,Float:zz,Float: distance,string[256];
	GetVehiclePos(car, x, y, z);
	GetPlayerPos(playerid, xx, yy, zz);
	SetPlayerCheckpoint(playerid, x, y, z, 4);
	gPlayerCheckpointStatus[playerid] = CHECKPOINT_LOCATE;
	distance = GetDistanceBetweenPoints(xx,yy,zz,x,y,z);
	if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Mergi la punctul rosu de pe minimap pentru a ajunge la masina ta. Distanta: %.0fm.", distance);
	else format(string, sizeof(string), "Follow the checkpoint to get your car. Distance: %.0fm.", distance);
	SendClientMessage(playerid,COLOR_YELLOW,string);
	CP[playerid] = 43;
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
    if(!success)
    {
        new pip[16],string[256],name[25];
        foreach(new i : Player)
        {
            GetPlayerIp(i, pip, sizeof(pip));
            if(!strcmp(ip, pip, true) && !AdminAcces(i))
           	{
				GetPlayerName(i, name, sizeof(name));
		        format(string,sizeof(string),"Notice: {FFFFFF}%s has entered a wrong rcon password (IP: %s).",name,ip);
                ABroadCast(COLOR_RED2,string,5);
                KickEx(i);
                return 1;
            }
        }
    }
    else if(success)
    {
        new pip[16],string[256],name[25];
        foreach(new i : Player)
        {
            GetPlayerIp(i, pip, sizeof(pip));
            if(!strcmp(ip, pip, true))
           	{
				GetPlayerName(i, name, sizeof(name));
		        format(string,sizeof(string),"Notice: {FFFFFF}%s (%d) has connected successfully to rcon (IP: %s).",name,i,ip);
                ABroadCast(COLOR_RED2,string,5);
                return 1;
            }
        }
	}
    return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(RainbowOn[playerid] == 1) 
	{
		ChangeVehicleColor(RainbowCarID[playerid],PlayerInfo[playerid][pCarColor1][RainbowCarIN[playerid]],PlayerInfo[playerid][pCarColor2][RainbowCarIN[playerid]]);
		RainbowOn[playerid] = 0;
		RainbowCarID[playerid] = -1;
		RainbowCarIN[playerid] = -1;
		SendClientMessage(playerid, COLOR_DARKPINK, "Rainbow mode disabled.");
	}
    StopAudioStreamForPlayer(playerid);
	if(IsAnOwnableCar(vehicleid))
	{
		foreach(new i : Player)
		{
			for(new v; v < MAX_PERSONAL_VEHICLES; v++)
			{
				if(PlayerInfo[i][pCarID][v] == vehicleid)
				{
					GetVehiclePos(vehicleid, PlayerInfo[i][pCarLLocX][v], PlayerInfo[i][pCarLLocY][v], PlayerInfo[i][pCarLLocZ][v]);
					GetVehicleZAngle(vehicleid, PlayerInfo[i][pCarAngle2][v]);
					cUpdate(i, v, cLocationx2x);
					cUpdate(i, v, cLocationy2x);
					cUpdate(i, v, cLocationz2x);
					cUpdate(i, v, cAngle2x);
				}
			}
		}
		for(new v; v < MAX_PERSONAL_VEHICLES; v++)
		{
			if(PlayerInfo[playerid][pCarID][v] == vehicleid)
			{
				SetVehicleParamsForPlayer(vehicleid,playerid,0,0);
			}
		}
	}
	for(new cl=1;cl<=clanss;cl++)
	{
		for(new vv; vv < MAX_CLAN_VEHICLES; vv++)
			if(ClanInfo[cl][cCarID][vv] == vehicleid) 
			{ 
				KillTimer(destroytimer[cl][vv]);
				destroytimer[cl][vv] = SetTimerEx("DestroyClanCar",600000,0,"d",ClanInfo[cl][cCarID][vv]);
			}
	}
    if(TakingLesson[playerid] == 1 || examcar[playerid] != -1)
    {
        PlayerTextDrawHide(playerid, DMVexam[playerid]);
        PlayerTextDrawHide(playerid, DMVcheck[playerid]);
        TakingLesson[playerid] = 0;
	    DisablePlayerRaceCheckpoint(playerid);
        DestroyVehicle(examcar[playerid]);
		DisableRemoteVehicleCollisions(playerid, 0);
		examcar[playerid] = -1;
		SS(playerid, COLOR_WHITE, "Ai picat examenul pentru ca ai coborat din vehicul.","You lose the exam because you get off the vehicle.");
    }
    if(HaveHelmet[playerid] == 1)
    {
    	HaveHelmet[playerid] = 0;
		RemovePlayerAttachedObject(playerid, 9);
		if(PlayerInfo[playerid][pPet] != 0 && PlayerInfo[playerid][pPetStatus] != 0) AttachPet(playerid);
    }
    if(CP[playerid] == 34)
	{
	    TowAcc[playerid] = 1;
		new towedcar;
		towedcar = GetVehicleTrailer(GetPlayerVehicleID(playerid));
		SetVehicleToRespawn(towedcar);
		SetVehicleToRespawn(vehicleid);
		RemovePlayerFromVehicle(playerid);
   		CP[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	    SetTimerEx("TowAgain", 120000, 0, "i", playerid);
	}
	if(PlayerInfo[playerid][pJobVehicle] != 0) CancelJob(playerid);
	if(BeeCar[playerid] != 0) BeeCancel(playerid);
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	if(gPlayerLogged[playerid] == 1)
	{
		PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
		new query[184];
        mysql_format(SQL,query, sizeof(query), "UPDATE users SET `Model`='%d' WHERE `name`='%s'",GetPlayerSkin(playerid),PlayerInfo[playerid][pNormalName]);
		mysql_tquery(SQL,query,"","");
		ChangeClothes[playerid] = 0;
		SpawnPlayer(playerid);
    }
	else
	{
		SendClientMessage(playerid, COLOR_RED2, "You need to log in first.");
	}
    return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(gPlayerLogged[playerid] == 1 && ChangeClothes[playerid] == 0)
	{
		SpawnPlayer(playerid);
	}
	if(RegistrationStep[playerid] == 0 && gPlayerLogged[playerid] != 1)
	{
 		SetPlayerInterior(playerid,0);
		SetPlayerPosEx(playerid, 1742.9814,-1863.0938,16.2048);
		InterpolateCameraPos(playerid, 1804.1313,-1732.0179,21.7294, 1037.3715,-1732.7358,25.2859, 30000, CAMERA_MOVE);
		InterpolateCameraLookAt(playerid,1441.6654,-1732.0317,18.0373,1037.3715,-1732.7358,25.2859, 30000, CAMERA_MOVE);
		TogglePlayerControllable(playerid, 0);
		if(gPlayerAccount[playerid] != 0)
		{
            SendClientMessage(playerid, COLOR_GENANNOUNCE, "SERVER: {FFFFFF}Welcome to rpg.bluffs.ga.");
			SendClientMessage(playerid, COLOR_GENANNOUNCE, "SERVER: {FFFFFF}You already have a registered account, please enter your password into the dialog box.");
			//ShowPlayerDialog(playerid,DIALOG_LOGIN2,DIALOG_STYLE_PASSWORD,"SERVER: Login","Welcome to rpg.bluffs.ga.\n\nPlease enter your password below!","Loginver","Cancel");
			ShowLoginTds(playerid);
		}
		else
		{
			gPlayerAccount[playerid] = 0;
 			new loginname[158],
				stringgg[300],
				playerip[16];
			GetPlayerName(playerid,loginname,sizeof(loginname));
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			new stre[256],timee[64],timee2,timex[11];
			format(stre, sizeof(stre), "SELECT * FROM `bans` WHERE `IP`='%s' AND `Active`='1'", playerip);
			new Cache: xd = mysql_query(SQL, stre);
			if(cache_get_row_count() > 0)
			{
				for(new i, j = cache_get_row_count(); i != j; i++)
				{
					cache_get_field_content(i, "BanTimeDate", timee);
					strmid(timex, timee, 0, 11);
					timee2 = DateToTimestamp(timex);
					if(timee2 > gettime() - 24 * 3600)
					{
						new namex[30];
						GetPlayerName(playerid, namex, sizeof(namex));
						format(stre, sizeof(stre), "User %s was not able to register with IP: %s. (recently banned)", namex, playerip);
						ABroadCast(COLOR_RED, stre, 1);
						SendClientMessage(playerid, COLOR_GENANNOUNCE, "You can not register right now. Please try again in a few hours!");
						SendClientMessage(playerid, COLOR_GENANNOUNCE, "Nu te poti inregistra acum. Incearca din nou peste cateva ore.");
						KickEx(playerid);
						cache_delete(xd);
						return 1;
					}
				}
			}
			cache_delete(xd);
			for(new clanid; clanid < MAX_CLANS; clanid++)
			{
				if(strfind(loginname,ClanInfo[clanid][cClanTag],true) != -1)
				{
					format(stringgg,sizeof(stringgg),"Nu poti folosi acel username. '%s' este inregistrat de un clan. Nu poti folosi acel cuvant in nickname-ul tau.",ClanInfo[clanid][cClanTag]);
					SendClientMessage(playerid, COLOR_RED, stringgg);
					format(stringgg,sizeof(stringgg),"You can't use that username! '%s' is a registered clan tag. You can't use that word in your nickname.",ClanInfo[clanid][cClanTag]);
					SendClientMessage(playerid, COLOR_RED, stringgg);
					KickEx(playerid);
				}
			}
			SendClientMessage(playerid, COLOR_GENANNOUNCE, "SERVER: {FFFFFF}Welcome to rpg.bluffs.ga.");
			SendClientMessage(playerid, COLOR_GENANNOUNCE, "SERVER: {FFFFFF}You aren't registered yet. Please enter your desired password in the dialog box to register.");
			ShowRegisterTds(playerid);
		}
		login[playerid] = 65;
	}
	return 1;
}

forward SetupPlayerForClassSelection(playerid);
public SetupPlayerForClassSelection(playerid)
{
	switch (gTeam[playerid])
	{
		case TEAM_BLUE:
		{
			SetPlayerInterior(playerid,0);
			SetPlayerPosEx(playerid,323.4,305.6,999.1);
			SetPlayerFacingAngle(playerid, 90.0);
		    SetPlayerCameraPos(playerid, 1460.0, -1324.0, 287.2);
		    SetPlayerCameraLookAt(playerid,1374.5, -1291.1, 239.0);
		}
		case TEAM_ADMIN:
		{
		    SetPlayerInterior(playerid,0);
			SetPlayerPosEx(playerid,-2654.4,1424.2,912.4);
			SetPlayerFacingAngle(playerid, 90.0);
		    SetPlayerCameraPos(playerid, 1460.0, -1324.0, 287.2);
		    SetPlayerCameraLookAt(playerid,1374.5, -1291.1, 239.0);
		}
		default:
		{
            SetPlayerPosEx(playerid,358.0976,-1841.3488,5.1257);
		    SetPlayerInterior(playerid,0);
		    SetPlayerFacingAngle(playerid, 90.0);
		    SetPlayerCameraPos(playerid, 1460.0, -1324.0, 287.2);
		    SetPlayerCameraLookAt(playerid,1374.5, -1291.1, 239.0);
		}
	}
}

forward SetPlayerTeamFromClass(playerid,classid);
public SetPlayerTeamFromClass(playerid,classid)
{
 	if(classid >= 1 && classid <= 15)
	{
		gTeam[playerid] = 15; //admin
		PlayerInfo[playerid][pTeam] = 15;
	}
	else
	{
	    gTeam[playerid] = 3;
	    PlayerInfo[playerid][pTeam] = 3;
	}
}

// SetPlayerCriminal(playerid,255, "Stealing A Police Vehicle");
forward SetPlayerCriminal(playerid,declare,reason[]);
public SetPlayerCriminal(playerid,declare,reason[])
{
	if(IsPlayerConnected(playerid))
	{
	    PlayerInfo[playerid][pCrimes] += 1;
	    Update(playerid,pCrimesx);
	    new points = WantedPoints[playerid],
			turned[MAX_PLAYER_NAME],
			turner[MAX_PLAYER_NAME],
			turnmes[128],
			ini;
		ini = PlayerInfo[playerid][pWantedLevel];
		GetPlayerName(playerid, turned, sizeof(turned));
		if(declare == -1)
		{
			format(turner, sizeof(turner), "Unknown");
			strmid(PlayerInfo[playerid][pVictim], turner, 0, strlen(turner), 255);
			Update(playerid,pVictimx);
		}
		else
		{
		    if(IsPlayerConnected(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
				strmid(PlayerInfo[playerid][pVictim], turner, 0, strlen(turner), 255);
				Update(playerid,pVictimx);
			}
		}
		new string[184];
		new y,m,d,h,mi;
		getdate(y,m,d);
		gettime(h,mi);
		h+=SERVER_HOUR_FIX;
		if(h == 24) h = 0;
		if(strcmp(PlayerInfo[playerid][pCrime1], "Fara Crima", true) == 0)
		{
			format(string,sizeof(string),"%s",reason);
			strmid(PlayerInfo[playerid][pCrime1], string, 0, strlen(string), 255);
			Update(playerid,pCrime1x);
		}
		else if(strcmp(PlayerInfo[playerid][pCrime2], "Fara Crima", true) == 0)
		{
			format(string,sizeof(string),"%s",reason);
			strmid(PlayerInfo[playerid][pCrime2], string, 0, strlen(string), 255);
			Update(playerid,pCrime2x);
		}
		else if(strcmp(PlayerInfo[playerid][pCrime3], "Fara Crima", true) == 0)
		{
			format(string,sizeof(string),"%s",reason);
		    strmid(PlayerInfo[playerid][pCrime3], string, 0, strlen(string), 255);
			Update(playerid,pCrime3x);
		}
		else if(strcmp(PlayerInfo[playerid][pCrime1],  "Fara Crima", true) == 0 && strcmp(PlayerInfo[playerid][pCrime2], "Fara Crima", true) == 0 && strcmp(PlayerInfo[playerid][pCrime3], "Fara Crima", true) == 0) { }
		else
		{
			format(string,sizeof(string),"%s",reason);
		    strmid(PlayerInfo[playerid][pCrime1], string, 0, strlen(string), 255);
			Update(playerid,pCrime1x);
			format(string, sizeof(string), "Fara Crima");
			strmid(PlayerInfo[playerid][pCrime2], string, 0, strlen(string), 255);
			strmid(PlayerInfo[playerid][pCrime3], string, 0, strlen(string), 255);
			Update(playerid,pCrime2x);
			Update(playerid,pCrime3x);
		}
		if(points > 0)
		{
		    new yesno;
			if(points >= 1 && points <= 3)
			{
				if(PlayerInfo[playerid][pWantedLevel] != 1)
				{
					PlayerInfo[playerid][pWantedLevel] = 1;
					yesno = 1;
				}
			}
			else if(points >= 4 && points <= 5)
			{
				if(PlayerInfo[playerid][pWantedLevel] != 2)
				{
					PlayerInfo[playerid][pWantedLevel] = 2;
					yesno = 1;
				}
			}
			else if(points >= 6 && points <= 7)
			{
				if(PlayerInfo[playerid][pWantedLevel] != 3)
				{
					PlayerInfo[playerid][pWantedLevel] = 3;
					yesno = 1;
				}
			}
			else if(points >= 8 && points <= 9)
			{
				if(PlayerInfo[playerid][pWantedLevel] != 4)
				{
					PlayerInfo[playerid][pWantedLevel] = 4;
					yesno = 1;
				}
			}
			else if(points >= 10 && points <= 11)
			{
				if(PlayerInfo[playerid][pWantedLevel] != 5)
				{
					PlayerInfo[playerid][pWantedLevel] = 5;
					yesno = 1;
				}
			}
			else if(points >= 12 && points <= 13)
			{
				if(PlayerInfo[playerid][pWantedLevel] != 6)
				{
					PlayerInfo[playerid][pWantedLevel] = 6;
					yesno = 1;
				}
			}
			if(PlayerInfo[playerid][pWantedLevel] >= 1)
			{
				if(gTeam[playerid] == 3)
				{
					gTeam[playerid] = 3;
				}
			}
			Update(playerid,pWantedLevelx);
			wantedlost[playerid] = 900;
			if(yesno)
			{
				ini = PlayerInfo[playerid][pWantedLevel]-ini;
				foreach(new i : Player)
				{
					if(IsPlayerConnected(i))
					{
					    if(IsACop(i))
					    {
							format(cbjstore, sizeof(turnmes), "Dispatch: %s [%d] has committed a crime: %s. Reporter: %s. W: +%d. New wanted level: %d.",turned,playerid,reason,turner,ini,PlayerInfo[playerid][pWantedLevel]);
							SendClientMessage(i, COLOR_DBLUE, cbjstore);
						}
					}
				}
				if(PlayerInfo[playerid][pLanguage] == 2) format(turnmes, sizeof(turnmes), "Ai comis o infractiune: %s, raportat de: %s. W: +%d. Nivel de urmarire nou: %d.",reason,turner,ini,PlayerInfo[playerid][pWantedLevel]);
				else format(turnmes, sizeof(turnmes), "You committed a crime: %s, reported by: %s. W: +%d. New wanted level: %d.",reason,turner,ini,PlayerInfo[playerid][pWantedLevel]);
				SendClientMessage(playerid, COLOR_RED2, turnmes);
			}
		}
	}
	return 1;
}

forward BusDriverCheck(playerid);
public BusDriverCheck(playerid)
{
	if(CheckBus[playerid] >= 1)
	{
	    new totalmoney,
	    	string[MAX_STRING],
			string2[MAX_STRING];
		totalmoney = SvarInfo[10][svValue] + PlayerInfo[playerid][pBusSkill]*500;
		if(PlayerInfo[playerid][pPet] != 0) totalmoney+=PlayerInfo[playerid][pPetLevel]*100;
		GivePlayerCash(playerid, totalmoney);
		if(PlayerInfo[playerid][pClan]!=0) {
	    	new safestring[128];
			ClanInfo[PlayerInfo[playerid][pClan]][cClanSeif]+=totalmoney/10;
			ClanUpdate(PlayerInfo[playerid][pClan], ClanSafex);
			PlayerInfo[playerid][pClanDep]+=totalmoney/10;
			Update(playerid, pClanDepx);
			format(safestring,sizeof(safestring), "(Job){FFFFFF} After your work %s$ was added in {%s}clan safe{FFFFFF}.",FormatNumber(totalmoney/10),ClanInfo[PlayerInfo[playerid][pClan]][cClanColor]);
			SendClientMessage(playerid,COLOR_JOB,safestring);
		}
		format(string2,sizeof(string2),"(Job){FFFFFF} Ai primit $%s. Mergi la urmatorul checkpoint.", FormatNumber(totalmoney));
		format(string,sizeof(string),"(Job){FFFFFF} You recieved $%s. Go to the next checkpoint.", FormatNumber(totalmoney));
		SS(playerid, COLOR_JOB, string2,string);
		DisablePlayerRaceCheckpoint(playerid);
	    JobStep[playerid] ++;
		BusCheckk[playerid] ++;
		if(BusCheckk[playerid] >= 10)
		{
			BusCheckk[playerid] = 0;
			PlayerInfo[playerid][pBusRem]--;
			PlayerInfo[playerid][pBusTimes]++;
			Update(playerid,pBusRemx);
			Update(playerid,pBusTimesx);
			if(PlayerInfo[playerid][pBusSkill] <= 5)
			{
				if(PlayerInfo[playerid][pBusRem] <= 0)
				{
					PlayerInfo[playerid][pBusSkill]++;
					if(PlayerInfo[playerid][pBusSkill] == 2)
					{
						PlayerInfo[playerid][pBusRem] = 34;
					}
					else if(PlayerInfo[playerid][pBusSkill] == 3)
					{
						PlayerInfo[playerid][pBusRem] = 49;
					}
					else if(PlayerInfo[playerid][pBusSkill] == 4)
					{
						PlayerInfo[playerid][pBusRem] = 89;
					}
					else if(PlayerInfo[playerid][pBusSkill] == 5)
					{
						PlayerInfo[playerid][pBusRem] = 99;
					}
					Update(playerid,pBusSkillx);
					Update(playerid,pBusRemx);
					new stringe[128];
					format(string,sizeof(string),"Felicitari! Ai acum skill %d pentru acest job!",PlayerInfo[playerid][pBusSkill]);
					format(stringe,sizeof(stringe),"Congratulations! Now you have skill %d for this job!",PlayerInfo[playerid][pBusSkill]);
					SS(playerid, COLOR_YELLOW, string, stringe);
				}
			}
		}
	    KillTimer(timerbus[playerid]);
	    format(string,sizeof(string),"~w~CHECKPOINTS: ~r~%d~w~/~r~59", JobStep[playerid]);
	    PlayerTextDrawSetString(playerid, BusCheck[playerid], string);
		PlayerTextDrawShow(playerid, BusCheck[playerid]);
	    if(JobStep[playerid] == 1) SetPlayerRaceCheckpoint(playerid, 0, 1941.3706,-2169.2083,13.4851,1964.6262,-1899.2827,13.4838,4.0);
	    if(JobStep[playerid] == 2) SetPlayerRaceCheckpoint(playerid, 0, 1964.6262,-1899.2827,13.4838,1921.6910,-1749.1346,13.4828,4.0);
	    if(JobStep[playerid] == 3) SetPlayerRaceCheckpoint(playerid, 0, 1921.6910,-1749.1346,13.4828,1819.4100,-1814.2385,13.5056,4.0);
	    if(JobStep[playerid] == 4) SetPlayerRaceCheckpoint(playerid, 0, 1819.4100,-1814.2385,13.5056,1692.2909,-1764.9092,13.4875,4.0);
	    if(JobStep[playerid] == 5) SetPlayerRaceCheckpoint(playerid, 0, 1692.2909,-1764.9092,13.4875,1395.2542,-1729.2012,13.4901,4.0);
	    if(JobStep[playerid] == 6) SetPlayerRaceCheckpoint(playerid, 0, 1395.2542,-1729.2012,13.4901,1315.4188,-1631.5197,13.4827,4.0);
	    if(JobStep[playerid] == 7) SetPlayerRaceCheckpoint(playerid, 0, 1315.4188,-1631.5197,13.4827,1325.5859,-1392.4742,13.4741,4.0);
	    if(JobStep[playerid] == 8) SetPlayerRaceCheckpoint(playerid, 0, 1325.5859,-1392.4742,13.4741,1209.0767,-1324.8274,13.5002,4.0);
	    if(JobStep[playerid] == 9) SetPlayerRaceCheckpoint(playerid, 0, 1209.0767,-1324.8274,13.5002,1082.8730,-1277.8145,13.5019,4.0);
	    if(JobStep[playerid] == 10) SetPlayerRaceCheckpoint(playerid, 0, 1082.8730,-1277.8145,13.5019,966.0933,-1218.3807,16.8770,4.0);
	    if(JobStep[playerid] == 11) SetPlayerRaceCheckpoint(playerid, 0, 966.0933,-1218.3807,16.8770,818.9665,-1137.8669,23.8506,4.0);
	    if(JobStep[playerid] == 12) SetPlayerRaceCheckpoint(playerid, 0, 818.9665,-1137.8669,23.8506,794.1818,-1301.3213,13.4795,4.0);
	    if(JobStep[playerid] == 13) SetPlayerRaceCheckpoint(playerid, 0, 794.1818,-1301.3213,13.4795,678.5087,-1392.8485,13.5081,4.0);
	    if(JobStep[playerid] == 14) SetPlayerRaceCheckpoint(playerid, 0, 678.5087,-1392.8485,13.5081,380.8662,-1492.7212,32.2020,4.0);
	    if(JobStep[playerid] == 15) SetPlayerRaceCheckpoint(playerid, 0, 380.8662,-1492.7212,32.2020,258.5574,-1537.6969,32.3608,4.0);
	    if(JobStep[playerid] == 16) SetPlayerRaceCheckpoint(playerid, 0, 258.5574,-1537.6969,32.3608,484.7990,-1357.7792,17.9893,4.0);
	    if(JobStep[playerid] == 17) SetPlayerRaceCheckpoint(playerid, 0, 484.7990,-1357.7792,17.9893,588.3983,-1232.8560,17.8009,4.0);
	    if(JobStep[playerid] == 18) SetPlayerRaceCheckpoint(playerid, 0, 588.3983,-1232.8560,17.8009,774.5882,-1058.5305,24.5938,4.0);
	    if(JobStep[playerid] == 19) SetPlayerRaceCheckpoint(playerid, 0, 774.5882,-1058.5305,24.5938,1209.5120,-948.5093,42.8005,4.0);
	    if(JobStep[playerid] == 20) SetPlayerRaceCheckpoint(playerid, 0, 1209.5120,-948.5093,42.8005,1566.5400,-997.7548,45.7116,4.0);
	    if(JobStep[playerid] == 21) SetPlayerRaceCheckpoint(playerid, 0, 1566.5400,-997.7548,45.7116,1709.9061,-733.8804,50.0985,4.0);
	    if(JobStep[playerid] == 22) SetPlayerRaceCheckpoint(playerid, 0, 1709.9061,-733.8804,50.0985,1658.8318,-43.4300,36.4876,4.0);
	    if(JobStep[playerid] == 23) SetPlayerRaceCheckpoint(playerid, 0, 1658.8318,-43.4300,36.4876,1772.3663,581.9141,23.7034,4.0);
	    if(JobStep[playerid] == 24) SetPlayerRaceCheckpoint(playerid, 0, 1772.3663,581.9141,23.7034,1841.4648,829.6874,9.9861,4.0);
	    if(JobStep[playerid] == 25) SetPlayerRaceCheckpoint(playerid, 0, 1841.4648,829.6874,9.9861,2187.5762,806.9039,7.2061,4.0);
	    if(JobStep[playerid] == 26) SetPlayerRaceCheckpoint(playerid, 0, 2187.5762,806.9039,7.2061,2290.9165,841.0883,13.9592,4.0);
	    if(JobStep[playerid] == 27) SetPlayerRaceCheckpoint(playerid, 0, 2290.9165,841.0883,13.9592,2350.4082,1025.8792,10.7723,4.0);
	    if(JobStep[playerid] == 28) SetPlayerRaceCheckpoint(playerid, 0, 2350.4082,1025.8792,10.7723,2570.7004,1070.5811,10.7773,4.0);
	    if(JobStep[playerid] == 29) SetPlayerRaceCheckpoint(playerid, 0, 2570.7004,1070.5811,10.7773,2613.5254,1315.6500,10.7696,4.0);
	    if(JobStep[playerid] == 30) SetPlayerRaceCheckpoint(playerid, 0, 2613.5254,1315.6500,10.7696,2476.1697,1476.3761,10.7715,4.0);
	    if(JobStep[playerid] == 31) SetPlayerRaceCheckpoint(playerid, 0, 2476.1697,1476.3761,10.7715,2401.2478,1616.5609,10.7727,4.0);
	    if(JobStep[playerid] == 32) SetPlayerRaceCheckpoint(playerid, 0, 2401.2478,1616.5609,10.7727,2291.8828,1775.9521,10.7812,4.0);
	    if(JobStep[playerid] == 33) SetPlayerRaceCheckpoint(playerid, 0, 2291.8828,1775.9521,10.7812,2154.7061,1996.3882,10.7744,4.0);
	    if(JobStep[playerid] == 34) SetPlayerRaceCheckpoint(playerid, 0, 2154.7061,1996.3882,10.7744,2228.1877,2386.0630,10.7777,4.0);
	    if(JobStep[playerid] == 35) SetPlayerRaceCheckpoint(playerid, 0, 2228.1877,2386.0630,10.7777,2086.0520,2456.9954,10.8048,4.0);
	    if(JobStep[playerid] == 36) SetPlayerRaceCheckpoint(playerid, 0, 2086.0520,2456.9954,10.8048,1948.1777,2396.3440,10.7688,4.0);
	    if(JobStep[playerid] == 37) SetPlayerRaceCheckpoint(playerid, 0, 1948.1777,2396.3440,10.7688,1922.7677,2317.8069,10.8393,4.0);
	    if(JobStep[playerid] == 38) SetPlayerRaceCheckpoint(playerid, 0, 1922.7677,2317.8069,10.8393,1922.8735,2117.9375,10.8652,4.0);
	    if(JobStep[playerid] == 39) SetPlayerRaceCheckpoint(playerid, 0, 1922.8735,2117.9375,10.8652,2093.9612,2017.9711,10.8407,4.0);
	    if(JobStep[playerid] == 40) SetPlayerRaceCheckpoint(playerid, 0, 2093.9612,2017.9711,10.8407,2039.7142,1522.0779,10.7595,4.0);
	    if(JobStep[playerid] == 41) SetPlayerRaceCheckpoint(playerid, 0, 2039.7142,1522.0779,10.7595,2040.6129,1169.0469,10.7807,4.0);
	    if(JobStep[playerid] == 42) SetPlayerRaceCheckpoint(playerid, 0, 2040.6129,1169.0469,10.7807,2038.9994,878.8145,7.1755,4.0);
	    if(JobStep[playerid] == 43) SetPlayerRaceCheckpoint(playerid, 0, 2038.9994,878.8145,7.1755,1755.5402,619.8901,21.3552,4.0);
	    if(JobStep[playerid] == 44) SetPlayerRaceCheckpoint(playerid, 0, 1755.5402,619.8901,21.3552,1619.3414,186.8276,33.5024,4.0);
	    if(JobStep[playerid] == 45) SetPlayerRaceCheckpoint(playerid, 0, 1619.3414,186.8276,33.5024,1659.4628,-329.5979,40.4135,4.0);
	    if(JobStep[playerid] == 46) SetPlayerRaceCheckpoint(playerid, 0, 1659.4628,-329.5979,40.4135,1688.2992,-728.0701,49.8404,4.0);
	    if(JobStep[playerid] == 47) SetPlayerRaceCheckpoint(playerid, 0, 1688.2992,-728.0701,49.8404,1412.3439,-937.3050,35.6120,4.0);
	    if(JobStep[playerid] == 48) SetPlayerRaceCheckpoint(playerid, 0, 1412.3439,-937.3050,35.6120,1432.5333,-1037.7094,23.7933,4.0);
	    if(JobStep[playerid] == 49) SetPlayerRaceCheckpoint(playerid, 0, 1432.5333,-1037.7094,23.7933,1574.0338,-1138.6904,23.6757,4.0);
	    if(JobStep[playerid] == 50) SetPlayerRaceCheckpoint(playerid, 0, 1574.0338,-1138.6904,23.6757,1711.5553,-1263.2328,13.4910,4.0);
	    if(JobStep[playerid] == 51) SetPlayerRaceCheckpoint(playerid, 0, 1711.5553,-1263.2328,13.4910,1590.8885,-1437.7626,13.4817,4.0);
	    if(JobStep[playerid] == 52) SetPlayerRaceCheckpoint(playerid, 0, 1590.8885,-1437.7626,13.4817,1428.2323,-1567.3893,13.4529,4.0);
	    if(JobStep[playerid] == 53) SetPlayerRaceCheckpoint(playerid, 0, 1428.2323,-1567.3893,13.4529,1446.8442,-1735.5527,13.4789,4.0);
	    if(JobStep[playerid] == 54) SetPlayerRaceCheckpoint(playerid, 0, 1446.8442,-1735.5527,13.4789,1580.1357,-1874.8420,13.4791,4.0);
	    if(JobStep[playerid] == 55) SetPlayerRaceCheckpoint(playerid, 0, 1580.1357,-1874.8420,13.4791,1818.1030,-1904.3914,13.5025,4.0);
	    if(JobStep[playerid] == 56) SetPlayerRaceCheckpoint(playerid, 0, 1818.1030,-1904.3914,13.5025,1958.2472,-1999.3572,13.4949,4.0);
	    if(JobStep[playerid] == 57) SetPlayerRaceCheckpoint(playerid, 0, 1958.2472,-1999.3572,13.4949,1936.2253,-2163.5068,13.4765,4.0);
	    if(JobStep[playerid] == 58)
		{
		    JobStep[playerid] = 0;
	 		SetPlayerRaceCheckpoint(playerid, 0, 1693.2972,-2197.6602,13.4714,1941.3706,-2169.2083,13.4851,4.0);
		}
	}
	return 1;
}

forward restartTimer();
public restartTimer()
{
    iGMXTick--;
	new string[128];
	if(iGMXTick == 0)
	{
		KillTimer(iGMXTimer);
		SetTimer("GameModeInitExitFunc", 1000, 0);
		return 1;
	}
	if(iGMXTick == 20)
	{
		SendClientMessageToAll(COLOR_GREEN3, "Info: Business with real money are prohibited.");
		SendClientMessageToAll(COLOR_GREEN3, "Info: Borrows are made on their own responsibility. We advise you not to borrow money to other players.");
	}
	if(iGMXTick == 40)
	{
		SendClientMessageToAll(COLOR_GREEN3, "Info: Restarts scope are to fix bugs or add new things.");
		SendClientMessageToAll(COLOR_GREEN3, "Info: If added anything on the server, we post on the bluffs.ga/panel.");
		SendClientMessageToAll(COLOR_GREEN3, "Info: If nothing posted on bluffs.ga/panel, probabily nothing new has been added.");
	}
	format(string, sizeof(string), "~w~The server will restart in...~n~ ~r~%d~w~ seconds.", iGMXTick);
	GameTextForAll(string, 1100, 3);
	return 1;
}

forward SetFarmer(playerid);
public SetFarmer(playerid)
{
	if(farmerc[playerid] == 1)
	{
		PlayerTextDrawShow(playerid, farmtime[playerid]);
		PlayerTextDrawShow(playerid, farmtime[playerid]);
	    if(IsPlayerInRangeOfPoint(playerid,270.0,-388.4804,-1395.7417,23.4229))
	    {
			new tmpcar = GetPlayerVehicleID(playerid),
				ccar = IsPlayerInAnyVehicle(playerid),
				spe = Carspeed(playerid);
			GetPlayerPos(playerid, PlayerPos[playerid][0], PlayerPos[playerid][1], PlayerPos[playerid][2]);
			if(PlayerPos[playerid][0] == PlayerPos[playerid][3] && PlayerPos[playerid][1] == PlayerPos[playerid][4] && PlayerPos[playerid][2] == PlayerPos[playerid][5])
			{
				PlayerTextDrawShow(playerid, farmspeed[playerid]);
				if(PlayerInfo[playerid][pLanguage] == 1) PlayerTextDrawSetString(playerid, farmspeed[playerid], "~r~(!) Your moving speed needs to be higher than 25 KM/H.");
				if(PlayerInfo[playerid][pLanguage] == 2) PlayerTextDrawSetString(playerid, farmspeed[playerid], "~r~(!) Trebuie sa mergi cu o viteza mai mare de 25 KM/H.");
				return 1;
			}
			PlayerPos[playerid][3] = PlayerPos[playerid][0];
			PlayerPos[playerid][4] = PlayerPos[playerid][1];
			PlayerPos[playerid][5] = PlayerPos[playerid][2];
			WantedFarmer[playerid]=0;
			if(ccar && IsAFarmer(tmpcar) && spe > 24)
			{
			    PlayerTextDrawHide(playerid, farmspeed[playerid]);
			    PlayerTextDrawHide(playerid, farmwanted[playerid]);
				if(farmertime[playerid] >= 1)
				{
					farmertime[playerid]--;
					new str2[128];
					if(PlayerInfo[playerid][pLanguage] == 1)
					{
						format(str2,sizeof(str2),"~w~Work ~g~%d ~w~more seconds to get your reward",farmertime[playerid]);
					}
					else
					{
						format(str2,sizeof(str2),"~w~Munceste pentru inca ~g~%d ~w~secunde pentru a fi platit",farmertime[playerid]);
					}
					PlayerTextDrawSetString(playerid, farmtime[playerid], str2);
					PlayerTextDrawShow(playerid, farmtime[playerid]);
				}
				else if(farmertime[playerid] == 0)
				{
				    new str3[128];
				    CancelJob(playerid);
					new randomtransport = random(10);
					if(randomtransport > 8)
					{
						new randfarmer;
						if(SvarInfo[2][svValue] == 0) randfarmer = SvarInfo[7][svValue] + PlayerInfo[playerid][pFarmSkill]*1000 + random(5000);
						else randfarmer = PlayerInfo[playerid][pFarmSkill]*1000 + 2000 + SvarInfo[7][svValue] + random(6500);
						if(PlayerInfo[playerid][pPet] != 0) randfarmer+=PlayerInfo[playerid][pPetLevel]*100;
						if(PlayerInfo[playerid][pLanguage] == 1) format(str3,sizeof(str3),"(Job){FFFFFF} The farm owners were very pleased with the quality of your work. You received $%s.",FormatNumber(randfarmer));
						if(PlayerInfo[playerid][pLanguage] == 2) format(str3,sizeof(str3),"(Job){FFFFFF} Detinatorii fermei au fost foarte multumiti de calitatea muncii prestate. Ai primit $%s.",FormatNumber(randfarmer));
						SendClientMessage(playerid,COLOR_JOB,str3);
						GivePlayerCash(playerid,randfarmer);
						if(PlayerInfo[playerid][pClan]!=0) {
					    	new safestring[128];
							ClanInfo[PlayerInfo[playerid][pClan]][cClanSeif]+=randfarmer/10;
							ClanUpdate(PlayerInfo[playerid][pClan], ClanSafex);
							PlayerInfo[playerid][pClanDep]+=randfarmer/10;
							Update(playerid, pClanDepx);
							format(safestring,sizeof(safestring), "(Job){FFFFFF} After your work %s$ was added in {%s}clan safe{FFFFFF}.",FormatNumber(randfarmer/10),ClanInfo[PlayerInfo[playerid][pClan]][cClanColor]);
							SendClientMessage(playerid,COLOR_GREEN,safestring);
						}
					}
					else if(randomtransport >= 0 && randomtransport <= 8)
					{
						new faina;
						if(PlayerInfo[playerid][pFarmSkill] == 1)
						{
							faina = 15 + random(15);
						}
						else if(PlayerInfo[playerid][pFarmSkill] == 2)
						{
							faina = 17 + random(15);
						}
						else if(PlayerInfo[playerid][pFarmSkill] == 3)
						{
							faina = 19 + random(15);
						}
						else if(PlayerInfo[playerid][pFarmSkill] == 4)
						{
							faina = 21 + random(15);
						}
						else if(PlayerInfo[playerid][pFarmSkill] == 5)
						{
							faina = 23 + random(15);
						}
						else if(PlayerInfo[playerid][pFarmSkill] >= 6)
						{
							faina = 25 + random(15);
						}
						if(PlayerInfo[playerid][pPet] != 0) faina+=PlayerInfo[playerid][pPetLevel];
					    AreFaina[playerid] = faina;
						if(PlayerInfo[playerid][pLanguage] == 1)
						{
							SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} The farm owners don't have any money to give you, but they can give you a bag of flour.");
							format(str3,sizeof(str3),"(Job){FFFFFF} You have received a bag that contains %d kg of flour.", faina);
							SendClientMessage(playerid, COLOR_JOB, str3);
							new randsms = random(2);
							if(randsms == 0)
							{
								SendClientMessage(playerid, COLOR_YELLOW, "SMS from Jake_Farmer (5554444): I heard the local fast food store is looking to buy some flour.");
							}
							else
							{
								SendSplitMessage(playerid, COLOR_YELLOW, "SMS from Joe_Farmer (5554443): The local fast food store is probably looking to buy some flour. If I had the time, I would sell it myself.");
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} Detinatorii fermei nu au bani pentru a te plati, dar iti pot oferi un sac cu faina drept rasplata.");
							format(str3,sizeof(str3),"(Job){FFFFFF} Ai primit un sac ce contine %d kg de faina.", faina);
							SendClientMessage(playerid, COLOR_JOB, str3);
							new randsms = random(4);
							if(randsms == 0)
							{
								SendClientMessage(playerid, COLOR_YELLOW, "SMS de la Aurel.Tractoristul (5554441): Poti merge la fast food-urile din zona pentru a vinde faina.");
							}
							else if(randsms == 1)
							{
								SendClientMessage(playerid, COLOR_YELLOW, "SMS de la Marian.Tractoristul (5554442): Poti merge la fast food-urile din zona pentru a vinde faina.");
							}
							else if(randsms == 2)
							{
								SendClientMessage(playerid, COLOR_YELLOW, "SMS de la Mihai.Fermierul (5554443): Poti merge la fast food-urile din zona pentru a vinde faina.");
							}
							else
							{
								SendClientMessage(playerid, COLOR_YELLOW, "SMS de la Gigel.Fermierul (5554444): Poti merge la fast food-urile din zona pentru a vinde faina.");
							}
						}
					}
				}
			}
			else
			{
			    PlayerTextDrawShow(playerid, farmspeed[playerid]);
				if(PlayerInfo[playerid][pLanguage] == 1) PlayerTextDrawSetString(playerid, farmspeed[playerid], "(!) Your moving speed needs to be higher than 25 KM/H.");
				if(PlayerInfo[playerid][pLanguage] == 2) PlayerTextDrawSetString(playerid, farmspeed[playerid], "(!) Trebuie sa mergi cu o viteza mai mare de 25 KM/H.");
			}
		}
		else
		{
			if(WantedFarmer[playerid] == 0)
			{
				PlayerTextDrawHide(playerid, farmspeed[playerid]);
				PlayerTextDrawShow(playerid, farmwanted[playerid]);
				if(PlayerInfo[playerid][pLanguage] == 1) PlayerTextDrawSetString(playerid, farmwanted[playerid], "(!) Go back to the farm or you risk wanted!");
				if(PlayerInfo[playerid][pLanguage] == 2) PlayerTextDrawSetString(playerid, farmwanted[playerid], "(!) Mergi inapoi la ferma altfel risi sa primesti wanted!");
				WantedFarmer[playerid] = 60;
			}
			else
			{
				WantedFarmer[playerid]--;
				if(WantedFarmer[playerid] == 0)
				{
					if(!IsACop(playerid))
					{
						CancelJob(playerid);
						WantedPoints[playerid] += 2;
						SetPlayerCriminal(playerid,-1, "stealing a vehicle from the farm");
					}
					else
					{
						WantedFarmer[playerid] = 60;
					}
				}
			}
		}
	}
	return 1;
}

forward TenSecondsTimer();
public TenSecondsTimer()
{
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i) && gPlayerLogged[i] != 0)
		{
		    if(PlayerInfo[i][pWantedLevel] == 0)
			{
				SetPlayerWantedLevel(i,0);
				PlayerTextDrawHide(i, WantedText[i]);
			}
		    else if(PlayerInfo[i][pWantedLevel] == 1) SetPlayerWantedLevel(i,1);
			else if(PlayerInfo[i][pWantedLevel] == 2) SetPlayerWantedLevel(i,2);
			else if(PlayerInfo[i][pWantedLevel] == 3) SetPlayerWantedLevel(i,3);
			else if(PlayerInfo[i][pWantedLevel] == 4) SetPlayerWantedLevel(i,4);
			else if(PlayerInfo[i][pWantedLevel] == 5) SetPlayerWantedLevel(i,5);
			else if(PlayerInfo[i][pWantedLevel] >= 6) SetPlayerWantedLevel(i,6);
			if(PlayerInfo[i][pWantedLevel] >= 1)
			{
				new str1[256];
			    PlayerTextDrawShow(i, WantedText[i]);
	   			if(PlayerInfo[i][pLanguage] == 2) format(str1,sizeof(str1),"WANTED SCADE IN: ~r~%d MINUTE",wantedlost[i]/60+1);
				else format(str1,sizeof(str1),"WANTED DECREASES IN: ~r~%d MINUTES",wantedlost[i]/60+1);
				PlayerTextDrawSetString(i, WantedText[i], str1);
			}
			if(IsACop(i))
			{
				foreach(new j : Player)
				{
					if(PlayerInfo[j][pWantedLevel] >= 1)
					{
						SetPlayerMarkerForPlayer( i, j, ( 0xFF2B5D72 & 0xFFFFFF00 ) );
					}
				}
			}
			if(PlayerInfo[i][pQuest1] == 1 && PlayerInfo[i][pQuestProgress1] == 0)
			{
				if(IsPlayerInRangeOfPoint(i,100.0,1356.1946,2147.4456,11.0156))
				{
					PlayerInfo[i][pQuestProgress1] = 1;
					Update(i, pQuestProgress1x);
					FinishQuest1(i, 1);
				}
			}
			if(PlayerInfo[i][pQuest1] == 2 && PlayerInfo[i][pQuestProgress1] == 0)
			{
				if(IsPlayerInRangeOfPoint(i,100.0,-2317.8091,-1637.5575,483.7031))
				{
					PlayerInfo[i][pQuestProgress1] = 1;
					Update(i, pQuestProgress1x);
					FinishQuest1(i, 2);
				}
			}
			if(playerdeath[i] == 1 && IsPlayerAFK[i] == 0) SetPlayerHealthEx(i, 0.0); // [dead] bug
		}
	}
	new query[300],playerid,giverid,actionid,actiontime,complaint,reason[64],stringg[256],playername[30],givername[30],var100[300],dm,reason2[64];
	//Check panel
	format(query, sizeof(query), "SELECT * FROM `panelactions`");
	new Cache: stringresult = mysql_query(SQL, query);
	if(cache_get_row_count() > 0)
	{
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
			playerid                    = cache_get_field_content_int(i, "playerid");
			giverid                     = cache_get_field_content_int(i, "giverid");
			actionid                    = cache_get_field_content_int(i, "actionid");
			actiontime                  = cache_get_field_content_int(i, "actiontime");
			complaint                 	= cache_get_field_content_int(i, "complaintid");
			dm							= cache_get_field_content_int(i, "dm");
			cache_get_field_content(i, "playername", playername, SQL, sizeof(playername));
			cache_get_field_content(i, "givername", givername, SQL, sizeof(givername));
			cache_get_field_content(i, "reason", reason, SQL, sizeof(reason));

			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO panelactions2 (`playerid`,`giverid`,`actionid`,`actiontime`,`complaintid`,`dm`,`playername`,`givername`,`reason`) VALUES ('%d','%d','%d','%d','%d','%d','%s','%s','%s')",playerid,giverid,actionid,actiontime,complaint,dm,playername,givername,reason);
			mysql_tquery(SQL,var100,"","");
			if(actionid == 1) {
				if(complaint > 0)
				{
					format(stringg,sizeof(stringg),"AdmPanel: %s has been banned by %s for %d days, reason: %s [complaint:%d].",playername,givername,actiontime,reason,complaint);
					SendClientMessageToAll(COLOR_LIGHTRED, stringg);
					format(reason2,sizeof(reason2),"%s [complaint:%d]",reason,complaint);
				}
				else
				{
					format(stringg,sizeof(stringg),"AdmPanel: %s has been banned by %s for %d days, reason: %s.",playername,givername,actiontime,reason);
					SendClientMessageToAll(COLOR_LIGHTRED, stringg);
					format(reason2,sizeof(reason2),"%s",reason);
				}
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','1','%d','%s','%s','%s','%d')",playerid,giverid,actiontime,reason2,playername,givername,gettime());
				mysql_tquery(SQL,var100,"","");
				mysql_format(SQL,var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')", playerid, stringg);
				mysql_tquery(SQL,var100,"","");
				foreach(new idd : Player)
				{
					if(PlayerInfo[idd][pSQLID] == playerid)
					{
						KickEx(idd);
					}
				}
			}
			else if(actionid == 2) {
				if(complaint > 0)
				{
					format(stringg,sizeof(stringg),"AdmPanel: %s has been permanent banned by %s, reason: %s [complaint:%d].",playername,givername,reason,complaint);
					SendClientMessageToAll(COLOR_LIGHTRED, stringg);
					format(reason2,sizeof(reason2),"%s [complaint:%d]",reason,complaint);
				}
				else
				{
					format(stringg,sizeof(stringg),"AdmPanel: %s has been permanent banned by %s, reason: %s.",playername,givername,reason);
					SendClientMessageToAll(COLOR_LIGHTRED, stringg);
					format(reason2,sizeof(reason2),"%s",reason);
				}
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','2','0','%s','%s','%s','%d')",playerid,giverid,reason2,playername,givername,gettime());
				mysql_tquery(SQL,var100,"","");
				mysql_format(SQL,var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')", playerid, stringg);
				mysql_tquery(SQL,var100,"","");
				foreach(new idd : Player)
				{
					if(PlayerInfo[idd][pSQLID] == playerid)
					{
						KickEx(idd);
					}
				}
			}
			else if(actionid == 3) {
				if(complaint > 0)
				{
					format(stringg, sizeof(stringg), "AdmPanel: %s was jailed by %s for %d minutes, reason: %s [complaint:%d]",playername,givername,actiontime,reason,complaint);
					SendClientMessageToAll(COLOR_LIGHTRED, stringg);
					format(reason2,sizeof(reason2),"%s [complaint:%d]",reason,complaint);
				}
				else
				{
					format(stringg, sizeof(stringg), "AdmPanel: %s was jailed by %s for %d minutes, reason: %s",playername,givername,actiontime,reason);
					SendClientMessageToAll(COLOR_LIGHTRED, stringg);
					format(reason2,sizeof(reason2),"%s",reason);
				}
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','6','%d','%s','%s','%s','%d')",playerid,giverid,actiontime,reason2,playername,givername,gettime());
				mysql_tquery(SQL,var100,"","");
				mysql_format(SQL,var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')", playerid, stringg);
				mysql_tquery(SQL,var100,"","");
				foreach(new idd : Player)
				{
					if(PlayerInfo[idd][pSQLID] == playerid)
					{
						ResetPlayerWeaponsEx(idd);
						ResetPlayerWeapons(idd);
						WantedPoints[idd] = 0;
						PlayerInfo[idd][pJailed] = 2;
						PlayerInfo[idd][pJailTime] = actiontime*60;
						SetPlayerInterior(idd, 10);
						new rand;
						rand = random(sizeof(gRandomAJailSpawns));
						SetPlayerPosEx(idd,gRandomAJailSpawns[rand][0],gRandomAJailSpawns[rand][1],gRandomAJailSpawns[rand][2]);
						if(dm > 0)
						{
							PlayerInfo[idd][pGunLic] = 0;
							PlayerInfo[idd][pGunLicT] = 0;
							ResetPlayerWeaponsEx(idd);
							ResetPlayerWeapons(idd);
							PlayerInfo[idd][pGunLicSuspend] = dm + 1;
						}
					}
				}
			}
			else if(actionid == 4) {
				if(complaint > 0)
				{
					format(stringg, sizeof(stringg), "AdmPanel: %s received a warn from admin %s, reason: %s [complaint:%d].",playername,givername,reason,complaint);
					SendClientMessageToAll(COLOR_LIGHTRED, stringg);
					format(reason2,sizeof(reason2),"%s [complaint:%d]",reason,complaint);
				}
				else
				{
					format(stringg, sizeof(stringg), "AdmPanel: %s received a warn from admin %s, reason: %s.",playername,givername,reason);
					SendClientMessageToAll(COLOR_LIGHTRED, stringg);
					format(reason2,sizeof(reason2),"%s",reason);
				}
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','5','%d','%s','%s','%s','%d')",playerid,giverid,actiontime,reason2,playername,givername,gettime());
				mysql_tquery(SQL,var100,"","");
				mysql_format(SQL,var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')", playerid, stringg);
				mysql_tquery(SQL,var100,"","");
				foreach(new idd : Player)
				{
					if(PlayerInfo[idd][pSQLID] == playerid)
					{
						PlayerInfo[idd][pWarns] += 1;
					}
				}
				format(query, sizeof(query), "SELECT * FROM `users` WHERE `id`='%d' ORDER BY `id`",playerid);
				new Cache: stringresultt = mysql_query(SQL, query);
				if(cache_get_row_count() > 0)
				{
					new warns,str[256],time;
					for(new is, js = cache_get_row_count (); is != js; ++is)
					{
						warns                    = cache_get_field_content_int(is, "Warnings");
					}
					if(warns == 1)
					{
						mysql_format(SQL,str,sizeof(str),"UPDATE `users` SET `WarnReason1` = '%s' WHERE `name`='%s'",reason,playername);
						mysql_tquery(SQL,str,"","");
					}
					else if(warns == 2)
					{
						mysql_format(SQL,str,sizeof(str),"UPDATE `users` SET `WarnReason2` = '%s' WHERE `name`='%s'",reason,playername);
						mysql_tquery(SQL,str,"","");
					}
					else if(warns > 2)
					{
						format(stringg, sizeof(stringg), "AdmPanel: %s has been banned by AdmBot for 3 days, reason: 3/3 warns.",playername);
						time = gettime() + (3*86400);
						mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', 'AdmBot', '3/3 warns', '0', 3, 0, 0, 1, %d)",
						playername,time);
						mysql_tquery(SQL,str,"","");
						mysql_format(SQL,str,sizeof(str),"UPDATE `users` SET `Warnings`='0', `WarnReason1` = '(null)', `WarnReason2` = '(null)' WHERE `name`='%s'",playername);
						mysql_tquery(SQL,str,"","");
						mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','0','1','3','3/3 warns','%s','AdmBot','%d')",playerid,playername, gettime());
						mysql_tquery(SQL,var100,"","");
						SendClientMessageToAll(COLOR_LIGHTRED, stringg);
						foreach(new idd : Player)
						{
							if(PlayerInfo[idd][pSQLID] == playerid)
							{
								format(stringg, sizeof(stringg), "You have received an warn from admin %s, reason: %s", givername, reason);
								SendClientMessage(idd, COLOR_RED2, stringg);
								KickEx(idd);
							}
						}
					}
				}
				cache_delete(stringresultt);
			}
			else if(actionid == 5) {
				if(complaint > 0)
				{
					format(stringg, sizeof(stringg), "AdmPanel: %s has been muted by %s for %d minutes, reason: %s [complaint:%d].",playername,givername,actiontime,reason,complaint);
					ABroadCast(COLOR_LIGHTRED, stringg, 1);
					format(reason2,sizeof(reason2),"%s [complaint:%d]",reason,complaint);
				}
				else
				{
					format(stringg, sizeof(stringg), "AdmPanel: %s has been muted by %s for %d minutes, reason: %s.",playername,givername,actiontime,reason);
					ABroadCast(COLOR_LIGHTRED, stringg, 1);
					format(reason2,sizeof(reason2),"%s",reason);
				}
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','7','%d','%s','%s','%s','%d')",playerid,giverid,actiontime,reason2,playername,givername,gettime());
				mysql_tquery(SQL,var100,"","");
				mysql_format(SQL,var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')", playerid, stringg);
				mysql_tquery(SQL,var100,"","");
				foreach(new idd : Player)
				{
					if(PlayerInfo[idd][pSQLID] == playerid)
					{
						PlayerInfo[idd][pMuted] = 1;
						PlayerInfo[idd][pMuteTime] = actiontime*60;
						format(stringg, sizeof(stringg), "* You were muted by Admin %s for %d minutes, reason: %s.", givername, actiontime, reason);
						SendClientMessage(idd, COLOR_RED2, stringg);
					}
				}
			}
			else if(actionid == 6) {
				if(complaint > 0)
				{
					format(stringg, sizeof(stringg), "AdmPanel: %s has been kicked by %s, reason: %s [complaint:%d].",playername,givername,reason,complaint);
					SendClientMessageToAll(COLOR_LIGHTRED, stringg);
					format(reason2,sizeof(reason2),"%s [complaint:%d]",reason,complaint);
				}
				else
				{
					format(stringg, sizeof(stringg), "AdmPanel: %s has been kicked by %s, reason: %s.",playername,givername,reason);
					SendClientMessageToAll(COLOR_LIGHTRED, stringg);
					format(reason2,sizeof(reason2),"%s",reason);
				}
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO kicklogs (`playerid`,`giverid`,`playername`,`givername`,`reason`) VALUES ('%d','%d','%s','%s','%s')", playerid,giverid,playername,givername,reason2);
				mysql_tquery(SQL,var100,"","");
				foreach(new idd : Player)
				{
					if(PlayerInfo[idd][pSQLID] == playerid)
					{
						KickEx(idd);
					}
				}
			}
			else if(actionid == 8) {
				foreach(new idd : Player)
				{
					if(PlayerInfo[idd][pSQLID] == playerid)
					{
						if(PlayerInfo[idd][pLanguage] == 2) format(stringg, sizeof(stringg), "Tu sau altcineva ce are acces la contul tau a solicitat deconectarea ta din joc. IP: %s.", playername);
						else format(stringg, sizeof(stringg), "You or someone else that have access to your account has requested to disconnect you from game. IP: %s.", playername);
						SendClientMessage(idd, COLOR_YELLOW, stringg);
						KickEx(idd);
					}
				}
			}
			else if(actionid == 9) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s added %s premium points to account %s.", givername, FormatNumber(complaint),playername);
				ABroadCast(COLOR_COOLRED, stringg, 5);
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s added %s premium points to account %s.", givername, FormatNumber(complaint),playername);
				Log(actiontime, stringg, "set");
				mysql_format(SQL,var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')", playerid, stringg);
				mysql_tquery(SQL,var100,"","");
				foreach(new idd : Player)
				{
					if(PlayerInfo[idd][pSQLID] == playerid)
					{
						PlayerInfo[idd][pPremiumPoints] += complaint;
						format(stringg, sizeof(stringg), "* Admin %s has added %s premium points in your account.", givername, FormatNumber(complaint));
						SendClientMessage(idd, COLOR_RED2, stringg);
					}
				}
			}
			else if(actionid == 12) {
				if(actiontime == 1) DynamicFactions[complaint][fApplication] = 0;
				else if(actiontime == 2) DynamicFactions[complaint][fApplication] = 1;
			}
			else if(actionid == 16) {
				new idd;
				format(query, sizeof(query), "SELECT id FROM `users` WHERE `Clan` = '%d'", complaint);
				new Cache: masta = mysql_query(SQL, query);
				if(cache_get_row_count() >= 1)
				{
					for(new x, xx = cache_get_row_count (); x != xx; ++x)
					{
						idd = cache_get_field_content_int(x, "id");
						mysql_format(SQL, query, sizeof(query), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','Ai fost dat afara din clan deoarece acesta a fost sters.')",idd);
						mysql_tquery(SQL, query, "", "");
					}
				}
				cache_delete(masta);
				mysql_format(SQL, query, sizeof(query), "UPDATE users SET `CRank`='0',`Clan`='0',`ClanJoin`='0',`ClanTag`='0',`ClanWarns`='0' WHERE `Clan`='%d'", complaint);
				mysql_tquery(SQL, query, "", "");
				mysql_format(SQL, query, sizeof(query), "UPDATE `clans` SET `clanName`='None',`clanTag`='[NONE]',`clanMOTD`='Expired',`clanActive`='0' WHERE `clanID`='%d'", complaint);
				mysql_tquery(SQL, query, "", "");
				mysql_format(SQL, query, sizeof(query), "INSERT INTO clan_logs (`action`,`clanid`) VALUES ('The clan was deleted by %s. All members were uninvited.','%d')",playername,complaint);
				mysql_tquery(SQL, query, "", "");
				foreach(new x : Player)
				{
					if(PlayerInfo[x][pClan] == complaint)
					{
						format(stringg, 50, "%s", PlayerInfo[x][pNormalName]);
						SetPlayerName(x,stringg);
						PlayerInfo[x][pClan] = 0;
						PlayerInfo[x][pCRank] = 0;
						PlayerInfo[x][pCWarns] = 0;
					}
				}
			}
			else if(actionid == 17) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s added %s$ to account %s.", givername, FormatNumber(complaint),playername);
				ABroadCast(COLOR_COOLRED, stringg, 5);
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s added %s$ to account %s.", givername, FormatNumber(complaint),playername);
				Log(actiontime, stringg, "set");
				mysql_format(SQL,var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')", playerid, stringg);
				mysql_tquery(SQL,var100,"","");
				foreach(new idd : Player)
				{
					if(PlayerInfo[idd][pSQLID] == playerid)
					{
						PlayerInfo[idd][pAccount] += complaint;
						format(stringg, sizeof(stringg), "* Admin %s has added %s$ in your account.", givername, FormatNumber(complaint));
						SendClientMessage(idd, COLOR_RED2, stringg);
					}
				}
			}
			else if(actionid == 18) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s added %d days from today to expiration date on clan %s.", givername, complaint,ClanInfo[playerid][cClanName]);
				ABroadCast(COLOR_COOLRED, stringg, 5);
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s added %d days from today to expiration date on clan %s.", givername, complaint,ClanInfo[playerid][cClanName]);
				Log(actiontime, stringg, "set");
				ClanInfo[playerid][cClanExpire]=gettime() + (complaint*86400);
				format(stringg,sizeof(stringg),"{%s}[CLAN] Clan expiration date was modified (+%d days).",ClanInfo[playerid][cClanColor],complaint);
				SendToClan(playerid, COLOR_WHITE, stringg);
			}
			else if(actionid == 19) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified clan %s slots to %d.", givername, ClanInfo[playerid][cClanName],complaint);
				ABroadCast(COLOR_COOLRED, stringg, 5);
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified clan %s slots to %d.", givername, ClanInfo[playerid][cClanName],complaint);
				Log(actiontime, stringg, "set");
				ClanInfo[playerid][cClanSlots] = complaint;
				ClanInfo[playerid][cClanActive] = 1;
				format(stringg,sizeof(stringg),"{%s}[CLAN] Clan slots was setted to %d.",ClanInfo[playerid][cClanColor],complaint);
				SendToClan(playerid, COLOR_WHITE, stringg);
			}
			else if(actionid == 20) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified server variabile %s to value %d.", givername, SvarInfo[1][svName],complaint);
				ABroadCast(COLOR_COOLRED, stringg, 5);
				SvarInfo[1][svValue] = complaint;
			}
			else if(actionid == 21) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified server variabile %s to value %d.", givername, SvarInfo[2][svName],complaint);
				ABroadCast(COLOR_COOLRED, stringg, 5);
				SvarInfo[2][svValue] = complaint;
			}
			else if(actionid == 22) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified server variabile %s to value %d.", givername, SvarInfo[3][svName],complaint);
				ABroadCast(COLOR_COOLRED, stringg, 5);
				SvarInfo[3][svValue] = complaint;
			}
			else if(actionid == 23) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified server variabile %s to value %d.", givername, SvarInfo[4][svName],complaint);
				ABroadCast(COLOR_COOLRED, stringg, 5);
				SvarInfo[4][svValue] = complaint;
			}
			else if(actionid == 24) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified server variabile %s to value %d.", givername, SvarInfo[5][svName],complaint);
				ABroadCast(COLOR_COOLRED, stringg, 5);
				SvarInfo[5][svValue] = complaint;
			}
			else if(actionid == 25) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified server variabile %s to value %d.", givername, SvarInfo[6][svName],complaint);
				ABroadCast(COLOR_COOLRED, stringg, 5);
				SvarInfo[6][svValue] = complaint;
			}
			else if(actionid == 26) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified server variabile %s to value %d.", givername, SvarInfo[7][svName],complaint);
				ABroadCast(COLOR_COOLRED, stringg, 5);
				SvarInfo[7][svValue] = complaint;
			}
			else if(actionid == 27) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified server variabile %s to value %d.", givername, SvarInfo[8][svName],complaint);
				ABroadCast(COLOR_COOLRED, stringg, 1);
				SvarInfo[8][svValue] = complaint;
			}
			else if(actionid == 28) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified server variabile %s to value %d.", givername, SvarInfo[9][svName],complaint);
				ABroadCast(COLOR_COOLRED, stringg, 5);
				SvarInfo[9][svValue] = complaint;
			}
			else if(actionid == 29) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified server variabile %s to value %d.", givername, SvarInfo[10][svName],complaint);
				ABroadCast(COLOR_COOLRED, stringg, 5);
				SvarInfo[10][svValue] = complaint;
			}
			else if(actionid == 30) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified server variabile %s to value %d.", givername, SvarInfo[11][svName],complaint);
				ABroadCast(COLOR_COOLRED, stringg, 5);
				SvarInfo[11][svValue] = complaint;
			}
			else if(actionid == 31) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified server variabile %s to value %d.", givername, SvarInfo[12][svName],complaint);
				ABroadCast(COLOR_COOLRED, stringg, 5);
				SvarInfo[12][svValue] = complaint;
			}
			else if(actionid == 32) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified server variabile %s to value %d.", givername, SvarInfo[13][svName],complaint);
				ABroadCast(COLOR_COOLRED, stringg, 5);
				SvarInfo[13][svValue] = complaint;
			}
			else if(actionid == 33) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified server variabile %s to value %d.", givername, SvarInfo[14][svName],complaint);
				ABroadCast(COLOR_COOLRED, stringg, 5);
				SvarInfo[14][svValue] = complaint;
			}
			else if(actionid == 34) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified server variabile %s to value %d.", givername, SvarInfo[15][svName],complaint);
				ABroadCast(COLOR_COOLRED, stringg, 5);
				SvarInfo[15][svValue] = complaint;
			}
			else if(actionid == 35) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified server variabile %s to value %d.", givername, SvarInfo[16][svName],complaint);
				ABroadCast(COLOR_COOLRED, stringg, 5);
				SvarInfo[16][svValue] = complaint;
			}
			else if(actionid == 36) {
				foreach(new idd : Player)
				{
					if(PlayerInfo[idd][pSQLID] == playerid)
					{
						PlayerInfo[idd][pAccepted] = complaint;
						format(stringg, sizeof(stringg), "Your application for %s was accepted for tests.", DynamicFactions[complaint]);
						SendClientMessage(idd, COLOR_YELLOW, stringg);
					}
				}
			}
			else if(actionid == 37) {
				foreach(new idd : Player)
				{
					if(PlayerInfo[idd][pSQLID] == playerid)
					{
						PlayerInfo[idd][pAccepted] = complaint;
						format(stringg, sizeof(stringg), "Your invitation in group %s was confirmed.", DynamicFactions[complaint]);
						SendClientMessage(idd, COLOR_YELLOW, stringg);
					}
				}
			}
			else if(actionid == 38) {
				foreach(new idd : Player)
				{
					if(PlayerInfo[idd][pSQLID] == playerid)
					{
						PlayerInfo[idd][pAccepted] = complaint;
						format(stringg, sizeof(stringg), "Your application was rejected, more details in /email.");
						SendClientMessage(idd, COLOR_YELLOW, stringg);
					}
				}
			}
			else if(actionid == 39) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified server variabile %s to value %d.", givername, SvarInfo[17][svName],complaint);
				ABroadCast(COLOR_COOLRED, stringg, 5);
				SvarInfo[17][svValue] = complaint;
			}
			else if(actionid == 40) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified server variabile %s to value %d.", givername, SvarInfo[18][svName],complaint);
				ABroadCast(COLOR_COOLRED, stringg, 5);
				SvarInfo[18][svValue] = complaint;
			}
			else if(actionid == 41) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified server variabile %s to value %d.", givername, SvarInfo[19][svName],complaint);
				ABroadCast(COLOR_COOLRED, stringg, 5);
				SvarInfo[19][svValue] = complaint;
			}
			else if(actionid == 42) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified server variabile %s to value %d.", givername, SvarInfo[20][svName],complaint);
				ABroadCast(COLOR_COOLRED, stringg, 5);
				SvarInfo[20][svValue] = complaint;
			}
			else if(actionid == 43) {
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified clan %s seif to %d.", givername, ClanInfo[playerid][cClanName],FormatNumber(complaint));
				ABroadCast(COLOR_COOLRED, stringg, 5);
				format(stringg, sizeof(stringg), "AdmPanel: Admin %s modified clan %s seif to %d.", givername, ClanInfo[playerid][cClanName],FormatNumber(complaint));
				Log(actiontime, stringg, "set");
				ClanInfo[playerid][cClanSeif] = complaint;
				format(stringg,sizeof(stringg),"{%s}[CLAN] Clan seif was setted to %d.",ClanInfo[playerid][cClanColor],FormatNumber(complaint));
				SendToClan(playerid, COLOR_WHITE, stringg);
			}
		}
		mysql_query(SQL,"DELETE FROM `panelactions`");
	}
	cache_delete(stringresult);
	// Check emails
	format(query, sizeof(query), "SELECT * FROM `emails` WHERE `EmailRead` = '1' ORDER BY `ID`");
	new Cache: stringresult2 = mysql_query(SQL, query);
	if(cache_get_row_count() > 0)
	{
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
   			playerid                    = cache_get_field_content_int(i, "playerid");
   			giverid                     = cache_get_field_content_int(i, "giverid");
   			foreach(new idd : Player)
   			{
   			    if(PlayerInfo[idd][pSQLID] == playerid && PlayerInfo[idd][pNextNotification] < 1 && gPlayerLogged[idd] == 1 && PlayerInfo[idd][pBlockedAcc] == 0)
   			    {
   			        SendClientMessage(idd, COLOR_YELLOW, "{FF6200}** {FFFF00}You have a new email(s). Use /email to read it. {FF6200}**");
   			        PlayerInfo[idd][pNextNotification] = 3600;
				}
			}
		}
	}
	cache_delete(stringresult2);
	return 1;
}

forward SavePlayerData();
public SavePlayerData()
{
	foreach(new i : Player)
	{
		Update(i, pPayDayx);
		Update(i, pFpunishx);
		Update(i, pConnectTimex);
		Update(i, pBank);
		Update(i, pCashx);
		Update(i, pExpx);
		Update(i, pJailedx);
		Update(i, pJailTimex);
		Update(i, pLevelx);
		Update(i, pOnlineTimeTodayx);
	}
	new query[300],var100[300],string[256],qqerry[256];
	// Auto Delete Server Logs
	foreach(new id : Player)
	{
		//Delete Chat Logs
		format(query, sizeof(query), "SELECT * FROM `chat_logs` WHERE `playerid`='%d' ORDER BY `ID`", PlayerInfo[id][pSQLID]);
		new Cache: chatnums = mysql_query(SQL, query);
		if(cache_get_row_count() > 500)
		{
			new limit = cache_get_row_count() - 500;
			mysql_format(SQL, var100, sizeof(var100), "DELETE FROM `chat_logs` WHERE `playerid`='%d' ORDER BY `ID` ASC limit %d", PlayerInfo[id][pSQLID], limit);
    		mysql_tquery(SQL, var100, "", "");
		}
		cache_delete(chatnums);
     /*//Delete Player Logs
		format(query, sizeof(query), "SELECT * FROM `playerlogs` WHERE `playerid` = '%d' ORDER BY `ID`", PlayerInfo[id][pSQLID]);
		new Cache: stringresult3 = mysql_query(SQL, query);
		if(cache_get_row_count() > 500)
		{
			new limit = cache_get_row_count() - 200;
   			mysql_format(SQL, var100, sizeof(var100), "DELETE FROM `playerlogs` WHERE `playerid`='%d' ORDER BY `ID` ASC limit %d", PlayerInfo[id][pSQLID], limit);
    		mysql_tquery(SQL, var100, "", "");
		}
		cache_delete(stringresult3);*/
		//Delete Kill Logs
		format(query, sizeof(query), "SELECT * FROM `kill_logs` WHERE `playerid` = '%d' ORDER BY `ID`", PlayerInfo[id][pSQLID]);
		new Cache: stringresult5 = mysql_query(SQL, query);
		if(cache_get_row_count() > 100)
		{
			new limit = cache_get_row_count() - 100;
   			mysql_format(SQL, var100, sizeof(var100), "DELETE FROM `kill_logs` WHERE `playerid`='%d' ORDER BY `ID` ASC limit %d", PlayerInfo[id][pSQLID], limit);
    		mysql_tquery(SQL, var100, "", "");
		}
		cache_delete(stringresult5);
		//Delete Suspect Logs
		format(query, sizeof(query), "SELECT * FROM `su_logs` WHERE `playerid` = '%d' ORDER BY `ID`", PlayerInfo[id][pSQLID]);
		new Cache: stringresult6 = mysql_query(SQL, query);
		if(cache_get_row_count() > 50)
		{
			new limit = cache_get_row_count() - 50;
   			mysql_format(SQL, var100, sizeof(var100), "DELETE FROM `su_logs` WHERE `playerid`='%d' ORDER BY `ID` ASC limit %d", PlayerInfo[id][pSQLID], limit);
    		mysql_tquery(SQL, var100, "", "");
		}
		cache_delete(stringresult6);
	}
	//Auto Delete IP Logs
	mysql_format(SQL, query, sizeof(query), "DELETE FROM playerconnections WHERE time < %d", gettime()-86400*14);
	mysql_tquery(SQL, query, "", "");
	//Raport automat
	format(query, sizeof(query), "SELECT * FROM `users` WHERE `FactionTime` <= '%d' AND `Rank` <= '5' AND `Member` > '0' ORDER BY `id`",gettime());
	new Cache: stringresult9 = mysql_query(SQL, query);
	new raportrep = cache_get_row_count();
   	for(new pk = 1; pk <= raportrep; pk++)
    {
		new rank,faction,name[50],sqlid,date[6],nextftime,raport1,raport2,raport3,raport4,complete,puncte,factionjoin,fwarn,admin;
		cache_get_field_content(0, "name", name, SQL, sizeof(name));
		rank = cache_get_field_content_int(0, "Rank");
		faction = cache_get_field_content_int(0, "Member");
		sqlid = cache_get_field_content_int(0, "id");
		raport1 = cache_get_field_content_int(0, "Raport1");
		raport2 = cache_get_field_content_int(0, "Raport2");
		raport3 = cache_get_field_content_int(0, "Raport3");
		raport4 = cache_get_field_content_int(0, "Raport4");
		factionjoin = cache_get_field_content_int(0, "FactionJoin");
		fwarn = cache_get_field_content_int(0, "FWarn");
		admin = cache_get_field_content_int(0, "Admin");
		if(fwarn > 0) fwarn--;
		nextftime = gettime() + (7*86400);
		if((faction == 1 && admin == 0 && SvarInfo[3][svValue] == 1) || (faction == 8 && admin == 0 && SvarInfo[3][svValue] == 1))
			if(raport2+raport3 >= 11-rank && raport4 >= 2 && rank >=2 && raport1 >= 3) complete = 1;
			else if(raport2+raport3 >= 11-rank && raport1 >= 3 && rank == 1) complete = 1;
			else if((raport2+raport3 < 0 || raport4 < 0 || raport1 < 0) && rank >= 2)
			{
				format(string, sizeof(string), "You was uninvited from faction %s (rank %d) after %d days. Reason: Raport incomplet.",NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
				mysql_format(SQL, qqerry, sizeof(qqerry), "INSERT INTO `emails` (`playerid`,`Message`) VALUES ('%d','%s')", sqlid, string);
				mysql_tquery(SQL, qqerry, "", "");
				foreach(new id : Player)
				{
					if(PlayerInfo[id][pSQLID] == sqlid)
					{
						PlayerInfo[id][pMember] = 0;
		                PlayerInfo[id][pLeader] = 0;
		                PlayerInfo[id][pRank] = 0;
						PlayerInfo[id][pFACWarns] = 0;
						PlayerInfo[id][pFactionJoin] = 0;
						gTeam[id] = 3;
						PlayerInfo[id][pTeam] = 3;
						OnDuty[id] = 0;
						tazer[id] = 0;
						SetPlayerArmourEx(id, 0);
		    			SetPlayerSkin(id,PlayerInfo[id][pModel]);
						SetPlayerToTeamColor(id);
						SendClientMessage(id, COLOR_LIGHTRED, string);
					}
				}
				new str[256];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Member`='0',`Leader`='0',`Rank`='0',`FWarn`='0',`FPunish`='0',`Team`='3', `FactionJoin`='0' WHERE `name`='%s'",name);
				mysql_tquery(SQL,str,"","");

				format(string, sizeof(string), "%s was uninvited from faction %s (rank %d) after %d days. Reason: Raport incomplet.",name,NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
				Factionlog(faction,sqlid,0,string);

				mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string, sqlid, 0);
				mysql_tquery(SQL,query,"","");
			}
			else  
			{
				complete = 0;
				if(rank >= 2)
				{
					puncte = 11-rank-raport2-raport3;
					raport2 = 0 - puncte;
					raport4 = 0 - (2-raport4);
					raport1 = 0 - (3-raport1);
					format(string, sizeof(string), "Your raport was incomplete and setted on minus, complete it if you want to remain in faction.",NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
					mysql_format(SQL, qqerry, sizeof(qqerry), "INSERT INTO `emails` (`playerid`,`Message`) VALUES ('%d','%s')", sqlid, string);
					mysql_tquery(SQL, qqerry, "", "");
					foreach(new id : Player)
					{
						if(PlayerInfo[id][pSQLID] == sqlid)
						{
							PlayerInfo[id][Raport1] = raport1;
							PlayerInfo[id][Raport2] = raport2;
							PlayerInfo[id][Raport3] = raport3;
							PlayerInfo[id][Raport4] = raport4;
							SendClientMessage(id, COLOR_LIGHTRED, string);
						}
					}
				}
				else 
				{
					format(string, sizeof(string), "You was uninvited from faction %s (rank %d) after %d days. Reason: Raport incomplet.",NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
					mysql_format(SQL, qqerry, sizeof(qqerry), "INSERT INTO `emails` (`playerid`,`Message`) VALUES ('%d','%s')", sqlid, string);
					mysql_tquery(SQL, qqerry, "", "");
					foreach(new id : Player)
					{
						if(PlayerInfo[id][pSQLID] == sqlid)
						{
							PlayerInfo[id][pMember] = 0;
			                PlayerInfo[id][pLeader] = 0;
			                PlayerInfo[id][pRank] = 0;
							PlayerInfo[id][pFACWarns] = 0;
							PlayerInfo[id][pFactionJoin] = 0;
							gTeam[id] = 3;
							PlayerInfo[id][pTeam] = 3;
							OnDuty[id] = 0;
							tazer[id] = 0;
							SetPlayerArmourEx(id, 0);
			    			SetPlayerSkin(id,PlayerInfo[id][pModel]);
							SetPlayerToTeamColor(id);
							SendClientMessage(id, COLOR_LIGHTRED, string);
						}
					}
					new str[256];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Member`='0',`Leader`='0',`Rank`='0',`FWarn`='0',`FPunish`='0',`Team`='3', `FactionJoin`='0' WHERE `name`='%s'",name);
					mysql_tquery(SQL,str,"","");
					format(string, sizeof(string), "%s was uninvited from faction %s (rank %d) after %d days. Reason: Raport incomplet.",name,NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
					Factionlog(faction,sqlid,0,string);

					mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string, sqlid, 0);
					mysql_tquery(SQL,query,"","");
				}
			}
		if((faction == 2 && admin == 0 && SvarInfo[3][svValue] == 1) || (faction == 3 && admin == 0 && SvarInfo[3][svValue] == 1))
			if(raport2+raport3 >= 11-rank) complete = 1;
			else if(raport2+raport3 < 0 && rank >= 2)
			{
				format(string, sizeof(string), "You was uninvited from faction %s (rank %d) after %d days. Reason: Raport incomplet.",NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
				mysql_format(SQL, qqerry, sizeof(qqerry), "INSERT INTO `emails` (`playerid`,`Message`) VALUES ('%d','%s')", sqlid, string);
				mysql_tquery(SQL, qqerry, "", "");
				foreach(new id : Player)
				{
					if(PlayerInfo[id][pSQLID] == sqlid)
					{
						PlayerInfo[id][pMember] = 0;
		                PlayerInfo[id][pLeader] = 0;
		                PlayerInfo[id][pRank] = 0;
						PlayerInfo[id][pFACWarns] = 0;
						PlayerInfo[id][pFactionJoin] = 0;
						gTeam[id] = 3;
						PlayerInfo[id][pTeam] = 3;
						OnDuty[id] = 0;
						tazer[id] = 0;
						SetPlayerArmourEx(id, 0);
		    			SetPlayerSkin(id,PlayerInfo[id][pModel]);
						SetPlayerToTeamColor(id);
						SendClientMessage(id, COLOR_LIGHTRED, string);
					}
				}
				new str[256];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Member`='0',`Leader`='0',`Rank`='0',`FWarn`='0',`FPunish`='0',`Team`='3', `FactionJoin`='0' WHERE `name`='%s'",name);
				mysql_tquery(SQL,str,"","");
				format(string, sizeof(string), "%s was uninvited from faction %s (rank %d) after %d days. Reason: Raport incomplet.",name,NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
				Factionlog(faction,sqlid,0,string);

				mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string, sqlid, 0);
				mysql_tquery(SQL,query,"","");
			}
			else 
			{
				complete = 0;
				if(rank >= 2)
				{
					puncte = 11-raport2-raport3;
					raport2 = 0 - puncte;
					format(string, sizeof(string), "Your raport was incomplete and setted on minus, complete it if you want to remain in faction.",NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
					mysql_format(SQL, qqerry, sizeof(qqerry), "INSERT INTO `emails` (`playerid`,`Message`) VALUES ('%d','%s')", sqlid, string);
					mysql_tquery(SQL, qqerry, "", "");
					foreach(new id : Player)
					{
						if(PlayerInfo[id][pSQLID] == sqlid)
						{
							PlayerInfo[id][Raport2] = raport2;
							PlayerInfo[id][Raport3] = raport3;
							SendClientMessage(id, COLOR_LIGHTRED, string);
						}
					}
				}
				else 
				{
					format(string, sizeof(string), "You was uninvited from faction %s (rank %d) after %d days. Reason: Raport incomplet.",NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
					mysql_format(SQL, qqerry, sizeof(qqerry), "INSERT INTO `emails` (`playerid`,`Message`) VALUES ('%d','%s')", sqlid, string);
					mysql_tquery(SQL, qqerry, "", "");
					foreach(new id : Player)
					{
						if(PlayerInfo[id][pSQLID] == sqlid)
						{
							PlayerInfo[id][pMember] = 0;
			                PlayerInfo[id][pLeader] = 0;
			                PlayerInfo[id][pRank] = 0;
							PlayerInfo[id][pFACWarns] = 0;
							PlayerInfo[id][pFactionJoin] = 0;
							gTeam[id] = 3;
							PlayerInfo[id][pTeam] = 3;
							OnDuty[id] = 0;
							tazer[id] = 0;
							SetPlayerArmourEx(id, 0);
			    			SetPlayerSkin(id,PlayerInfo[id][pModel]);
							SetPlayerToTeamColor(id);
							SendClientMessage(id, COLOR_LIGHTRED, string);
						}
					}
					new str[256];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Member`='0',`Leader`='0',`Rank`='0',`FWarn`='0',`FPunish`='0',`Team`='3', `FactionJoin`='0' WHERE `name`='%s'",name);
					mysql_tquery(SQL,str,"","");
					format(string, sizeof(string), "%s was uninvited from faction %s (rank %d) after %d days. Reason: Raport incomplet.",name,NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
					Factionlog(faction,sqlid,0,string);

					mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string, sqlid, 0);
					mysql_tquery(SQL,query,"","");
				}
			}
		if((faction == 4 && admin == 0 && SvarInfo[3][svValue] == 1) || (faction == 5 && admin == 0 && SvarInfo[3][svValue] == 1) || (faction == 6 && admin == 0 && SvarInfo[3][svValue] == 1) || (faction == 10 && admin == 0 && SvarInfo[3][svValue] == 1))
			if(raport1+raport2 >= 11-rank) complete = 1;
			else if(raport1+raport2 < 0 && rank >= 2)
			{
				format(string, sizeof(string), "You was uninvited from faction %s (rank %d) after %d days. Reason: Raport incomplet.",NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
				mysql_format(SQL, qqerry, sizeof(qqerry), "INSERT INTO `emails` (`playerid`,`Message`) VALUES ('%d','%s')", sqlid, string);
				mysql_tquery(SQL, qqerry, "", "");
				foreach(new id : Player)
				{
					if(PlayerInfo[id][pSQLID] == sqlid)
					{
						PlayerInfo[id][pMember] = 0;
		                PlayerInfo[id][pLeader] = 0;
		                PlayerInfo[id][pRank] = 0;
						PlayerInfo[id][pFACWarns] = 0;
						PlayerInfo[id][pFactionJoin] = 0;
						gTeam[id] = 3;
						PlayerInfo[id][pTeam] = 3;
						OnDuty[id] = 0;
						tazer[id] = 0;
						SetPlayerArmourEx(id, 0);
		    			SetPlayerSkin(id,PlayerInfo[id][pModel]);
						SetPlayerToTeamColor(id);
						SendClientMessage(id, COLOR_LIGHTRED, string);
					}
				}
				new str[256];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Member`='0',`Leader`='0',`Rank`='0',`FWarn`='0',`FPunish`='0',`Team`='3', `FactionJoin`='0' WHERE `name`='%s'",name);
				mysql_tquery(SQL,str,"","");
				format(string, sizeof(string), "%s was uninvited from faction %s (rank %d) after %d days. Reason: Raport incomplet.",name,NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
				Factionlog(faction,sqlid,0,string);

				mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string, sqlid, 0);
				mysql_tquery(SQL,query,"","");
			}
			else
			{
				complete = 0;
				if(rank >= 2)
				{
					puncte = 11-rank-raport1-raport2;
					raport2 = 0 - puncte;
					format(string, sizeof(string), "Your raport was incomplete and setted on minus, complete it if you want to remain in faction.",NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
					mysql_format(SQL, qqerry, sizeof(qqerry), "INSERT INTO `emails` (`playerid`,`Message`) VALUES ('%d','%s')", sqlid, string);
					mysql_tquery(SQL, qqerry, "", "");
					foreach(new id : Player)
					{
						if(PlayerInfo[id][pSQLID] == sqlid)
						{
							PlayerInfo[id][Raport1] = raport1;
							PlayerInfo[id][Raport2] = raport2;
							SendClientMessage(id, COLOR_LIGHTRED, string);
						}
					}
				}
				else 
				{
					format(string, sizeof(string), "You was uninvited from faction %s (rank %d) after %d days. Reason: Raport incomplet.",NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
					mysql_format(SQL, qqerry, sizeof(qqerry), "INSERT INTO `emails` (`playerid`,`Message`) VALUES ('%d','%s')", sqlid, string);
					mysql_tquery(SQL, qqerry, "", "");
					foreach(new id : Player)
					{
						if(PlayerInfo[id][pSQLID] == sqlid)
						{
							PlayerInfo[id][pMember] = 0;
			                PlayerInfo[id][pLeader] = 0;
			                PlayerInfo[id][pRank] = 0;
							PlayerInfo[id][pFACWarns] = 0;
							PlayerInfo[id][pFactionJoin] = 0;
							gTeam[id] = 3;
							PlayerInfo[id][pTeam] = 3;
							OnDuty[id] = 0;
							tazer[id] = 0;
							SetPlayerArmourEx(id, 0);
			    			SetPlayerSkin(id,PlayerInfo[id][pModel]);
							SetPlayerToTeamColor(id);
							SendClientMessage(id, COLOR_LIGHTRED, string);
						}
					}
					new str[256];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Member`='0',`Leader`='0',`Rank`='0',`FWarn`='0',`FPunish`='0',`Team`='3', `FactionJoin`='0' WHERE `name`='%s'",name);
					mysql_tquery(SQL,str,"","");
					format(string, sizeof(string), "%s was uninvited from faction %s (rank %d) after %d days. Reason: Raport incomplet.",name,NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
					Factionlog(faction,sqlid,0,string);

					mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string, sqlid, 0);
					mysql_tquery(SQL,query,"","");
				}
			}
		if((faction == 11 && admin == 0 && SvarInfo[3][svValue] == 1) || (faction == 12 && admin == 0 && SvarInfo[3][svValue] == 1) || (faction == 13 && admin == 0 && SvarInfo[3][svValue] == 1) || (faction == 14 && admin == 0 && SvarInfo[3][svValue] == 1))
			if(raport1 >= 11-rank) complete = 1;
			else if(raport1 < 0 && rank >= 2)
			{
				format(string, sizeof(string), "You was uninvited from faction %s (rank %d) after %d days. Reason: Raport incomplet.",NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
				mysql_format(SQL, qqerry, sizeof(qqerry), "INSERT INTO `emails` (`playerid`,`Message`) VALUES ('%d','%s')", sqlid, string);
				mysql_tquery(SQL, qqerry, "", "");
				foreach(new id : Player)
				{
					if(PlayerInfo[id][pSQLID] == sqlid)
					{
						PlayerInfo[id][pMember] = 0;
		                PlayerInfo[id][pLeader] = 0;
		                PlayerInfo[id][pRank] = 0;
						PlayerInfo[id][pFACWarns] = 0;
						PlayerInfo[id][pFactionJoin] = 0;
						gTeam[id] = 3;
						PlayerInfo[id][pTeam] = 3;
						OnDuty[id] = 0;
						tazer[id] = 0;
						SetPlayerArmourEx(id, 0);
		    			SetPlayerSkin(id,PlayerInfo[id][pModel]);
						SetPlayerToTeamColor(id);
						SendClientMessage(id, COLOR_LIGHTRED, string);
					}
				}
				new str[256];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Member`='0',`Leader`='0',`Rank`='0',`FWarn`='0',`FPunish`='0',`Team`='3', `FactionJoin`='0' WHERE `name`='%s'",name);
				mysql_tquery(SQL,str,"","");
				format(string, sizeof(string), "%s was uninvited from faction %s (rank %d) after %d days. Reason: Raport incomplet.",name,NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
				Factionlog(faction,sqlid,0,string);

				mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string, sqlid, 0);
				mysql_tquery(SQL,query,"","");
			}
			else
			{
				complete = 0;
				if(rank >= 2)
				{
					puncte = 11-rank-raport1;
					raport1 = 0 - puncte;
					format(string, sizeof(string), "Your raport was incomplete and setted on minus, complete it if you want to remain in faction.",NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
					mysql_format(SQL, qqerry, sizeof(qqerry), "INSERT INTO `emails` (`playerid`,`Message`) VALUES ('%d','%s')", sqlid, string);
					mysql_tquery(SQL, qqerry, "", "");
					foreach(new id : Player)
					{
						if(PlayerInfo[id][pSQLID] == sqlid)
						{
							PlayerInfo[id][Raport1] = raport1;
							SendClientMessage(id, COLOR_LIGHTRED, string);
						}
					}
				}
				else 
				{
					format(string, sizeof(string), "You was uninvited from faction %s (rank %d) after %d days. Reason: Raport incomplet.",NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
					mysql_format(SQL, qqerry, sizeof(qqerry), "INSERT INTO `emails` (`playerid`,`Message`) VALUES ('%d','%s')", sqlid, string);
					mysql_tquery(SQL, qqerry, "", "");
					foreach(new id : Player)
					{
						if(PlayerInfo[id][pSQLID] == sqlid)
						{
							PlayerInfo[id][pMember] = 0;
			                PlayerInfo[id][pLeader] = 0;
			                PlayerInfo[id][pRank] = 0;
							PlayerInfo[id][pFACWarns] = 0;
							PlayerInfo[id][pFactionJoin] = 0;
							gTeam[id] = 3;
							PlayerInfo[id][pTeam] = 3;
							OnDuty[id] = 0;
							tazer[id] = 0;
							SetPlayerArmourEx(id, 0);
			    			SetPlayerSkin(id,PlayerInfo[id][pModel]);
							SetPlayerToTeamColor(id);
							SendClientMessage(id, COLOR_LIGHTRED, string);
						}
					}
					new str[256];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Member`='0',`Leader`='0',`Rank`='0',`FWarn`='0',`FPunish`='0',`Team`='3', `FactionJoin`='0' WHERE `name`='%s'",name);
					mysql_tquery(SQL,str,"","");
					format(string, sizeof(string), "%s was uninvited from faction %s (rank %d) after %d days. Reason: Raport incomplet.",name,NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
					Factionlog(faction,sqlid,0,string);

					mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string, sqlid, 0);
					mysql_tquery(SQL,query,"","");
				}
			}
		if(faction == 9 && admin == 0 && SvarInfo[3][svValue] == 1)
			if(raport1 >= 11-rank && rank >= 2 && raport4 >= 2) complete = 1;
			else if(raport1 >= 11-rank) complete = 1;
			else if((raport1 < 0 || raport4 < 0) && rank >= 2)
			{
				format(string, sizeof(string), "You was uninvited from faction %s (rank %d) after %d days. Reason: Raport incomplet.",NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
				mysql_format(SQL, qqerry, sizeof(qqerry), "INSERT INTO `emails` (`playerid`,`Message`) VALUES ('%d','%s')", sqlid, string);
				mysql_tquery(SQL, qqerry, "", "");
				foreach(new id : Player)
				{
					if(PlayerInfo[id][pSQLID] == sqlid)
					{
						PlayerInfo[id][pMember] = 0;
		                PlayerInfo[id][pLeader] = 0;
		                PlayerInfo[id][pRank] = 0;
						PlayerInfo[id][pFACWarns] = 0;
						PlayerInfo[id][pFactionJoin] = 0;
						gTeam[id] = 3;
						PlayerInfo[id][pTeam] = 3;
						OnDuty[id] = 0;
						tazer[id] = 0;
						SetPlayerArmourEx(id, 0);
		    			SetPlayerSkin(id,PlayerInfo[id][pModel]);
						SetPlayerToTeamColor(id);
						SendClientMessage(id, COLOR_LIGHTRED, string);
					}
				}
				new str[256];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Member`='0',`Leader`='0',`Rank`='0',`FWarn`='0',`FPunish`='0',`Team`='3', `FactionJoin`='0' WHERE `name`='%s'",name);
				mysql_tquery(SQL,str,"","");
				format(string, sizeof(string), "%s was uninvited from faction %s (rank %d) after %d days. Reason: Raport incomplet.",name,NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
				Factionlog(faction,sqlid,0,string);

				mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string, sqlid, 0);
				mysql_tquery(SQL,query,"","");
			}
			else if(SvarInfo[3][svValue] == 1) {
				complete = 0;
				if(rank >= 2)
				{
					puncte = 11-rank-raport1;
					raport1 = 0 - puncte;
					raport4= 0 - (2-raport4);
					format(string, sizeof(string), "Your raport was incomplete and setted on minus, complete it if you want to remain in faction.",NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
					mysql_format(SQL, qqerry, sizeof(qqerry), "INSERT INTO `emails` (`playerid`,`Message`) VALUES ('%d','%s')", sqlid, string);
					mysql_tquery(SQL, qqerry, "", "");
					foreach(new id : Player)
					{
						if(PlayerInfo[id][pSQLID] == sqlid)
						{
							PlayerInfo[id][Raport1] = raport1;
							PlayerInfo[id][Raport4] = raport4;
							SendClientMessage(id, COLOR_LIGHTRED, string);
						}
					}
				}
				else 
				{
					format(string, sizeof(string), "You was uninvited from faction %s (rank %d) after %d days. Reason: Raport incomplet.",NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
					mysql_format(SQL, qqerry, sizeof(qqerry), "INSERT INTO `emails` (`playerid`,`Message`) VALUES ('%d','%s')", sqlid, string);
					mysql_tquery(SQL, qqerry, "", "");
					foreach(new id : Player)
					{
						if(PlayerInfo[id][pSQLID] == sqlid)
						{
							PlayerInfo[id][pMember] = 0;
			                PlayerInfo[id][pLeader] = 0;
			                PlayerInfo[id][pRank] = 0;
							PlayerInfo[id][pFACWarns] = 0;
							PlayerInfo[id][pFactionJoin] = 0;
							gTeam[id] = 3;
							PlayerInfo[id][pTeam] = 3;
							OnDuty[id] = 0;
							tazer[id] = 0;
							SetPlayerArmourEx(id, 0);
			    			SetPlayerSkin(id,PlayerInfo[id][pModel]);
							SetPlayerToTeamColor(id);
							SendClientMessage(id, COLOR_LIGHTRED, string);
						}
					}
					new str[256];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Member`='0',`Leader`='0',`Rank`='0',`FWarn`='0',`FPunish`='0',`Team`='3', `FactionJoin`='0' WHERE `name`='%s'",name);
					mysql_tquery(SQL,str,"","");
					format(string, sizeof(string), "%s was uninvited from faction %s (rank %d) after %d days. Reason: Raport incomplet.",name,NumeFactiune(faction),rank,GetDaysFromTimestamp(factionjoin));
					Factionlog(faction,sqlid,0,string);

					mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string, sqlid, 0);
					mysql_tquery(SQL,query,"","");
				}
			}
		foreach(new id : Player)
		{
			if(PlayerInfo[id][pSQLID] == sqlid)
			{
				PlayerInfo[id][pFactionTime] = nextftime;
				if(PlayerInfo[id][pFACWarns] > 0) PlayerInfo[id][pFACWarns]--;
			}
		}		
		mysql_format(SQL,var100, sizeof(var100), "UPDATE `users` SET `FactionTime`='%d',`FWarn`='%d',`Raport1`='%d',`Raport2`='%d',`Raport3`='%d',`Raport4`='%d' WHERE `id`='%d'", nextftime,fwarn,raport1,raport2,raport3,raport4,sqlid);
		mysql_tquery(SQL,var100,"","");
		if(SvarInfo[3][svValue] == 0 || admin >= 1) complete = 1;
		if(complete == 1) {
			foreach(new id : Player)
			{
				if(PlayerInfo[id][pSQLID] == sqlid)
				{
					if(rank != 5) PlayerInfo[id][pRank] = rank+1;
					PlayerInfo[id][Raport1] = 0;
					PlayerInfo[id][Raport2] = 0;
					PlayerInfo[id][Raport3] = 0;
					PlayerInfo[id][Raport4] = 0;
					SetPlayerSkinEx(id);
					TimestampToDate(nextftime,date[0],date[1],date[2],date[3],date[4],date[5],2);
					if(rank == 4)
						format(string, sizeof(string), "Your rank was changed from %d to %d. Next verify on: %02d/%02d/%02d around %02d:%02d.",rank,rank+1,date[2],date[1],date[0],date[3],date[4]);
					else if(rank == 5)
						format(string, sizeof(string), "Your raport was reseted. Next verify on: %02d/%02d/%02d around %02d:%02d.",date[2],date[1],date[0],date[3],date[4]);
					else
						format(string, sizeof(string), "Your rank was changed from %d to %d. Next rank up on: %02d/%02d/%02d around %02d:%02d.",rank,rank+1,date[2],date[1],date[0],date[3],date[4]);
					SendClientMessage(id, COLOR_LIGHTBLUE, string);
				}
			}
			if(rank != 5)
			{
				format(string,sizeof(string),"%s faction rank was changed from %d to %d.",name,rank,rank+1);
				Factionlog(faction,sqlid,0,string);
				SendFamilyMessage(faction, COLOR_GENANNOUNCE, string);

				mysql_format(SQL,var100, sizeof(var100), "UPDATE `users` SET `Rank`='%d',`Raport1`='0',`Raport2`='0',`Raport3`='0',`Raport4`='0' WHERE `id`='%d'", rank+1,sqlid);
				mysql_tquery(SQL,var100,"","");

				mysql_format(SQL, qqerry, sizeof(qqerry), "INSERT INTO `emails` (`playerid`,`Message`) VALUES ('%d','%s')", sqlid, string);
				mysql_tquery(SQL, qqerry, "", "");
			}
			
		}
		
	}
	cache_delete(stringresult9);
	//Auto Expire Clan
	format(query, sizeof(query), "SELECT * FROM `clans` WHERE `clanExpire` < '%d' AND `clanActive`='1' ORDER BY `clanID`",gettime());
	new Cache: stringresult8 = mysql_query(SQL, query);
	new clansrep = cache_get_row_count();
   	for(new pk = 1; pk <= clansrep; pk++)
    {
		new clanid;
		clanid = cache_get_field_content_int(0, "clanID");
		foreach(new id : Player)
		{
			if(PlayerInfo[id][pClan] == clanid)
			{
				if(PlayerInfo[id][pCRank] < 7)
				{
					SetPlayerName(id, PlayerInfo[id][pNormalName]);
					PlayerInfo[id][pClan] = 0;
					PlayerInfo[id][pCRank] = 0;
					PlayerInfo[id][pCWarns] = 0;
					PlayerInfo[id][pClanTag] = 0;
				}
			}
		}
		mysql_format(SQL,var100,sizeof(var100),"INSERT INTO clan_logs (`action`,`clanid`) VALUES ('This clan has expired. All members were uninvited. / Perioada pentru care a fost platit clanul s-a terminat. Toti membrii clanului au primit uninvite.','%d')", clanid);
		mysql_tquery(SQL,var100,"","");
		mysql_format(SQL,var100, sizeof(var100), "UPDATE `users` SET `Clan`='0',`CRank`='0',`ClanTag`='0',`ClanWarns`='0' WHERE `Clan`='%d' AND `CRank` < '7'", clanid);
		mysql_tquery(SQL,var100,"","");
		mysql_format(SQL,var100, sizeof(var100), "UPDATE `clans` SET `clanActive`='0' WHERE `clanID`='%d'",clanid);
		mysql_tquery(SQL,var100,"","");
	}
	cache_delete(stringresult8);

	format(query, sizeof(query), "SELECT * FROM `billboards` WHERE `time` < '%d' AND `time`!='0' ORDER BY `ID`",gettime());
	new Cache: stringresult11 = mysql_query(SQL, query);
	new billsrep = cache_get_row_count();
   	for(new pk = 1; pk <= billsrep; pk++)
    {
		new billid,ownerbill[64];
		billid = cache_get_field_content_int(0, "ID");
		cache_get_field_content(0, "BillOwner", ownerbill, SQL, 64);
		format(bBill[billid][bBillOwner], 64, "AdmBot");
		format(bBill[billid][bBillText], 128, "bluffs.ga");
		bBill[billid][bBillTime]						= 0;
		bBill[billid][bBillTextSize]					= 25;
		DestroyBillBoard(billid);
		foreach(new id : Player)
		{
			if(strcmp(PlayerInfo[id][pNormalName],ownerbill,true) == 0)
			{
				new stringz2[128];
				format(stringz2,sizeof(stringz2), "(Info){FFFFFF} Your billboard (#%d) was expired.",billid);
				SendClientMessage(id, COLOR_JOB, stringz2);
				PlayerInfo[id][pBillboard] = 0;
			}
		}
		mysql_format(SQL,var100, sizeof(var100), "UPDATE `users` SET `Billboard`='0' WHERE `name`='%s'", ownerbill);
		mysql_tquery(SQL,var100,"","");

		mysql_format(SQL,var100, sizeof(var100), "UPDATE `billboards` SET `BillOwner`='AdmBot',`BillText`='bluffs.ga',`time`='0',`BillTextSize`='25' WHERE `ID`='%d'",billid);
		mysql_tquery(SQL,var100,"","");
	}
	cache_delete(stringresult11);
	
	format(query,sizeof(query),"SELECT * FROM bans WHERE `Time`<'%d' AND `Active`='1' AND `Permanent`='0'",gettime());
    new Cache: banuri = mysql_query(SQL,query);
    new bansrep = cache_get_row_count();
   	for(new pk = 1; pk <= bansrep; pk++)
    {
    	new banid,name[30],admin[30],reason[128];
    	cache_get_field_content(0, "PlayerName", name, SQL, 30);
		cache_get_field_content(0, "AdminName", admin, SQL, 30);
		cache_get_field_content(0, "Reason", reason, SQL, 128);
		banid							= cache_get_field_content_int(0, "ID");
		new str2[128];
		mysql_format(SQL, str2, sizeof(str2), "UPDATE bans SET `Active`='0' WHERE `ID`='%d'",banid);
		mysql_tquery(SQL,str2,"","");
		format(string,sizeof(string), "(Ban expire){FFFFFF} Account %s was automatically unbanned. Banned by %s, reason: %s",name,admin,reason);
		ABroadCast(COLOR_RED2, string,1);
	}
	cache_delete(banuri);

	printf("SavePlayerData: All player data saved(10 minutes).");
	return 1;
}

forward PlayerMapIconPaint(playerid);
public PlayerMapIconPaint(playerid)
{
	foreach(new iss : Player)
	{
		if(PlayerInfo[iss][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
		{
			if(playerid != iss)
			{
				SetPlayerMarkerForPlayer( playerid, iss, 0x81F06BFF);
				SetPlayerMarkerForPlayer( iss, playerid, 0x81F06BFF);
			}
		}
	}
	return 1;
}

forward PrepareRoundRace1();
public PrepareRoundRace1()
{
	if(racep > 1)
	{
		if(racers == 59)
		{
			racecol = 0;
			racevotecol[0] = 0;
			racevotecol[1] = 0;
			for(new x; x < 22; x++)
			{
				racevotec[x] = 0;
			}
			for(new s; s < 5; s++)
			{
				racevotem[s] = 0;
			}
			rmapvoted = 0;
			carvoted = 0;
			racec = 0;
			racem = 0;
		}
		new string[128];
    	if(racers >= 1)
     	{
			racers--;
			foreach(new i : Player)
			{
			    if(PlayerInfo[i][pRaceG] == 0)
	    		{
					new stringg[64];
					PlayerTextDrawShow(i, PaintBallText[i]);
        			new minutes = floatround(racers/60),
  			    		seconds = floatround(racers - minutes*60);
       				if(seconds>9)format(stringg,sizeof(stringg),"0%d:%d",minutes,seconds);
   					else format(stringg,sizeof(stringg),"0%d:0%d",minutes,seconds);
   					format(string,sizeof(string),"RACE ROUND STARTS IN ~y~%s",stringg);
    				PlayerTextDrawSetString(i, PaintBallText[i], string);
					if(racers == 5)
					{
						GameTextForPlayer(i, "~r~3", 1000, 3);
						PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
						PlayerInfo[i][pRaceVoted] = 0;
					}
					if(racers == 4)
					{
						GameTextForPlayer(i, "~y~2", 1000, 3);
						PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
					}
					if(racers == 3)
					{
						GameTextForPlayer(i, "~g~1", 1000, 3);
						PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
					}
					if(racers == 2)
					{
						GameTextForPlayer(i, "~b~GO ~y~GO ~r~GO", 3000, 3);
						PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
						TogglePlayerControllable(i, 1);
						StopAudioStreamForPlayer(i);
						for(new cars; cars < racep; cars++)
						{
							new engine,lights,alarm,doors,bonnet,boot,objective;
							GetVehicleParamsEx(rcarid[cars],engine,lights,alarm,doors,bonnet,boot,objective);
							SetVehicleParamsEx(rcarid[cars],VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
							AddVehicleComponent(rcarid[cars], 1010);
						}
					}
				}
			}
		}
		if(racers == 12)
		{
			new maxim,map,maximm,car;
			for(new g = 0; g < 5; g++) if(racevotem[g] > maxim) { maxim = racevotem[g]; map = g;}
			if(rmapvoted > 0)
			{
				racem = map+1;
			}
			for(new m = 0; m < 22; m++) if(racevotec[m] > maximm) { maximm = racevotec[m]; car = m;}
			if(carvoted > 0)
			{
				racec = car;
			}
			for(new cars; cars < racep; cars++)
			{
				if(racem == 1)
				{
					rcarid[cars] = CreateVehicle(RaceCar[racec][0], RaceCPos1[cars][0], RaceCPos1[cars][1], RaceCPos1[cars][2], RaceCPos1[cars][3], -1, -1, -1);
				}
				if(racem == 2)
				{
					rcarid[cars] = CreateVehicle(RaceCar[racec][0], RaceCPos2[cars][0], RaceCPos2[cars][1], RaceCPos2[cars][2], RaceCPos2[cars][3], -1, -1, -1);
				}
				if(racem == 3)
				{
					rcarid[cars] = CreateVehicle(RaceCar[racec][0], RaceCPos3[cars][0], RaceCPos3[cars][1], RaceCPos3[cars][2], RaceCPos3[cars][3], -1, -1, -1);
				}
				SetVehicleVirtualWorld(rcarid[cars], 1);
				vehRadio[rcarid[cars]] = 0;
				Gas[rcarid[cars]] = 100;
			}
			foreach(new d : Player)
			{
				if(PlayerInfo[d][pRaceG] == 0)
				{
					RaceCP[d] = 0;
					RacePos[d] = 0;
				}
			}
		}
		if(racers == 10)
		{
			new ss;
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pRaceG] == 0)
				{
					ApplyAnimation(i, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
        			ClearAnimations(i);
					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
       				PlayerHandsup[i] = 0;
					PutPlayerInVehicleEx(i, rcarid[ss], 0);
					SetPlayerVirtualWorld(i, 1);
					if(racem == 1)
					{
						SetPlayerRaceCheckpoint(i, 0, RaceCCPos1[0][0], RaceCCPos1[0][1], RaceCCPos1[0][2], RaceCCPos1[1][0], RaceCCPos1[1][1], RaceCCPos1[1][2], 10.0);
						RaceCP[i] = 1;
					}
					if(racem == 2)
					{
						SetPlayerRaceCheckpoint(i, 0, RaceCCPos2[0][0], RaceCCPos2[0][1], RaceCCPos2[0][2], RaceCCPos2[1][0], RaceCCPos2[1][1], RaceCCPos2[1][2], 10.0);
						RaceCP[i] = 1;
					}
					if(racem == 3)
					{
						SetPlayerRaceCheckpoint(i, 0, RaceCCPos3[0][0], RaceCCPos3[0][1], RaceCCPos3[0][2], RaceCCPos3[1][0], RaceCCPos3[1][1], RaceCCPos3[1][2], 10.0);
						RaceCP[i] = 1;
					}
					if(racecol == 1)
					{
						DisableRemoteVehicleCollisions(i, 1);
					}
					TogglePlayerControllable(i, 0);
					ss++;
					StopAudioStreamForPlayer(i);
					RacePos[i] = racep;
				}
			}
		}
		if(racers == 2)
		{
		    racers = 0;
			racet = 601;
			KillTimer(preparerace1);
			KillTimer(racerun1);
			racerun1 = SetTimer("RaceRun1", 1000, 1);
		}
	}
	else if(racep < 2)
	{
		racet = 0;
  		racers = 0;
		KillTimer(preparerace1);
		KillTimer(racerun1);
  		foreach(new i : Player)
		{
			if(PlayerInfo[i][pRaceG] == 0)
			{
			    curatj[i] = 0;
			    for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    PlayerTextDrawShow(i, PaintBallText[i]);
				PlayerTextDrawSetString(i, PaintBallText[i], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   				GameTextForPlayer(i, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
				PlayerInfo[i][pRaceVoted] = 0;
			}
		}
	}
	return 1;
}

forward PrepareRoundPaintBall1();
public PrepareRoundPaintBall1()
{
	if(paintp[1] > 1)
 	{
  		new string[128];
    	if(paintrs[1] >= 1)
     	{
      		paintrs[1]--;
			foreach(new i : Player)
			{
			    if(PlayerInfo[i][pPaintBallG] == 1)
	    		{
	    		    PlayerTextDrawShow(i, PaintBallText[i]);
	                if(paintrs[1] > 9) format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~00:%d",paintrs[1]);
	                else format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~00:0%d",paintrs[1]);
	                PlayerTextDrawSetString(i, PaintBallText[i], string);
				}
			}
		}
		if(paintrs[1] == 2)
		{
		    paintrs[1] = 0;
			paintt[1] = 301;
			KillTimer(preparepaint1);
			paintrun1 = SetTimer("PaintBallRun1", 1000, 1);
		}
  	}
   	else if(paintp[1] < 2)
	{
		paintt[1] = 0;
  		paintrs[1] = 0;
  		PaintWinner[1] = -1;
		PaintBallWinnerKills[1] = 0;
		paintvoteg[1][0] = 0;
		paintvoteg[1][1] = 0;
		paintvoteg[1][2] = 0;
		paintvotem[1][0] = 0;
		paintvotem[1][1] = 0;
		paintvotem[1][2] = 0;
		paintvotem[1][3] = 0;
		paintvotem[1][4] = 0;
		mapvoted[1] = 0;
		gunvoted[1] = 0;
		KillTimer(preparepaint1);
		KillTimer(paintrun1);
  		foreach(new i : Player)
		{
			if(PlayerInfo[i][pPaintBallG] == 1)
			{
			    curatj[i] = 0;
			    for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    PlayerInfo[i][pPaintBallKills] = 0;
			    PlayerInfo[i][pPaintBallVoted] = 0;
			    PlayerInfo[i][pPaintBallVoted2] = 0;
			    ResetPlayerWeaponsEx(i);
		    	ResetPlayerWeapons(i);
		    	SetPlayerArmourEx(i, 0);
			    PlayerTextDrawShow(i, PaintBallText[i]);
				PlayerTextDrawSetString(i, PaintBallText[i], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   				GameTextForPlayer(i, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
			}
		}
	}
	return 1;
}

forward PrepareRoundPaintBall2();
public PrepareRoundPaintBall2()
{
	if(paintp[2] > 1)
 	{
  		new string[128];
    	if(paintrs[2] >= 1)
     	{
      		paintrs[2]--;
			foreach(new i : Player)
			{
			    if(PlayerInfo[i][pPaintBallG] == 2)
	    		{
	    		    PlayerTextDrawShow(i, PaintBallText[i]);
	                if(paintrs[2] > 9) format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~00:%d",paintrs[2]);
	                else format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~00:0%d",paintrs[2]);
	                PlayerTextDrawSetString(i, PaintBallText[i], string);
				}
			}
		}
		if(paintrs[2] == 2)
		{
		    paintrs[2] = 0;
			paintt[2] = 301;
			KillTimer(preparepaint2);
			paintrun2 = SetTimer("PaintBallRun2", 1000, 1);
		}
  	}
   	else if(paintp[2] < 2)
	{
		paintt[2] = 0;
  		paintrs[2] = 0;
  		PaintWinner[2] = -1;
		PaintBallWinnerKills[2] = 0;
		paintvoteg[2][0] = 0;
		paintvoteg[2][1] = 0;
		paintvoteg[2][2] = 0;
		paintvotem[2][0] = 0;
		paintvotem[2][1] = 0;
		paintvotem[2][2] = 0;
		paintvotem[2][3] = 0;
		paintvotem[2][4] = 0;
		mapvoted[2] = 0;
		gunvoted[2] = 0;
		KillTimer(preparepaint2);
		KillTimer(paintrun2);
  		foreach(new i : Player)
		{
			if(PlayerInfo[i][pPaintBallG] == 2)
			{
			    curatj[i] = 0;
			    for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    PlayerInfo[i][pPaintBallKills] = 0;
			    PlayerInfo[i][pPaintBallVoted] = 0;
			    PlayerInfo[i][pPaintBallVoted2] = 0;
			    ResetPlayerWeaponsEx(i);
		    	ResetPlayerWeapons(i);
		    	SetPlayerArmourEx(i, 0);
			    PlayerTextDrawShow(i, PaintBallText[i]);
				PlayerTextDrawSetString(i, PaintBallText[i], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   				GameTextForPlayer(i, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
			}
		}
	}
	return 1;
}

forward PrepareRoundPaintBall3();
public PrepareRoundPaintBall3()
{
    if(paintp[3] > 1)
 	{
  		new string[128];
    	if(paintrs[3] >= 1)
     	{
      		paintrs[3]--;
			foreach(new i : Player)
			{
			    if(PlayerInfo[i][pPaintBallG] == 3)
	    		{
	    		    PlayerTextDrawShow(i, PaintBallText[i]);
	                if(paintrs[3] > 9) format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~00:%d",paintrs[3]);
	                else format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~00:0%d",paintrs[3]);
	                PlayerTextDrawSetString(i, PaintBallText[i], string);
				}
			}
		}
		if(paintrs[3] == 2)
		{
		    paintrs[3] = 0;
			paintt[3] = 601;
			KillTimer(preparepaint3);
			paintrun3 = SetTimer("PaintBallRun3", 1000, 1);
		}
  	}
   	else if(paintp[3] < 2)
	{
		paintt[3] = 0;
  		paintrs[3] = 0;
  		PaintWinner[3] = -1;
		PaintBallWinnerKills[3] = 0;
		paintvotem[3][0] = 0;
		paintvotem[3][1] = 0;
		paintvotem[3][2] = 0;
		paintvotem[3][3] = 0;
		paintvotem[3][4] = 0;
		mapvoted[3] = 0;
		KillTimer(preparepaint3);
		KillTimer(paintrun3);
  		foreach(new i : Player)
		{
			if(PlayerInfo[i][pPaintBallG] == 3)
			{
			    curatj[i] = 0;
			    for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    PlayerInfo[i][pPaintBallKills] = 0;
			    PlayerInfo[i][pPaintBallVoted] = 0;
			    PlayerInfo[i][pPaintBallVoted2] = 0;
			    ResetPlayerWeaponsEx(i);
		    	ResetPlayerWeapons(i);
		    	SetPlayerArmourEx(i, 0);
			    PlayerTextDrawShow(i, PaintBallText[i]);
				PlayerTextDrawSetString(i, PaintBallText[i], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   				GameTextForPlayer(i, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
			}
		}
	}
	return 1;
}

forward PrepareRoundPaintBall4();
public PrepareRoundPaintBall4()
{
    if(paintp[4] > 1)
 	{
  		new string[128];
    	if(paintrs[4] >= 1)
     	{
      		paintrs[4]--;
			foreach(new i : Player)
			{
			    if(PlayerInfo[i][pPaintBallG] == 4)
	    		{
	    		    PlayerTextDrawShow(i, PaintBallText[i]);
	                if(paintrs[4] > 9) format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~00:%d",paintrs[4]);
	                else format(string,sizeof(string),"PAINTBALL ROUND STARTS IN ~y~00:0%d",paintrs[4]);
	                PlayerTextDrawSetString(i, PaintBallText[i], string);
				}
			}
		}
		if(paintrs[4] == 2)
		{
		    paintrs[4] = 0;
			paintt[4] = 301;
			KillTimer(preparepaint4);
			paintrun4 = SetTimer("PaintBallRun4", 1000, 1);
		}
  	}
   	else if(paintp[4] < 2)
	{
		paintt[4] = 0;
  		paintrs[4] = 0;
  		PaintWinner[4] = -1;
		PaintBallWinnerKills[4] = 0;
		paintvotem[4][0] = 0;
		paintvotem[4][1] = 0;
		paintvotem[4][2] = 0;
		paintvotem[4][3] = 0;
		paintvotem[4][4] = 0;
		mapvoted[4] = 0;
		KillTimer(preparepaint4);
		KillTimer(paintrun4);
  		foreach(new i : Player)
		{
			if(PlayerInfo[i][pPaintBallG] == 4)
			{
			    curatj[i] = 0;
			    for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    PlayerInfo[i][pPaintBallKills] = 0;
			    PlayerInfo[i][pPaintBallVoted] = 0;
			    PlayerInfo[i][pPaintBallVoted2] = 0;
			    ResetPlayerWeaponsEx(i);
		    	ResetPlayerWeapons(i);
		    	SetPlayerArmourEx(i, 0);
			    PlayerTextDrawShow(i, PaintBallText[i]);
				PlayerTextDrawSetString(i, PaintBallText[i], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   				GameTextForPlayer(i, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
			}
		}
	}
	return 1;
}

forward RaceRun1();
public RaceRun1()
{
	racet--;
	if(racep > 0)
	{
		new string[128];
		if(racet >= 1)
		{
			foreach(new i : Player)
			{
 				if(PlayerInfo[i][pRaceG] == 0)
 				{
   					new stringg[64];
   					PlayerTextDrawShow(i, PaintBallText[i]);
        			new minutes = floatround(racet/60),
  			    		seconds = floatround(racet - minutes*60);
       				if(seconds>9)format(stringg,sizeof(stringg),"0%d:%d",minutes,seconds);
   					else format(stringg,sizeof(stringg),"0%d:0%d",minutes,seconds);
   					format(string,sizeof(string),"RACE ROUND ENDS IN ~b~%s",stringg);
    				PlayerTextDrawSetString(i, PaintBallText[i], string);
				}
			}
		}
		if(racet == 2)
		{
			foreach(new i : Player)
			{
  				if(PlayerInfo[i][pRaceG] == 0)
   				{
					SendClientMessage(i, COLOR_YELLOW, "Time is over.");
		    		for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
		    		curatj[i] = 0;
					RemovePlayerFromVehicleEx(i);
					SetPlayerPos(i, -40.3110,1508.9723,1000.9155);
					TogglePlayerControllable(i, 0);
					SetTimerEx("UnFreezeStation", 2000, false, "i", i);
					PlayerInfo[i][pRaceVoted] = 0;
				}
			}
			for(new cs; cs < 20; cs++)
			{
				if(rcarid[cs] != 0)
				{
					DestroyVehicle(rcarid[cs]);
					rcarid[cs] = 0;
				}
			}
			KillTimer(racerun1);
			racet = 0;
			racers = 61;
			preparerace1 = SetTimer("PrepareRoundRace1", 1000, 1);
		}
	}
	else if(racep <= 0)
	{
		racet = 0;
  		racers = 0;
		KillTimer(preparerace1);
		KillTimer(racerun1);
  		foreach(new i : Player)
		{
			if(PlayerInfo[i][pRaceG] == 0)
			{
			    for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    curatj[i] = 0;
			    PlayerTextDrawShow(i, PaintBallText[i]);
				PlayerTextDrawSetString(i, PaintBallText[i], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   				GameTextForPlayer(i, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
				RemovePlayerFromVehicleEx(i);
				SetPlayerPos(i, -40.3110,1508.9723,1000.9155);
				TogglePlayerControllable(i, 0);
				SetTimerEx("UnFreezeStation", 2000, false, "i", i);
				PlayerInfo[i][pRaceVoted] = 0;
			}
		}
		for(new cs; cs < 20; cs++)
		{
			if(rcarid[cs] != 0)
			{
				DestroyVehicle(rcarid[cs]);
				rcarid[cs] = 0;
			}
		}
	}
	return 1;
}

forward PaintBallRun1();
public PaintBallRun1()
{
    paintt[1]--;
    if(paintp[1] > 1)
 	{
  		new string[128];
  		if(paintt[1] >= 1)
		{
		    if(paintt[1] == 300)
		    {
		        new maxim,weapon,maximm,map;
		        for(new g = 0; g < 3; g++) if(paintvoteg[1][g] > maxim) { maxim = paintvoteg[1][g]; weapon = g;}
		        if(gunvoted[1] > 0)
		        {
					if(weapon == 0) paintg[1] = 1;
					if(weapon == 1) paintg[1] = 2;
					if(weapon == 2) paintg[1] = 3;
				}
				for(new m = 0; m < 5; m++) if(paintvotem[1][m] > maximm) { maximm = paintvotem[1][m]; map = m;}
				if(mapvoted[1] > 0)
				{
					if(map == 0) paintm[1] = 1;
					if(map == 1) paintm[1] = 2;
					if(map == 2) paintm[1] = 3;
					if(map == 3) paintm[1] = 4;
					if(map == 4) paintm[1] = 5;
				}
		        foreach(new i : Player)
				{
 					if(PlayerInfo[i][pPaintBallG] == 1)
 					{
						SetPlayerSpawn(i);
					}
				}
			}
			foreach(new i : Player)
			{
 				if(PlayerInfo[i][pPaintBallG] == 1)
 				{
   					new stringg[64];
   					PlayerTextDrawShow(i, PaintBallText[i]);
        			new minutes = floatround(paintt[1]/60),
  			    		seconds = floatround(paintt[1] - minutes*60);
       				if(seconds>9)format(stringg,sizeof(stringg),"0%d:%d",minutes,seconds);
   					else format(stringg,sizeof(stringg),"0%d:0%d",minutes,seconds);
   					format(string,sizeof(string),"PAINTBALL ROUND ENDS IN ~b~%s",stringg);
    				PlayerTextDrawSetString(i, PaintBallText[i], string);
				}
			}
		}
		if(paintt[1] == 2)
		{
		    if(PaintWinner[1] != -1)
	    	{
 	    		foreach(new i : Player)
				{
  					if(PlayerInfo[i][pPaintBallG] == 1)
   					{
  						format(string,sizeof(string),"(Paint){FFFFFF} Round over! Winner: %s - %d kills.",GetName(PaintWinner[1]),PaintBallWinnerKills[1]);
						SendClientMessage(i, COLOR_ARENA, string);
						SendClientMessage(i, COLOR_ARENA, "(Paint){FFFFFF} Use /votegun to vote for a gun. Use /votemap to vote for a map.");
						ResetPlayerWeaponsEx(i);
		    			ResetPlayerWeapons(i);
		    			SetPlayerArmourEx(i, 0);
		    			SetPlayerHealthEx(i,100);
		    			PlayerInfo[i][pPaintBallKills] = 0;
		    			PlayerInfo[i][pPaintBallVoted] = 0;
		    			PlayerInfo[i][pPaintBallVoted2] = 0;
		    			for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
		    			curatj[i] = 0;
					}
				}
			}
			PlayerInfo[PaintWinner[1]][pPaintWon]++;
  			Update(PaintWinner[1], pPaintWonx);
			GivePlayerCash(PaintWinner[1], 100000);
			SS(PaintWinner[1], COLOR_ARENA, "(Paint){FFFFFF} Felicitari ai primit 100,000$ pentru ca ai castigat runda!", "(Paint){FFFFFF} Good job, you recieved 100,000$ for win the round!");
			KillTimer(paintrun1);
			paintt[1] = 0;
			paintrs[1] = 31;
			preparepaint1 = SetTimer("PrepareRoundPaintBall1", 1000, 1);
			paintg[1] = 1;
			PaintWinner[1] = -1;
			PaintBallWinnerKills[1] = 0;
			paintvoteg[1][0] = 0;
			paintvoteg[1][1] = 0;
			paintvoteg[1][2] = 0;
			paintvotem[1][0] = 0;
			paintvotem[1][1] = 0;
			paintvotem[1][2] = 0;
			paintvotem[1][3] = 0;
			paintvotem[1][4] = 0;
			mapvoted[1] = 0;
			gunvoted[1] = 0;
		}
	}
    else if(paintp[1] < 2)
	{
		paintt[1] = 0;
  		paintrs[1] = 0;
  		PaintWinner[1] = -1;
		PaintBallWinnerKills[1] = 0;
		paintvoteg[1][0] = 0;
		paintvoteg[1][1] = 0;
		paintvoteg[1][2] = 0;
		paintvotem[1][0] = 0;
		paintvotem[1][1] = 0;
		paintvotem[1][2] = 0;
		paintvotem[1][3] = 0;
		paintvotem[1][4] = 0;
		mapvoted[1] = 0;
		gunvoted[1] = 0;
		KillTimer(preparepaint1);
		KillTimer(paintrun1);
  		foreach(new i : Player)
		{
			if(PlayerInfo[i][pPaintBallG] == 1)
			{
			    for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    ResetPlayerWeaponsEx(i);
		    	ResetPlayerWeapons(i);
		    	SetPlayerArmourEx(i, 0);
			    PlayerInfo[i][pPaintBallKills] = 0;
			    PlayerInfo[i][pPaintBallVoted] = 0;
			    PlayerInfo[i][pPaintBallVoted2] = 0;
			    curatj[i] = 0;
			    PlayerTextDrawShow(i, PaintBallText[i]);
				PlayerTextDrawSetString(i, PaintBallText[i], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   				GameTextForPlayer(i, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
			}
		}
	}
	return 1;
}

forward PaintBallRun2();
public PaintBallRun2()
{
    paintt[2]--;
    if(paintp[2] > 1)
 	{
  		new string[128];
  		if(paintt[2] >= 1)
		{
		    if(paintt[2] == 300)
		    {
		        new maxim,weapon,maximm,map;
		        for(new g = 0; g < 3; g++) if(paintvoteg[2][g] > maxim) { maxim = paintvoteg[2][g]; weapon = g;}
		        if(gunvoted[2] > 0)
		        {
					if(weapon == 0) paintg[2] = 1;
					if(weapon == 1) paintg[2] = 2;
					if(weapon == 2) paintg[2] = 3;
				}
				for(new m = 0; m < 5; m++) if(paintvotem[2][m] > maximm) { maximm = paintvotem[2][m]; map = m;}
				if(mapvoted[2] > 0)
				{
					if(map == 0) paintm[2] = 1;
					if(map == 1) paintm[2] = 2;
					if(map == 2) paintm[2] = 3;
					if(map == 3) paintm[2] = 4;
					if(map == 4) paintm[2] = 5;
				}
		        foreach(new i : Player)
				{
 					if(PlayerInfo[i][pPaintBallG] == 2)
 					{
						SetPlayerSpawn(i);
					}
				}
			}
			foreach(new i : Player)
			{
 				if(PlayerInfo[i][pPaintBallG] == 2)
 				{
   					new stringg[64];
   					PlayerTextDrawShow(i, PaintBallText[i]);
        			new minutes = floatround(paintt[2]/60),
  			    		seconds = floatround(paintt[2] - minutes*60);
       				if(seconds>9)format(stringg,sizeof(stringg),"0%d:%d",minutes,seconds);
   					else format(stringg,sizeof(stringg),"0%d:0%d",minutes,seconds);
   					format(string,sizeof(string),"PAINTBALL ROUND ENDS IN ~b~%s",stringg);
    				PlayerTextDrawSetString(i, PaintBallText[i], string);
				}
			}
		}
		if(paintt[2] == 2)
		{
		    if(PaintWinner[2] != -1)
	    	{
 	    		foreach(new i : Player)
				{
  					if(PlayerInfo[i][pPaintBallG] == 2)
   					{
  						format(string,sizeof(string),"(Paint){FFFFFF} Round over! Winner: %s - %d kills.",GetName(PaintWinner[2]),PaintBallWinnerKills[2]);
						SendClientMessage(i, COLOR_ARENA, string);
						SendClientMessage(i, COLOR_ARENA, "(Paint){FFFFFF} Use /votegun to vote for a gun. Use /votemap to vote for a map.");
						ResetPlayerWeaponsEx(i);
		    			ResetPlayerWeapons(i);
		    			SetPlayerArmourEx(i, 0);
		    			SetPlayerHealthEx(i,100);
		    			PlayerInfo[i][pPaintBallKills] = 0;
		    			PlayerInfo[i][pPaintBallVoted] = 0;
		    			PlayerInfo[i][pPaintBallVoted2] = 0;
		    			for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
		    			curatj[i] = 0;
					}
				}
			}
			PlayerInfo[PaintWinner[2]][pPaintWon]++;
			Update(PaintWinner[2], pPaintWonx);
			GivePlayerCash(PaintWinner[2], 100000);
  			SS(PaintWinner[2], COLOR_ARENA, "(Paint){FFFFFF} Felicitari ai primit 100,000$ pentru ca ai castigat runda!", "(Paint){FFFFFF} Good job, you recieved 100,000$ for win the round!");
			KillTimer(paintrun2);
			paintt[2] = 0;
			paintrs[2] = 31;
			preparepaint2 = SetTimer("PrepareRoundPaintBall2", 1000, 1);
			paintg[2] = 1;
			PaintWinner[2] = -1;
			PaintBallWinnerKills[2] = 0;
			paintvoteg[2][0] = 0;
			paintvoteg[2][1] = 0;
			paintvoteg[2][2] = 0;
			paintvotem[2][0] = 0;
			paintvotem[2][1] = 0;
			paintvotem[2][2] = 0;
			paintvotem[2][3] = 0;
			paintvotem[2][4] = 0;
			mapvoted[2] = 0;
			gunvoted[2] = 0;
		}
	}
    else if(paintp[2] < 2)
	{
		paintt[2] = 0;
  		paintrs[2] = 0;
  		PaintWinner[2] = -1;
		PaintBallWinnerKills[2] = 0;
		paintvoteg[2][0] = 0;
		paintvoteg[2][1] = 0;
		paintvoteg[2][2] = 0;
		paintvotem[2][0] = 0;
		paintvotem[2][1] = 0;
		paintvotem[2][2] = 0;
		paintvotem[2][3] = 0;
		paintvotem[2][4] = 0;
		mapvoted[2] = 0;
		gunvoted[2] = 0;
		KillTimer(paintrun2);
		KillTimer(preparepaint2);
  		foreach(new i : Player)
		{
			if(PlayerInfo[i][pPaintBallG] == 2)
			{
			    for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    ResetPlayerWeaponsEx(i);
		    	ResetPlayerWeapons(i);
		    	SetPlayerArmourEx(i, 0);
			    PlayerInfo[i][pPaintBallKills] = 0;
			    PlayerInfo[i][pPaintBallVoted] = 0;
			    PlayerInfo[i][pPaintBallVoted2] = 0;
			    curatj[i] = 0;
			    PlayerTextDrawShow(i, PaintBallText[i]);
				PlayerTextDrawSetString(i, PaintBallText[i], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   				GameTextForPlayer(i, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
			}
		}
	}
	return 1;
}

forward PaintBallRun3();
public PaintBallRun3()
{
    paintt[3]--;
    if(paintp[3] > 1)
 	{
  		new string[128];
  		if(paintt[3] >= 1)
		{
		    if(paintt[3] == 600)
		    {
		        new maximm,map;
				for(new m = 0; m < 5; m++) if(paintvotem[3][m] > maximm) { maximm = paintvotem[3][m]; map = m;}
				if(mapvoted[3] > 0)
				{
					if(map == 0) paintm[3] = 1;
					if(map == 1) paintm[3] = 2;
					if(map == 2) paintm[3] = 3;
					if(map == 3) paintm[3] = 4;
					if(map == 4) paintm[3] = 5;
				}
		        foreach(new i : Player)
				{
 					if(PlayerInfo[i][pPaintBallG] == 3)
 					{
						SetPlayerSpawn(i);
					}
				}
			}
			foreach(new i : Player)
			{
 				if(PlayerInfo[i][pPaintBallG] == 3)
 				{
   					new stringg[64];
   					PlayerTextDrawShow(i, PaintBallText[i]);
        			new minutes = floatround(paintt[3]/60),
  			    		seconds = floatround(paintt[3] - minutes*60);
       				if(seconds>9)format(stringg,sizeof(stringg),"0%d:%d",minutes,seconds);
   					else format(stringg,sizeof(stringg),"0%d:0%d",minutes,seconds);
   					format(string,sizeof(string),"PAINTBALL ROUND ENDS IN ~b~%s",stringg);
    				PlayerTextDrawSetString(i, PaintBallText[i], string);
				}
			}
		}
		if(paintt[3] == 2)
		{
		    if(PaintWinner[3] != -1)
	    	{
 	    		foreach(new i : Player)
				{
  					if(PlayerInfo[i][pPaintBallG] == 3)
   					{
  						format(string,sizeof(string),"(Paint){FFFFFF} Round over! Winner: %s - %d kills.",GetName(PaintWinner[3]),PaintBallWinnerKills[3]);
						SendClientMessage(i, COLOR_ARENA, string);
						SendClientMessage(i, COLOR_ARENA, "(Paint){FFFFFF} Use /votemap to vote for a map.");
						ResetPlayerWeaponsEx(i);
		    			ResetPlayerWeapons(i);
		    			SetPlayerArmourEx(i, 0);
		    			SetPlayerHealthEx(i,100);
		    			PlayerInfo[i][pPaintBallKills] = 0;
		    			PlayerInfo[i][pPaintBallVoted] = 0;
		    			PlayerInfo[i][pPaintBallVoted2] = 0;
		    			for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
		    			curatj[i] = 0;
					}
				}
			}
			PlayerInfo[PaintWinner[3]][pPaintWon]++;
  			Update(PaintWinner[3], pPaintWonx);
			GivePlayerCash(PaintWinner[3], 100000);
  			SS(PaintWinner[3], COLOR_ARENA, "(Paint){FFFFFF} Felicitari ai primit 100,000$ pentru ca ai castigat runda!", "(Paint){FFFFFF} Good job, you recieved 100,000$ for win the round!");
			KillTimer(paintrun3);
			paintt[3] = 0;
			paintrs[3] = 31;
			preparepaint3 = SetTimer("PrepareRoundPaintBall3", 1000, 1);
			PaintWinner[3] = -1;
			PaintBallWinnerKills[3] = 0;
			paintvotem[3][0] = 0;
			paintvotem[3][1] = 0;
			paintvotem[3][2] = 0;
			paintvotem[3][3] = 0;
			paintvotem[3][4] = 0;
			mapvoted[3] = 0;
		}
	}
    else if(paintp[3] < 2)
	{
		paintt[3] = 0;
  		paintrs[3] = 0;
  		PaintWinner[3] = -1;
		PaintBallWinnerKills[3] = 0;
		paintvotem[3][0] = 0;
		paintvotem[3][1] = 0;
		paintvotem[3][2] = 0;
		paintvotem[3][3] = 0;
		paintvotem[3][4] = 0;
		mapvoted[3] = 0;
		KillTimer(preparepaint3);
		KillTimer(paintrun3);
  		foreach(new i : Player)
		{
			if(PlayerInfo[i][pPaintBallG] == 3)
			{
			    for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    ResetPlayerWeaponsEx(i);
		    	ResetPlayerWeapons(i);
		    	SetPlayerArmourEx(i, 0);
			    PlayerInfo[i][pPaintBallKills] = 0;
			    PlayerInfo[i][pPaintBallVoted] = 0;
			    PlayerInfo[i][pPaintBallVoted2] = 0;
			    curatj[i] = 0;
			    PlayerTextDrawShow(i, PaintBallText[i]);
				PlayerTextDrawSetString(i, PaintBallText[i], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   				GameTextForPlayer(i, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
			}
		}
	}
	return 1;
}

forward PaintBallRun4();
public PaintBallRun4()
{
    paintt[4]--;
    if(paintp[4] > 1)
 	{
  		new string[128];
  		if(paintt[4] >= 1)
		{
		    if(paintt[4] == 300)
		    {
		        new maximm,map;
				for(new m = 0; m < 5; m++) if(paintvotem[4][m] > maximm) { maximm = paintvotem[4][m]; map = m;}
				if(mapvoted[4] > 0)
				{
					if(map == 0) paintm[4] = 1;
					if(map == 1) paintm[4] = 2;
					if(map == 2) paintm[4] = 3;
					if(map == 3) paintm[4] = 4;
					if(map == 4) paintm[4] = 5;
				}
		        foreach(new i : Player)
				{
 					if(PlayerInfo[i][pPaintBallG] == 4)
 					{
						SetPlayerSpawn(i);
					}
				}
			}
			foreach(new i : Player)
			{
 				if(PlayerInfo[i][pPaintBallG] == 4)
 				{
   					new stringg[64];
   					PlayerTextDrawShow(i, PaintBallText[i]);
        			new minutes = floatround(paintt[4]/60),
  			    		seconds = floatround(paintt[4] - minutes*60);
       				if(seconds>9)format(stringg,sizeof(stringg),"0%d:%d",minutes,seconds);
   					else format(stringg,sizeof(stringg),"0%d:0%d",minutes,seconds);
   					format(string,sizeof(string),"PAINTBALL ROUND ENDS IN ~b~%s",stringg);
    				PlayerTextDrawSetString(i, PaintBallText[i], string);
				}
			}
		}
		if(paintt[4] == 2)
		{
		    if(PaintWinner[4] != -1)
	    	{
 	    		foreach(new i : Player)
				{
  					if(PlayerInfo[i][pPaintBallG] == 4)
   					{
  						format(string,sizeof(string),"(Paint){FFFFFF} Round over! Winner: %s - %d kills.",GetName(PaintWinner[4]),PaintBallWinnerKills[4]);
						SendClientMessage(i, COLOR_ARENA, string);
						SendClientMessage(i, COLOR_ARENA, "(Paint){FFFFFF} Use /votemap to vote for a map.");
						ResetPlayerWeaponsEx(i);
		    			ResetPlayerWeapons(i);
		    			SetPlayerArmourEx(i, 0);
		    			SetPlayerHealthEx(i,100);
		    			PlayerInfo[i][pPaintBallKills] = 0;
		    			PlayerInfo[i][pPaintBallVoted] = 0;
		    			PlayerInfo[i][pPaintBallVoted2] = 0;
		    			for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
		    			curatj[i] = 0;
					}
				}
			}
			PlayerInfo[PaintWinner[4]][pPaintWon]++;
  			Update(PaintWinner[4], pPaintWonx);
			GivePlayerCash(PaintWinner[4], 100000);
  			SS(PaintWinner[4], COLOR_ARENA, "(Paint){FFFFFF} Felicitari ai primit 100,000$ pentru ca ai castigat runda!", "(Paint){FFFFFF} Good job, you recieved 100,000$ for win the round!");
			KillTimer(paintrun4);
			paintt[4] = 0;
			paintrs[4] = 31;
			preparepaint4 = SetTimer("PrepareRoundPaintBall4", 1000, 1);
			PaintWinner[4] = -1;
			PaintBallWinnerKills[4] = 0;
			paintvotem[4][0] = 0;
			paintvotem[4][1] = 0;
			paintvotem[4][2] = 0;
			paintvotem[4][3] = 0;
			paintvotem[4][4] = 0;
			mapvoted[4] = 0;
		}
	}
    else if(paintp[4] < 2)
	{
		paintt[4] = 0;
  		paintrs[4] = 0;
  		PaintWinner[4] = -1;
		PaintBallWinnerKills[4] = 0;
		paintvotem[4][0] = 0;
		paintvotem[4][1] = 0;
		paintvotem[4][2] = 0;
		paintvotem[4][3] = 0;
		paintvotem[4][4] = 0;
		mapvoted[4] = 0;
		KillTimer(preparepaint4);
		KillTimer(paintrun4);
  		foreach(new i : Player)
		{
			if(PlayerInfo[i][pPaintBallG] == 4)
			{
			    for (new idd2 = 0; idd2 != 5; ++idd2) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
			    ResetPlayerWeaponsEx(i);
		    	ResetPlayerWeapons(i);
		    	SetPlayerArmourEx(i, 0);
			    PlayerInfo[i][pPaintBallKills] = 0;
			    PlayerInfo[i][pPaintBallVoted] = 0;
			    PlayerInfo[i][pPaintBallVoted2] = 0;
			    curatj[i] = 0;
			    PlayerTextDrawShow(i, PaintBallText[i]);
				PlayerTextDrawSetString(i, PaintBallText[i], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   				GameTextForPlayer(i, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
			}
		}
	}
	return 1;
}

forward DeleteDeathMessage(playerid);
public DeleteDeathMessage(playerid)
{
	if(InWar[PlayerInfo[playerid][pMember]] != 1)
	{
		for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
		KillTimer(deathdeletetime[playerid]);
	}
	else
	{
		KillTimer(deathdeletetime[playerid]);
	}
	return 1;
}

forward SetPlayerUnjail();
public SetPlayerUnjail()
{
	new string[256],stringg[256];
	new Float: animpos[3];
	for(new i = 1; i < sizeof(Turfs); i++)
	{
		new attackers = WarInfo[i][wAttacker],
			defenders = WarInfo[i][wFaction],
			count=0,
			warid,
			var100[500];
		if(WarInfo[i][wTime] > 0)
		{
			WarInfo[i][wTime]--;
			foreach(new j : Player)
			{
				if(PlayerInfo[j][pMember] == attackers)
				{
					format(string,sizeof(string),"~w~TURF TIMER:~h~~y~ %s",CalculeazaTimp2(WarInfo[i][wTime]));
					PlayerTextDrawSetString(j, TimeLeftWar1[j], string);
					PlayerTextDrawShow(j, TimeLeftWar1[j]);
				}
				if(PlayerInfo[j][pMember] == defenders)
				{
					format(string,sizeof(string),"~w~TURF TIMER:~h~~y~ %s",CalculeazaTimp2(WarInfo[i][wTime]));
					PlayerTextDrawSetString(j, TimeLeftWar1[j], string);
					PlayerTextDrawShow(j, TimeLeftWar1[j]);
				}
			}
			if(WarInfo[i][wTime] == 1)
			{
				new atscore = 0,
					defscore = 0,
					winner;
				atscore = WarScoreF[attackers][i];
				defscore = WarScoreF[defenders][i];
				foreach(new j : Player)
				{
					if(PlayerInfo[j][pMember] == attackers)
					{
						GangZoneStopFlashForPlayer(j,Turfs[i]);
					}
					if(PlayerInfo[j][pMember] == defenders)
					{
						GangZoneStopFlashForPlayer(j,Turfs[i]);
					}
				}
				if(atscore > defscore)
				{
					winner = 1;
				}
				else
				{
					winner = 2;
				}
				if(atscore == defscore)
				{
					winner = 2;
				}
				if(winner == 1)
				{
					new str[128],stringyy[MAX_STRING];
					format(var100, sizeof(var100),"INSERT INTO `wars` (`Attacker`,`Defender`,`Atscore`,`Defscore`,`Result`) VALUES ('%d','%d','%d','%d','1')",attackers,defenders,atscore,defscore);
					new Cache: ab = mysql_query(SQL,var100);
					warid = cache_insert_id();
					cache_delete(ab);
					TurfInfo[i][zOwned] = WarInfo[i][wAttacker];
					mysql_format(SQL,str,128,"UPDATE `turfs` SET `Owned`='%d' WHERE `ID`='%d'",TurfInfo[i][zOwned],i);
					mysql_tquery(SQL,str,"","");
					format(stringyy, sizeof(stringyy), "NR AdmBot: Gruparea mafiota %s a cucerit teritoriul #%d ce era detinut de mafia %s.",NumeFactiune(WarInfo[i][wAttacker]),i,NumeFactiune(WarInfo[i][wFaction]));
					OOCNews(COLOR_ORANGE,stringyy);
				}
				if(winner == 2)
				{
					new stringyy[MAX_STRING];
					format(var100, sizeof(var100),"INSERT INTO `wars` (`Attacker`,`Defender`,`Atscore`,`Defscore`,`Result`) VALUES ('%d','%d','%d','%d','2')",attackers,defenders,atscore,defscore);
					new Cache: ab = mysql_query(SQL,var100);
					warid = cache_insert_id();
					cache_delete(ab);
				    format(stringyy, sizeof(stringyy), "NR AdmBot: Gruparea mafiota %s a aparat teritoriul #%d atacat de mafia %s.",NumeFactiune(WarInfo[i][wFaction]),i,NumeFactiune(WarInfo[i][wAttacker]));
				    OOCNews(COLOR_ORANGE,stringyy);
				}
				format(stringg,sizeof(stringg),"------------ [ war overview #%d ] ------------", warid);
				SendFamilyMessage(attackers, COLOR_GREEN, stringg);
				SendFamilyMessage(defenders, COLOR_GREEN, stringg);
				if(winner == 1)
				{
					format(stringg,sizeof(stringg),"Score: %s %d - %d %s.",NumeFactiune(WarInfo[i][wAttacker]),atscore,defscore,NumeFactiune(WarInfo[i][wFaction]));
					SendFamilyMessage(attackers, COLOR_GREEN, stringg);
					SendFamilyMessage(defenders, COLOR_GREEN, stringg);
				}
				if(winner == 2)
				{
					format(stringg,sizeof(stringg),"Score: %s %d - %d %s.",NumeFactiune(WarInfo[i][wFaction]),defscore,atscore,NumeFactiune(WarInfo[i][wAttacker]));
					SendFamilyMessage(attackers, COLOR_GREEN, stringg);
					SendFamilyMessage(defenders, COLOR_GREEN, stringg);
				}
				new id = CalculateBestScore(i),
					id2 = CalculateWorstScore(i),
					bestnamee[30],
					worstnamee[30];
				GetPlayerName(id, bestnamee, sizeof(bestnamee));
				GetPlayerName(id2, worstnamee, sizeof(worstnamee));
				format(stringg,sizeof(stringg),"Best score: %s with a score of %d (%d kills, %d deaths). Worst score: %s with a score of %d (%d kills, %d deaths).", bestnamee, ucideri[id][i]-decese[id][i], ucideri[id][i], decese[id][i], worstnamee, ucideri[id2][i]-decese[id2][i], ucideri[id2][i], decese[id2][i]);
				SendFamilyMessage(attackers, COLOR_GREEN, stringg);
				SendFamilyMessage(defenders, COLOR_GREEN, stringg);
				foreach(new j : Player)
				{
					if((PlayerInfo[j][pMember] == attackers) || (PlayerInfo[j][pMember] == defenders))
					{
						format(stringg,sizeof(stringg),"Your personal score: %d (%d kills, %d deaths).",ucideri[j][i]-decese[j][i],ucideri[j][i], decese[j][i]);
						SendClientMessage(j, COLOR_GREEN,stringg);
						PlayerTextDrawHide(j, TimeLeftWar1[j]);
						for (new sss = 0; sss != 5; ++sss) SendDeathMessageToPlayer(j, 1001, 1001, 1001);
						cmd_turfs(j, "");
					}
				}
				SendFamilyMessage(attackers, COLOR_GREEN,"------------------------------------");
				SendFamilyMessage(defenders, COLOR_GREEN,"------------------------------------");
				WarScoreF[defenders][i] = 0;
				WarScoreF[attackers][i] = 0;
				InWar[attackers] = 0;
				InWar[defenders] = 0;
				waitwar[attackers] = 60;
				waitwar[defenders] = 60;
				DynamicFactions[attackers][fWarTurf] = 0;
				DynamicFactions[defenders][fWarTurf] = 0;
				foreach(new j : Player)
				{
					if((PlayerInfo[j][pMember] == attackers) || (PlayerInfo[j][pMember] == defenders))
					{
						SS(j, COLOR_YELLOW, "Ai fost transferat in virtual world-ul normal (0).","You was transfered in normal virtual world (0).");
						if(GetPlayerInterior(j) < 1)
						{
							SetPlayerVirtualWorld(j, 0);
						}
						if(attackers == 4 || defenders == 4)
						{
							for(new x = 0; x < sizeof(VehicleInfo); x++)
							{
								if(VehicleInfo[x][vehGroup] == 4)
								{
									SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 0);
								}
							}
						}
						if(attackers == 5 || defenders == 5)
						{
							for(new x = 0; x < sizeof(VehicleInfo); x++)
							{
								if(VehicleInfo[x][vehGroup] == 5)
								{
									SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 0);
								}
							}
						}
						if(attackers == 6 || defenders == 6)
						{
							for(new x = 0; x < sizeof(VehicleInfo); x++)
							{
								if(VehicleInfo[x][vehGroup] == 6)
								{
									SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 0);
								}
							}
						}
						if(attackers == 10 || defenders == 10)
						{
							for(new x = 0; x < sizeof(VehicleInfo); x++)
							{
								if(VehicleInfo[x][vehGroup] == 10)
								{
									SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 0);
								}
							}
						}
						mysql_format(SQL, var100, sizeof(var100),"INSERT INTO `warlogs` (`PlayerID`,`WarID`,`Kills`,`Deaths`,`Faction`) VALUES ('%d','%d','%d','%d','%d')",PlayerInfo[j][pSQLID],warid,ucideri[j][i],decese[j][i],PlayerInfo[j][pMember]);
						mysql_tquery(SQL,var100,"","");
						ucideri[j][i] = 0;
						decese[j][i] = 0;
					}
				}
				if(winner == 1)
				{
					foreach(new j : Player)
					{
						if(TurfsDisp[j] == 1)
						{
							GangZoneHideForPlayerEx(j,Turfs[i]);
							if(attackers == 4)
							{
								GangZoneShowForPlayerEx(j,Turfs[i],0xCC000099);
							}
							if(attackers == 5)
							{
								GangZoneShowForPlayerEx(j,Turfs[i],0x40863CAA);
							}
							if(attackers == 6)
							{
								GangZoneShowForPlayerEx(j,Turfs[i],0x2F2F2F99);
							}
							if(attackers == 10)
							{
								GangZoneShowForPlayerEx(j,Turfs[i],0x88572499);
							}
						}
					}
					DeelayWar[WarInfo[i][wFaction]] = 600;
					DeelayWar[WarInfo[i][wAttacker]] = 1800;
				}
				if(winner == 2)
				{
					DeelayWar[WarInfo[i][wFaction]] = 600;
					DeelayWar[WarInfo[i][wAttacker]] = 1800;
				}
				WarInfo[i][wTime] = 0;
				WarInfo[i][wFaction] = 0;
				WarInfo[i][wAttacker] = 0;
				worstscoreat[i] = 0;
				worstmemberat[i] = 999;
				bestscoreat[i] = 0;
				bestmemberat[i] = 999;
				worstscoredf[i] = 0;
				worstmemberdf[i] = 999;
				bestscoredf[i] = 0;
				bestmemberdf[i] = 999;
			}
			if(WarInfo[i][wTime] > 2)
			{
				foreach(new j : Player)
				{
					if(IsPlayerInTurf(j, i))
					{
						if(IsPlayerInAnyVehicle(j))
						{
							if(PlayerInfo[j][pMember] == attackers || PlayerInfo[j][pMember] == defenders)
							{
								SS(j, COLOR_WHITE, "Nu ai voie sa folosesti masini in war area.","You can't use cars in war area.");
								SetVehicleToRespawn(GetPlayerVehicleID(j));
								SetVehicleVirtualWorld(GetPlayerVehicleID(j), 1024);
							}
						}
					}
					if(PlayerInfo[j][pMember] == attackers || PlayerInfo[j][pMember] == defenders)
					{
						if(WarInfo[i][wAttacker] == 4)
						{
							GangZoneFlashForPlayer(j,Turfs[i], 0xCC000099);
						}
						else if(WarInfo[i][wAttacker] == 5)
						{
							GangZoneFlashForPlayer(j,Turfs[i], 0x66857399);
						}
						else if(WarInfo[i][wAttacker] == 6)
						{
							GangZoneFlashForPlayer(j,Turfs[i], 0x2F2F2F99);
						}
						else if(WarInfo[i][wAttacker] == 10)
						{
							GangZoneFlashForPlayer(j,Turfs[i], 0x88572499);
						}
					}
					if(IsPlayerInTurf(j, i))
					{
						if(PlayerInfo[j][pMember] == attackers)
						{
							count++;
						}
					}
				}
				if(count < 1)
				{
					if(waitwar[attackers] > 0)
					{
						waitwar[attackers]--;
					}
					if(waitwar[attackers] == 0)
					{
						waitwar[attackers] = 0;
						new atscore = 0,
							defscore = 0,
							winner;
						atscore = WarScoreF[attackers][i];
						defscore = WarScoreF[defenders][i];
						foreach(new j : Player)
						{
							if(PlayerInfo[j][pMember] == attackers)
							{
								GangZoneStopFlashForPlayer(j,Turfs[i]);
							}
							if(PlayerInfo[j][pMember] == defenders)
							{
								GangZoneStopFlashForPlayer(j,Turfs[i]);
							}
						}
						if(atscore > defscore)
						{
							winner = 1;
						}
						else
						{
							winner = 2;
						}
						if(atscore == defscore)
						{
							winner = 2;
						}
						format(var100, sizeof(var100),"INSERT INTO `wars` (`Attacker`,`Defender`,`Atscore`,`Defscore`,`Result`) VALUES ('%d','%d','%d','%d','3')",attackers,defenders,atscore,defscore);
						new Cache: ab = mysql_query(SQL,var100);
						warid = cache_insert_id();
						cache_delete(ab);
						format(stringg,sizeof(stringg),"[WAR] %s failed to win turf %d owned by %s because they left the turf.",NumeFactiune(WarInfo[i][wAttacker]),i,NumeFactiune(WarInfo[i][wFaction]));
						SendFamilyMessage(attackers, COLOR_GREEN, stringg);
						SendFamilyMessage(defenders, COLOR_GREEN, stringg);
						format(stringg,sizeof(stringg),"------------ [ war overview #%d ] ------------", warid);
						SendFamilyMessage(attackers, COLOR_GREEN, stringg);
						SendFamilyMessage(defenders, COLOR_GREEN, stringg);
						if(winner == 1)
						{
							format(stringg,sizeof(stringg),"Score: %s %d - %d %s.",NumeFactiune(WarInfo[i][wAttacker]),atscore,defscore,NumeFactiune(WarInfo[i][wFaction]));
							SendFamilyMessage(attackers, COLOR_GREEN, stringg);
							SendFamilyMessage(defenders, COLOR_GREEN, stringg);
						}
						if(winner == 2)
						{
							format(stringg,sizeof(stringg),"Score: %s %d - %d %s.",NumeFactiune(WarInfo[i][wFaction]),defscore,atscore,NumeFactiune(WarInfo[i][wAttacker]));
							SendFamilyMessage(attackers, COLOR_GREEN, stringg);
							SendFamilyMessage(defenders, COLOR_GREEN, stringg);
						}
						new id = CalculateBestScore(i),
							id2 = CalculateWorstScore(i),
							bestnamee[30],
							worstnamee[30];
						GetPlayerName(id, bestnamee, sizeof(bestnamee));
						GetPlayerName(id2, worstnamee, sizeof(worstnamee));
						format(stringg,sizeof(stringg),"Best score: %s with a score of %d (%d kills, %d deaths). Worst score: %s with a score of %d (%d kills, %d deaths).", bestnamee, ucideri[id][i]-decese[id][i], ucideri[id][i], decese[id][i], worstnamee, ucideri[id2][i]-decese[id2][i], ucideri[id2][i], decese[id2][i]);
						SendFamilyMessage(attackers, COLOR_GREEN, stringg);
						SendFamilyMessage(defenders, COLOR_GREEN, stringg);
						foreach(new j : Player)
						{
							if((PlayerInfo[j][pMember] == attackers) || (PlayerInfo[j][pMember] == defenders))
							{
								format(stringg,sizeof(stringg),"Your personal score: %d (%d kills, %d deaths).",ucideri[j][i]-decese[j][i],ucideri[j][i], decese[j][i]);
								SendClientMessage(j, COLOR_GREEN,stringg);
								PlayerTextDrawHide(j, TimeLeftWar1[j]);
								for (new sss = 0; sss != 5; ++sss) SendDeathMessageToPlayer(j, 1001, 1001, 1001);
							}
						}
						SendFamilyMessage(attackers, COLOR_GREEN,"------------------------------------");
						SendFamilyMessage(defenders, COLOR_GREEN,"------------------------------------");
						WarScoreF[defenders][i] = 0;
						WarScoreF[attackers][i] = 0;
						InWar[attackers] = 0;
						InWar[defenders] = 0;
						DynamicFactions[attackers][fWarTurf] = 0;
						DynamicFactions[defenders][fWarTurf] = 0;
						foreach(new j : Player)
						{
							if((PlayerInfo[j][pMember] == attackers) || (PlayerInfo[j][pMember] == defenders))
							{
								SS(j, COLOR_YELLOW, "Ai fost transferat in virtual world-ul normal (0).","You was transfered in normal virtual world (0).");
								if(GetPlayerInterior(j) < 1)
								{
									SetPlayerVirtualWorld(j, 0);
								}
								if(attackers == 4 || defenders == 4)
								{
									for(new x = 0; x < sizeof(VehicleInfo); x++)
									{
										if(VehicleInfo[x][vehGroup] == 4)
										{
											SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 0);
										}
									}
								}
								if(attackers == 5 || defenders == 5)
								{
									for(new x = 0; x < sizeof(VehicleInfo); x++)
									{
										if(VehicleInfo[x][vehGroup] == 5)
										{
											SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 0);
										}
									}
								}
								if(attackers == 6 || defenders == 6)
								{
									for(new x = 0; x < sizeof(VehicleInfo); x++)
									{
										if(VehicleInfo[x][vehGroup] == 6)
										{
											SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 0);
										}
									}
								}
								if(attackers == 10 || defenders == 10)
								{
									for(new x = 0; x < sizeof(VehicleInfo); x++)
									{
										if(VehicleInfo[x][vehGroup] == 10)
										{
											SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], 0);
										}
									}
								}
								mysql_format(SQL, var100, sizeof(var100),"INSERT INTO `warlogs` (`PlayerID`,`WarID`,`Kills`,`Deaths`,`Faction`) VALUES ('%d','%d','%d','%d','%d')",PlayerInfo[j][pSQLID],warid,ucideri[j][i],decese[j][i],PlayerInfo[j][pMember]);
								mysql_tquery(SQL,var100,"","");
								ucideri[j][i] = 0;
								decese[j][i] = 0;
							}
						}
						DeelayWar[WarInfo[i][wFaction]] = 600;
						DeelayWar[WarInfo[i][wAttacker]] = 1800;
						WarInfo[i][wTime] = 0;
						WarInfo[i][wFaction] = 0;
						WarInfo[i][wAttacker] = 0;
						worstscoreat[i] = 0;
						worstmemberat[i] = 999;
						bestscoreat[i] = 0;
						bestmemberat[i] = 999;
						worstscoredf[i] = 0;
						worstmemberdf[i] = 999;
						bestscoredf[i] = 0;
						bestmemberdf[i] = 999;
					}
				}
				else
				{
					waitwar[attackers] = 60;
				}
			}
		}
	}
	new h,mi,sec;
	gettime(h,mi,sec);
	h+=SERVER_HOUR_FIX;
	if(h == 24) h = 0;
	if(mi == 2)
	{
		mysql_query(SQL,"UPDATE `users` SET `Session`='0'");
		foreach(new i : Player)
		{
			PlayerInfo[i][pSession] = 0;
		}
	}
	foreach(new i : Player)
	{
	    if(IsPlayerConnected(i))
	    {
		    if(SafeTime[i] > 0)
			{
				SafeTime[i]--;
			}
			if(SafeTime[i] == 1)
			{
				if(gPlayerAccount[i] == 1 && gPlayerLogged[i] == 0)
				{
					//ShowPlayerDialog(i,DIALOG_LOGIN2,DIALOG_STYLE_PASSWORD,"SERVER: Login","Welcome to the rpg.bluffs.ga.\n\nPlease enter your password below!","Loginver","Cancel");
					ShowLoginTds(i);
				}
			}
			new newcar = GetPlayerVehicleID(i);
			
		    if(PlayerInfo[i][pJailed] > 0)
		    {
				if(PlayerInfo[i][pJailTime] > 0)
				{
				    if(gPlayerLogged[i] == 1)
				    {
						PlayerInfo[i][pJailTime]--;
						PlayerTextDrawShow(i, Jailtime[i]);
						new string3[60];
						if(PlayerInfo[i][pLanguage] == 2) format(string3,sizeof(string3),"ELIBERAT IN: ~r~%d MINUTE", PlayerInfo[i][pJailTime]/60+1);
						else format(string3,sizeof(string3),"RELEASED IN: ~r~%d MINUTES", PlayerInfo[i][pJailTime]/60+1);
						PlayerTextDrawSetString(i, Jailtime[i], string3);
						PlayerTextDrawHide(i, WantedText[i]);
					}
				}
				if(PlayerInfo[i][pJailTime] <= 0)
				{
				    PlayerInfo[i][pJailTime] = 0;
					if(PlayerInfo[i][pJailed] == 1)
					{
				    	SetPlayerInterior(i, 6);
		    			SetPlayerPosEx(i, 268.7461,76.8184,1001.0391);
					}
					if(PlayerInfo[i][pJailed] == 2)
					{
						SetPlayerInterior(i, 0);
						SetPlayerVirtualWorld(i, 0);
						SetPlayerPosEx(i, 1213.9047,-1747.8059,13.5947);
					}
					PlayerInfo[i][pJailed] = 0;
					Update(i, pJailedx);
					Update(i, pJailTimex);
					SendClientMessage(i, COLOR_WHITE, "Your time is up! You have been released from jail/prison.");
					SetPlayerSpecialAction(i,SPECIAL_ACTION_NONE);
			    	RemovePlayerAttachedObject(i,9);
			    	if(PlayerInfo[i][pPet] != 0 && PlayerInfo[i][pPetStatus] != 0) AttachPet(i);
					PlayerTextDrawHide(i, Jailtime[i]);
    				SetPlayerSkinEx(i);
					ClearCrime(i);
					SetPlayerToTeamColor(i);
					TogglePlayerControllable(i, 1);
				}
			}
			if(IsPlayerInAnyVehicle(i))
			{
				if(IsPlayerInRangeOfPoint(i,50.0,BizzInfo[34][bEntranceX], BizzInfo[34][bEntranceY], BizzInfo[34][bEntranceZ]) || IsPlayerInRangeOfPoint(i,50.0,BizzInfo[35][bEntranceX], BizzInfo[35][bEntranceY], BizzInfo[35][bEntranceZ]) || IsPlayerInRangeOfPoint(i,50.0,BizzInfo[36][bEntranceX], BizzInfo[36][bEntranceY], BizzInfo[36][bEntranceZ]) || IsPlayerInRangeOfPoint(i,50.0,BizzInfo[37][bEntranceX], BizzInfo[37][bEntranceY], BizzInfo[37][bEntranceZ])
				|| IsPlayerInRangeOfPoint(i,50.0,BizzInfo[40][bEntranceX], BizzInfo[40][bEntranceY], BizzInfo[40][bEntranceZ]) || IsPlayerInRangeOfPoint(i,50.0,BizzInfo[41][bEntranceX], BizzInfo[41][bEntranceY], BizzInfo[41][bEntranceZ]))
				{
					if(CarCollisions[i] == 0)
					{
						DisableRemoteVehicleCollisions(i, 1);
						CarCollisions[i] = 1;
					}
				}
				else
				{
					if(CarCollisions[i] == 1)
					{
						DisableRemoteVehicleCollisions(i, 0);
						CarCollisions[i] = 0;
					}
				}
			}
			if(QuestWait[i] > 0) QuestWait[i]--;
			if(HealTimer[i] > 0) HealTimer[i]--;
			if(timersoo[i] > 0) timersoo[i]--;
			if(FreeExpire[i] > 0)
			{
				FreeExpire[i]--;
				if(FreeExpire[i] == 0)
				{
					FreeOffer[FreePlayer[i]] = -1;
					FreePrice[FreePlayer[i]] = 0;
					FreePlayer[i] = -1;
					SS(i, COLOR_WHITE, "Oferta de free a expirat, acum poti oferii free altcuiva.", "Free offer has expired, you can now offer free to somebody else.");
				}
			}
			if(soexpire[i] > 0)
			{
				soexpire[i]--;
				if(soexpire[i] == 0)
				{
					if(somated[i] != -1)
					{
						somated[i] = -1;
						somatename[i] = "NULL";
					}
				}
			}
			if(WantedTimer[i] > 0)
			{
				WantedTimer[i]--;
				if(WantedTimer[i] == 0) ClearWanted(i);
			}
			if(login[i] > 0)
			{
				login[i]--;
				if(login[i] == 0) 
				{
					SendClientMessage(i, COLOR_LIGHTRED, "(Login){FFFFFF} You have been kicked. Reason: 60+ seconds in login");
					HideLoginTds(i);
					KickEx(i);
				}
			}
			if(TextCount[i] > 0)
			{
				if(LastTextTime[i] < GetTickCount()) TextCount[i] = 0;
			}
			if(TaxiTimer[i] > 0)
			{
				TaxiTimer[i]--;
				if(TaxiTimer[i] == 0)
				{
					new randomtime = 10 + random(7), taxitext[30];
					TaxiTimer[i] = randomtime;
					new x = TaxiDriver[i];
					GivePlayerCash(i, -TaxiFare[x]);
					GivePlayerCash(x, TaxiFare[x]);
					TaxiMoneySpent[i] += TaxiFare[x];
					TaxiMoneyEarned[x] += TaxiFare[x];
					format(taxitext, sizeof(taxitext), "money spent: ~g~$%d", TaxiMoneySpent[i]);
					PlayerTextDrawSetString(i, RentCarText[i], taxitext);
					PlayerTextDrawShow(i, RentCarText[i]);
					format(taxitext, sizeof(taxitext), "money earned: ~g~$%d", TaxiMoneyEarned[x]);
					PlayerTextDrawSetString(x, RentCarText[x], taxitext);
					PlayerTextDrawShow(x, RentCarText[x]);
				}
			}
			if(TaxiFare[i] > 0 && !IsPlayerInAnyVehicle(i))
			{
				TaxiFare[i] = 0;
				TaxiMoneyEarned[i] = 0;
				PlayerTextDrawHide(i, RentCarText[i]);
				foreach(new x : Player)
				{
					if(TaxiDriver[x] == i)
					{
						TaxiDriver[x] = -1;
						TaxiTimer[x] = 0;
						TaxiMoneySpent[x] = 0;
						PlayerTextDrawHide(x, RentCarText[x]);
					}
				}
			}
			if(gPlayerLogged[i] == 1)
			{
				new xd;
				if(!IsPlayerInRangeOfPoint(i, 3.0, 1219.0502, -1812.7823, 16.5938) && !IsPlayerInRangeOfPoint(i, 3.0, 328.3534, -1513.1687, 36.0391))
				{
					xd = 1;
				}
				if(xd == 1)
				{
					new pac;
					for(new a; a < MAX_ATMS; a++)
					{
						if(IsPlayerInRangeOfPoint(i, 2.0, AtmInfo[a][fATMPos][0], AtmInfo[a][fATMPos][1], AtmInfo[a][fATMPos][2]))
						{
							PlayerTextDrawSetString(i, TextJos[i], "Type ~r~/atm ~w~to withdraw money from the ATM.");
							PlayerTextDrawShow(i, TextJos[i]);
							pac = 1;
						}
					}
					if(pac == 0) PlayerTextDrawHide(i, TextJos[i]);
				}
			}
			if(flymode[i] == 1) SetPlayerHealthEx(i, 1000);
			if(PlayerInfo[i][pPaintBallG] > 0)
			{
				PlayerMapIconPaint(i);
			}
			if(RentTime[i] >= 1)
			{
				if(IsARentCar(GetPlayerVehicleID(i)))
				{
					RentTime[i]++;
					if(GetPlayerCash(i) < 20)
					{
						RemovePlayerFromVehicle(i);
						RentTime[i] = 0;
					}
					if(RentTime[i] >= 11)
					{
						new str2[256];
						RentTime[i] = 1;
						GivePlayerCash(i, -20);
						RentMoneySpent[i] += 20;
						format(string,sizeof(string),"rentcar cost: ~g~$%d", RentMoneySpent[i]);
						PlayerTextDrawSetString(i, RentCarText[i], string);
						PlayerTextDrawShow(i, RentCarText[i]);
						BizzInfo[31][bTill] += 20;
						mysql_format(SQL, str2, sizeof(str2), "UPDATE `bizz` SET `Till`='%d' WHERE `Type`='10'", BizzInfo[31][bTill]);
						mysql_tquery(SQL, str2, "", "");
					}
				}
				else
				{
					PlayerTextDrawHide(i, RentCarText[i]);
					RentTime[i] = 0;
					RentMoneySpent[i] = 0;
				}
			}
			if(PlayerInfo[i][pRaceG] > -1)
			{
				if(PlayerInfo[i][pRaceG] == 0)
				{
					if(racet > 0)
					{
						new names[30],strings[128],bestid=-1,best=racep;
						PlayerTextDrawShow(i, RaceTD[i][0]);
						PlayerTextDrawShow(i, RaceTD[i][1]);
						if(bestid == -1) PlayerTextDrawSetString(i, RaceTD[i][4], "First: Nobody");
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == 0)
							{
								if(RacePos[x] <= best)
								{
									best = RacePos[x];
									bestid = x;
								}
							}
						}
						if(bestid != -1)
						{
							GetPlayerName(bestid, names, sizeof(names));
							format(strings, sizeof(strings), "First: %s", names);
							PlayerTextDrawSetString(i, RaceTD[i][4], strings);
						}
						format(strings, sizeof(strings), "Position: %d/%d", RacePos[i], racep);
						PlayerTextDrawSetString(i, RaceTD[i][2], strings);
						if(racem == 1 || racem == 3)
						{
							format(strings, sizeof(strings), "Checkpoints: %d/24", (RaceCP[i]-1));
						}
						if(racem == 2)
						{
							format(strings, sizeof(strings), "Checkpoints: %d/22", (RaceCP[i]-1));
						}
						PlayerTextDrawSetString(i, RaceTD[i][3], strings);
						PlayerTextDrawShow(i, RaceTD[i][2]);
						PlayerTextDrawShow(i, RaceTD[i][3]);
						PlayerTextDrawShow(i, RaceTD[i][4]);
					}
					else
					{
						PlayerTextDrawHide(i, RaceTD[i][0]);
						PlayerTextDrawHide(i, RaceTD[i][1]);
						PlayerTextDrawHide(i, RaceTD[i][2]);
						PlayerTextDrawHide(i, RaceTD[i][3]);
						PlayerTextDrawHide(i, RaceTD[i][4]);
					}
				}
			}
			if(PlayerInfo[i][pRaceG] > -1 && !IsPlayerInAnyVehicle(i) && racet > 0)
			{
				if(PlayerInfo[i][pRaceG] == 0)
				{
					new sendername[30];
					GetPlayerName(i, sendername, sizeof(sendername));
					SendClientMessage(i, COLOR_WHITE, "Because you left your car, you were kicked from race arena.");
					foreach(new d : Player)
					{
						if(PlayerInfo[d][pRaceG] == PlayerInfo[i][pRaceG])
						{
							format(string,sizeof(string),"(Race){FFFFFF} %s has left the race arena.", sendername);
							SendClientMessage(d, COLOR_ARENA, string);
						}
					}
					SetPlayerHealthEx(i, 100.0);
					curatj[i] = 0;
					for (new x = 0; x != 5; ++x) SendDeathMessageToPlayer(i, 1001, 1001, 1001);
					PlayerTextDrawHide(i, PaintBallText[i]);
					racep--;
					SetPlayerInterior(i, 0);
					SetPlayerVirtualWorld(i,0);
					RaceCP[i] = 0;
					DisablePlayerRaceCheckpoint(i);
					StopAudioStreamForPlayer(i);
					DisableRemoteVehicleCollisions(i, 0);
					if(racet > -1)
					{
						for(new cs; cs < 20; cs++)
						{
							if(rcarid[cs] == gLastCar[i])
							{
								DestroyVehicle(rcarid[cs]);
								rcarid[cs] = 0;
							}
						}
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pRaceG] == PlayerInfo[i][pRaceG] && x != i)
							{
								if(RacePos[x] > RacePos[i]) RacePos[x]--;
							}
						}
					}
					PlayerInfo[i][pRaceG] = -1;
					PlayerTextDrawHide(i, RaceTD[i][0]);
					PlayerTextDrawHide(i, RaceTD[i][1]);
					PlayerTextDrawHide(i, RaceTD[i][2]);
					PlayerTextDrawHide(i, RaceTD[i][3]);
					PlayerTextDrawHide(i, RaceTD[i][4]);
					PlayerInfo[i][pRaceVoted] = 0;
					SetPlayerPos(i, 1102.7285,-1458.2931,15.7969);
				}
			}
			if(UsingDrugs[i] != 0)
			{
				new Float:NewPos[3];
				GetPlayerPos(i, NewPos[0], NewPos[1], NewPos[2]);
				if(LastPos[i][0] != NewPos[0] || LastPos[i][1] != NewPos[1] || LastPos[i][2] != NewPos[2])
				{
					UsingDrugs[i] = 0;
					ClearAnimations(i);
					SetPlayerDrunkLevel (i, 0);
					PlayerStoned[i] = 0;
					KillTimer(drug[i]);
					SendClientMessage(i, COLOR_WHITE, "You failed to take the drugs.");
				}
			}
			if(FireworkTimer[i] > 0) FireworkTimer[i]--;
			if(LastBizTime[i] > 0)
			{
				LastBizTime[i]--;
				if(LastBizTime[i] == 0) LastBiz[i] = -1;
			}
			if(adutytime[i] > 0)
            {
                adutytime[i]--;
                if(adutytime[i] == 0)
                {
                    new sendername[MAX_PLAYER_NAME];
                    AdminDuty[i] = 0;
                    SetPlayerArmourEx(i, 0);
                    SetPlayerHealthEx(i, 100);
                    GetPlayerName(i, sendername, sizeof(sendername));
                    format(string, sizeof(string), "Notice: {FFFFFF}Admin %s is now off administrative duty (time expired).", sendername);
                    ABroadCast(COLOR_RED2,string,1);
                    adutytime[i] = 0;
                }
            }
			if(HelperTimer[i] > 0)
			{
				HelperTimer[i]--;
				if(HelperTimer[i] == 0)
				{
					HelperDuty[i] = 0;
					HaveNewbie[i] = -1;
					SendClientMessage(i, COLOR_LIGHTGREEN3, "You are now off duty (helper duty) because you not respond to the question in 120 seconds.");
				}
			}
			if(timernewbie[i] > 0)
			{
				timernewbie[i]--;
				if(timernewbie[i] == 0)
				{
					if(PlayerInfo[HaveNewbie[i]][pFirstAnswer] != 1)
					{
						format(PlayerInfo[HaveNewbie[i]][pNewbieQuestion], 256, "NULL");
					}
					HaveNewbie[i] = -1;
				}
			}
			if(TimerQuestion[i] > 0)
			{
				TimerQuestion[i]--;
				if(TimerQuestion[i] == 0)
				{
					TimerQuestion[i] = -1;
					format(LiveQuestion[i], 128, "NULL");
				}
			}
			if(Fishing[i] != 0)
			{
				new Float:NewPos[3];
				GetPlayerPos(i, NewPos[0], NewPos[1], NewPos[2]);
				if(LastPos[i][0] != NewPos[0] || LastPos[i][1] != NewPos[1] || LastPos[i][2] != NewPos[2])
				{
					Fishing[i] = 0;
					FishTimer[i] = 0;
					ClearAnimations(i);
					ApplyAnimation(i, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
					TogglePlayerControllable(i, 1);
					RemovePlayerAttachedObject(i, 9);
					if(PlayerInfo[i][pPet] != 0 && PlayerInfo[i][pPetStatus] != 0) AttachPet(i);
					KillTimer(FishTimerr[i]);
					SS(i, COLOR_LIGHTGREEN3, "Daca te misti vei speria pestii. Incearca din nou sa pescuiesti fara a te misca.", "You scared the fish by moving and the fish got away.");
				}
			}
			if(GetPlayerSurfingVehicleID(i) != INVALID_VEHICLE_ID && GetPlayerWeapon(i) != 0)
			{
				SlapPlayer(i); 
				SetPlayerArmedWeapon(i,0);
				SS(i, COLOR_RED, "Nu poti folosi armele pe o masina!","You can't use weapon on the car!");
			}	
			new Float:health;
			GetPlayerHealth(i,health);	
			if(PlayerInfo[i][pHUD1] != 0)
			{
				PlayerTextDrawShow(i, HUD[1][i]);
				format(string,sizeof(string),"%.0f",health);
				if(PlayerInfo[i][pHUD1] == 1)
				{
					PlayerTextDrawColor(i, HUD[1][i], 0xC0C0C0FF);
				}
				else if(PlayerInfo[i][pHUD1] == 2)
				{
					PlayerTextDrawColor(i, HUD[1][i], 0xFF0000FF);
				}
				else if(PlayerInfo[i][pHUD1] == 3)
				{
					PlayerTextDrawColor(i, HUD[1][i], 0x00FF00FF);
				}
				else if(PlayerInfo[i][pHUD1] == 4)
				{
					PlayerTextDrawColor(i, HUD[1][i], 0x0000FFFF);
				}
				else if(PlayerInfo[i][pHUD1] == 5)
				{
					PlayerTextDrawColor(i, HUD[1][i], 0xFFFF00FF);
				}
				PlayerTextDrawSetString(i, HUD[1][i], string);
				PlayerTextDrawShow(i, HUD[1][i]);
			}
			if(PlayerInfo[i][pHUD2] != 0)
			{
				new Float:armour;
				GetPlayerArmour(i,armour);
				PlayerTextDrawShow(i, HUD[2][i]);
				format(string,sizeof(string),"%.0f",armour);
				if(PlayerInfo[i][pHUD2] == 1)
				{
					PlayerTextDrawColor(i, HUD[2][i], 0xC0C0C0FF);
				}
				else if(PlayerInfo[i][pHUD2] == 2)
				{
					PlayerTextDrawColor(i, HUD[2][i], 0xFF0000FF);
				}
				else if(PlayerInfo[i][pHUD2] == 3)
				{
					PlayerTextDrawColor(i, HUD[2][i], 0x00FF00FF);
				}
				else if(PlayerInfo[i][pHUD2] == 4)
				{
					PlayerTextDrawColor(i, HUD[2][i], 0x0000FFFF);
				}
				else if(PlayerInfo[i][pHUD2] == 5)
				{
					PlayerTextDrawColor(i, HUD[2][i], 0xFFFF00FF);
				}
				PlayerTextDrawSetString(i, HUD[2][i], string);
				PlayerTextDrawShow(i, HUD[2][i]);
				if(armour < 1)
				{
					PlayerTextDrawHide(i, HUD[2][i]);
				}
			}
			new drunknew = GetPlayerDrunkLevel(i);
			if(drunknew < 100) SetPlayerDrunkLevel(i, 2000);
			else 
			{
				if(PlayerInfo[i][pDrunkLevelLast] != drunknew) {

					new wfps = PlayerInfo[i][pDrunkLevelLast] - drunknew;

					if((wfps > 0) && (wfps < 200))
						PlayerInfo[i][pFPS] = wfps;

					PlayerInfo[i][pDrunkLevelLast] = drunknew;
				}
			}
			if(PlayerInfo[i][pHUD3] != 0 && PlayerInfo[i][pAdmin] < 5)
			{
				PlayerTextDrawShow(i, HUD[3][i]);
				format(string,sizeof(string),"FPS: ~g~%d~w~",PlayerInfo[i][pFPS]);
				PlayerTextDrawSetString(i, HUD[3][i], string);
				PlayerTextDrawShow(i, HUD[3][i]);
			}
			if(PlayerInfo[i][pAdmin] >= 5 && gPlayerLogged[i] != 0)
			{
				new reports=0,cheaters=0;
				foreach(new id : Player)
				{
					if(strcmp(reporttext[id], "NULL", true) && reportcheater[id] == -1)
					{
						reports++;
					}
					if(reportcheater[id] != -1)
					{
						cheaters++;
					}
				}
				TextDrawShowForPlayer(i, AdminHUD);
				format(string, sizeof(string), "FPS: ~g~%d~w~ / Ping: ~r~%d~w~ / Tick: ~b~%d~w~ / Reports: ~r~%d~w~ / Cheaters: ~r~%d~w~ / Anim: ~y~%d~w~", PlayerInfo[i][pFPS], GetPlayerPing(i), GetServerTickRate(), reports, cheaters, GetPlayerAnimationIndex(i));
				TextDrawSetString(AdminHUD, string);
			}
			else TextDrawHideForPlayer(i, AdminHUD);
			
			if(RobTime[i] >= 0)
			{
				RobTime[i]++;
			}
			if(DrugTimer[i] > 0)
			{
				DrugTimer[i]--;
			}
			if(SellTradeTimer[i] > 0)
			{
				SellTradeTimer[i]--;
				if(SellTradeTimer[i] == 0)
				{
					foreach(new xd : Player)
					{
						if(i == tradeofferer[xd])
						{
							tradeofferer[xd] = -1;
							tradediff[xd] = 0;
							tradetype[xd] = -1;
							tradetype2[xd] = -1;
							tradecars[xd] = -1;
							tradecars2[xd] = -1;
						}
					}
					SellTradeTimer[i] = 0;
					SendClientMessage(i, COLOR_WHITE, "The sell/trade offer has expired.");
				}
			}
			if(GarbageTimer[i] > 0)
			{
				GarbageTimer[i]--;
				if(GarbageTimer[i] == 0)
				{
					SS(i, COLOR_WHITE, "Job esuat. Nu ai pus sacul de gunoi in masina in 60 secunde.","Job failed. You not put the garbage bag in car in 60 seconds.");
					RemovePlayerAttachedObject(i, 9);
					if(PlayerInfo[i][pPet] != 0 && PlayerInfo[i][pPetStatus] != 0) AttachPet(i);
					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
				}
			}
			if(PlayerInfo[i][pNextNotification] > 0)
			{
			    PlayerInfo[i][pNextNotification]--;
			}
			if(PlayerInfo[i][pSleeping] == 1)
			{
				SetPlayerHealthEx(i, 100);
			}
			if(JackAcc[i] > 0)
			{
				JackAcc[i]--;
				if(JackAcc[i] == 0) SendClientMessage(i,COLOR_WHITE,"You can now drop vehicles again at the crane.");
			}
			if(PlayerInfo[i][pAdmin] >= 1 && PlayerInfo[i][pAdmin] <= 5)
			{
				new reports=0,cheaters=0,strr[128];
				foreach(new id : Player)
				{
					if(strcmp(reporttext[id], "NULL", true) && reportcheater[id] == -1)
					{
						reports++;
					}
					if(reportcheater[id] != -1)
					{
						cheaters++;
					}
				}
				if(reports > 0 || cheaters > 0)
				{
					PlayerTextDrawShow(i, Reportss[i]);
					format(strr,sizeof(strr),"REPORTS: ~r~%d~w~ / CHEATERS: ~r~%d",reports,cheaters);
					PlayerTextDrawSetString(i, Reportss[i], strr);
				}
				else if(reports == 0)
				{
					PlayerTextDrawHide(i, Reportss[i]);
				}
			}
			else
			{
				PlayerTextDrawHide(i, Reportss[i]);
			}
			if(IsPlayerInAnyVehicle(i))
			{
				if(PlayerInfo[i][pQuest1] == 3)
				{
					if(PlayerInfo[i][pQuestCar] == GetVehicleModel(GetPlayerVehicleID(i)))
					{
						if(PlayerInfo[i][pQuestNeed1] > PlayerInfo[i][pQuestProgress1])
						{
							if(GetPlayerVehicleSeat(i) == 0)
							{
								if(IsPlayerAFK[i] == 0)
								{
									new vehid = GetPlayerVehicleID(i),Float:distance;
									if(IsPlayerInRangeOfPoint(i, 10.0, 617.5361,-1.9900,1000.6635) || IsPlayerInRangeOfPoint(i, 10.0, 1041.6093,-1019.4713,31.8327) || IsPlayerInRangeOfPoint(i, 10.0, 2385.9341,1049.5715,10.5474) || IsPlayerInRangeOfPoint(i, 10.0, -1936.0393,244.7725,34.1890)
									|| IsPlayerInRangeOfPoint(i, 10.0, -2722.2681,216.9585,4.1897) || IsPlayerInRangeOfPoint(i, 10.0, 615.2837,-124.2390,997.7005) || IsPlayerInRangeOfPoint(i, 10.0, 2644.9446,-2043.7083,13.3856) || IsPlayerInRangeOfPoint(i, 10.0, 616.7852,-74.8150,997.7812)) GetVehiclePos(vehid, old_veh_pos[vehid][0], old_veh_pos[vehid][1], old_veh_pos[vehid][2]);
									distance = GetPlayerDistanceFromPoint(i, old_veh_pos[vehid][0], old_veh_pos[vehid][1], old_veh_pos[vehid][2]);
									QuestCarKM[vehid] += distance / 1000;
									GetVehiclePos(vehid, old_veh_pos[vehid][0], old_veh_pos[vehid][1], old_veh_pos[vehid][2]);
									if(floatround(QuestCarKM[vehid], floatround_round) > PlayerInfo[i][pQuestProgress1])
									{
										PlayerInfo[i][pQuestProgress1] = floatround(QuestCarKM[vehid], floatround_round);
										Update(i, pQuestProgress1x);
										if(PlayerInfo[i][pQuestProgress1] >= PlayerInfo[i][pQuestNeed1])
										{
											FinishQuest1(i, 3);
										}
										else
										{
											new str[128];
											if(PlayerInfo[i][pLanguage] == 1)
											{
												format(str, sizeof(str),"Quest [Travel %d KM with vehicle %s] progress: %d/%d",PlayerInfo[i][pQuestNeed1],aVehicleNames[PlayerInfo[i][pQuestCar] - 400],PlayerInfo[i][pQuestProgress1],PlayerInfo[i][pQuestNeed1]);
												SendClientMessage(i, COLOR_YELLOW, str);
											}
											else
											{
												format(str, sizeof(str),"Progres pentru misiunea [Parcurge distanta de %d KM cu un vehicul de tipul %s]: %d/%d",PlayerInfo[i][pQuestNeed1],aVehicleNames[PlayerInfo[i][pQuestCar] - 400],PlayerInfo[i][pQuestProgress1],PlayerInfo[i][pQuestNeed1]);
												SendClientMessage(i, COLOR_YELLOW, str);
											}
										}
									}
								}
							}
						}
					}
				}
				if(IsAnOwnableCar(GetPlayerVehicleID(i)))
				{
					foreach(new s : Player)
					{
						for(new v; v < MAX_PERSONAL_VEHICLES; v++)
						{
							if(PlayerInfo[s][pCarID][v] == GetPlayerVehicleID(i))
							{
								if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
								{
									if(IsPlayerAFK[i] == 0)
									{
										new Float:distance,vehid = GetPlayerVehicleID(i),kmd;
										if(IsPlayerInRangeOfPoint(i, 10.0, 617.5361,-1.9900,1000.6635) || IsPlayerInRangeOfPoint(i, 10.0, 1041.6093,-1019.4713,31.8327) || IsPlayerInRangeOfPoint(i, 10.0, 2385.9341,1049.5715,10.5474) || IsPlayerInRangeOfPoint(i, 10.0, -1936.0393,244.7725,34.1890)
										|| IsPlayerInRangeOfPoint(i, 10.0, -2722.2681,216.9585,4.1897) || IsPlayerInRangeOfPoint(i, 10.0, 615.2837,-124.2390,997.7005) || IsPlayerInRangeOfPoint(i, 10.0, 2644.9446,-2043.7083,13.3856) || IsPlayerInRangeOfPoint(i, 10.0, 616.7852,-74.8150,997.7812)) GetVehiclePos(vehid, old_veh_pos[vehid][0], old_veh_pos[vehid][1], old_veh_pos[vehid][2]);
										distance = GetPlayerDistanceFromPoint(i, old_veh_pos[vehid][0], old_veh_pos[vehid][1], old_veh_pos[vehid][2]);
										PlayerInfo[s][pCarKM][v] += distance / 1000;
										GetVehiclePos(vehid, old_veh_pos[vehid][0], old_veh_pos[vehid][1], old_veh_pos[vehid][2]);
										kmd = floatround(PlayerInfo[s][pCarKM][v], floatround_round);
										if(kmd % 1000 == 0 && PlayerInfo[s][pCarKMLast][v] != kmd)
										{
											PlayerInfo[s][pCarKMLast][v] = kmd;
											PlayerInfo[s][pCarInsPrice][v] += 100;
											cUpdate(s, v, cInscarpricex);
											cUpdate(s, v, cKMLastx);
										}
									}
								}
							}
						}
					}
				}
			}
		    if(CellTime[i] > 0)
			{
				CellTime[i] = CellTime[i] +1;
				if(PlayerInfo[i][pCredits] > 0)
				{
					CallCost[i] = CallCost[i] +1;
				}
				else
				{
					new caller = Mobile[i];
				    CellTime[i] = 0;
				    CellTime[caller] = 0;
					CellTime[i] = 0;
					SendClientMessage(i,COLOR_WHITE,"{B8FFDB}You hung up because you don't have enough credits.");
					Mobile[caller] = -1;
				}
			}
			if(CellTime[i] == 0 && CallCost[i] > 0)
			{
				format(string, sizeof(string), "~w~The call cost~n~~r~~h~%d credits",CallCost[i]);
				PlayerInfo[i][pCredits] = PlayerInfo[i][pCredits] - CallCost[i];
				GameTextForPlayer(i, string, 5000, 1);
				Update(i, pCreditsx);
				CallCost[i] = 0;
			}
			if(PlayerInfo[i][pNewbieTimeout] > 0)
			{
	            PlayerInfo[i][pNewbieTimeout]--;
	            if(PlayerInfo[i][pNewbieTimeout] == 0)
				{
					SendClientMessage(i, COLOR_WHITE, "You may now speak in the newbie chat channel again.");
				}
	        }

	        if(PlayerInfo[i][pNMuted] > 0)
			{
	            PlayerInfo[i][pNMuted]--;
	            Update(i,pNMutedx);
	            if(PlayerInfo[i][pNMuted] == 0) SendClientMessage(i, COLOR_WHITE, "You may now speak in the newbie chat channel again.");
			}
			// AdmBot - Kick
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER && !IsAPlane(GetPlayerVehicleID(i))) {
				new speed = Carspeed(i);		
				if(speed > 300 && PlayerInfo[i][pAdmin] < 1 && !IsPlayerInArea(i, -3000, -2274.5, -1776, -859.5))
				{	
					if(GetAdmins() > 0) {
						format(string, sizeof(string), "AdmWarning: %s(%d) conduce cu %.0d km/h un %s.", GetName(i),i,speed,aVehicleNames[GetVehicleModel(GetPlayerVehicleID(i))-400]);
						if(GetPVarInt(i, "Cover") == 0) ABroadCast(COLOR_WARNING, string,1);
					}
					else NightBot(i, "Cheats (speed-hack)");
				}
			}
			if(PlayerInfo[i][pAdmin] < 1 && PlayerInfo[i][pPaintBallG] == 0) {
				GetPlayerVelocity(i, animpos[0], animpos[1], animpos[2]);			
				if(animpos[0] <= -0.800000 || animpos[1] <= -0.800000 || animpos[2] <= -0.800000 && GetPlayerAnimationIndex(i) == 1008) {
					new surfx = GetPlayerSurfingVehicleID(i);
					if(surfx == INVALID_VEHICLE_ID && !IsABike(gLastCar[i])) {					
						NightBot(i, "Cheats (fly-hack)");	
					}
				}
			}			
			if(GetPlayerSurfingVehicleID(i) != INVALID_VEHICLE_ID && PlayerInfo[i][pAdmin] == 0 && !IsABoat(GetPlayerSurfingVehicleID(i)) ) {
				new pid = GetVehicleDriver(GetPlayerSurfingVehicleID(i));
				if(togsurf[pid] == 1 && IsPlayerInVehicle(pid, GetPlayerSurfingVehicleID(i))) SlapPlayer(i);
			}
				
			if(PlayerInfo[i][pAdmin] == 0 && GetPlayerSpecialAction(i) == 2) NightBot(i, "Cheats (jetpack)");

			if(PlayerInfo[i][pWantedLevel] > 0)
			{
			    wantedlost[i]--;
			    if(wantedlost[i] <= 0)
			    {
			        PlayerInfo[i][pWantedLevel] -= 1;
			        new name[25];
			        GetPlayerName(i,name,sizeof(name));
			        SendClientMessage(i,COLOR_LIGHTBLUE,"You lost one wanted points because you ran 15 minutes by police.");
			        Update(i,pWantedLevelx);
					format(string,sizeof(string),"%s(%d) lost one wanted points because it ran 15 minutes by police.",name,i);
					SendTeamMessage(3, COLOR_DBLUE, string);
					SendTeamMessage(2, COLOR_DBLUE, string);
					SendTeamMessage(1, COLOR_DBLUE, string);
					SendTeamMessage(8, COLOR_DBLUE, string);
					wantedlost[i] = 900;
					if(PlayerInfo[i][pWantedLevel] <= 0)
					{
					    ClearCrime(i);
					}
				}
			}
			if(PlayerInfo[i][pHitT] > 0)
			{
				PlayerInfo[i][pHitT] -= 1;
			}
		    if(RepairTime[i] > 0)
		    {
		        RepairTime[i] = RepairTime[i] - 1;
			}
			if(PlayerInfo[i][pMuted] > 0)
		    {
				if(PlayerInfo[i][pMuteTime] > 0)
				{
					PlayerInfo[i][pMuteTime]--;
				}
				if(PlayerInfo[i][pMuteTime] <= 0)
				{
				    PlayerInfo[i][pMuteTime] = 0;
                    SendClientMessage(i, COLOR_GREY, "You have now been automatically unmuted.");
					PlayerInfo[i][pMuted] = 0;
					mysql_format(SQL,string,sizeof(string),"UPDATE users SET `Muted`='%d',`MuteTime`='%d' WHERE `name`='%s'",PlayerInfo[i][pMuted],PlayerInfo[i][pMuteTime],PlayerInfo[i][pNormalName]);
					mysql_tquery(SQL,string,"","");
				}
			}
			if(fctdeelay[i] > 0) fctdeelay[i]--;
			if(builddeelay[i] > 0) builddeelay[i]--;
			if(CheatRapidAnn[i] > 0) CheatRapidAnn[i]--;
			if(DmvQtime[i] > 0)
			{
				DmvQtime[i]--;
				if(DmvQtime[i] >= 10) format(string, sizeof(string), "00:%d",DmvQtime[i]);
				else format(string, sizeof(string), "00:0%d",DmvQtime[i]);
				PlayerTextDrawSetString(i, DmvTd[i][3], string);
				PlayerTextDrawShow(i, DmvTd[i][3]);
				if(DmvQtime[i] == 0)
				{
					DmvWrongs[i]++;
					if(DmvWrongs[i] == 3) 
					{
						SendClientMessage(i, COLOR_ERROR, "(Info){FFFFFF} Exam failed, 3/3 wrong answers!");
						HideDmvTds(i);
						TogglePlayerControllable(i, 1);
						InDmvTest[i] = 0;
					}
					else {
						if(CurrentDmvQ[i] == 5)
						{
							DmvQtime[i] = 0;
							InDmvTest[i] = 0;
							TogglePlayerControllable(i, 1);
							HideDmvTds(i);
							ApplyAnimation(i, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
			        		ClearAnimations(i);
							SetPlayerSpecialAction(i,SPECIAL_ACTION_NONE);
					    	TakingLesson[i] = 1;
			       			examcar[i] = AddStaticVehicle(410, 1242.0013,-1850.0372,13.0384,90.7065,  -1, -1);
							Gas[examcar[i]] = 100;
							EnterVehicle[i] = examcar[i];
							PutPlayerInVehicleEx(i, examcar[i], 0);
							DisableRemoteVehicleCollisions(i, 1);
							SS(i, COLOR_WHITE, "Examenul practic a inceput. Mergi la checkpoint.", "The practical exam has begun. Go to the checkpoint.");
							SS(i, COLOR_WHITE, "Scrie /engine sau apasa tasta 2 pentru a porni motorul masinii.", "Type /engine or press key 2 to start the engine.");
						    CP[i] = 100;
						    PlayerTextDrawShow(i, DMVexam[i]);
							format(string, sizeof(string), "~w~CHECKPOINTS: ~r~0~w~/~r~24");
							PlayerTextDrawSetString(i, DMVcheck[i], string);
							PlayerTextDrawShow(i, DMVcheck[i]);
							SetPlayerRaceCheckpoint(i,0, 1135.3868,-1850.5981,13.0366,1045.2626,-1809.4169,13.2637,4.0);
						}
						else {
							CurrentDmvQ[i]++;
							ShowDmvTds(i);
						}
					}
				}
			}
			if(LicenceQtime[i] > 0)
			{
				LicenceQtime[i]--;
				if(LicenceQtime[i] >= 10) format(string, sizeof(string), "00:%d",LicenceQtime[i]);
				else format(string, sizeof(string), "00:0%d",LicenceQtime[i]);
				PlayerTextDrawSetString(i, LicenceTD[i][3], string);
				PlayerTextDrawShow(i, LicenceTD[i][3]);
				if(LicenceQtime[i] == 0)
				{
					LicenceWrongs[i]++;
					if(LicenceWrongs[i] == 3) 
					{
						SendClientMessage(i, COLOR_ERROR, "(Info){FFFFFF} Exam failed, 3/3 wrong answers!");
						HideLicenceTds(i);
						TogglePlayerControllable(i, 1);
						InLicenceTest[i] = 0;
					}
					else {
						if(CurrentLicenceQ[i] == 5)
						{
							LicenceQtime[i] = 0;
							InLicenceTest[i] = 0;
							TogglePlayerControllable(i, 1);
							HideLicenceTds(i);
							ApplyAnimation(i, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
			        		ClearAnimations(i);
							SetPlayerSpecialAction(i,SPECIAL_ACTION_NONE);
							if(InLicenceTest[i] == 1)
							{
								TakingLesson[i] = 1;
				       			examcar[i] = AddStaticVehicle(593, 381.8426,2501.5383,17.4061,89.3533, -1, -1);
								Gas[examcar[i]] = 100;
								EnterVehicle[i] = examcar[i];
								PutPlayerInVehicleEx(i, examcar[i], 0);
								DisableRemoteVehicleCollisions(i, 1);
								SS(i, COLOR_WHITE, "Examenul practic a inceput. Mergi la checkpoint.", "The practical exam has begun. Go to the checkpoint.");
								SS(i, COLOR_WHITE, "Scrie /engine sau apasa tasta 2 pentru a porni motorul.", "Type /engine or press key 2 to start the engine.");
							    CP[i] = 125;
							    PlayerTextDrawShow(i, DMVexam[i]);
								format(string, sizeof(string), "~w~CHECKPOINTS: ~r~0~w~/~r~7");
								PlayerTextDrawSetString(i, DMVcheck[i], string);
								PlayerTextDrawShow(i, DMVcheck[i]);
								SetPlayerRaceCheckpoint(i,3, 294.4955,2498.8005,16.6322,-23.6290,2505.2061,52.8105,10.0);
							}
							else if(InLicenceTest[i] == 2)
							{
								TakingLesson[i] = 1;
				       			examcar[i] = AddStaticVehicle(452, 2090.2922,-106.6227,1.1796,115.5734, -1, -1);
								Gas[examcar[i]] = 100;
								EnterVehicle[i] = examcar[i];
								PutPlayerInVehicleEx(i, examcar[i], 0);
								DisableRemoteVehicleCollisions(i, 1);
								SS(i, COLOR_WHITE, "Examenul practic a inceput. Mergi la checkpoint.", "The practical exam has begun. Go to the checkpoint.");
								SS(i, COLOR_WHITE, "Scrie /engine sau apasa tasta 2 pentru a porni motorul masinii.", "Type /engine or press key 2 to start the engine.");
							    CP[i] = 132;
							    PlayerTextDrawShow(i, DMVexam[i]);
								format(string, sizeof(string), "~w~CHECKPOINTS: ~r~0~w~/~r~8");
								PlayerTextDrawSetString(i, DMVcheck[i], string);
								PlayerTextDrawShow(i, DMVcheck[i]);
								SetPlayerRaceCheckpoint(i,3, 2024.0104,-106.2818,0.9779,1951.2327,-71.5712,0.3375,10.0);
							}
							else if(InLicenceTest[i] == 3)
							{
								TakingLesson[i] = 1;
								SS(i, COLOR_WHITE, "Examenul practic a inceput. Consuma toate gloantele.", "The practical exam has begun. Shot until the weapon ammo is empty.");
								GivePlayerWeaponEx(i, 24, 10);
							}
							InLicenceTest[i] = 0;
						}
						else {
							CurrentLicenceQ[i]++;
							ShowLicenceTds(i);
						}
					}
				}
			}
			if(targetfind[i] >= 0 && UsedFind[i] == 1)
   			{
   			    new target,strr[128],namee[30],Float: x, Float: y, Float: z,Float: x1, Float: y1, Float: z1, togvar = 0;
   			    GetPlayerPos(i, x, y, z);
   			    target = targetfind[i];
   			    if(togfind[target] == 1 && !IsACop(i)) togvar = 1;
   			    if(togvar == 0)
	   			{ 
	   				if(InBussines[target] > -1)
   	   			    {
   						new j;
   						j = InBussines[target];
   						SetPlayerCheckpoint(i,BizzInfo[j][bEntranceX], BizzInfo[j][bEntranceY], BizzInfo[j][bEntranceZ],4);
   						format(strr, sizeof(strr), "distance: ~r~%.0fm",GetDistanceBetweenPoints(x, y, z, BizzInfo[j][bEntranceX], BizzInfo[j][bEntranceY], BizzInfo[j][bEntranceZ]));
   					}
   					else if(InHouse[target] > -1)
   					{
   						new j;
   						j = InHouse[target];
   						SetPlayerCheckpoint(i,HouseInfo[j][hEntrancex],HouseInfo[j][hEntrancey],HouseInfo[j][hEntrancez],4);
   						format(strr, sizeof(strr), "distance: ~r~%.0fm",GetDistanceBetweenPoints(x, y, z, HouseInfo[j][hEntrancex],HouseInfo[j][hEntrancey],HouseInfo[j][hEntrancez]));
   					}
   					else if(InHQ[target] > -1)
   					{
   						SetPlayerCheckpoint(i, DynamicFactions[InHQ[target]][fceX], DynamicFactions[InHQ[target]][fceY], DynamicFactions[InHQ[target]][fceZ], 4);
   						format(strr, sizeof(strr), "distance: ~r~%.0fm",GetDistanceBetweenPoints(x, y, z, DynamicFactions[InHQ[target]][fceX], DynamicFactions[InHQ[target]][fceY], DynamicFactions[InHQ[target]][fceZ]));
   					}
   					else if(PlayerInfo[target][pPaintBallG] != 0)
   					{
   						SetPlayerCheckpoint(i, 1154.7026,-1440.1458,15.7969, 4);
   						format(strr, sizeof(strr), "distance: ~r~%.0fm",GetDistanceBetweenPoints(x, y, z, 1154.7026,-1440.1458,15.7969));
   					}
   					else if(PlayerInfo[target][pRaceG] != -1)
   					{
   						SetPlayerCheckpoint(i, 1102.4310,-1458.1349,15.7969, 4);
   						format(strr, sizeof(strr), "distance: ~r~%.0fm",GetDistanceBetweenPoints(x, y, z, 1102.4310,-1458.1349,15.7969));
   					}
   					else
   					{
   						GetPlayerPos(target, x1, y1, z1);
   	   			    	SetPlayerCheckpoint(i, x1, y1, z1, 4);
   	   			    	format(strr, sizeof(strr), "distance: ~r~%.0fm",GetDistanceBetweenPlayers(i, targetfind[i]));
   	   			    }
   					GetPlayerName(targetfind[i], namee, sizeof(namee));
   					PlayerTextDrawShow(i, FindTXD[i][0]);
   					PlayerTextDrawSetString(i, FindTXD[i][0], strr);
   					PlayerTextDrawShow(i, FindTXD[i][1]);
   					format(strr, sizeof(strr), "target: ~r~%s ~w~(%d)",namee,targetfind[i]);
   					PlayerTextDrawSetString(i, FindTXD[i][1], strr);
	   			}
	   			else 
	   			{
	   				targetfind[i] = -1;
				    UsedFind[i] = 0;
				    DisablePlayerCheckpoint(i);
			        GameTextForPlayer(i, "~r~Your target have togfind enabled.", 5000, 1);
					PlayerTextDrawHide(i, FindTXD[i][0]);
					PlayerTextDrawHide(i, FindTXD[i][1]);
	   			}
   			}
		    if(IsABoat(newcar))
			{
			    if(PlayerInfo[i][pBoatLic] < 1 && GetPlayerState(i) == 2 && TakingLesson[i] != 1)
					RemovePlayerFromVehicleEx(i);
			}
			else if(IsAPlane(newcar))
			{
			    if(PlayerInfo[i][pFlyLic] < 1 && GetPlayerState(i) == 2 && TakingLesson[i] != 1  && TakingLesson[i] != 1)
					RemovePlayerFromVehicleEx(i);
			}
			if(TutTime[i] >= 1)
			{
			    TutTime[i] += 1;
			    if(TutTime[i] == 3)
				{
                    PlayerTextDrawShow(i, Step[i]);
					PlayerTextDrawSetString(i, Step[i], "~w~Step: ~r~1~w~/~r~4");
                    PlayerTextDrawShow(i, Tutorial[i]);
					new Cache: ab = mysql_query(SQL, "SELECT * FROM users");
					new registered = cache_get_row_count();
					cache_delete(ab);
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SetPlayerVirtualWorld(i, 0);
					if(PlayerInfo[i][pLanguage] == 2)
					{
					    new name[MAX_PLAYER_NAME];
			        	GetPlayerName(i, name, sizeof name);
	    				SetPlayerPosEx(i, 366.0407,-1892.6018,1.6999);
						SetPlayerCameraPos(i, 558.3660,-1964.6206,85.2497);
						SetPlayerCameraLookAt(i, 419.0543,-1888.1879,23.8108);
						TogglePlayerControllable(i,0);
     					format(string, sizeof(string), "Salut, %s! Bine ai venit pe %s!", name, SERVER_NAME);
						SendClientMessage(i, COLOR_WHITE, string);
						format(string, sizeof(string), "In acest moment avem %d playeri inregistrati si %d playeri online.",registered,GetOnLinePlayers());
						SendClientMessage(i, COLOR_WHITE, string);
				        SendClientMessage(i, COLOR_WHITE, "Alegand sa joci pe rpg.bluffs.ga iti putem garanta ca facem tot posibilul ca datele tale sa fie in siguranta.");
				        SendClientMessage(i, COLOR_WHITE, "Pe server sunt adaugate lucruri noi destul de des si problemele gasite sunt rezolvate cat se poate de rapid.");
				        SendClientMessage(i, COLOR_WHITE, "Daca ai orice nelamurire poti folosi comanda /n, iar pentru probleme poti folosi comanda /report.");
				        SendClientMessage(i, COLOR_WHITE, "In continuare iti vom prezenta cateva informatii despre joc.");
			        }
			        else
			        {
			            new name[MAX_PLAYER_NAME];
			        	GetPlayerName(i, name, sizeof name);
			            format(string, sizeof(string), "Hello, %s! Welcome to %s!", name, SERVER_NAME);
						SendClientMessage(i, COLOR_WHITE, string);
						format(string, sizeof(string), "At this moment we have %d players registered and %d online players.",registered,GetOnLinePlayers());
						SendClientMessage(i, COLOR_WHITE, string);
				        SendClientMessage(i, COLOR_WHITE, "If you choose to play on rpg.bluffs.ga we can guarantee that we do our best to keep your data safe.");
				        SendClientMessage(i, COLOR_WHITE, "On server are added new things frequently and issues are resolved as quickly as possible.");
				        SendClientMessage(i, COLOR_WHITE, "We will continue with some informations about the game.");
			        }
			        RegistrationStep[i] = 1;
			    }
			    else if(TutTime[i] == 10)
			    {
			        PlayerTextDrawShow(i, Step[i]);
					PlayerTextDrawSetString(i, Step[i], "~w~Step: ~r~2~w~/~r~4");
			        SetPlayerPosEx(i, 1857.4175,-1847.2292,13.5815);
					SetPlayerCameraPos(i, 1794.2242,-1819.9382,38.3741);
 					SetPlayerCameraLookAt(i, 1830.4750,-1840.9551,15.9818);
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					if(PlayerInfo[i][pLanguage] == 2)
					{
						SendClientMessage(i, COLOR_WHITE, "Acesta este un magazin 24/7, de unde poti cumpara mai multe lucruri utile:");
						SendClientMessage(i, COLOR_WHITE, "- telefon (poti suna(/call) sau da mesaj(/sms) unui player)");
				        SendClientMessage(i, COLOR_WHITE, "- agenda telefonica (poti afla numerele de telefon ale playerilor folosind (/number))");
						SendClientMessage(i, COLOR_WHITE, "- credit pentru telefon (este folosit pentru a putea suna sau da mesaje)");
				        SendClientMessage(i, COLOR_WHITE, "- walkie-talkie (poti vorbi pe anumite frecvente radio)");
				        SendClientMessage(i, COLOR_WHITE, "Te lasam pe tine sa descoperi ce altceva poti cumpara din magazine.");
					}
					else
					{
						SendClientMessage(i, COLOR_WHITE, "This is a 24/7 store, you can buy the following products from here:");
						SendClientMessage(i, COLOR_WHITE, "- phone (you can use the phone to make calls(/call) and send texts(/sms))");
				        SendClientMessage(i, COLOR_WHITE, "- phonebook (you'll be able to find the phone number another player using (/number))");
						SendClientMessage(i, COLOR_WHITE, "- prepay credit (on this server the phones use prepay credit)");
				        SendClientMessage(i, COLOR_WHITE, "- walkie-talkie (with this you can talk on a radio frequency)");
				        SendClientMessage(i, COLOR_WHITE, "We'll let you discover what else can be bought from the stores.");
					}
					RegistrationStep[i] = 2;
			    }
			    else if(TutTime[i] == 17)
			    {
			        PlayerTextDrawShow(i, Step[i]);
					PlayerTextDrawSetString(i, Step[i], "~w~Step: ~r~3~w~/~r~4");
			        SetPlayerPosEx(i, 414.1995,-1512.3070,31.5960);
   					SetPlayerCameraPos(i, 428.3816,-1493.0682,69.4719);
	    			SetPlayerCameraLookAt(i, 338.5612,-1515.7255,45.6690);
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					if(PlayerInfo[i][pLanguage] == 2)
					{
						SendClientMessage(i, COLOR_WHITE, "Aici este Dealership-ul, adica locul de unde poti cumpara masini.");
	                    SendClientMessage(i, COLOR_WHITE, "Pentru a cumpara o masina personala ai nevoie de level 3 si de bani suficienti.");
					}
					else
					{
						SendClientMessage(i, COLOR_WHITE, "That is the dealership, the place where players can buy personal vehicles.");
	                    SendClientMessage(i, COLOR_WHITE, "To buy your own vehicle you need level 3 and enough money.");
					}
					RegistrationStep[i] = 3;
			    }
			    else if(TutTime[i] == 22)
			    {
			        PlayerTextDrawShow(i, Step[i]);
					PlayerTextDrawSetString(i, Step[i], "~w~Step: ~r~4~w~/~r~4");
			       	SetPlayerPosEx(i, -35.6509,-1152.9932,1.1770);
					SetPlayerCameraPos(i, -74.3290,-1074.9336,18.7807);
 					SetPlayerCameraLookAt(i, -65.9360,-1128.8743,1.0781);
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					if(PlayerInfo[i][pLanguage] == 2)
					{
						SendClientMessage(i, COLOR_WHITE, "Trucker este unul dintre job-urile disponibile pe serverul nostru.");
	                    SendClientMessage(i, COLOR_WHITE, "La acest job trebuie sa livrezi marfa dintr-un oras in altul.");
	                    SendClientMessage(i, COLOR_WHITE, "");
	                    SendClientMessage(i, COLOR_WHITE, "Pentru a vedea o lista cu joburile de pe server, foloseste comanda /jobs.");
						SendClientMessage(i, COLOR_WHITE, "Unele job-uri sunt mai profitabile la inceput, altele pe masura ce avansezi in skill, te lasam sa le descoperi.");
					}
					else
					{
						SendClientMessage(i, COLOR_WHITE, "Trucker is one of the 10+ jobs available on our server.");
	                    SendClientMessage(i, COLOR_WHITE, "This job requires you to deliver stuff from one city to another.");
	                    SendClientMessage(i, COLOR_WHITE, "");
	                    SendClientMessage(i, COLOR_WHITE, "To see list of all available jobs, you can use the command /jobs.");
						SendClientMessage(i, COLOR_WHITE, "Some jobs are more profitable at begginning, others as you advance in skill, we let you to discover them.");
					}
					RegistrationStep[i] = 4;
			    }
			    else if(TutTime[i] == 27)
			    {
			        PlayerTextDrawHide(i, Step[i]);
			        PlayerTextDrawHide(i, Tutorial[i]);
			        SendClientMessage(i, COLOR_WHITE, "");
			    	SendClientMessage(i, COLOR_WHITE, "");
			    	SendClientMessage(i, COLOR_WHITE, "");
			    	SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
					SendClientMessage(i, COLOR_WHITE, "");
			        if(PlayerInfo[i][pLanguage] == 2)
			        {
			        	SendClientMessage(i, COLOR_YELLOW, "Ai ajuns la sfarsitul tutorialului. Daca ai fost atent, ar trebui sa stii cateva lucruri despre joc.");
			        	SendClientMessage(i, COLOR_YELLOW, "Daca ai vreo intrebare legata de joc, foloseste /n si helperii vor incerca sa te ajute.");
                    	SendClientMessage(i, COLOR_YELLOW, "Poti folosi si /help pentru comenzi de baza.");
                        SendClientMessage(i, COLOR_YELLOW, "Distractie placuta!");
					}
					else
                    {
			        	SendClientMessage(i, COLOR_YELLOW, "We reached the end of the tutorial. We hope you learned something about the game.");
			        	SendClientMessage(i, COLOR_YELLOW, "If you have any game-questions, you can use /n and our helpers will try to help you.");
                    	SendClientMessage(i, COLOR_YELLOW, "You cand also use /help for basic commands.");
                        SendClientMessage(i, COLOR_YELLOW, "Have fun!");
					}
					CP[i] = 43;
				    SetPlayerCheckpoint(i, 1219.0502,-1812.7823,16.5938, 4.0);
				    StopAudioStreamForPlayer(i);
			    }
			    else if(TutTime[i] == 30)
			    {
			        TutTime[i] = 0; PlayerInfo[i][pTut] = 1;
					gNews[i] = 0;
					RegistrationStep[i] = 0;
					TogglePlayerControllable(i, 1);
					SetCameraBehindPlayer(i);
					TogglePlayerSpectating(i, 0);
					SetPlayerSpawn(i);
					PlayerInfo[i][pAccount] = 50000;
					ResetPlayerCash(i);
					GivePlayerCash(i,2500000);
					SetPlayerInterior(i,0);
					SetPlayerVirtualWorld(i,0);
					TogglePlayerControllable(i,true);
					new str1[256];
					mysql_format(SQL,str1,256,"UPDATE users SET `Tutorial`='1',`Bank`='50000',`Money`='3000000' WHERE `name`='%s'",PlayerInfo[i][pNormalName]);
					mysql_tquery(SQL,str1,"","");
					PlayerInfo[i][pLevel] = 3;
					Update(i, pLevelx);
					PlayerInfo[i][pPremiumPoints] += 30;
					Update(i, pPremiumPointsx);
					PlayerInfo[i][pCases] += 5;
					Update(i, pCasesx);
					SetPlayerScore(i, PlayerInfo[i][pLevel]);
					SS(i, COLOR_LIGHTBLUE, "Ai primit $2,500,000, 30 premium points, 5 cutii si level 3 bonus de bun venit.", "You received $2,500,000, 30 premium points, 5 cutii and level 3 for welcome.");
			    	SS(i,COLOR_LIGHTBLUE, "Foloseste comanda /levelinfo pentru informatii despre nivele.","Use /levelinfo command for levels information.");
			    }
			}
			if(PlayerTazeTime[i] >= 1)
			{
			    PlayerTazeTime[i] += 1;
			    if(PlayerTazeTime[i] == 15)
			    {
                    PlayerTazeTime[i] = 0;
			    }
			    else
			    {
			        new Float:angle;
					GetPlayerFacingAngle(i, angle);
					SetPlayerFacingAngle(i, angle + 90);
			    }
			}
			if(PlayerDrunk[i] >= 5)
			{
			    if(PlayerDrunkTime[i] == 8)
			    {
			        PlayerDrunkTime[i] = 0;
			        new Float:angle;
					GetPlayerFacingAngle(i, angle);
					if(IsPlayerInAnyVehicle(i))
					{
					    if(GetPlayerState(i) == 2)
					    {
					    	SetVehicleZAngle(GetPlayerVehicleID(i), angle + 15);
					    	SetPlayerDrunkLevel (i, 5000);
						}
					}
					else
					{
					    LoopingAnim(i,"PED","WALK_DRUNK",4.0,1,1,1,1,0);
					    SetPlayerDrunkLevel (i, 5000);
					}
			    }
			}
			if(PlayerStoned[i] >= 2)
			{
			    new Float:angle;
				GetPlayerFacingAngle(i, angle);
				if(IsPlayerInAnyVehicle(i))
				{
					if(GetPlayerState(i) == 2)
					{
					    SetVehicleZAngle(GetPlayerVehicleID(i), angle + 15);
					    SetPlayerDrunkLevel (i, 5000);
					}
				}
				else
				{
					SetPlayerDrunkLevel (i, 5000);
				}
			}
			if(PlayerCuffed[i] == 1)
			{
			    if(PlayerCuffedTime[i] <= 0)
			    {
			        TogglePlayerControllable(i, 1);
			        PlayerCuffed[i] = 0;
			        PlayerCuffedTime[i] = 0;
			        PlayerTazeTime[i] = 1;
			    }
			    else
			    {
			        PlayerCuffedTime[i] -= 1;
			    }
			}
			if(PlayerCuffed[i] == 2)
			{
			    if(PlayerCuffedTime[i] <= 0)
			    {
			        GameTextForPlayer(i, "~r~~h~You broke the Cuffs, you are free!", 2500, 3);
			        TogglePlayerControllable(i, 1);
			        PlayerCuffed[i] = 0;
			        PlayerCuffedTime[i] = 0;
			    }
			    else
			    {
			        PlayerCuffedTime[i] -= 1;
			    }
			}
			if(Cash[i] != GetPlayerMoney(i))
    		{
    		    new hack = GetPlayerMoney(i) - Cash[i];
				if(hack != 0)
				{
					ResetPlayerMoney(i);
					GivePlayerMoney(i, Cash[i]);
				}
    		}
    		if(Undercover[i] == 1)
			{
			    PlayerTextDrawShow(i, UndercoverText[i]);
			}
			else
			{
			    PlayerTextDrawHide(i, UndercoverText[i]);
			}
		}
		if(gPlayerLogged[i] != 0) {
			if(PlayerInfo[i][pPayDaysec] > 0) {
		    	PlayerInfo[i][pPayDaysec]--;
		    	Update(i, pPayDaysecx);
		    }
		    else if(PlayerInfo[i][pPayDaymin] > 0) {
		    	PlayerInfo[i][pPayDaysec] = 59;
		    	Update(i, pPayDaysecx);
		    	PlayerInfo[i][pPayDaymin]--;
		    	Update(i, pPayDayminx);
		    }
		    else {
		    	PlayerInfo[i][pPayDaysec] = 60;
		    	Update(i, pPayDaysecx);
		    	PlayerInfo[i][pPayDaymin] = 59;
		    	Update(i, pPayDayminx);
		    	PlayerPayDay(i);
		    }
		    new strd[60];
		    format(strd, sizeof strd, "Next payday in %s%d:%s%d", (PlayerInfo[i][pPayDaymin] < 10) ? ("0") : (""), PlayerInfo[i][pPayDaymin], (PlayerInfo[i][pPayDaysec] < 10) ? ("0") : (""), PlayerInfo[i][pPayDaysec]);
		    PlayerTextDrawHide(i, PayDayTimer[i]);
		    PlayerTextDrawSetString(i, PayDayTimer[i], strd);
			PlayerTextDrawShow(i, PayDayTimer[i]);
		}
		if(PlayerInfo[i][pBeePlaced] == 1) {
			if(PlayerInfo[i][pBeesec] > 0) {
		    	PlayerInfo[i][pBeesec]--;
		    	Update(i, pBeesecx);
		    }
		    else if(PlayerInfo[i][pBeemin] > 0) {
		    	PlayerInfo[i][pBeesec] = 59;
		    	Update(i, pBeesecx);
		    	PlayerInfo[i][pBeemin]--;
		    	Update(i, pBeeminx);
		    }
		    else {
		    	PlayerInfo[i][pBeePlaced] = 2;
		    	Update(i, pBeePlacedx);
		    	UpdatePlayer3DTextLabelText(i, Bee3DText[i], COLOR_WHITE, "Press 'Alt' to collect beehives product.");
		    }
		    if(PlayerInfo[i][pBeePlaced] == 1) {
			    new strd[60];
			    format(strd, sizeof strd, "Collect beehives in: %s%d:%s%d", (PlayerInfo[i][pBeemin] < 10) ? ("0") : (""), PlayerInfo[i][pBeemin], (PlayerInfo[i][pBeesec] < 10) ? ("0") : (""), PlayerInfo[i][pBeesec]);
			    PlayerTextDrawHide(i, BeehiveTimer[i]);
			    PlayerTextDrawSetString(i, BeehiveTimer[i], strd);
				PlayerTextDrawShow(i, BeehiveTimer[i]);
				UpdatePlayer3DTextLabelText(i, Bee3DText[i], COLOR_WHITE, strd);
			}
		}
		else if(PlayerInfo[i][pBeePlaced] == 2) {
			PlayerTextDrawHide(i, BeehiveTimer[i]);
		    PlayerTextDrawSetString(i, BeehiveTimer[i], "Go to collect your beehives!");
			PlayerTextDrawShow(i, BeehiveTimer[i]);
		}
	}
	foreach(Player,k)
	{
    	GetPlayerPos(k, PlayerPosii[k][0], PlayerPosii[k][1], PlayerPosii[k][2]);
    	GetPlayerPos(k, LastPos[k][0], LastPos[k][1], LastPos[k][2]);
		if(PlayerPosii[k][0] == PlayerPosii[k][3] && PlayerPosii[k][1] == PlayerPosii[k][4] && PlayerPosii[k][2] == PlayerPosii[k][5])
		{
        	IsPlayerAFK[k]++;
        	if(IsPlayerAFK[k] > 300) PlayerHandsup[k] = 1;
		}
		else
		{
			PlayerInfo[k][pPayDay]++;
			OnlineTime[k]++;
			OnlineTimeToday[k]++;
	    	IsPlayerAFK[k] = 0;
		}
		PlayerPosii[k][3] = PlayerPosii[k][0];
		PlayerPosii[k][4] = PlayerPosii[k][1];
		PlayerPosii[k][5] = PlayerPosii[k][2];
	}
	new year,month,day,hours,minutes,seconds,strx[256];
    getdate(year, month, day), gettime(hours, minutes, seconds);
    hours+=SERVER_HOUR_FIX;
    if(hours == 24) hours = 0, day++;
    format(strx, sizeof strx, "%s%d.%s%d.%s%d",((day < 10) ? ("0") : ("")), day, ((month < 10) ? ("0") : ("")), month, (year < 10) ? ("0") : (""), year);
    TextDrawSetString(Date, strx);
    format(strx, sizeof strx, "%s%d:%s%d:%s%d", (hours < 10) ? ("0") : (""), hours, (minutes < 10) ? ("0") : (""), minutes, (seconds < 10) ? ("0") : (""), seconds);
    TextDrawSetString(Time, strx);

 /*foreach(new k : Player)
	{
		if(IsPlayerAFK[k] < 10)
		{
			PlayerInfo[k][pPayDay] += 1;
			OnlineTime[k]++;
			OnlineTimeToday[k]++;
		}
	}*/
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pMember] == 9)
		{
			if(minutes == 50 && seconds == 1) SendFamilyMessage(9, COLOR_ADMCHAT, "You have 10 minutes to put free announces.");
			if(minutes == 59 && seconds == 1) SendFamilyMessage(9, COLOR_ADMCHAT, "You have one minut of free announces.");
		}
	}
	if(DeelayWar[4] > 0)
	{
		DeelayWar[4]--;
	}
	if(DeelayWar[5] > 0)
	{
		DeelayWar[5]--;
	}
	if(DeelayWar[6] > 0)
	{
		DeelayWar[6]--;
	}
	if(DeelayWar[10] > 0)
	{
		DeelayWar[10]--;
	}
	return 1;
}

forward AdminAcces(playerid);
public AdminAcces(playerid)
{
	if(IsPlayerConnected(playerid))
	{
        if((strcmp(PlayerInfo[playerid][pNormalName], "ionutdrg45", true) == 0))
        {
		    return 1;
		}
	}
	return 0;
}

forward NumberUsed(playerid);
public NumberUsed(playerid)
{
	new string[256];
	format(string, sizeof(string),"SELECT * FROM `users` WHERE `PhoneNr` = '%d'",PlayerInfo[playerid][pPnumber]);
	new Cache: result = mysql_query(SQL, string);
	if(cache_get_row_count() > 0)
	{
		cache_delete(result);
		return 1;
	}
	cache_delete(result);
	return 0;
}

forward Checkvehinfo();
public Checkvehinfo()
{
	foreach(new i : Player)
	{
    	if(IsPlayerConnected(i))
       	{
       	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
       	    {
	       		new vehicle = GetPlayerVehicleID(i),
                	spe = Carspeed(i);
                new str1[128],str2[128],str3[128],str4[128],str5[128];
				PlayerTextDrawShow(i, Speedd[i]);
				format(str1,sizeof(str1),"~w~Speed: ~g~%d ~w~km/h",spe);
				PlayerTextDrawSetString(i, Speedd[i], str1);
				if(!IsABike(vehicle)) {
					PlayerTextDrawShow(i, Fuell[i]);
					format(str2,sizeof(str2),"~w~Fuel: ~g~%d ~L~", Gas[vehicle]);
					PlayerTextDrawSetString(i, Fuell[i], str2);
				}
				if(IsARentCar(vehicle))
				{
					if(gCarLock[vehicle] == 0)
					{
						PlayerTextDrawShow(i, carlocked[i]);
						format(str4,sizeof(str4),"~g~UNLOCKED");
						PlayerTextDrawSetString(i, carlocked[i], str4);
					}
					else if(gCarLock[vehicle] == 1)
					{
						PlayerTextDrawShow(i, carlocked[i]);
						format(str5,sizeof(str5),"~r~LOCKED");
						PlayerTextDrawSetString(i, carlocked[i], str5);
					}
				}
				foreach(new s : Player)
				{
					for(new v; v < MAX_PERSONAL_VEHICLES; v++)
					{
						if(PlayerInfo[s][pCarID][v] == vehicle)
						{
							GiveVehicleSpeed(s, vehicle, v);
							if(!IsAPlane(vehicle))
							{
								PlayerTextDrawShow(i, Odom[i]);
								format(str3,sizeof(str3),"~w~Odometer: ~g~%.0fkm",PlayerInfo[s][pCarKM][v]);
								PlayerTextDrawSetString(i, Odom[i], str3);
							}
							if(PlayerInfo[s][pCarLock][v] == 0)
							{
								PlayerTextDrawShow(i, carlocked[i]);
								format(str4,sizeof(str4),"~g~UNLOCKED");
								PlayerTextDrawSetString(i, carlocked[i], str4);
							}
							else if(PlayerInfo[s][pCarLock][v] == 1)
							{
								PlayerTextDrawShow(i, carlocked[i]);
								format(str5,sizeof(str5),"~r~LOCKED");
								PlayerTextDrawSetString(i, carlocked[i], str5);
							}
						}
					}
				}
			}
			else if(GetPlayerState(i) == PLAYER_STATE_PASSENGER)
       	    {
       	        new count;
       	        foreach(new x : Player)
				{
				    if(GetPlayerState(x) == PLAYER_STATE_DRIVER)
       	    		{
       	    		    if(GetPlayerVehicleID(x) == GetPlayerVehicleID(i))
       	    		    {
       	    		        count ++;
						}
					}
					if(count >= 1)
					{
					    new vehicle = GetPlayerVehicleID(i),
                			spe = Carspeed(i);
               		 	new str1[128],str2[128],str3[128],str4[128],str5[128];
						PlayerTextDrawShow(i, Speedd[i]);
						format(str1,sizeof(str1),"~w~Speed: ~g~%d ~w~km/h",spe);
						PlayerTextDrawSetString(i, Speedd[i], str1);
						if(!IsABike(vehicle)) {
							PlayerTextDrawShow(i, Fuell[i]);
							format(str2,sizeof(str2),"~w~Fuel: ~g~%d ~w~L", Gas[vehicle]);
							PlayerTextDrawSetString(i, Fuell[i], str2);
						}
						if(IsARentCar(vehicle))
						{
							if(gCarLock[vehicle] == 0)
							{
								PlayerTextDrawShow(i, carlocked[i]);
								format(str4,sizeof(str4),"~g~UNLOCKED");
								PlayerTextDrawSetString(i, carlocked[i], str4);
							}
							else if(gCarLock[vehicle] == 1)
							{
								PlayerTextDrawShow(i, carlocked[i]);
								format(str5,sizeof(str5),"~r~LOCKED");
								PlayerTextDrawSetString(i, carlocked[i], str5);
							}
						}
						if(IsAnOwnableCar(vehicle))
						{
							foreach(new id : Player)
							{
								for(new v; v < MAX_PERSONAL_VEHICLES; v++)
								{
									if(PlayerInfo[id][pCarID][v] == vehicle)
									{
										if(!IsAPlane(vehicle))
										{
											PlayerTextDrawShow(i, Odom[i]);
											format(str3,sizeof(str3),"~w~Odometer: ~g~%.0fkm",PlayerInfo[id][pCarKM][v]);
											PlayerTextDrawSetString(i, Odom[i], str3);
										}
										if(PlayerInfo[id][pCarLock][v] == 0)
										{
											PlayerTextDrawShow(i, carlocked[i]);
											format(str4,sizeof(str4),"~g~UNLOCKED");
											PlayerTextDrawSetString(i, carlocked[i], str4);
										}
										else
										{
											PlayerTextDrawShow(i, carlocked[i]);
											format(str5,sizeof(str5),"~r~LOCKED");
											PlayerTextDrawSetString(i, carlocked[i], str5);
										}
									}
								}
							}
						}
					}
					else if(count < 1)
					{
	    				PlayerTextDrawHide(i, Fuell[i]);
		   				PlayerTextDrawHide(i, Speedd[i]);
		   				PlayerTextDrawHide(i, carlocked[i]);
		   				PlayerTextDrawHide(i, Odom[i]);
					}
				}
			}
    	}
	}
	return 1;
}

forward CheckGas();
public CheckGas()
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
	foreach(new i : Player)
	{
   	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
   	    {
       		new vehicle = GetPlayerVehicleID(i);
       		if(IsAPlane(vehicle) || IsABoat(vehicle) || IsABike(vehicle) || IsAGarbageTruck(vehicle) || IsABus(vehicle) || IsAPizza(vehicle) || IsATruck(vehicle)) Gas[vehicle]=100;
			if(Gas[vehicle] >= 1)
			{
				if(vehEngine[vehicle] == 1) Gas[vehicle]--;
				if(IsAnOwnableCar(vehicle))
                {
					foreach(new s : Player)
					{
						for(new v; v < MAX_PERSONAL_VEHICLES; v++)
						{
							if(PlayerInfo[s][pCarID][v] == vehicle)
							{
								if(GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicle)
								{
									new Float:carhealth;
									GetVehicleHealth(vehicle, carhealth);
									GetVehicleDamageStatus(vehicle, PlayerInfo[s][pCarDamage1][v], PlayerInfo[s][pCarDamage2][v], PlayerInfo[s][pCarDamage3][v], PlayerInfo[s][pCarDamage4][v]);
									PlayerInfo[s][pCarHP][v] = carhealth;
									PlayerInfo[s][pCarGas][v] = Gas[vehicle];
									cUpdate(s, v, cHPx);
									cUpdate(s, v, cDamage1x);
									cUpdate(s, v, cDamage2x);
									cUpdate(s, v, cDamage3x);
									cUpdate(s, v, cDamage4x);
									cUpdate(s, v, cGasx);
									cUpdate(s, v, cKMx);
								}
							}
						}
					}
				}
	   		}
   			else
           	{
              	NoFuel[i] = 1;
              	TogglePlayerControllable(i, 0);
	        	GameTextForPlayer(i,"~w~~n~~n~~n~~n~~n~~n~~n~~n~No fuel in vehicle.",1500,3);
	        	vehEngine[vehicle] = 0;
    			GetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet,boot,objective);
      	    	SetVehicleParamsEx(vehicle,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
      	    	SetPVarInt(i, "Engine", 0);
			}
		}
	}
	return 1;
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
    if(enterexit == 0)
    {
		if(IsPlayerInRangeOfPoint(playerid,10.0,617.5360,-1.9900,1000.6647))
		{
			if(GetPlayerCash(playerid) >= BizzInfo[38][bEntranceCost])
			{
				EnterInModShop[playerid] = 1;
				return 1;
			}
		}
		if(IsPlayerInRangeOfPoint(playerid,10.0,616.7844,-74.8150,997.7675))
		{
			if(GetPlayerCash(playerid) >= BizzInfo[39][bEntranceCost])
			{
				EnterInModShop[playerid] = 1;
				return 1;
			}
		}
    }
    return 1;
}

forward Fillup(playerid);
public Fillup(playerid)
{
   	if(IsPlayerConnected(playerid))
   	{
	    new VID,
	    	FillUp,
	    	string[256];
	    VID = GetPlayerVehicleID(playerid);

	    new fill_veh = 100;

	    foreach(new s : Player)
			for(new v; v < MAX_PERSONAL_VEHICLES; v++)
				if(PlayerInfo[s][pCarID][v] == VID) fill_veh = PlayerInfo[s][pCarGasMax][v];

	    FillUp = fill_veh - Gas[VID];
	    new Incarcare = fill_veh - Gas[VID];
	    FillUp = FillUp * SvarInfo[15][svValue];
	    if(Gas[VID] >= fill_veh) { FillUp = 0; Incarcare = 0; }
		if(Refueling[playerid] == 1)
	    {
			if(GetPlayerCash(playerid) >= FillUp)
			{
				Gas[VID] += Incarcare;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(string,sizeof(string),"Ai platit $%s pentru a face plinul la masina.",FormatNumber(FillUp));
			    else format(string,sizeof(string),"You paid $%s for fill up the car.",FormatNumber(FillUp));
			    SendClientMessage(playerid,COLOR_GREEN,string);
                TogglePlayerControllable(playerid, 1);
				GivePlayerCash(playerid, - FillUp);
				Refueling[playerid] = 0;
                new str[184];
				if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[33][bEntranceX],BizzInfo[33][bEntranceY],BizzInfo[33][bEntranceZ]))
				{
					BizzInfo[33][bTill] += FillUp;
		    		mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='33'",BizzInfo[33][bTill]);
					mysql_tquery(SQL,str,"","");
				}
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[42][bEntranceX],BizzInfo[42][bEntranceY],BizzInfo[42][bEntranceZ]))
				{
					BizzInfo[42][bTill] += FillUp;
		    		mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='42'",BizzInfo[42][bTill]);
					mysql_tquery(SQL,str,"","");
				}
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[43][bEntranceX],BizzInfo[43][bEntranceY],BizzInfo[43][bEntranceZ]))
				{
					BizzInfo[43][bTill] += FillUp;
		    		mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='43'",BizzInfo[43][bTill]);
					mysql_tquery(SQL,str,"","");
				}
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[44][bEntranceX],BizzInfo[44][bEntranceY],BizzInfo[44][bEntranceZ]))
				{
					BizzInfo[44][bTill] += FillUp;
		    		mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='44'",BizzInfo[44][bTill]);
					mysql_tquery(SQL,str,"","");
				}
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[45][bEntranceX],BizzInfo[45][bEntranceY],BizzInfo[45][bEntranceZ]))
				{
					BizzInfo[45][bTill] += FillUp;
		    		mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='45'",BizzInfo[45][bTill]);
					mysql_tquery(SQL,str,"","");
				}
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[46][bEntranceX],BizzInfo[46][bEntranceY],BizzInfo[46][bEntranceZ]))
				{
					BizzInfo[46][bTill] += FillUp;
		    		mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='46'",BizzInfo[46][bTill]);
					mysql_tquery(SQL,str,"","");
				}
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[47][bEntranceX],BizzInfo[47][bEntranceY],BizzInfo[47][bEntranceZ]))
				{
					BizzInfo[47][bTill] += FillUp;
		    		mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='47'",BizzInfo[47][bTill]);
					mysql_tquery(SQL,str,"","");
				}
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[48][bEntranceX],BizzInfo[48][bEntranceY],BizzInfo[48][bEntranceZ]))
				{
					BizzInfo[48][bTill] += FillUp;
		    		mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='48'",BizzInfo[48][bTill]);
					mysql_tquery(SQL,str,"","");
				}
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[49][bEntranceX],BizzInfo[49][bEntranceY],BizzInfo[49][bEntranceZ]))
				{
					BizzInfo[49][bTill] += FillUp;
		    		mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='49'",BizzInfo[49][bTill]);
					mysql_tquery(SQL,str,"","");
				}
				else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[50][bEntranceX],BizzInfo[50][bEntranceY],BizzInfo[50][bEntranceZ]))
				{
					BizzInfo[50][bTill] += FillUp;
		    		mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='50'",BizzInfo[50][bTill]);
					mysql_tquery(SQL,str,"","");
				}
			}
		   	else
		   	{
		   	    format(string,sizeof(string),"* Not enough Money to refill, it costs $%d to fill your Vehicle.",FillUp);
		   	    Refueling[playerid] = 0;
		   	    TogglePlayerControllable(playerid, 1);
			    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
		   	}
	 	}
	}
	return 1;
}

forward ShowStats(playerid,targetid);
public ShowStats(playerid,targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new cash =  GetPlayerMoney(targetid),ttext[20];

		if(PlayerInfo[targetid][pMember] == 0 && PlayerInfo[targetid][pLeader] == 0) ttext = "none"; 
		else if(PlayerInfo[targetid][pMember] == 1 || PlayerInfo[targetid][pLeader] == 1) ttext = "LSPD"; 
		else if(PlayerInfo[targetid][pMember] == 2 || PlayerInfo[targetid][pLeader] == 2) ttext = "FBI"; 
		else if(PlayerInfo[targetid][pMember] == 3 || PlayerInfo[targetid][pLeader] == 3) ttext = "National Guard"; 
		else if(PlayerInfo[targetid][pMember] == 4 || PlayerInfo[targetid][pLeader] == 4) ttext = "Los Aztecas"; 
		else if(PlayerInfo[targetid][pMember] == 5 || PlayerInfo[targetid][pLeader] == 5) ttext = "Grove Street"; 
		else if(PlayerInfo[targetid][pMember] == 6 || PlayerInfo[targetid][pLeader] == 6) ttext = "Los Vagos"; 
		else if(PlayerInfo[targetid][pMember] == 7 || PlayerInfo[targetid][pLeader] == 7) ttext = "Mayor"; 
		else if(PlayerInfo[targetid][pMember] == 8 || PlayerInfo[targetid][pLeader] == 8) ttext = "LVPD"; 
		else if(PlayerInfo[targetid][pMember] == 9 || PlayerInfo[targetid][pLeader] == 9) ttext = "News Reporter"; 
		else if(PlayerInfo[targetid][pMember] == 10 || PlayerInfo[targetid][pLeader] == 10) ttext = "Ballas";
		else if(PlayerInfo[targetid][pMember] == 11 || PlayerInfo[targetid][pLeader] == 11) ttext = "Hitman Agency"; 
		else if(PlayerInfo[targetid][pMember] == 12 || PlayerInfo[targetid][pLeader] == 12) ttext = "S.I LV"; 
		else if(PlayerInfo[targetid][pMember] == 13 || PlayerInfo[targetid][pLeader] == 13) ttext = "Taxi"; 
		else if(PlayerInfo[targetid][pMember] == 14 || PlayerInfo[targetid][pLeader] == 14) ttext = "Paramedic LV"; 

	    new rtext[64];
		if(PlayerInfo[targetid][pRank] == 1) format(rtext,sizeof(rtext),"%s",DynamicFactions[PlayerInfo[targetid][pMember]][fRankName1]);
		else if(PlayerInfo[targetid][pRank] == 2) format(rtext,sizeof(rtext),"%s",DynamicFactions[PlayerInfo[targetid][pMember]][fRankName2]);
		else if(PlayerInfo[targetid][pRank] == 3) format(rtext,sizeof(rtext),"%s",DynamicFactions[PlayerInfo[targetid][pMember]][fRankName3]);
		else if(PlayerInfo[targetid][pRank] == 4) format(rtext,sizeof(rtext),"%s",DynamicFactions[PlayerInfo[targetid][pMember]][fRankName4]);
		else if(PlayerInfo[targetid][pRank] == 5) format(rtext,sizeof(rtext),"%s",DynamicFactions[PlayerInfo[targetid][pMember]][fRankName5]);
		else if(PlayerInfo[targetid][pRank] == 6) format(rtext,sizeof(rtext),"%s",DynamicFactions[PlayerInfo[targetid][pMember]][fRankName6]);
		else if(PlayerInfo[targetid][pRank] == 7) format(rtext,sizeof(rtext),"%s",DynamicFactions[PlayerInfo[targetid][pMember]][fRankName7]);
		else rtext = "none";

        new jtext[20];
        if(PlayerInfo[targetid][pJob] == 1) jtext = "detective"; 
        else if(PlayerInfo[targetid][pJob] == 2) jtext = "car jacker";
        else if(PlayerInfo[targetid][pJob] == 3) jtext = "miner";  
        else if(PlayerInfo[targetid][pJob] == 4) jtext = "drugs dealer"; 
        else if(PlayerInfo[targetid][pJob] == 5) jtext = "pizza boy"; 
        else if(PlayerInfo[targetid][pJob] == 6) jtext = "farmer"; 
        else if(PlayerInfo[targetid][pJob] == 7) jtext = "bus driver"; 
        else if(PlayerInfo[targetid][pJob] == 8) jtext = "mechanic"; 
        else if(PlayerInfo[targetid][pJob] == 9) jtext = "arms dealer"; 
        else if(PlayerInfo[targetid][pJob] == 10) jtext = "garbage man"; 
        else if(PlayerInfo[targetid][pJob] == 13) jtext = "fisherman"; 
        else if(PlayerInfo[targetid][pJob] == 14) jtext = "trucker";
        else if(PlayerInfo[targetid][pJob] == 15) jtext = "air transporter";
        else if(PlayerInfo[targetid][pJob] == 16) jtext = "strawberry picker";
	    else jtext = "none";

		new drank[20];
		if(PlayerInfo[targetid][pPremiumAccount] == 0) drank = "no";
		else if(PlayerInfo[targetid][pPremiumAccount] == 1) drank = "yes";
		else if(PlayerInfo[targetid][pPremiumAccount] == 2) drank = "vip";
		else drank = "no";

	 	new clanuuu[32];
	 	if(PlayerInfo[targetid][pClan] == 0) clanuuu = "none";
		else format(clanuuu, sizeof(clanuuu), "%s", ClanInfo[PlayerInfo[targetid][pClan]][cClanName]);

		new Float:ptime = PlayerInfo[targetid][pConnectTime];
		new crimes = PlayerInfo[targetid][pCrimes],drugs = PlayerInfo[targetid][pDrugs],warnings = PlayerInfo[targetid][pWarns],mats = PlayerInfo[targetid][pMats],plevel = PlayerInfo[targetid][pLevel],exp = PlayerInfo[targetid][pExp],pnumber = PlayerInfo[targetid][pPnumber],account = PlayerInfo[targetid][pAccount],nxtlevel = PlayerInfo[targetid][pLevel],expamount;
		if(PlayerInfo[targetid][pLevel] <= 4) expamount = nxtlevel*3;
		else if(PlayerInfo[targetid][pLevel] >= 5) expamount = nxtlevel*levelexp;
		new pretlevel = nxtlevel*levelcost,intir = PlayerInfo[targetid][pInt],bltime = PlayerInfo[targetid][pFpunish],premiumpoints = PlayerInfo[targetid][pPremiumPoints],fireworks = PlayerInfo[targetid][pFWorks],maximpuncte,Float:health,name[30],Float:armour,status[20],robtext[50];
		if(IsACop(targetid))
		{
			format(robtext, sizeof(robtext),"free points");
			maximpuncte = 3;
		}
		else
		{
			format(robtext, sizeof(robtext),"rob points");
			if(PlayerInfo[targetid][pPremiumAccount] == 0) maximpuncte = 10;
			if(PlayerInfo[targetid][pPremiumAccount] >= 1) maximpuncte = 8;
		}

		if(gPlayerLogged[targetid] == 1) format(status, sizeof(status),"authenticated");
		else if(gPlayerLogged[targetid] == 0 && PlayerInfo[targetid][pReg] == 0 || PlayerInfo[targetid][pTut] > 1) format(status, sizeof(status),"register");
		else if(gPlayerLogged[targetid] == 0 && PlayerInfo[targetid][pReg] != 0) format(status, sizeof(status),"login");

		GetPlayerName(targetid, name, sizeof(name));
		GetPlayerHealth(targetid,health);
		GetPlayerArmour(targetid,armour);
		new Float:px,Float:py,Float:pz;
		GetPlayerPos(targetid, px, py, pz);
		new coordsstring[256],secondstring[128];

		format(coordsstring, sizeof(coordsstring), "{79AFD4}General:{FFFFFF} (%d) %s, hours %.2f, phone number %d, job: %s, warns %d/3, premium %s(%d points)",targetid,name,ptime,pnumber,jtext,warnings,drank,premiumpoints);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);

		format(coordsstring, sizeof(coordsstring), "{79AFD4}Account:{FFFFFF} level %d, respect points %d/%d, next level price %s, money(cash %s, bank %s)",plevel,exp,expamount,FormatNumber(pretlevel),FormatNumber(cash),FormatNumber(account));
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		//**//
		if(PlayerInfo[targetid][pMember] >= 1)
			format(coordsstring, sizeof(coordsstring), "{79AFD4}Account:{FFFFFF} group %s, rank %d, faction warns %d/3, faction punish %d/20",ttext,PlayerInfo[targetid][pRank],PlayerInfo[targetid][pFACWarns],bltime);
		else
			format(coordsstring, sizeof(coordsstring), "{79AFD4}Account:{FFFFFF} group %s, faction punish %d/20",ttext,bltime);
		if(PlayerInfo[targetid][pClan] >= 1)
		{
			format(secondstring, sizeof(secondstring), ", clan %s(%s), rank %d",clanuuu,ClanInfo[PlayerInfo[targetid][pClan]][cClanTag],PlayerInfo[targetid][pCRank]);
			strcat(coordsstring,secondstring);
		}
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		//**//
		format(coordsstring, sizeof(coordsstring), "{79AFD4}Others:{FFFFFF} %s %d/%d, crimes %d, credit %d$, radio #%d khz, gift points %d, cases %d",robtext,PlayerInfo[targetid][pRob],maximpuncte,crimes,PlayerInfo[targetid][pCredits],WTChannel[targetid],PlayerInfo[targetid][pGiftTime], PlayerInfo[targetid][pCases]);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		//**//
		format(coordsstring, sizeof(coordsstring), "{79AFD4}Others:{FFFFFF} materials %s, drugs %d, fireworks %d, hiddens %d",FormatNumber(mats),drugs,fireworks,PlayerInfo[targetid][pHiddenColor]);
		new vehicles;
		for(new v; v < PlayerInfo[targetid][pCarSlots]; v++)
		{
			if(PlayerInfo[targetid][pCar][v] != -1) vehicles++;
		}
		if(PlayerInfo[targetid][pPbiskey] != 255 && PlayerInfo[targetid][pPhousekey] == 999)
		{
			format(secondstring, sizeof(secondstring), ", %d/%d vehicles, business %d",vehicles,PlayerInfo[targetid][pCarSlots],PlayerInfo[targetid][pPbiskey]);
			strcat(coordsstring,secondstring);
		}
		else if(PlayerInfo[targetid][pPbiskey] == 255 && PlayerInfo[targetid][pPhousekey] != 999)
		{
			format(secondstring, sizeof(secondstring), ", %d/%d vehicles, house %d",vehicles,PlayerInfo[targetid][pCarSlots],PlayerInfo[targetid][pPhousekey]);
			strcat(coordsstring,secondstring);
		}
		else if(PlayerInfo[targetid][pPbiskey] != 255 && PlayerInfo[targetid][pPhousekey] != 999)
		{
			format(secondstring, sizeof(secondstring), ", %d/%d vehicles, business %d, house %d",vehicles,PlayerInfo[targetid][pCarSlots],PlayerInfo[targetid][pPbiskey],PlayerInfo[targetid][pPhousekey]);
			strcat(coordsstring,secondstring);
		}	
		else 
		{
			format(secondstring, sizeof(secondstring), ", %d/%d vehicles",vehicles,PlayerInfo[targetid][pCarSlots]);
			strcat(coordsstring,secondstring);
		}
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		//**//
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			format(coordsstring, sizeof(coordsstring), "{79AFD4}Admin:{FFFFFF} status %s, admin level %d, interior %d, virtual world %d", status, PlayerInfo[targetid][pAdmin], intir, GetPlayerVirtualWorld(targetid));
			SendClientMessage(playerid, COLOR_WHITE,coordsstring);
			format(coordsstring, sizeof(coordsstring), "{79AFD4}Admin:{FFFFFF} health %.1f, armour %.1f, jail %d, wanted %d, duty %d, time played %d",  health, armour, PlayerInfo[targetid][pJailTime], PlayerInfo[targetid][pWantedLevel], OnDuty[targetid], OnlineTime[targetid]);
			SendClientMessage(playerid, COLOR_WHITE,coordsstring);

	  	}
		
	}
}

forward SetPlayerSkinEx(playerid);
public SetPlayerSkinEx(playerid)
{
	if(PlayerInfo[playerid][pMember] != 0 && OnDuty[playerid] != 0 && PlayerInfo[playerid][pMember] != 7)
	{
		if(PlayerInfo[playerid][pSex] == 1) SetPlayerSkin(playerid, FactionSkin[PlayerInfo[playerid][pMember]][PlayerInfo[playerid][pRank]]);
		else SetPlayerSkin(playerid, FactionSkin[PlayerInfo[playerid][pMember]][8]);
	}
	else SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
	return 1;
}

forward SetPlayerToTeamColor(playerid);
public SetPlayerToTeamColor(playerid)
{
	if(IsPlayerConnected(playerid))
	{
      	if(PlayerInfo[playerid][pMember] == 1) { SetPlayerColor(playerid, 0x0049D0FF); } // LSPD
      	if(PlayerInfo[playerid][pLeader] == 1) { SetPlayerColor(playerid, 0x0049D0FF); } // LSPD
      	if(PlayerInfo[playerid][pMember] == 2) { SetPlayerColor(playerid, 0x005AFFFF); } // FBI
      	if(PlayerInfo[playerid][pLeader] == 2) { SetPlayerColor(playerid, 0x005AFFFF); } // FBI
      	if(PlayerInfo[playerid][pLeader] == 3) { SetPlayerColor(playerid, 0x00006AFF); } // National Guard
      	if(PlayerInfo[playerid][pMember] == 3) { SetPlayerColor(playerid, 0x00006AFF); } // National Guard
      	if(PlayerInfo[playerid][pMember] == 4) { SetPlayerColor(playerid, 0x18EBD6C8); } // Los Aztecas
      	if(PlayerInfo[playerid][pLeader] == 4) { SetPlayerColor(playerid, 0x18EBD6C8); } // Los Aztecas
      	if(PlayerInfo[playerid][pMember] == 5) { SetPlayerColor(playerid, 0x40863CAA); } // Grove Street
      	if(PlayerInfo[playerid][pLeader] == 5) { SetPlayerColor(playerid, 0x40863CAA); } // Grove Street
      	if(PlayerInfo[playerid][pMember] == 6) { SetPlayerColor(playerid, 0xFFAE00C8); } // Los Vagos
      	if(PlayerInfo[playerid][pLeader] == 6) { SetPlayerColor(playerid, 0xFFAE00C8); } // Los Vagos
      	if(PlayerInfo[playerid][pMember] == 7) { SetPlayerColor(playerid, 0x9FEC76FF); } // Mayor
      	if(PlayerInfo[playerid][pLeader] == 7) { SetPlayerColor(playerid, 0x9FEC76FF); } // Mayor
      	if(PlayerInfo[playerid][pMember] == 8) { SetPlayerColor(playerid, 0x0049D0FF); } // LVPD
      	if(PlayerInfo[playerid][pLeader] == 8) { SetPlayerColor(playerid, 0x0049D0FF); } // LVPD
      	if(PlayerInfo[playerid][pMember] == 9) { SetPlayerColor(playerid, 0xEFC6FFFF); } // News Reporter
      	if(PlayerInfo[playerid][pLeader] == 9) { SetPlayerColor(playerid, 0xEFC6FFFF); } // News Reporter
      	if(PlayerInfo[playerid][pMember] == 10) { SetPlayerColor(playerid, 0xBD1CDEC8); } // Ballas
      	if(PlayerInfo[playerid][pLeader] == 10) { SetPlayerColor(playerid, 0xBD1CDEC8); } // Ballas
      	if(PlayerInfo[playerid][pMember] == 11) { SetPlayerColor(playerid, 0xB4200BFF); } // Hitman
      	if(PlayerInfo[playerid][pLeader] == 11) { SetPlayerColor(playerid, 0xB4200BFF); } // Hitman
      	if(PlayerInfo[playerid][pMember] == 12) { SetPlayerColor(playerid, 0x00D179FF); } // SI
      	if(PlayerInfo[playerid][pLeader] == 12) { SetPlayerColor(playerid, 0x00D179FF); } // SI
      	if(PlayerInfo[playerid][pMember] == 13) { SetPlayerColor(playerid, COLOR_YELLOW); } // TAXI
      	if(PlayerInfo[playerid][pLeader] == 13) { SetPlayerColor(playerid, COLOR_YELLOW); } // TAXI
      	if(PlayerInfo[playerid][pMember] == 14) { SetPlayerColor(playerid, 0xf86448FF); } // fireman
      	if(PlayerInfo[playerid][pLeader] == 14) { SetPlayerColor(playerid, 0xf86448FF); } // fireman
      	if((OnDuty[playerid] == 0 && IsACop(playerid) == 1) || PlayerInfo[playerid][pMember] == 0) SetPlayerColor(playerid,COLOR_WHITE); // Civilian
    }
    return 1;
}

forward GameModeInitExitFunc();
public GameModeInitExitFunc()
{
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			DisablePlayerCheckpoint(i);
			gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
			gPlayerLogged[i] = 0;
			KickEx(i);
		}
	}
	SetTimer("GameModeExitFunc", 1000, 0);
	return 1;
}

forward GameModeExitFunc();
public GameModeExitFunc()
{
	KillTimer(synctimer);
	KillTimer(unjailtimer);
	KillTimer(cartimer);
	KillTimer(checkgastimer);
	KillTimer(checkvehinfotimer);
	KillTimer(productiontimer);
	KillTimer(twominutestimer);
	KillTimer(twosecondstimer);
	KillTimer(wantedicatimer);
	KillTimer(savedatatimer);
	KillTimer(randmsgtimer);
	KillTimer(preparerace1);
	KillTimer(preparerace2);
	KillTimer(preparepaint1);
	KillTimer(preparepaint2);
	KillTimer(preparepaint3);
	KillTimer(preparepaint4);
	KillTimer(paintrun1);
	KillTimer(paintrun2);
	KillTimer(paintrun3);
	KillTimer(paintrun4);
	KillTimer(racerun1);
	KillTimer(racerun2);
	GameModeExit();
}

public OnGameModeExit()
{
    new qqerry[128];
	mysql_format(SQL,qqerry, sizeof(qqerry), "UPDATE `users` SET `Status` = '0'");
    mysql_tquery(SQL,qqerry,"","");
	mysql_format(SQL,qqerry, sizeof(qqerry), "UPDATE `friends` SET `Status` = '0'");
    mysql_tquery(SQL,qqerry,"","");
    mysql_close(SQL);
    return 1;
}

forward LoadBizz();
public LoadBizz()
{
    new PropertyString[256],locked[20];
	bussines = cache_num_rows();
	for(new i = 1; i <= bussines; i++)
	{
        new b = i - 1;
		BizzInfo[i][bID]                            = cache_get_field_content_int(b, "ID");
        BizzInfo[i][bOwned]							= cache_get_field_content_int(b, "Owned");
        cache_get_field_content(b, "Owner", BizzInfo[i][bOwner], SQL, 130);
        cache_get_field_content(b, "Message", BizzInfo[i][bMessage], SQL, 130);
   	    BizzInfo[i][bEntranceX]                     = cache_get_field_content_float(b, "EntranceX");
    	BizzInfo[i][bEntranceY]                     = cache_get_field_content_float(b, "EntranceY");
        BizzInfo[i][bEntranceZ]                     = cache_get_field_content_float(b, "EntranceZ");
        BizzInfo[i][bExitX]                         = cache_get_field_content_float(b, "ExitX");
        BizzInfo[i][bExitY]                         = cache_get_field_content_float(b, "ExitY");
        BizzInfo[i][bExitZ]                         = cache_get_field_content_float(b, "ExitZ");
        BizzInfo[i][bLevelNeeded]                   = cache_get_field_content_int(b, "LevelNeeded");
        BizzInfo[i][bBuyPrice]                      = cache_get_field_content_int(b, "BuyPrice");
        BizzInfo[i][bEntranceCost]                  = cache_get_field_content_int(b, "EntranceCost");
        BizzInfo[i][bTill]                          = cache_get_field_content_int(b, "Till");
        BizzInfo[i][bLocked]                        = cache_get_field_content_int(b, "Locked");
        BizzInfo[i][bInterior]                      = cache_get_field_content_int(b, "Interior");
        BizzInfo[i][bVirtual]                       = cache_get_field_content_int(b, "Virtual");
		BizzInfo[i][bSbiz]							= cache_get_field_content_int(b, "Sbiz");
		BizzInfo[i][bType]							= cache_get_field_content_int(b, "Type");
		BizzInfo[i][bPrice]							= cache_get_field_content_int(b, "Prices");
		if(BizzInfo[i][bLocked] == 1) format(locked, sizeof(locked), "\n(locked)");
		if(BizzInfo[i][bOwned] == 0)
		{
			DestroyDynamic3DTextLabel(BizzLabel[i]);
			format(PropertyString, sizeof(PropertyString),"{0068CF}%s \n{EEEEEE}Business {0068CF}#%d \n{0068CF}This Business is for sale(/buybusiness) ! \n {EEEEEE}Price: {0068CF}%s \n{EEEEEE}Level: {0068CF}%d %s",BizzInfo[i][bMessage],i,FormatNumber(BizzInfo[i][bBuyPrice]),BizzInfo[i][bLevelNeeded],locked);
			BizzLabel[i] = CreateDynamic3DTextLabel(PropertyString, 0x0053CFD1, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			CreateDynamicPickup(1239, 1, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]);
			pickups++;
		}
		else if(BizzInfo[i][bOwned] == 1)
		{
			DestroyDynamic3DTextLabel(BizzLabel[i]);
			if(BizzInfo[i][bPrice] > 0) format(PropertyString, sizeof(PropertyString),"{0068CF}%s \n{EEEEEE}Business {0068CF}#%d \n{EEEEEE}Owner: {0068CF}%s \n{EEEEEE}Fee: {0068CF}$%s \n{EEEEEE}Price: {0068CF}$%s %s",BizzInfo[i][bMessage],i,BizzInfo[i][bOwner],FormatNumber(BizzInfo[i][bEntranceCost]),FormatNumber(BizzInfo[i][bPrice]),locked);
			else format(PropertyString, sizeof(PropertyString),"{0068CF}%s \n{EEEEEE}Business {0068CF}#%d \n{EEEEEE}Owner: {0068CF}%s \n{EEEEEE}Fee: {0068CF}$%s %s",BizzInfo[i][bMessage],i,BizzInfo[i][bOwner],FormatNumber(BizzInfo[i][bEntranceCost]),locked);
			BizzLabel[i] = CreateDynamic3DTextLabel(PropertyString, 0x0068CFD1, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			CreateDynamicPickup(1239, 1, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]);
			pickups++;
		}
		if(BizzInfo[i][bType] == 1) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],52,0,-1,-1,-1,750.0); //Bank
		if(BizzInfo[i][bType] == 2) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],18,0,-1,-1,-1,750.0); //GunShop
		if(BizzInfo[i][bType] == 3) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],49,0,-1,-1,-1,750.0); //Bars
		if(BizzInfo[i][bType] == 4) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],38,0,-1,-1,-1,750.0); //Sex Shop
		if(BizzInfo[i][bType] == 5) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],25,0,-1,-1,-1,750.0); //Casino
		if(BizzInfo[i][bType] == 6) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],17,0,-1,-1,-1,750.0); //24/7
		if(BizzInfo[i][bType] == 7) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],10,0,-1,-1,-1,750.0); //Burger Shot
		if(BizzInfo[i][bType] == 8) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],54,0,-1,-1,-1,750.0); //Gym
		if(BizzInfo[i][bType] == 9) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],29,0,-1,-1,-1,750.0); //Pizza
		if(BizzInfo[i][bType] == 10) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],51,0,-1,-1,-1,750.0); //Rent Car
		if(BizzInfo[i][bType] == 11) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],45,0,-1,-1,-1,750.0); //Clothes
		if(BizzInfo[i][bType] == 12) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],27,0,-1,-1,-1,750.0); //Gas Station
		if(BizzInfo[i][bType] == 13) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],63,0,-1,-1,-1,750.0); //PNS
		if(BizzInfo[i][bType] == 14) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],14,0,-1,-1,-1,750.0); //Cluckin Bell
		if(BizzInfo[i][bType] == 19) CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],36,0,-1,-1,-1,750.0); //strawberry biz
	}
	printf("[LOADING] %d businesses loaded.", bussines);
}

forward LoadTurfs();
public LoadTurfs()
{
	new idx;
	new Cache: ab = mysql_query(SQL, "SELECT * FROM `turfs`");
	for(new i; i < cache_get_row_count(); i++)
	{
		idx++;
		TurfInfo[idx][zID]							 	= cache_get_field_content_int(i, "ID");
	 	TurfInfo[idx][zOwned] 							= cache_get_field_content_int(i, "Owned");
	 	TurfInfo[idx][zMinX] 							= cache_get_field_content_float(i, "MinX");
	 	TurfInfo[idx][zMinY] 							= cache_get_field_content_float(i, "MinY");
	 	TurfInfo[idx][zMaxX] 							= cache_get_field_content_float(i, "MaxX");
	 	TurfInfo[idx][zMaxY] 							= cache_get_field_content_float(i, "MaxY");
		turfsss++;
	}
	cache_delete(ab);
	return 1;
}

forward LoadDynamicFactions();
public LoadDynamicFactions()
{
	factionss = cache_num_rows();
	new string[310];
    for(new i = 1; i <= factionss; i++)
    {
    	if(i == 12) continue;
		new f = i - 1;
		DynamicFactions[i][fID]                 = cache_get_field_content_int(f, "ID");
        cache_get_field_content(f, "Name", DynamicFactions[i][fName], SQL, 130);
		DynamicFactions[i][fcX]                 = cache_get_field_content_float(f, "X");
   	    DynamicFactions[i][fcY]                 = cache_get_field_content_float(f, "Y");
    	DynamicFactions[i][fcZ]                 = cache_get_field_content_float(f, "Z");
    	DynamicFactions[i][fceX]                = cache_get_field_content_float(f, "eX");
   	    DynamicFactions[i][fceY]                = cache_get_field_content_float(f, "eY");
    	DynamicFactions[i][fceZ]                = cache_get_field_content_float(f, "eZ");
    	DynamicFactions[i][fSafePos][0]			= cache_get_field_content_float(f, "SafePos1");
    	DynamicFactions[i][fSafePos][1]			= cache_get_field_content_float(f, "SafePos2");
    	DynamicFactions[i][fSafePos][2]			= cache_get_field_content_float(f, "SafePos3");
    	DynamicFactions[i][fMats]               = cache_get_field_content_int(f, "Mats");
    	DynamicFactions[i][fInterior]           = cache_get_field_content_int(f, "Interior");
    	DynamicFactions[i][fVirtual]            = cache_get_field_content_int(f, "Virtual");
    	DynamicFactions[i][fMapIcon]            = cache_get_field_content_int(f, "MapIcon");
    	DynamicFactions[i][fLocked]            	= cache_get_field_content_int(f, "Locked");
    	DynamicFactions[i][fDrugs]              = cache_get_field_content_int(f, "Drugs");
    	DynamicFactions[i][fBank]               = cache_get_field_content_int(f, "Bank");
    	DynamicFactions[i][fPickupIDD]          = cache_get_field_content_int(f, "PickupID");
        cache_get_field_content(f, "Anunt", DynamicFactions[i][fAnn], SQL, 130);
    	DynamicFactions[i][fWin]                = cache_get_field_content_int(f, "Win");
    	DynamicFactions[i][fLost]               = cache_get_field_content_int(f, "Lost");
    	DynamicFactions[i][fMaxMembers]         = cache_get_field_content_int(f, "MaxMembers");
		DynamicFactions[i][fMinLevel]         	= cache_get_field_content_int(f, "MinLevel");
    	DynamicFactions[i][fApplication]        = cache_get_field_content_int(f, "Application");
		cache_get_field_content(f, "Rank1", DynamicFactions[i][fRankName1], SQL, 130);
		cache_get_field_content(f, "Rank2", DynamicFactions[i][fRankName2], SQL, 130);
		cache_get_field_content(f, "Rank3", DynamicFactions[i][fRankName3], SQL, 130);
		cache_get_field_content(f, "Rank4", DynamicFactions[i][fRankName4], SQL, 130);
		cache_get_field_content(f, "Rank5", DynamicFactions[i][fRankName5], SQL, 130);
		cache_get_field_content(f, "Rank6", DynamicFactions[i][fRankName6], SQL, 130);
		cache_get_field_content(f, "Rank7", DynamicFactions[i][fRankName7], SQL, 130);
		for(new c; c < 10; c++)
		{
			new s[10];
			format(s, sizeof(s),"Skin%d",c);
			FactionSkin[i][c] = cache_get_field_content_int(f, s);
		}
		switch(DynamicFactions[i][fLocked]) {
	    	case 0: format(string, sizeof(string), "%s's HQ", DynamicFactions[i][fName]);
	    	case 1: format(string, sizeof(string), "%s's HQ\n\n(locked)", DynamicFactions[i][fName]);
	    }
	   	DynamicFactions[i][fPickupID] = CreateDynamicPickup(DynamicFactions[i][fPickupIDD], 23, DynamicFactions[i][fceX], DynamicFactions[i][fceY], DynamicFactions[i][fceZ], 0, -1, -1, 20);
		DynamicFactions[i][fLabelID] = CreateDynamic3DTextLabel(string, COLOR_COOLBLUE, DynamicFactions[i][fceX], DynamicFactions[i][fceY], DynamicFactions[i][fceZ], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0);
		if(DynamicFactions[i][fMapIcon] != 0) CreateDynamicMapIcon(DynamicFactions[i][fceX],DynamicFactions[i][fceY],DynamicFactions[i][fceZ],DynamicFactions[i][fMapIcon],0,-1,-1,-1,750.0);
		format(string, sizeof(string), "%s\nGroup Safe", DynamicFactions[i][fName]);
		DynamicFactions[i][fSafePickupID] = CreateDynamicPickup(1274, 23, DynamicFactions[i][fSafePos][0], DynamicFactions[i][fSafePos][1], DynamicFactions[i][fSafePos][2], DynamicFactions[i][fVirtual], DynamicFactions[i][fInterior], -1, 20.0);
		DynamicFactions[i][fSafeLabelID] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, DynamicFactions[i][fSafePos][0], DynamicFactions[i][fSafePos][1], DynamicFactions[i][fSafePos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, DynamicFactions[i][fVirtual], DynamicFactions[i][fInterior], -1, 20.0);
	}
	printf("[LOADING] %d groups loaded.", factionss);
	return 1;
}

forward LoadClanInfo();
public LoadClanInfo()
{
	new strings[256];
    clanss = cache_num_rows();
    for(new d = 1; d <= clanss; d++)
    {
    	new var=d;
    	format(strings, sizeof(strings), "SELECT * FROM `clans` WHERE `clanID`='%d'", var);
		new Cache: xd = mysql_query(SQL, strings);
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
			ClanInfo[var][cClanID]              		= cache_get_field_content_int(i, "clanID");
			ClanInfo[var][cClanExpire]              	= cache_get_field_content_int(i, "clanExpire");
			ClanInfo[var][cClanActive]              	= cache_get_field_content_int(i, "clanActive");
			ClanInfo[var][cClanSlots]              	= cache_get_field_content_int(i, "clanSlots");
			ClanInfo[var][cClanSeif]              	= cache_get_field_content_int(i, "clanSeif");
	        cache_get_field_content(i, "clanName", ClanInfo[var][cClanName], SQL, 130);
			cache_get_field_content(i, "clanColor", ClanInfo[var][cClanColor], SQL, 130);
			cache_get_field_content(i, "clanMOTD", ClanInfo[var][cClanMOTD], SQL, 130);
	   	    cache_get_field_content(i, "clanTag", ClanInfo[var][cClanTag], SQL, 130);
	    	cache_get_field_content(i, "clanRankName7", ClanInfo[var][cClanRankName7], SQL, 130);
	    	cache_get_field_content(i, "clanRankName6", ClanInfo[var][cClanRankName6], SQL, 130);
	    	cache_get_field_content(i, "clanRankName5", ClanInfo[var][cClanRankName5], SQL, 130);
	    	cache_get_field_content(i, "clanRankName4", ClanInfo[var][cClanRankName4], SQL, 130);
	    	cache_get_field_content(i, "clanRankName3", ClanInfo[var][cClanRankName3], SQL, 130);
	    	cache_get_field_content(i, "clanRankName2", ClanInfo[var][cClanRankName2], SQL, 130);
	    	cache_get_field_content(i, "clanRankName1", ClanInfo[var][cClanRankName1], SQL, 130);
		}
		cache_delete(xd);
    	LoadClanCar(var);
	}
	printf("[LOADING] %d clans loaded.", clanss);
}


forward LoadStock();
public LoadStock()
{
	stockss = cache_num_rows();
    for(new i = 1; i <= stockss; i++)
    {
		new s = i - 1;
		Stock[i][vID]                               = cache_get_field_content_int(s, "ID");
		Stock[i][vStock]                            = cache_get_field_content_int(s, "Stock");
		Stock[i][vPrice]                            = cache_get_field_content_int(s, "Price");
		Stock[i][vModel]                            = cache_get_field_content_int(s, "vid");
		Stock[i][vSpeed]                            = cache_get_field_content_int(s, "speed");
		cache_get_field_content(s, "Car", Stock[i][vName], SQL, 130);
	}
	printf("[LOADING] %d models loaded.", stockss);
}

forward LoadAtms();
public LoadAtms()
{
	new atms = cache_num_rows();
	for(new i = 1; i <= atms; i++)
	{
		new s = i - 1;
		AtmInfo[i][fATMPos][0]						= cache_get_field_content_float(s, "atmPosX");
		AtmInfo[i][fATMPos][1]						= cache_get_field_content_float(s, "atmPosY");
		AtmInfo[i][fATMPos][2]						= cache_get_field_content_float(s, "atmPosZ");
		AtmInfo[i][fATMPosRot][0]					= cache_get_field_content_float(s, "atmPosRotX");
		AtmInfo[i][fATMPosRot][1]					= cache_get_field_content_float(s, "atmPosRotY");
		AtmInfo[i][fATMPosRot][2]					= cache_get_field_content_float(s, "atmPosRotZ");
		AtmInfo[i][rObjectId] = CreateDynamicObject(2618, AtmInfo[i][fATMPos][0], AtmInfo[i][fATMPos][1], AtmInfo[i][fATMPos][2], AtmInfo[i][fATMPosRot][0], AtmInfo[i][fATMPosRot][1], AtmInfo[i][fATMPosRot][2], -1, -1, -1, 500.0);
	}
}

stock CreateBillBoard(billboard)
{
	if(bBill[billboard][bBillActive] == 0) return 1; 
    bBill[billboard][bBilObject] = CreateDynamicObject(bBill[billboard][bBillModel], bBill[billboard][bBillXPos], bBill[billboard][bBillYPos], bBill[billboard][bBillZPos], bBill[billboard][bBillRXPos], bBill[billboard][bBillRYPos], bBill[billboard][bBillRZPos]);
	SetDynamicObjectMaterialText(bBill[billboard][bBilObject],  0, bBill[billboard][bBillText], OBJECT_MATERIAL_SIZE_256x128, "Arial", bBill[billboard][bBillTextSize], 1, -1, 0xFF000000, 1);
	return 1;
}

stock DestroyBillBoard(billboard)
{
	if(bBill[billboard][bBillActive] == 0) return 1; 
	DestroyDynamicObject(bBill[billboard][bBilObject]);
    CreateBillBoard(billboard);
    return 1;
}

forward LoadBillBoards();
public LoadBillBoards()
{
	billboards = cache_num_rows();
	for(new i = 1; i <= billboards; i++)
	{
		new s = i - 1;
		cache_get_field_content(s, "BillText", bBill[i][bBillText], SQL, 128);
		bBill[i][bBillXPos]						= cache_get_field_content_float(s, "BillXPos");
		bBill[i][bBillYPos]						= cache_get_field_content_float(s, "BillYPos");
		bBill[i][bBillZPos]						= cache_get_field_content_float(s, "BillZPos");
		bBill[i][bBillRXPos]					= cache_get_field_content_float(s, "BillRXPos");
		bBill[i][bBillRYPos]					= cache_get_field_content_float(s, "BillRYPos");
		bBill[i][bBillRZPos]					= cache_get_field_content_float(s, "BillRZPos");
		bBill[i][bBillTime]						= cache_get_field_content_int(s, "time");
		bBill[i][bBillActive]					= cache_get_field_content_int(s, "BillActive");
		cache_get_field_content(s, "BillOwner", bBill[i][bBillOwner], SQL, 64);
		bBill[i][bBillModel]					= cache_get_field_content_int(s, "BillModel");
		bBill[i][bBillTextSize]					= cache_get_field_content_int(s, "BillTextSize");
		CreateBillBoard(i);
	}
	printf("[LOADING] %d billboards loaded.", billboards);
}

forward LoadSVars();
public LoadSVars()
{
	svarss = cache_num_rows();
	for(new i = 1; i <= svarss; i++)
	{
		new s = i - 1;
		cache_get_field_content(s, "SvarName", SvarInfo[i][svName], SQL, 32);
		SvarInfo[i][svValue]						= cache_get_field_content_int(s, "SvarValue");
	}
	printf("[LOADING] %d sVars loaded.", svarss);
}

forward LoadQuest();
public LoadQuest()
{
	questobjectss = cache_num_rows();
	for(new i = 1; i <= questobjectss; i++)
	{
		new s = i - 1;
		ObjectInfo[s][objModel] 					= cache_get_field_content_int(s, "objModel");
		ObjectInfo[s][objID] 						= cache_get_field_content_int(s, "id");
		ObjectInfo[s][objPosX]						= cache_get_field_content_float(s, "objPosX");
		ObjectInfo[s][objPosY]						= cache_get_field_content_float(s, "objPosY");
		ObjectInfo[s][objPosZ]						= cache_get_field_content_float(s, "objPosZ");
	}
	printf("[LOADING] %d quest objects loaded.", questobjectss);
}

forward LoadUsers();
public LoadUsers()
{
	new players = cache_num_rows();
	printf("Players registered: %d",players);
}

forward DespawnCar(playerid);
public DespawnCar(playerid)
{
	for(new v; v < MAX_PERSONAL_VEHICLES; v++)
	{
		if(PlayerInfo[playerid][pCarID][v] != 0)
		{
			DestroyObject(Neons[0][PlayerInfo[playerid][pCarID][v]]);
			DestroyObject(Neons[1][PlayerInfo[playerid][pCarID][v]]);
			Neons[0][PlayerInfo[playerid][pCarID][v]] = 0;
			Neons[1][PlayerInfo[playerid][pCarID][v]] = 0;
			DestroyDynamicObject(vObject[PlayerInfo[playerid][pCarID][v]]);
			vObject[PlayerInfo[playerid][pCarID][v]] = 0;
			DestroyVehicle(PlayerInfo[playerid][pCarID][v]);
			PlayerInfo[playerid][pCarID][v] = 0;
		}
	}
	return 1;
}

forward ModPVehicle(playerid, idcar);
public ModPVehicle(playerid, idcar)
{
	LoadCar(playerid);
	for(new d; d < 17; d++)
	{
		if(CarMod[playerid][idcar][d] != 0) AddVehicleComponent(PlayerInfo[playerid][pCarID][idcar],CarMod[playerid][idcar][d]);
	}
	ChangeVehiclePaintjob(PlayerInfo[playerid][pCarID][idcar], PlayerInfo[playerid][pCarPaintJ][idcar]);
	return 1;
}

forward LoadCarID(playerid);
public LoadCarID(playerid)
{
	for(new idd; idd < MAX_PERSONAL_VEHICLES; idd++)
	{
		PlayerInfo[playerid][pCarID][idd]			= 0;
		PlayerInfo[playerid][pCar][idd]				= -1;
		PlayerInfo[playerid][pCarModel][idd] 		= 0;
		PlayerInfo[playerid][pCarLocX][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLocY][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLocZ][idd] 		= 0.0;
		PlayerInfo[playerid][pCarAngle][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLLocX][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLLocY][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLLocZ][idd] 		= 0.0;
		PlayerInfo[playerid][pCarAngle2][idd] 		= 0.0;
		PlayerInfo[playerid][pCarBuyTime][idd]		= 0;
		PlayerInfo[playerid][pCarColor1][idd] 		= 1;
		PlayerInfo[playerid][pCarColor2][idd] 		= 1;
		PlayerInfo[playerid][pCarStage][idd] 		= 0;
		PlayerInfo[playerid][pCarLock][idd] 		= 0;
		PlayerInfo[playerid][pCarInsPrice][idd] 	= 0;
		PlayerInfo[playerid][pCarIns][idd] 			= 0;
		PlayerInfo[playerid][pCarKM][idd] 			= 0.0;
		PlayerInfo[playerid][pCarKMLast][idd]		= 0;
		PlayerInfo[playerid][pCarVIP][idd]			= 0;
		PlayerInfo[playerid][pCarNeon][idd]			= 0;
		PlayerInfo[playerid][pCarVipColors][idd]	= 0;
		PlayerInfo[playerid][pCarHP][idd] 			= 0.0;
		PlayerInfo[playerid][pCarDamage1][idd] 		= 0;
		PlayerInfo[playerid][pCarDamage2][idd] 		= 0;
		PlayerInfo[playerid][pCarDamage3][idd] 		= 0;
		PlayerInfo[playerid][pCarDamage4][idd] 		= 0;
		PlayerInfo[playerid][pCarGas][idd] 			= 100;
		PlayerInfo[playerid][pCarGasMax][idd] 		= 100;
		PlayerInfo[playerid][pCarPaintJ][idd] 		= 6;
		PlayerInfo[playerid][pCarBlock][idd]		= 0;
		PlayerInfo[playerid][pCarEvent][idd]		= 0;
		PlayerInfo[playerid][pCarVipXPos][idd] 		= 0.0;
		PlayerInfo[playerid][pCarVipYPos][idd] 		= 0.0;
		PlayerInfo[playerid][pCarVipZPos][idd] 		= 0.0;
		PlayerInfo[playerid][pCarVipRXPos][idd] 	= 0.0;
		PlayerInfo[playerid][pCarVipRYPos][idd] 	= 0.0;
		PlayerInfo[playerid][pCarVipRZPos][idd] 	= 0.0;
		CarVipName[playerid][idd] = "";
		CarPlate[playerid][idd] = "";
		CarOwner[playerid][idd] = "";
		for(new s; s < 17; s++)
		{
			CarMod[playerid][idd][s] = 0;
		}
	}
	new string[256],count;
	format(string, sizeof(string), "SELECT * FROM `cars` WHERE `Owner`='%s' AND `Active`='1'", PlayerInfo[playerid][pNormalName]);
	new Cache: xd = mysql_query(SQL, string);
	for(new i, j = cache_get_row_count (); i != j; ++i)
	{
		if(count < MAX_PERSONAL_VEHICLES)
		{
			PlayerInfo[playerid][pCar][count] = cache_get_field_content_int(i, "ID");
		}
		count++;
	}
	cache_delete(xd);
	if(count > PlayerInfo[playerid][pCarSlots])
	{
		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Ai prea multe masini! Poti avea maxim %d masini (tu ai %d).", PlayerInfo[playerid][pCarSlots], count);
		else format(string, sizeof(string), "You have to many vehicles! You can have maximum %d cars (you have %d).", PlayerInfo[playerid][pCarSlots], count);
		SendClientMessage(playerid, COLOR_RED2, string);
		SS(playerid, COLOR_RED2, "Nu vei putea conduce nicio masina pana cand nu vei vinde una din masinile tale.", "You can't use a vehicle until you sell one of your cars.");
		BlockVehUse[playerid] = count;
	}
	else
	{
		BlockVehUse[playerid] = 0;
	}
	LoadCar(playerid);
	return 1;
}

forward LoadCar(playerid);
public LoadCar(playerid)
{
	for(new idd; idd < MAX_PERSONAL_VEHICLES; idd++)
	{
		PlayerInfo[playerid][pCarModel][idd] 		= 0;
		PlayerInfo[playerid][pCarLocX][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLocY][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLocZ][idd] 		= 0.0;
		PlayerInfo[playerid][pCarAngle][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLLocX][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLLocY][idd] 		= 0.0;
		PlayerInfo[playerid][pCarLLocZ][idd] 		= 0.0;
		PlayerInfo[playerid][pCarAngle2][idd] 		= 0.0;
		PlayerInfo[playerid][pCarBuyTime][idd]		= 0;
		PlayerInfo[playerid][pCarColor1][idd] 		= 1;
		PlayerInfo[playerid][pCarColor2][idd] 		= 1;
		PlayerInfo[playerid][pCarStage][idd] 		= 0;
		PlayerInfo[playerid][pCarLock][idd] 		= 0;
		PlayerInfo[playerid][pCarInsPrice][idd] 	= 0;
		PlayerInfo[playerid][pCarIns][idd] 			= 0;
		PlayerInfo[playerid][pCarKM][idd] 			= 0.0;
		PlayerInfo[playerid][pCarKMLast][idd]		= 0;
		PlayerInfo[playerid][pCarVIP][idd]			= 0;
		PlayerInfo[playerid][pCarNeon][idd]			= 0;
		PlayerInfo[playerid][pCarVipColors][idd]	= 0;
		PlayerInfo[playerid][pCarHP][idd] 			= 0.0;
		PlayerInfo[playerid][pCarDamage1][idd] 		= 0;
		PlayerInfo[playerid][pCarDamage2][idd] 		= 0;
		PlayerInfo[playerid][pCarDamage3][idd] 		= 0;
		PlayerInfo[playerid][pCarDamage4][idd] 		= 0;
		PlayerInfo[playerid][pCarGas][idd] 			= 100;
		PlayerInfo[playerid][pCarGasMax][idd] 		= 100;
		PlayerInfo[playerid][pCarPaintJ][idd] 		= 6;
		PlayerInfo[playerid][pCarBlock][idd]		= 0;
		PlayerInfo[playerid][pCarEvent][idd]		= 0;
		PlayerInfo[playerid][pCarVipXPos][idd] 		= 0.0;
		PlayerInfo[playerid][pCarVipYPos][idd] 		= 0.0;
		PlayerInfo[playerid][pCarVipZPos][idd] 		= 0.0;
		PlayerInfo[playerid][pCarVipRXPos][idd] 	= 0.0;
		PlayerInfo[playerid][pCarVipRYPos][idd] 	= 0.0;
		PlayerInfo[playerid][pCarVipRZPos][idd] 	= 0.0;
		CarVipName[playerid][idd] = "";
		CarPlate[playerid][idd] = "";
		CarOwner[playerid][idd] = "";
		for(new s; s < 17; s++)
		{
			CarMod[playerid][idd][s] = 0;
		}
	}
	new query[256],string[20];
	for(new idd; idd < MAX_PERSONAL_VEHICLES; idd++)
	{
		format(query, sizeof(query), "SELECT * FROM `cars` WHERE `ID`='%d' AND `Active`='1'", PlayerInfo[playerid][pCar][idd]);
		new Cache: result = mysql_query(SQL, query);
		if(cache_get_row_count() > 0)
		{
			PlayerInfo[playerid][pCarModel][idd] 		= cache_get_field_content_int(0, "Model");
			PlayerInfo[playerid][pCarLocX][idd] 		= cache_get_field_content_float(0, "Locationx");
			PlayerInfo[playerid][pCarLocY][idd] 		= cache_get_field_content_float(0, "Locationy");
			PlayerInfo[playerid][pCarLocZ][idd] 		= cache_get_field_content_float(0, "Locationz");
			PlayerInfo[playerid][pCarAngle][idd] 		= cache_get_field_content_float(0, "Angle");
			PlayerInfo[playerid][pCarLLocX][idd] 		= cache_get_field_content_float(0, "Locationx2");
			PlayerInfo[playerid][pCarLLocY][idd] 		= cache_get_field_content_float(0, "Locationy2");
			PlayerInfo[playerid][pCarLLocZ][idd] 		= cache_get_field_content_float(0, "Locationz2");
			PlayerInfo[playerid][pCarAngle2][idd] 		= cache_get_field_content_float(0, "Angle2");
			PlayerInfo[playerid][pCarBuyTime][idd]		= cache_get_field_content_int(0, "BuyTime");
			PlayerInfo[playerid][pCarColor1][idd] 		= cache_get_field_content_int(0, "ColorOne");
			PlayerInfo[playerid][pCarColor2][idd] 		= cache_get_field_content_int(0, "ColorTwo");
			PlayerInfo[playerid][pCarStage][idd] 		= cache_get_field_content_int(0, "Stage");
			PlayerInfo[playerid][pCarLock][idd] 		= cache_get_field_content_int(0, "Lockk");
			PlayerInfo[playerid][pCarInsPrice][idd] 	= cache_get_field_content_int(0, "Inscarprice");
			PlayerInfo[playerid][pCarIns][idd] 			= cache_get_field_content_int(0, "Insurancecar");
			PlayerInfo[playerid][pCarKM][idd] 			= cache_get_field_content_float(0, "KM");
			PlayerInfo[playerid][pCarKMLast][idd]		= cache_get_field_content_int(0, "LastKM");
			PlayerInfo[playerid][pCarVIP][idd]			= cache_get_field_content_int(0, "VIP");
			PlayerInfo[playerid][pCarNeon][idd]			= cache_get_field_content_int(0, "Neon");
			PlayerInfo[playerid][pCarVipColors][idd]	= cache_get_field_content_int(0, "VipColors");
			PlayerInfo[playerid][pCarHP][idd] 			= cache_get_field_content_float(0, "HP");
			PlayerInfo[playerid][pCarDamage1][idd] 		= cache_get_field_content_int(0, "Damage1");
			PlayerInfo[playerid][pCarDamage2][idd] 		= cache_get_field_content_int(0, "Damage2");
			PlayerInfo[playerid][pCarDamage3][idd] 		= cache_get_field_content_int(0, "Damage3");
			PlayerInfo[playerid][pCarDamage4][idd] 		= cache_get_field_content_int(0, "Damage4");
			PlayerInfo[playerid][pCarGas][idd] 			= cache_get_field_content_int(0, "Gas");
			PlayerInfo[playerid][pCarGasMax][idd] 		= cache_get_field_content_int(0, "GasMax");
			PlayerInfo[playerid][pCarPaintJ][idd] 		= cache_get_field_content_int(0, "PaintJ");
			PlayerInfo[playerid][pCarBlock][idd]		= cache_get_field_content_int(0, "Block");
			PlayerInfo[playerid][pCarEvent][idd]		= cache_get_field_content_int(0, "Event");

			PlayerInfo[playerid][pCarVipXPos][idd] 		= cache_get_field_content_float(0, "VipXPos");
			PlayerInfo[playerid][pCarVipYPos][idd] 		= cache_get_field_content_float(0, "VipYPos");
			PlayerInfo[playerid][pCarVipZPos][idd] 		= cache_get_field_content_float(0, "VipZPos");
			PlayerInfo[playerid][pCarVipRXPos][idd] 	= cache_get_field_content_float(0, "VipRXPos");
			PlayerInfo[playerid][pCarVipRYPos][idd] 	= cache_get_field_content_float(0, "VipRYPos");
			PlayerInfo[playerid][pCarVipRZPos][idd] 	= cache_get_field_content_float(0, "VipRZPos");

			cache_get_field_content(0, "VipText", CarVipName[playerid][idd]);
			cache_get_field_content(0, "License", CarPlate[playerid][idd], SQL, 30);
			cache_get_field_content(0, "Owner", CarOwner[playerid][idd], SQL, 50);
			for(new s=1; s <= 17; s++)
			{
				format(string,sizeof(string),"mod%d",s);
				new ids = s-1;
				CarMod[playerid][idd][ids] = cache_get_field_content_int(0, string);
			}
		}
		cache_delete(result);
	}
}

forward DestroyClanCar(carid);
public DestroyClanCar(carid)
{
	for(new cl=1;cl<=clanss;cl++)
	{
		for(new idd; idd < MAX_CLAN_VEHICLES; idd++)
		{
			if(ClanInfo[cl][cCarID][idd] == carid)
			{
				ClanInfo[cl][cCarID][idd] = 0;
				DestroyVehicle(carid);
				KillTimer(destroytimer[cl][idd]);
			}
		}
	}
}

forward LoadClanCar(clanid);
public LoadClanCar(clanid)
{
	for(new idd; idd < MAX_CLAN_VEHICLES; idd++)
	{
		ClanInfo[clanid][cCar][idd]				= -1;
		ClanInfo[clanid][cCarModel][idd] 		= 0;
		ClanInfo[clanid][cCarLocX][idd] 		= 0.0;
		ClanInfo[clanid][cCarLocY][idd] 		= 0.0;
		ClanInfo[clanid][cCarLocZ][idd] 		= 0.0;
		ClanInfo[clanid][cCarAngle][idd] 		= 0.0;
		ClanInfo[clanid][cCarColor1][idd] 		= 1;
		ClanInfo[clanid][cCarColor2][idd] 		= 1;
		cCarPlate[clanid][idd] = "";
		cCarOwner[clanid][idd] = "";
	}
	new string[256],count;
	format(string, sizeof(string), "SELECT * FROM `clancars` WHERE `Owner`='%s' AND `Active`='1'", ClanInfo[clanid][cClanName]);
	new Cache: xd = mysql_query(SQL, string);
	for(new i, j = cache_get_row_count (); i != j; ++i)
	{
		if(count < MAX_CLAN_VEHICLES)
		{
			ClanInfo[clanid][cCar][count] = cache_get_field_content_int(i, "ID");
		}
		count++;
	}
	cache_delete(xd);
	new query[256];
	for(new idd; idd < MAX_CLAN_VEHICLES; idd++)
	{
		format(query, sizeof(query), "SELECT * FROM `clancars` WHERE `ID`='%d' AND `Active`='1'", ClanInfo[clanid][cCar][idd]);
		new Cache: result = mysql_query(SQL, query);
		if(cache_get_row_count() > 0)
		{
			ClanInfo[clanid][cCarModel][idd] 		= cache_get_field_content_int(0, "Model");
			ClanInfo[clanid][cCarLocX][idd] 		= cache_get_field_content_float(0, "Locationx");
			ClanInfo[clanid][cCarLocY][idd] 		= cache_get_field_content_float(0, "Locationy");
			ClanInfo[clanid][cCarLocZ][idd] 		= cache_get_field_content_float(0, "Locationz");
			ClanInfo[clanid][cCarAngle][idd] 		= cache_get_field_content_float(0, "Angle");
			ClanInfo[clanid][cCarColor1][idd] 		= cache_get_field_content_int(0, "ColorOne");
			ClanInfo[clanid][cCarColor2][idd] 		= cache_get_field_content_int(0, "ColorTwo");
			cache_get_field_content(0, "License", cCarPlate[clanid][idd], SQL, 30);
			cache_get_field_content(0, "Owner", cCarOwner[clanid][idd], SQL, 50);
		}
		cache_delete(result);
	}
}

forward LoadProperty();
public LoadProperty()
{
	housess = cache_num_rows();
	for(new i = 1; i <= housess; i++)
    {
		new h = i - 1;
		HouseInfo[i][hID]                           = cache_get_field_content_int(h, "ID");
   	    HouseInfo[i][hEntrancex]                    = cache_get_field_content_float(h, "Entrancex");
    	HouseInfo[i][hEntrancey]                    = cache_get_field_content_float(h, "Entrancey");
        HouseInfo[i][hEntrancez]                    = cache_get_field_content_float(h, "Entrancez");
        HouseInfo[i][hExitx]                        = cache_get_field_content_float(h, "Exitx");
        HouseInfo[i][hExity]                        = cache_get_field_content_float(h, "Exity");
        HouseInfo[i][hExitz]                        = cache_get_field_content_float(h, "Exitz");
        cache_get_field_content(h, "Owner", HouseInfo[i][hOwner], SQL, 130);
        cache_get_field_content(h, "Discription", HouseInfo[i][hDiscription], SQL, 130);
        HouseInfo[i][hValue]						= cache_get_field_content_int(h, "Value");
		HouseInfo[i][hPrice]						= cache_get_field_content_int(h, "Prices");
        HouseInfo[i][hHel]                          = cache_get_field_content_int(h, "Hel");
        HouseInfo[i][hMusic]						= cache_get_field_content_int(h, "Music");
        HouseInfo[i][hInterior]                     = cache_get_field_content_int(h, "Interior");
		HouseInfo[i][hInteriorType]                 = cache_get_field_content_int(h, "InteriorType");
        HouseInfo[i][hLock]                         = cache_get_field_content_int(h, "Lockk");
        HouseInfo[i][hOwned]                        = cache_get_field_content_int(h, "Owned");
        HouseInfo[i][hRent]                         = cache_get_field_content_int(h, "Rent");
        HouseInfo[i][hRentabil]                     = cache_get_field_content_int(h, "Rentabil");
        HouseInfo[i][hTakings]                      = cache_get_field_content_int(h, "Takings");
        HouseInfo[i][hLevel]                        = cache_get_field_content_int(h, "Level");
        HouseInfo[i][hVirtual]                      = cache_get_field_content_int(h, "Virtual");
	}
	for(new i = 1; i <= housess; i++)
	{
		OnPropTextdrawUpdate(1, i);
	}
	printf("[LOADING] %d houses loaded.", housess);
	printf("[LOADING] %d turfs loaded.", turfsss);
}

forward LoadVehicles();
public LoadVehicles()
{
	Vehicless = cache_num_rows();
	new str[30];
	for(new i = 0; i < Vehicless; i++)
	{
		new c = i;
		VehicleInfo[i][vehModel]					= cache_get_field_content_int(c, "Model");
		VehicleInfo[i][vehColor1]					= cache_get_field_content_int(c, "Color1");
		VehicleInfo[i][vehColor2]					= cache_get_field_content_int(c, "Color2");
		VehicleInfo[i][vehGroup]					= cache_get_field_content_int(c, "Group");
		VehicleInfo[i][vehJob]						= cache_get_field_content_int(c, "Job");
		VehicleInfo[i][vehRank]						= cache_get_field_content_int(c, "Rank");
		VehicleInfo[i][vehRotation]					= cache_get_field_content_float(c, "Rotation");
		VehicleInfo[i][vehPosX]						= cache_get_field_content_float(c, "PosX");
		VehicleInfo[i][vehPosY]						= cache_get_field_content_float(c, "PosY");
		VehicleInfo[i][vehPosZ]						= cache_get_field_content_float(c, "PosZ");
		VehicleInfo[i][vehCarIDD]					= cache_get_field_content_int(c, "ID");

		if(VehicleInfo[i][vehColor1] < 0)
		{
			VehicleInfo[i][vehColor1] = random(126);
		}
		if(VehicleInfo[i][vehColor2] < 0)
		{
			VehicleInfo[i][vehColor2] = random(126);
		}
		if(VehicleInfo[i][vehGroup] == 8 && VehicleInfo[i][vehModel] == 411 || VehicleInfo[i][vehGroup] == 2 && VehicleInfo[i][vehModel] == 541 || VehicleInfo[i][vehGroup] == 1 && VehicleInfo[i][vehModel] == 411 || VehicleInfo[i][vehGroup] == 8 && VehicleInfo[i][vehModel] == 468 || VehicleInfo[i][vehGroup] == 8 && VehicleInfo[i][vehModel] == 470)
		{
			VehicleInfo[i][vehCarID] = CreateVehicle(VehicleInfo[i][vehModel], VehicleInfo[i][vehPosX], VehicleInfo[i][vehPosY], VehicleInfo[i][vehPosZ], VehicleInfo[i][vehRotation], VehicleInfo[i][vehColor1], VehicleInfo[i][vehColor2], 1800, 1);
			vehRadio[VehicleInfo[i][vehCarID]] = 0;
		}
		else
		{
			VehicleInfo[i][vehCarID] = CreateVehicle(VehicleInfo[i][vehModel], VehicleInfo[i][vehPosX], VehicleInfo[i][vehPosY], VehicleInfo[i][vehPosZ], VehicleInfo[i][vehRotation], VehicleInfo[i][vehColor1], VehicleInfo[i][vehColor2], 1800);
			vehRadio[VehicleInfo[i][vehCarID]] = 0;
		}
		if(VehicleInfo[i][vehGroup] == 0)
		{
			format(str,sizeof(str),"BLF %d",i+1);
			SetVehicleNumberPlate(VehicleInfo[i][vehCarID],str);
		}
		else if(VehicleInfo[i][vehGroup] > 0)
		{
			if(VehicleInfo[i][vehGroup] > 9)
			{
				format(str,sizeof(str),"F%d %d",VehicleInfo[i][vehGroup],i+1);
				SetVehicleNumberPlate(VehicleInfo[i][vehCarID],str);
			}
			else if(VehicleInfo[i][vehGroup] < 10)
			{
				format(str,sizeof(str),"F0%d %d",VehicleInfo[i][vehGroup],i+1);
				SetVehicleNumberPlate(VehicleInfo[i][vehCarID],str);
			}
		}
		if(VehicleInfo[i][vehGroup] == 13)
		{
			if(VehicleInfo[i][vehModel] != 438)
			{
				new taxiobj = CreateObject(19308, 0.00000, 0.00000, 0.00000,0.00000, 0.00000, 0.00000);
				AttachObjectToVehicle(taxiobj, VehicleInfo[i][vehCarID], 0.000000, -0.249999, 0.949999, 0.000000, 0.000001, 90.449951);
			}
		}
		if(VehicleInfo[i][vehGroup] == 8 || VehicleInfo[i][vehGroup] == 2 || VehicleInfo[i][vehGroup] == 1)
		{
			if(VehicleInfo[i][vehModel] == 411)
			{
				object = CreateObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
				AttachObjectToVehicle(object, VehicleInfo[i][vehCarID],  0.010000, -0.060000, 0.689999, 0.000000, 0.000000, 0.000000);
				new policecar = CreateObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
				SetObjectMaterialText(policecar, "POLICE", 0, OBJECT_MATERIAL_SIZE_256x128, "Arial", 40, 1, -16777216, 0, 1);
				AttachObjectToVehicle(policecar, VehicleInfo[i][vehCarID], 0.000000, -1.984998, 0.229999, -85.424964, 0.000000, 0.000000);
			}
		}
	}
	printf("[LOADING] %d vehicles loaded.", Vehicless);
	return 1;
}

forward LoadSystems();
public LoadSystems()
{
	mysql_tquery(SQL, "SELECT * FROM `factions`", "LoadDynamicFactions", "");

	mysql_tquery(SQL, "SELECT * FROM `vehicles` WHERE `Active` = '1'", "LoadVehicles", "");

	mysql_tquery(SQL, "SELECT * FROM `clans`", "LoadClanInfo", "");

	mysql_tquery(SQL, "SELECT * FROM `houses`", "LoadProperty", "");

	LoadTurfs();
	for(new i = 0; i < sizeof(TurfInfo); i++)
	{
     	Turfs[i] = GangZoneCreateEx(TurfInfo[i][zMinX],TurfInfo[i][zMinY],TurfInfo[i][zMaxX],TurfInfo[i][zMaxY],TurfInfo[i][zID],1.0);
	}

	mysql_tquery(SQL, "SELECT * FROM `bizz`", "LoadBizz", "");

	mysql_tquery(SQL, "SELECT * FROM `stock`", "LoadStock", "");

	mysql_tquery(SQL, "SELECT * FROM `cars`", "LoadCar", "");

	#if ACTIVE_QUEST == 1
		mysql_tquery(SQL, "SELECT * FROM `eventobjects`", "LoadQuest", "");
	#endif

	mysql_tquery(SQL, "SELECT * FROM `svars`", "LoadSVars", "");

	mysql_tquery(SQL, "SELECT * FROM `billboards`", "LoadBillBoards", "");

	mysql_tquery(SQL, "SELECT * FROM `users`", "LoadUsers", "");

	mysql_tquery(SQL, "SELECT * FROM `atms`", "LoadAtms", "");

	mysql_tquery(SQL, "UPDATE `users` SET `Status`='0'", "", "");
	mysql_tquery(SQL, "UPDATE `friends` SET `Status`='0'", "", "");
}

forward OnPlayerGoto(playerid, interior, virtual);
public OnPlayerGoto(playerid, interior, virtual)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new car = GetPlayerVehicleID(playerid);
		foreach(new i : Player)
		{
			if(i != playerid)
			{
				if(GetPlayerVehicleID(i) == car || GetPlayerSurfingVehicleID(i) == car)
				{
					SetPlayerInterior(i, interior);
					SetPlayerVirtualWorld(i, virtual);
				}
			}
		}
	}

	return 1;
}

stock CheckPlayerDistanceToVehicle(Float:radi, playerid, vehicleid)
{
	if(IsPlayerConnected(playerid))
	{
	    new Float:PX,Float:PY,Float:PZ,Float:X,Float:Y,Float:Z;
	    GetPlayerPos(playerid,PX,PY,PZ);
	    GetVehiclePos(vehicleid, X,Y,Z);
	    new Float:Distance = (X-PX)*(X-PX)+(Y-PY)*(Y-PY)+(Z-PZ)*(Z-PZ);
	    if(Distance <= radi*radi)
	    {
	        return 1;
	    }
	}
	return 0;
}

// ONGAMEMODEINIT
public OnGameModeInit()
{
	mysql_log(LOG_ERROR | LOG_WARNING, LOG_TYPE_HTML);
	print("------------- SERVER START -------------");
	SQL = mysql_connect(SQL_HOST, SQL_USER, SQL_DATA, SQL_PASS);
	if(mysql_errno() != 0) {
		SetGameModeText("MySQL Error");
		SendRconCommand("password LoCkEd");
		SendRconCommand("hostname rpg.bluffs.ga [Ultra-h.com]");
	}
	else 
	{
		SendRconCommand("language RO/EN");
		SendRconCommand("hostname rpg.bluffs.ga [Ultra-h.com]");
		SetNameTagDrawDistance(30);
		EnableStuntBonusForAll(0);
		ShowPlayerMarkers(2);
		LimitPlayerMarkerRadius(5.0);
		SendRconCommand("weather 10");
	    countdown = 0;
		for(new c=0;c<MAX_VEHICLES;c++)
		{
			Gas[c] = 100;
		}
		LoadTextdraws();
		LoadSystems();
		LoadAllDynamicObjects();
		LoadAllObjects();
		LoadSTextDraws();
	}
	new Year, Month, Day, Hour, Minute, Second, strgm[128];
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);
	Hour+=SERVER_HOUR_FIX;
	if(Hour == 24) Hour = 0;
	format(strgm, sizeof(strgm), "%02d.%02d.%d %02d:%02d:%02d", Day, Month, Year, Hour, Minute, Second);
	format(strgm, sizeof strgm, "bluffs, %s", strgm);
	SetGameModeText(strgm);
	SendRconCommand("language RO/EN");
	SendRconCommand("mapname GTA:SA");

	TotalBet = 0,podkrut = 0,RouletteStatus = 0,RouletteTime = 20,RouletteTime2 = 0;
	SetTimer("GlobalServerTimer", 1000, true);
	SetTimer("PacaneleTimer",400,1);
	print("----------------------------------------------------");
	format(objstore, sizeof(objstore), "MOLE: I got nothing, check back with me later.");
	format(cbjstore, sizeof(cbjstore), "HQ: There is nothing in your Vicinity, Out.");

    Create3DTextLabel("Gate 1\nType /opengate 1 to open",0xFFFFFFFF,1767.5348,-1581.2784,1742.5024,5.0, 0, 1);
	Create3DTextLabel("{BBD6D8}Driving School!\n \nType /exam\nto start the test!",0xFFFFFFD1,1219.0502,-1812.7823,16.5938, 15.0, 0, 0);
	CreateStreamed3DTextLabel("DealerShip!\n\nType /buycar to buy a car\nor /sellcar to sell an existing car!",0x00B800D1,326.4294,-1517.0165,36.0391,15.0,0);
    Create3DTextLabel("{3A51FF}Get Drugs\nType /getdrugs to get drugs",0xFFFFFFFF,316.1940,1117.5341,1083.8828,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}6\n{FFFFFF}Job: {950000}Arms Dealer\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,1366.9601,-1292.1105,13.5469,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}2\n{FFFFFF}Job: {950000}Drugs Dealer\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,2129.9590,-1700.0682,15.0784,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}11\n{FFFFFF}Job: {950000}Farmer\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,-366.4417,-1412.7061,25.7266,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}4\n{FFFFFF}Job: {950000}Bus Driver\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,1653.6558,-2238.0095,13.5201,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}7\n{FFFFFF}Job: {950000}Garbage Man\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,2510.2173,2794.8362,10.8203,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}1\n{FFFFFF}Job: {950000}Detective\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,607.8508,-1438.1113,14.0647,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}5\n{FFFFFF}Job: {950000}Mechanic\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,1621.0037,2210.8643,15.1959,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}3\n{FFFFFF}Job: {950000}Pizza Boy\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,2118.9165,-1786.8179,13.5608,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}8\n{FFFFFF}Job: {950000}Fisher\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,372.0800,-2086.0505,7.8359,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}9\n{FFFFFF}Job: {950000}Fisher\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,2000.5967,1568.3157,15.3672,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}10\n{FFFFFF}Job: {950000}Trucker\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,-76.8129,-1136.6630,1.0781,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}3\n{FFFFFF}Job: {950000}Miner\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,-375.0192,1174.9395,19.522,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}15\n{FFFFFF}Job: {950000}Air Transporter\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,-1212.0938,-118.2671,14.1440,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}12\n{FFFFFF}Job: {950000}Car Jacker\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,2849.8909,891.6392,10.7500,20.0, 0, 1);
	Create3DTextLabel("ID: {950000}16\n{FFFFFF}Job: {950000}Strawberry Picker\n{FFFFFF}Use {950000}/getjob {FFFFFF} to get the job.",0xFFFFFFD1,-80.4875,83.1074,3.1096,20.0, 0, 1);
 	Create3DTextLabel("{BBD6D8}Materials Pickup!\n\nType /getmats as an Arms Dealer\nto collect materials",COLOR_WHITE,597.5396,-1246.9562,18.2512,20.0, 0, 1);
	Create3DTextLabel("{BBD6D8}Paramedic Roof | Press F",COLOR_WHITE,1584.8812,1797.7262,10.8280,20.0, 0, 1);
	Create3DTextLabel("{BBD6D8}Paramedic Roof | Press F",COLOR_WHITE,1585.8629,1793.7830,30.4688,20.0, 0, 1);
	Create3DTextLabel("{BBD6D8}FBI Roof | Press F",COLOR_WHITE,611.1835,-585.6877,17.2266,20.0, 0, 1);
	Create3DTextLabel("{BBD6D8}Restricted to faction(Los Santos Police Department)\nLSPD Staff HQ",COLOR_WHITE,242.4025,66.4760,1003.6406,20.0, 0, 1);
	Create3DTextLabel("{BBD6D8}Restricted to faction(Las Venturas Police Department)\nLVPD Staff HQ",COLOR_WHITE,242.4025,66.4760,1003.6406,20.0, 3, 1);
	Create3DTextLabel("{BBD6D8}/garage",COLOR_WHITE,1292.7828,6.8377,1001.0078,20.0, 0, 1);
	areap = Create3DTextLabel("{FF0000}bluffs Event Area{FFFFFF}\nEvent Area is closed\nPlease wait...",0xFFFFFFFF,1510.3986,-1059.5723,25.0625,5.0, 0, 1);
    Create3DTextLabel("{BBD6D8}LSPD | /elevator",0xFFFFFFFF,1564.8662,-1666.4962,28.3956,20.0, 0, 1);
    Create3DTextLabel("{BBD6D8}LVPD Roof | /elevator",0xFFFFFFFF,2339.3237,2461.2197,38.6837,20.0, 0, 1);
    Create3DTextLabel("{BBD6D8}Restricted to faction(Los Santos Police Department)\nLSPD Roof | /elevator",0xFFFFFFFF,1568.5891,-1690.3262,5.8906,20.0, 0, 1);
    Create3DTextLabel("{BBD6D8}Restricted to faction(Las Venturas Police Department)\nLVPD Roof | /elevator",0xFFFFFFFF,2340.2810,2456.5625,14.9688,20.0, 0, 1);
    Create3DTextLabel("{BBD6D8}Los Santos Police Department\nProcessing Entrance\n \n(/arrest)",0xFFFFFFFF,1526.3739,-1678.0635,5.8906,20.0, 0, 1);
    Create3DTextLabel("{BBD6D8}Las Venturas Police Department\nProcessing Entrance\n \n(/arrest)",0xFFFFFFFF,2282.1289,2425.7620,3.4692,20.0, 0, 1);
    Create3DTextLabel("Paintball !\n\nType /paint\nto enter the paintball arena!",0xFFFF00CC,1154.7026,-1440.1458,15.7969,10.0, 0, 1);
	Create3DTextLabel("Race Arena !\n\nType /race\nto enter the race arena!",0xFFFF00CC,1102.4310,-1458.1349,15.7969,10.0, 0, 1);
	Create3DTextLabel("Race Arena !\n\nType /leaverace\nto exit the race arena!",0xFFFF00CC,-40.3110,1508.9723,1000.9155,10.0, 1, 1);
	Create3DTextLabel("Race Arena !\n\nType /leaverace\nto exit the race arena!",0xFFFF00CC,-40.3110,1508.9723,1000.9155,10.0, 2, 1);
	Create3DTextLabel("Race Vote !\nType /voterace\nto choose map and car!",0xFFFF00CC,-27.5104,1516.9034,1000.9155,10.0, 1, 1);
	Create3DTextLabel("Race Vote !\nType /voterace\nto choose map and car!",0xFFFF00CC,-27.5104,1516.9034,1000.9155,10.0, 2, 1);
	Create3DTextLabel("{BBD6D8}Truck work point !\nUse /work to start the work!",0xFFFFFFFF,-67.1100,-1123.3777,0.9599,10.0, 0, 1);
	Create3DTextLabel("BeeHive start place!\nUse /beestart to start working with the bees!",0xFFFFFFFF,1305.4702,181.9989,20.4609,10.0, 0, 1);
	CreatePickup(1239, 23, -67.1100,-1123.3777,0.9599);
	Create3DTextLabel("{BBD6D8}Farmer work point !\nUse /work to start the work!",0xFFFFFFFF,-387.6437,-1387.8787,23.0775,10.0, 0, 1);
	CreatePickup(1239, 23, -387.6437,-1387.8787,23.0775);
	Create3DTextLabel("{BBD6D8}Pizza boy work point !\nUse /work to start the work!",0xFFFFFFFF,2114.5991,-1773.2551,13.4076,10.0, 0, 1);
	CreatePickup(1239, 23, 2114.5991,-1773.2551,13.4076);
	Create3DTextLabel("{BBD6D8}Bus Driver work point !\nUse /work to start the work!",0xFFFFFFFF,1681.1997,-2264.0535,13.5173,10.0, 0, 1);
	CreatePickup(1239, 23, 1681.1997,-2264.0535,13.5173);
	Create3DTextLabel("{BBD6D8}Miner work point !\nUse /work to start the work!",0xFFFFFFFF,-402.2753,1239.8280,5.0360,10.0, 0, 1);
	CreatePickup(1239, 23, -402.2753,1239.8280,5.0360);
	Create3DTextLabel("{BBD6D8}Air Transporter work point !\nUse /work to start the work!",0xFFFFFFFF,-1240.3885,-112.3491,14.1484,10.0, 0, 1);
	CreatePickup(1239, 23, -1240.3885,-112.3491,14.1484);
	Create3DTextLabel("{BBD6D8}Strawberry Picker work point !\nUse /work to start the work!",0xFFFFFFFF,-98.1630,78.2496,3.1172,10.0, 0, 1);
	CreatePickup(1239, 23, -98.1630,78.2496,3.1172);
	Create3DTextLabel("{BBD6D8}Flying licence point !\nUse [/getlicence fly] to start the exam!",0xFFFFFFFF,414.4034,2535.7585,19.1484,10.0, 0, 1);
	CreatePickup(1239, 23, 414.4034,2535.7585,19.1484);
	Create3DTextLabel("{BBD6D8}Boat licence point !\nUse [/getlicence boat] to start the exam!",0xFFFFFFFF,2161.2642,-102.5932,2.7500,10.0, 0, 1);
	CreatePickup(1239, 23, 2161.2642,-102.5932,2.7500);
	Create3DTextLabel("{BBD6D8}Weapon licence point !\nUse [/getlicence weapon] to start the exam!",0xFFFFFFFF,-684.5781,939.6581,13.6328,10.0, 0, 1);
	CreatePickup(1239, 23, -684.5781,939.6581,13.6328);
//	Create3DTextLabel("Summer Quest!",0xFFFFFFCC,-2666.4829,271.0853,4.3359,10.0, 0, 0); 1089.0179,-1791.5615,13.6610
	gettime(ghour, gminute, gsecond);
	ghour+=SERVER_HOUR_FIX;
	if(ghour == 24) ghour = 0;
	BonusAcc = 0;
	FixHour(ghour);
	ResetObjects();
	ghour = shifthour;

	g_SpeedThreshold = SPEED_THRESHOLD * SPEED_THRESHOLD;

	if(!realtime)
	{
		new hourwo,minwo,secwo,mowo,yewo,dawo;
		gettime(hourwo,minwo,secwo);
		hourwo+=SERVER_HOUR_FIX;
		if(hourwo == 24) hourwo = 0;
		getdate(yewo, mowo, dawo);
		if((hourwo == 19 || hourwo == 20 || hourwo == 21 || hourwo == 22 || hourwo == 17 || hourwo == 18) && mowo <= 3 && mowo >= 9)
		{
			SetWorldTime(23);
		}
		else
		{
			SetWorldTime(hourwo);
		}
	}
    DisableInteriorEnterExits();
	AllowInteriorWeapons(1);
	UsePlayerPedAnims();
	paintm[1] = 1;
	paintm[2] = 1;
	paintm[3] = 1;
	paintm[4] = 1;
	paintg[1] = 1;
	paintg[2] = 1;
	PaintBallWinnerKills[1] = 0;
	PaintBallWinnerKills[2] = 0;
	PaintBallWinnerKills[3] = 0;
	PaintBallWinnerKills[4] = 0;
	PaintWinner[1] = -1;
	PaintWinner[2] = -1;
	PaintWinner[3] = -1;
	PaintWinner[4] = -1;
	paintrs[1] = 0;
	paintrs[2] = 0;
	paintrs[3] = 0;
	paintrs[4] = 0;
	paintt[1] = 0;
	paintt[2] = 0;
	paintt[3] = 0;
	paintt[4] = 0;
	mapvoted[1] = 0;
	mapvoted[2] = 0;
	mapvoted[3] = 0;
	mapvoted[4] = 0;
	gunvoted[1] = 0;
	gunvoted[2] = 0;

	for(new i = 0; i <= sizeof(Peds)-1; i++)
	{
		AddPlayerClass(Peds[i][0],1958.3783,1343.1572,1100.3746,269.1425,-1,-1,-1,-1,-1,-1);
	}

    ManualVehicleEngineAndLights();

	// Pickups
	dmvp = CreatePickup(1239, 23, 1219.0502,-1812.7823,16.5938); 		// Driving License
	gslsenter1 = CreatePickup(1318, 23, 305.9341,-141.7895,1004.0547, -1);
	gslsenter2 = CreatePickup(1318, 23, 300.1486,-141.8312,1004.0625, -1);
	gslsenter3 = CreatePickup(1318, 23, 304.0917,-141.7523,1004.0625, -1);
	gslsenter4 = CreatePickup(1318, 23, 298.9318,-141.8459,1004.0547, -1);
	AddStaticPickup(1275, 23, -76.8129,-1136.6630,1.0781);              // Trucker [/getjob]
    AddStaticPickup(1314, 23, 2282.1289,2425.7620,3.4692);				// Lvpd arrest
    AddStaticPickup(1314, 23, 1526.3739,-1678.0635,5.8906);				// Lspd arrest
	AddStaticPickup(1239, 23, 1756.4181,-1577.8954,1742.5309);			// exit jail
	AddStaticPickup(1239, 23, 1762.0028,-1584.4185,1742.5264);			// mdc jail
	AddStaticPickup(1275, 23, 1366.9601,-1292.1105,13.5469);			// GETJOB ARMS DEALER
    AddStaticPickup(1275, 23, 2129.9590,-1700.0682,15.0784);			// GETJOB DRUGS DEALER
	AddStaticPickup(1275, 23, 2510.2173,2794.8362,10.8203);			    // GETJOB GARBAGE MAN
	AddStaticPickup(1275, 23, 607.8508,-1438.1113,14.0647);				// GETJOB DETECTIVE
	AddStaticPickup(1275, 23, 1621.0037,2210.8643,15.1959); 			// GETJOB MECHANIC
	AddStaticPickup(1275, 23, 2849.8909,891.6392,10.7500); 			// GETJOB CAR JACKER
	AddStaticPickup(1239, 23, 5.7771,-3989.8794,1003.5266); 			// STATION LS BUY
	AddStaticPickup(1275, 23, 2118.9165,-1786.8179,13.5608); 			// PIZZA BOY
	AddStaticPickup(1275, 23, -375.0192,1174.9395,19.5422); 			// miner
	AddStaticPickup(1275, 23, -1212.0938,-118.2671,14.1440); 			// air transporter
	AddStaticPickup(1275, 23, -80.4875,83.1074,3.1096); 			// strawberry picker
	AddStaticPickup(1275, 23, 372.0800,-2086.0505,7.8359); 				// FISH GETJOB
	AddStaticPickup(1275, 23, 2000.5967,1568.3157,15.3672); 			// FISH GETJOB2
	AddStaticPickup(1275, 23, 1653.6558,-2238.0095,13.5201); 			// GETJOB BUS DRIVER
	AddStaticPickup(1318, 23, 2139.2612,-1697.9432,15.0784); 			// CRACK HOUSE
	AddStaticPickup(1254, 23, 1154.7026,-1440.1458,15.7969);       	    // PAINTBALL ls
	AddStaticPickup(1277, 23, 1102.4310,-1458.1349,15.7969);       	    // RACE ARENA LS

	//CreateDynamicPickup(modelid, type, Float:x, Float:y, Float:z, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = 100.0);
	CreateDynamicPickup(1239, 23, -27.5104,1516.9034,1000.9155,-1,-1,-1,100.0); // RACE ARENA LS
	CreateDynamicPickup(1239, 23, -40.3110,1508.9723,1000.9155,-1,-1,-1,100.0); // RACE ARENA LS2
	CreateDynamicPickup(1247, 23, 242.4025,66.4760,1003.6406,-1,-1,-1,100.0); // LSPD STAFF HQ
	CreateDynamicPickup(1279, 23, 316.1940,1117.5341,1083.8828,-1,-1,-1,100.0);
	CreateDynamicPickup(1275, 23, -366.4417,-1412.7061,25.7266,-1,-1,-1,100.0);
	CreateDynamicPickup(1239, 23, 918.6766,-1252.2185,16.2109,-1,-1,-1,100.0);
	CreateDynamicPickup(1277, 23, 326.4294,-1517.0165,36.0391,-1,-1,-1,100.0);  // DS PiCKUP
	CreateDynamicPickup(1239, 23, 1564.8662,-1666.4962,28.3956,-1,-1,-1,100.0); // LSPD Roff(sus)
	CreateDynamicPickup(1239, 23, 1568.5825,-1690.2802,5.8906,-1,-1,-1,100.0); // LSPD Roff(jos)
	CreateDynamicPickup(1239, 23, 2340.2810,2456.5625,14.9688,-1,-1,-1,100.0); // LVPD Roff(jos)
	CreateDynamicPickup(1239, 23, 2339.3237,2461.2197,38.6837,-1,-1,-1,100.0); // LVPD Roff(sus)
	//CreateDynamicPickup(1239, 23,1449.2723,-1848.4255,13.7721,-1,-1,-1,100.0); 	// buymaterials
	CreateDynamicPickup(1239, 23,1510.3986,-1059.5723,25.0625,-1,-1,-1,100.0); 	// event area enter
	CreateDynamicPickup(1239, 23,-1423.5153,935.8321,1036.4756,-1,-1,-1,100.0); // event area exit
	CreateDynamicPickup(1318, 23, 1584.8812,1797.7262,10.8280, -1, -1,-1,100.0); // PARAMEDIC ELEVATOR
	CreateDynamicPickup(1318, 23, 1585.8629,1793.7830,30.4688, -1, -1,-1,100.0);
	CreateDynamicPickup(1318, 23, 611.1835,-585.6877,17.2266, -1, -1,-1,100.0); // FBI ELEVATOR
	CreateDynamicPickup(1318, 23, 618.1414,-566.7900,26.1432, -1, -1,-1,100.0);

	//ng
	CreateObject(12814, 264.39999, 1887.1, 16.6,   0.00000, 0.00000, 0.00000);


    // MAPICON
    CreateDynamicMapIcon(326.4294,-1517.0165,36.0391,55,0,-1,-1,-1,750.0);	// BuyCar Los Santos
	CreateDynamicMapIcon(1510.3986,-1059.5723,25.0625,35,0,-1,-1,-1,750.0);	// Event Arena
	CreateDynamicMapIcon(414.4034,2535.7585,19.1484,5,0,-1,-1,-1,750.0);	// licence fly
	CreateDynamicMapIcon(2161.2642,-102.5932,2.7500,9,0,-1,-1,-1,750.0);	// licence boat
	CreateDynamicMapIcon(-684.5781,939.6581,13.6328,6,0,-1,-1,-1,750.0);	// licence gun
	CreateDynamicMapIcon(1102.4132,-1458.1514,15.7969,53,0,-1,-1,-1,750.0);	// race
	CreateDynamicMapIcon(1154.7262,-1440.2344,15.7969,6,0,-1,-1,-1,750.0);	// paint

	//global time
	if(realtime)
	{
		new tmphour,
			tmpminute,
			tmpsecond;
		gettime(tmphour, tmpminute, tmpsecond);
		tmphour+=SERVER_HOUR_FIX;
		if(tmphour == 24) tmphour = 0;
		FixHour(tmphour);
		tmphour = shifthour;
		new hourwo,minwo,secwo,mowo,yewo,dawo;
		gettime(hourwo,minwo,secwo);
		hourwo+=SERVER_HOUR_FIX;
		if(hourwo == 24) hourwo = 0;
		getdate(yewo, mowo, dawo);
		if((hourwo == 19 || hourwo == 20 || hourwo == 21 || hourwo == 22 || hourwo == 17 || hourwo == 18) && mowo <= 3 && mowo >= 9)
		{
			SetWorldTime(23);
		}
		else
		{
			SetWorldTime(hourwo);
		}
	}

	//timers
	synctimer = SetTimer("SyncUp", 60000, 1); // 60 sec
	unjailtimer = SetTimer("SetPlayerUnjail", 1000, 1); // 1 sec
	cartimer = SetTimer("CarCheck", 90000, 1); // 90 sec
	twosecondstimer = SetTimer("TwoSecondsTimer", 2000, 1); // 2 sec
	productiontimer = SetTimer("Production", 300000, 1);  // 5 min
	twominutestimer = SetTimer("TwoMinutesTimer", 120000, 1);// 2 min
	checkgastimer = SetTimer("CheckGas", RunOutTime, 1);
    checkvehinfotimer = SetTimer("Checkvehinfo",100, 1); // 1 milsec
    wantedicatimer = SetTimer("TenSecondsTimer", 10000, 1); // 10 sec
    savedatatimer = SetTimer("SavePlayerData", 600000, 1); // 10 min
	randmsgtimer = SetTimer("SendRandMsg",600000,1); // 10 min
	SetTimer("load_objects_accesory", 1000, false);
	load_accs_td();

	return 1;
}

public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
    if(response)
    {
    	SetPlayerSkin(playerid, modelid);
        PlayerInfo[playerid][pModel] = modelid;
		new query[184];
        mysql_format(SQL,query, sizeof(query), "UPDATE users SET `Model`='%d' WHERE `name`='%s'",GetPlayerSkin(playerid),PlayerInfo[playerid][pNormalName]);
		mysql_tquery(SQL,query,"","");
		ChangeClothes[playerid] = 0;
		SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} Skin selected.");
    }
    else SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} Canceled skin selection");
	return 1;
}

forward LoadAllObjects();
public LoadAllObjects()
{
    //gratii pd
    new gratie1, gratie2, gratie3, gratie4, gratie5, gratie6;
	gratie1 = CreateObject(19302, 266.32431, 85.70610, 1001.28571,   0.00000, 0.00000, 90.30000);
	gratie2 = CreateObject(19302, 266.31870, 87.46790, 1001.28571,   0.02000, 0.00000, -89.82000);
	gratie3 = CreateObject(19302, 266.32031, 82.94890, 1001.28571,   0.02000, 0.00000, -89.82000);
	gratie4 = CreateObject(19302, 266.33569, 81.20160, 1001.28571,   0.02000, 0.00000, 90.36000);
	gratie5 = CreateObject(19302, 266.29480, 76.71580, 1001.28571,   0.02000, 0.00000, 90.36000);
	gratie6 = CreateObject(19302, 266.29480, 78.45580, 1001.28571,   0.02000, 0.00000, -90.60000);
	SetObjectMaterial(gratie1, 0, 19302, "gratie1", "gratie1", 0xFFFFFFFF);
	SetObjectMaterial(gratie2, 0, 19302, "gratie2", "gratie2", 0xFFFFFFFF);
	SetObjectMaterial(gratie3, 0, 19302, "gratie3", "gratie3", 0xFFFFFFFF);
	SetObjectMaterial(gratie4, 0, 19302, "gratie4", "gratie4", 0xFFFFFFFF);
	SetObjectMaterial(gratie5, 0, 19302, "gratie5", "gratie5", 0xFFFFFFFF);
	SetObjectMaterial(gratie6, 0, 19302, "gratie6", "gratie6", 0xFFFFFFFF);

	//gratii ajail
	new gratia1, gratia2, gratia3, gratia4, gratia5, gratia6, gratia7, gratia8;
	gratia1 = CreateObject(19302, 228.28619, 112.66590, 999.23529,   0.00000, 0.00000, 180.48010);
	gratia2 = CreateObject(19302, 226.50360, 112.64810, 999.23529,   0.00000, 0.00000, 0.90020);
	gratia3 = CreateObject(19302, 222.62360, 112.64810, 999.23529,   0.00000, 0.00000, 359.64001);
	gratia4 = CreateObject(19302, 224.36360, 112.64810, 999.23529,   0.00000, 0.00000, 538.79919);
	gratia5 = CreateObject(19302, 220.38361, 112.64810, 999.23529,   0.00000, 0.00000, 539.69940);
	gratia6 = CreateObject(19302, 218.66360, 112.64810, 999.23529,   0.00000, 0.00000, 359.33963);
	gratia7 = CreateObject(19302, 216.44360, 112.64810, 999.23529,   0.00000, 0.00000, 538.73865);
	gratia8 = CreateObject(19302, 214.72360, 112.64810, 999.23529,   0.00000, 0.00000, 359.45889);
	SetObjectMaterial(gratia1, 0, 19302, "gratia1", "gratia1", 0xFFFFFFFF);
	SetObjectMaterial(gratia2, 0, 19302, "gratia2", "gratia2", 0xFFFFFFFF);
	SetObjectMaterial(gratia3, 0, 19302, "gratia3", "gratia3", 0xFFFFFFFF);
	SetObjectMaterial(gratia4, 0, 19302, "gratia4", "gratia4", 0xFFFFFFFF);
	SetObjectMaterial(gratia5, 0, 19302, "gratia5", "gratia5", 0xFFFFFFFF);
	SetObjectMaterial(gratia6, 0, 19302, "gratia6", "gratia6", 0xFFFFFFFF);
	SetObjectMaterial(gratia7, 0, 19302, "gratia7", "gratia7", 0xFFFFFFFF);
	SetObjectMaterial(gratia8, 0, 19302, "gratia8", "gratia8", 0xFFFFFFFF);

	//gard cnn
    CreateObject(970, 1113.81226, -1415.95642, 12.99760,   0.00000, 0.00000, 1.02000);
	CreateObject(970, 1118.95190, -1415.88806, 12.99760,   0.00000, 0.00000, 0.24000);
	CreateObject(970, 1123.87134, -1415.89172, 13.01760,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1128.84937, -1415.87390, 13.05760,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1133.62927, -1415.89539, 13.05760,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1138.54712, -1415.90955, 13.07760,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1143.48718, -1415.95984, 13.07760,   0.00000, 0.00000, -0.54000);
	CreateObject(970, 1186.10474, -1495.67102, 12.96110,   0.00000, 0.00000, -90.06000);
	CreateObject(970, 1186.14282, -1490.92114, 12.96110,   0.00000, 0.00000, -90.06000);
	CreateObject(970, 1186.13611, -1486.25720, 12.96110,   0.00000, 0.00000, -90.06000);
	CreateObject(970, 1186.10059, -1481.48560, 12.96110,   0.00000, 0.00000, -90.06000);
	CreateObject(970, 1124.00598, -1562.16187, 12.95910,   0.00000, 0.00000, -0.48000);
	CreateObject(970, 1133.22400, -1562.16504, 12.95910,   0.00000, 0.00000, 0.12000);
	CreateObject(970, 1128.58142, -1562.17664, 12.95910,   0.00000, 0.00000, -0.48000);
	CreateObject(970, 1061.49329, -1492.59277, 12.96960,   0.00000, 0.00000, -105.78001);
	CreateObject(970, 1059.12000, -1501.51147, 12.96960,   0.00000, 0.00000, -104.70000);
	CreateObject(970, 1060.26794, -1497.01086, 12.98960,   0.00000, 0.00000, -105.30000);

	//Garbage
	CreateObject(18862, 2523.44312, 2812.48975, 14.94440,   0.00000, 0.00000, 0.00000);
	CreateObject(18862, 2781.27173, -2531.82104, 17.73810,   0.00000, 0.00000, 0.00000);
	CreateObject(18862, -1899.72314, -1736.72607, 25.87010,   0.00000, 0.00000, 0.00000);
	CreateObject(1265, 810.01349, -1096.77893, 25.18391,   0.00000, 0.00000, 0.00000);
	CreateObject(1265, 810.95319, -1098.27197, 25.30360,   0.00000, 0.00000, 0.00000);
	CreateObject(1264, 810.19092, -1095.63965, 25.09590,   0.00000, 0.00000, 0.00000);
	CreateObject(1343, 414.42014, -1512.11438, 31.33760,   0.00000, 0.00000, 40.00000);
	CreateObject(1264, 945.74243, -1742.89954, 12.96460,   0.00000, 0.00000, 0.00000);
	CreateObject(1265, 945.71002, -1744.06616, 12.98440,   0.00000, 0.00000, 0.00000);
	CreateObject(1343, 1492.38660, -686.40686, 94.50410,   0.00000, 0.00000, 0.00000);
	CreateObject(1344, 1105.63623, -294.48071, 73.77080,   0.00000, 0.00000, 180.00000);
	CreateObject(1264, 1571.64478, 26.26518, 23.44080,   0.00000, 0.00000, 0.00000);
	CreateObject(1227, 2849.60571, 1294.65125, 11.31020,   0.00000, 0.00000, 0.00000);
	CreateObject(1264, 2319.48950, 1801.95605, 10.12020,   0.00000, 0.00000, 0.00000);
	CreateObject(1265, 2317.99609, 1801.94202, 10.20050,   0.00000, 0.00000, 0.00000);
	CreateObject(1343, 2656.42896, 1081.06458, 10.58030,   0.00000, 0.00000, 0.00000);
	CreateObject(1344, 2637.94287, 1834.47986, 10.81900,   0.00000, 0.00000, 180.00000);
	CreateObject(1345, 1977.26697, 2496.17627, 10.63920,   0.00000, 0.00000, 0.00000);
	CreateObject(1344, 1533.06104, 2725.46460, 10.60040,   0.00000, 0.00000, -90.00000);
	CreateObject(1343, 959.18890, 1804.16211, 8.62580,   0.00000, 0.00000, 0.00000);

	//PD Exterior by piMp
	CreateObject(11326, 1605.01282, -1623.63245, 14.78770,   0.00000, 0.00000, 89.46000);
	CreateObject(955, 1553.64233, -1683.42175, 12.92650,   0.00000, 0.00000, -90.00000);
	CreateObject(983, 1542.62939, -1641.17981, 27.70590,   0.00000, 0.00000, -180.48010);
	CreateObject(983, 1545.80750, -1650.77563, 27.68590,   0.00000, 0.00000, -270.12021);
	CreateObject(983, 1542.60828, -1647.55884, 27.70590,   -0.16000, -0.04000, -180.12010);
	CreateObject(983, 1550.38745, -1650.77563, 27.68590,   0.00000, 0.00000, -270.12021);
	CreateObject(983, 1542.62939, -1640.45984, 27.70590,   0.00000, 0.00000, -180.48010);
	CreateObject(983, 1545.85986, -1637.26941, 27.70590,   0.00000, 0.00000, -270.18002);
	CreateObject(983, 1552.21460, -1637.27222, 27.70590,   0.00000, 0.00000, -270.18002);
	CreateObject(983, 1558.61877, -1637.28772, 27.70590,   0.00000, 0.00000, -270.18002);
	CreateObject(983, 1565.02625, -1637.32434, 27.70590,   0.00000, 0.00000, -270.18002);
	CreateObject(983, 1571.40149, -1637.35168, 27.70590,   0.00000, 0.00000, -270.18002);
	CreateObject(983, 1574.66931, -1637.35522, 27.70590,   0.00000, 0.00000, -270.17999);
	CreateObject(983, 1577.83557, -1640.57202, 27.70590,   0.00000, 0.00000, -180.48010);
	CreateObject(983, 1577.77295, -1646.93713, 27.70590,   0.00000, 0.00000, -180.48010);
	CreateObject(983, 1577.78162, -1653.32056, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateObject(983, 1577.78674, -1659.73962, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateObject(983, 1577.77917, -1666.16150, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateObject(983, 1577.75732, -1672.53748, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateObject(983, 1577.72766, -1678.91931, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateObject(983, 1577.73621, -1685.32568, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateObject(983, 1577.72400, -1691.71228, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateObject(983, 1577.71289, -1698.10791, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateObject(983, 1577.72131, -1704.51245, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateObject(983, 1577.69897, -1710.88159, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateObject(983, 1577.69897, -1711.24158, 27.70590,   0.00000, 0.00000, -180.06010);
	CreateObject(983, 1574.44556, -1714.38306, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateObject(983, 1568.07471, -1714.34656, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateObject(983, 1561.66760, -1714.30737, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateObject(983, 1555.31116, -1714.26440, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateObject(983, 1548.95508, -1714.22168, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateObject(983, 1545.76025, -1714.20190, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateObject(983, 1542.57971, -1710.99304, 27.70590,   0.00000, 0.00000, -359.87982);
	CreateObject(983, 1542.54773, -1704.60864, 27.70590,   0.00000, 0.00000, -359.87982);
	CreateObject(983, 1542.54773, -1703.70862, 27.70590,   0.00000, 0.00000, -359.87979);
	CreateObject(983, 1545.74390, -1700.54211, 27.70590,   0.00000, 0.00000, -270.00009);
	CreateObject(983, 1550.38757, -1700.53650, 27.70590,   0.00000, 0.00000, -270.00009);
	CreateObject(983, 1553.58850, -1697.36475, 27.70590,   0.00000, 0.00000, -179.70013);
	CreateObject(983, 1553.56555, -1690.94910, 27.70590,   0.00000, 0.00000, -179.70013);
	CreateObject(983, 1553.56580, -1656.84106, 27.70590,   0.00000, 0.00000, -179.70010);
	CreateObject(983, 1553.55737, -1653.96729, 27.70590,   0.00000, 0.00000, -179.70010);
	CreateObject(3934, 1562.89099, -1700.73755, 27.38710,   0.00000, -0.02000, -0.84000);
	CreateObject(3934, 1560.78516, -1650.95300, 27.38710,   0.00000, -0.02000, 1.02000);

	//Statii autobuz
	CreateObject(1257, 1692.89929, -2200.77808, 13.64870,   0.00000, 0.00000, -90.12000);
	CreateObject(1257, 1941.19080, -2172.63159, 13.76920,   0.00000, 0.00000, -90.36000);
	CreateObject(1257, 1967.80859, -1900.26184, 13.77870,   0.00000, 0.00000, 0.00000);
	CreateObject(1257, 1921.87402, -1746.02295, 13.76840,   0.00000, 0.00000, 90.06000);
	CreateObject(1257, 1815.46008, -1815.05981, 13.80990,   0.00000, 0.00000, -179.63989);
	CreateObject(1257, 1695.64038, -1766.75049, 13.78830,   0.00000, 0.00000, 0.00000);
	CreateObject(1257, 1392.64221, -1726.04602, 13.65910,   0.00000, 0.00000, 89.46000);
	CreateObject(1257, 1318.69714, -1633.10010, 13.76780,   0.00000, 0.00000, 0.00000);
	CreateObject(1257, 1325.55969, -1389.08057, 13.76010,   0.00000, 0.00000, 90.24000);
	CreateObject(1257, 1212.34741, -1326.52954, 13.68430,   0.00000, 0.00000, 0.00000);
	CreateObject(1257, 1083.02100, -1274.54492, 13.60720,   0.00000, 0.00000, 90.24000);
	CreateObject(1257, 964.63733, -1214.54919, 17.02340,   0.00000, 0.00000, 89.58000);
	CreateObject(1257, 818.55078, -1134.44849, 23.90680,   0.00000, 0.00000, 88.50000);
	CreateObject(1257, 791.28119, -1301.22681, 13.56870,   0.00000, 0.00000, -179.51990);
	CreateObject(1257, 679.34332, -1388.95630, 13.72830,   0.00000, 0.00000, 90.12000);
	CreateObject(1257, 378.06552, -1489.50562, 32.17630,   0.00000, 0.00000, 128.28003);
	CreateObject(1257, 261.02219, -1539.33704, 32.41950,   0.00000, 0.00000, -34.38000);
	CreateObject(1257, 485.92880, -1361.02576, 18.19000,   -4.00000, 4.00000, -65.24000);
	CreateObject(1257, 589.19830, -1236.84290, 17.97730,   0.00000, 0.00000, -67.92000);
	CreateObject(1257, 775.53870, -1062.00525, 24.75130,   0.00000, 0.00000, -77.69999);
	CreateObject(1257, 1209.70325, -952.07233, 43.01140,   0.00000, 0.00000, -79.26000);
	CreateObject(1257, 1713.93640, -736.80762, 50.49150,   -2.94000, 0.00000, -2.00000);
	CreateObject(1257, 1775.73401, 579.77661, 23.77970,   0.00000, 0.00000, -11.76000);
	CreateObject(1257, 1839.89514, 825.05157, 10.16840,   0.06000, 0.00000, 270.66010);
	CreateObject(1257, 2184.53564, 801.95203, 7.33030,   0.00000, 0.00000, -125.22000);
	CreateObject(1257, 2293.69141, 841.77661, 14.11820,   0.00000, 0.00000, 0.00000);
	CreateObject(1257, 2353.69604, 1025.47546, 10.84100,   0.00000, 0.00000, 0.00000);
	CreateObject(1257, 2570.79736, 1066.87720, 10.84120,   0.00000, 0.00000, -90.24001);
	CreateObject(1257, 2613.71777, 1319.62097, 10.86020,   0.00000, 0.00000, 90.36000);
	CreateObject(1257, 2476.20508, 1479.59375, 10.86030,   0.00000, 0.00000, 89.94000);
	CreateObject(1257, 2401.10645, 1619.55835, 10.89970,   0.00000, 0.00000, 89.88000);
	CreateObject(1257, 2293.08325, 1779.52710, 10.80020,   0.00000, 0.00000, 89.70000);
	CreateObject(1257, 2158.93481, 1995.43042, 10.87960,   0.00000, 0.00000, 0.00000);
	CreateObject(1257, 2231.25317, 2383.93506, 10.86030,   0.00000, 0.00000, -12.60000);
	CreateObject(1257, 2085.77344, 2459.35864, 10.88090,   0.00000, 0.00000, 90.00000);
	CreateObject(1257, 1948.35791, 2399.46997, 10.92060,   0.00000, 0.00000, 89.64000);
	CreateObject(1257, 1920.80237, 2315.90601, 10.88100,   0.00000, 0.00000, -179.69991);
	CreateObject(1257, 1921.41638, 2117.40479, 10.94120,   0.00000, 0.00000, -179.70000);
	CreateObject(1257, 2093.48389, 2015.85571, 10.90140,   0.00000, 0.00000, -90.18000);
	CreateObject(1257, 2035.99133, 1521.35413, 10.90060,   0.00000, 0.00000, -180.05991);
	CreateObject(1257, 2036.35254, 1168.23950, 10.82070,   0.00000, 0.00000, -179.75990);
	CreateObject(1257, 2034.95715, 878.28998, 7.36150,   0.00000, 0.00000, -179.40010);
	CreateObject(1257, 1752.35156, 621.24127, 21.25890,   4.00000, 0.00000, 165.00000);
	CreateObject(1257, 1614.87988, 186.35570, 33.65740,   4.00000, 0.00000, -192.00000);
	CreateObject(1257, 1657.21387, -331.40521, 40.28030,   0.00000, 0.00000, -174.59990);
	CreateObject(1257, 1684.78406, -727.13708, 49.88370,   4.00000, 0.00000, -190.80000);
	CreateObject(1257, 1412.48633, -934.33838, 35.80170,   0.00000, 0.00000, 80.46000);
	CreateObject(1257, 1431.33862, -1040.25464, 23.92800,   0.00000, 0.00000, -89.94000);
	CreateObject(1257, 1571.46692, -1139.13977, 23.71380,   0.00000, 0.00000, -180.60001);
	CreateObject(1257, 1708.46350, -1263.24890, 13.60880,   0.00000, 0.00000, -179.16000);
	CreateObject(1257, 1590.66150, -1434.45093, 13.52840,   0.00000, 0.00000, 90.06000);
	CreateObject(1257, 1423.55896, -1568.12500, 13.62870,   0.00000, 0.00000, 173.27989);
	CreateObject(1257, 1446.39136, -1738.46875, 13.68900,   0.00000, 0.00000, -89.58000);
	CreateObject(1257, 1579.74524, -1878.48059, 13.62880,   0.00000, 0.00000, -90.06000);
	CreateObject(1257, 1815.37183, -1904.30969, 13.65310,   0.00000, 0.00000, -180.65990);
	CreateObject(1257, 1955.44678, -1998.47595, 13.60910,   0.00000, 0.00000, -179.52000);
	CreateObject(1257, 1935.31299, -2160.26001, 13.66810,   0.00000, 0.00000, 89.82000);

	//Pompe de benzina
	CreateObject(1676, 1009.18927, -936.09637, 42.78190,   0.00000, 0.00000, 6.66000);
	CreateObject(1676, 1005.57520, -936.67499, 42.78190,   0.00000, 0.00000, 6.66000);
	CreateObject(1676, 1002.23541, -937.06488, 42.78190,   0.00000, 0.00000, 6.66000);
	CreateObject(1676, 998.64508, -937.57654, 42.78190,   0.00000, 0.00000, 6.66000);

	//Dozatoare
	CreateObject(1977, 316.88760, -140.32410, 998.59998,   0.00000, 0.00000, -90.42000);
	CreateObject(1775, 495.97321, -24.32530, 1000.73621,   0.00000, 0.00000, -180.18030);
	return 1;
}

forward LoadAllDynamicObjects();
public LoadAllDynamicObjects()
{
	// RACE ARENA
	CreateDynamicObject(19378, -17.61814, 1515.35327, 999.82953,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -17.61690, 1505.93958, 999.82953,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -27.82080, 1505.96240, 999.82953,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -27.97893, 1515.35266, 999.82953,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -37.94957, 1505.95557, 999.82953,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -37.75200, 1515.47534, 999.82953,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, -12.50300, 1505.84558, 1001.63379,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -12.49360, 1515.46069, 1001.63379,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -17.23149, 1520.22302, 1001.63379,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -26.84494, 1520.23694, 1001.63379,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -36.46837, 1520.24890, 1001.63379,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -41.35551, 1515.37659, 1001.63379,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19450, -41.34680, 1502.56873, 1001.63379,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19450, -36.48660, 1501.06653, 1001.63379,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19450, -27.01140, 1501.06458, 1001.63379,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19450, -17.41460, 1501.05066, 1001.63379,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19388, -41.35370, 1508.98572, 1001.63568,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11737, -41.24654, 1510.69360, 1001.66711,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(11665, -14.17560, 1518.45776, 1000.61230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, -34.93353, 1501.93762, 999.89331,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, -28.37990, 1501.96106, 999.89331,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, -22.28230, 1501.96790, 999.89331,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, -15.80290, 1501.93860, 999.89331,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19172, -20.00270, 1501.13123, 1002.15692,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19174, -26.38020, 1501.14600, 1002.19519,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19175, -32.80420, 1501.15002, 1002.19672,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19173, -41.26360, 1506.83228, 1001.66718,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11711, -41.20200, 1508.98450, 1002.65338,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2173, -27.00228, 1517.95618, 999.91510,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19999, -27.67097, 1519.46545, 999.91260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19893, -27.11707, 1517.82886, 1000.72461,   0.00000, 0.00000, 210.00000);
	CreateDynamicObject(19835, -28.31532, 1518.23621, 1000.79761,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19825, -27.39310, 1520.12476, 1002.25568,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19376, -36.21130, 1515.57190, 1003.32092,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, -25.83130, 1515.51184, 1003.32092,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, -15.53130, 1515.47192, 1003.32092,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, -36.23130, 1505.93188, 1003.32092,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, -25.83130, 1505.89185, 1003.32092,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, -15.53130, 1505.87195, 1003.32092,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1537, -41.32610, 1509.75952, 999.88843,   0.00000, 0.00000, 90.00000);

	//USA GARAJ FBI
	CreateDynamicObject(10184, 617.60950, -602.30725, 17.29980,   0.00000, 0.00000, 0.00000);

	//USA MAFII
	CreateDynamicObject(1506, 2544.06641, -1306.37781, 1053.63586,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1506, 2544.06641, -1304.89783, 1053.63586,   0.00000, 0.00000, 90.00000);

	//event arena
	CreateDynamicObject(5107, 8131.84424, -7557.77441, 21.31974,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13190, 8092.79590, -7557.67969, 17.86357,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(13190, 8092.77637, -7557.67041, 21.69334,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(13190, 8092.77148, -7557.67383, 25.57404,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(13190, 8092.75781, -7557.68311, 29.43032,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(16287, 8085.43555, -7564.92334, 11.59161,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(16287, 8090.56982, -7569.92725, 11.61662,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(16287, 8085.42822, -7550.02686, 11.59772,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(16287, 8095.47949, -7569.92676, 11.61662,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(16287, 8090.53174, -7544.91895, 11.61663,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(16287, 8095.47852, -7544.91504, 11.61662,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(16287, 8100.60156, -7549.99854, 11.61662,   0.00000, 0.00000, -360.00003);
	CreateDynamicObject(16287, 8100.60010, -7564.91455, 11.61662,   0.00000, 0.00000, -360.00003);
	CreateDynamicObject(8947, 8093.10303, -7560.52051, 18.51939,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(8947, 8093.11426, -7560.53613, 24.52295,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(8947, 8093.10352, -7560.52686, 26.99291,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(8947, 8097.21094, -7561.63770, 12.04439,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(8947, 8097.22314, -7553.22217, 12.01940,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(8947, 8088.83398, -7561.64404, 12.05525,   0.00000, 0.00000, -359.99997);
	CreateDynamicObject(8947, 8088.81201, -7553.23730, 12.04439,   0.00000, 0.00000, -360.00003);
	CreateDynamicObject(4193, 8111.32910, -7498.31055, 31.44644,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(10041, 8032.82227, -7497.01855, 45.16753,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(4058, 8047.18066, -7595.05029, 33.55188,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(4058, 8108.80957, -7613.34033, 25.23701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4682, 8096.74316, -7600.93604, 18.03067,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(4682, 8186.39941, -7550.15967, 22.69571,   0.00000, 0.00000, -989.99976);
	CreateDynamicObject(4113, 8187.83398, -7481.91797, 36.29269,   0.00000, 0.00000, 101.25001);
	CreateDynamicObject(4570, 7992.76074, -7555.49707, 49.23763,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(4570, 8153.17090, -7617.53174, 48.53752,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4571, 8236.04785, -7480.54053, 51.21596,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(3268, 8155.90918, -7553.35352, 14.36662,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(3268, 8155.92822, -7575.60303, 14.36662,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(3268, 8155.93018, -7573.09180, 18.19459,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(3268, 8155.92139, -7553.29834, 18.19116,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(4570, 8102.35938, -7624.73633, 57.35464,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4682, 8147.48584, -7497.79102, 30.86975,   0.00000, 0.00000, -809.99963);
	CreateDynamicObject(9910, 8157.54199, -7589.48975, 25.39473,   0.00000, 0.00000, -134.99997);
	CreateDynamicObject(9910, 8124.82959, -7589.49951, 25.33860,   0.00000, 0.00000, -134.99997);
	CreateDynamicObject(9910, 8170.17480, -7575.63916, 22.18861,   0.00000, 0.00000, -44.99999);
	CreateDynamicObject(9910, 8182.58154, -7519.66357, 27.21359,   0.00000, 0.00000, -225.00002);
	CreateDynamicObject(9910, 8188.66504, -7538.39795, 47.74644,   0.00000, 0.00000, -225.00002);
	CreateDynamicObject(9910, 8094.52393, -7495.31982, 25.78859,   0.00000, 0.00000, -315.00006);
	CreateDynamicObject(9917, 8215.37402, -7585.08643, 34.32093,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9917, 8081.14697, -7440.34424, 30.99039,   0.00000, 0.00000, 89.99998);
	CreateDynamicObject(18450, 8134.48389, -7523.63770, 19.93480,   0.00000, 0.00000, -179.99997);
	CreateDynamicObject(18450, 8060.39258, -7523.63232, -0.59019,   0.00000, 30.93972, -179.99997);
	CreateDynamicObject(8229, 8096.59375, -7534.57568, 16.94285,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(8229, 8108.25488, -7534.63477, 16.84285,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(8229, 8120.01416, -7534.65332, 16.86785,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(8229, 8172.48779, -7529.99268, 16.91785,   0.00000, 0.00000, -146.25000);
	CreateDynamicObject(3268, 8155.93701, -7553.31885, 15.28433,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(3268, 8155.91846, -7553.30127, 16.15442,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(3268, 8155.92578, -7553.29443, 17.02787,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(3268, 8155.92236, -7553.31152, 17.61886,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(975, 8167.36377, -7533.67383, 16.04131,   0.00000, 0.00000, 33.75002);
	CreateDynamicObject(975, 8155.01758, -7531.88770, 16.04131,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(975, 8146.13232, -7531.81982, 16.04131,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(975, 8141.76953, -7527.35010, 16.04131,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(8886, 8137.57275, -7544.12207, 17.79440,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(8886, 8137.58887, -7544.11523, 21.22811,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(8886, 8137.59082, -7543.86084, 21.21184,   179.62262, 0.00000, 89.99998);
	CreateDynamicObject(8886, 8112.26953, -7542.10889, 14.34441,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(8886, 8079.29980, -7586.33008, 14.34440,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(10773, 8105.36377, -7594.32227, 14.02387,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(8886, 8137.96680, -7520.91797, 14.34440,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(8886, 8158.07275, -7519.39404, 14.24440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8886, 8144.48389, -7548.29395, 17.79440,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(8886, 8166.40674, -7548.23535, 17.56940,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(8886, 8166.39990, -7553.76074, 17.59440,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(3268, 8155.93018, -7566.93262, 14.36662,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(8886, 8154.67920, -7556.83936, 14.26940,   0.00000, 0.00000, -269.99994);
	CreateDynamicObject(8886, 8155.95557, -7574.64160, 14.19440,   0.00000, 0.00000, -359.99997);
	CreateDynamicObject(8886, 8169.37842, -7570.28857, 14.19440,   0.00000, 0.00000, -269.99994);
	CreateDynamicObject(8886, 8142.33887, -7570.32471, 14.06940,   0.00000, 0.00000, -269.99994);
	CreateDynamicObject(8886, 8145.82861, -7581.98047, 17.54440,   0.00000, 0.00000, -359.99997);
	CreateDynamicObject(3268, 8155.93213, -7575.58691, 18.18340,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(8886, 8152.46289, -7582.12988, 14.21941,   0.00000, 0.00000, -359.99997);
	CreateDynamicObject(18260, 8154.32324, -7568.63037, 15.81481,   0.00000, 0.00000, -11.25003);
	CreateDynamicObject(18260, 8162.89551, -7581.72803, 15.81481,   0.00000, 0.00000, -179.99997);
	CreateDynamicObject(18260, 8157.46289, -7550.15869, 15.86481,   0.00000, 0.00000, -449.99997);
	CreateDynamicObject(5428, 8114.52100, -7494.75879, 15.39824,   -0.85944, 0.00000, -539.99988);
	CreateDynamicObject(8229, 8131.81934, -7534.68506, 17.06784,   0.00000, 0.00000, -180.00002);
	CreateDynamicObject(8229, 8143.81348, -7523.75293, 17.01785,   0.00000, 0.00000, -90.00004);
	CreateDynamicObject(5107, 7986.95850, -7524.04150, 21.34902,   0.00000, 0.00000, -179.99997);
	CreateDynamicObject(1492, 8169.92188, -7585.58643, 14.35846,   0.00000, 0.00000, -179.99997);
	CreateDynamicObject(1497, 8142.04199, -7585.52441, 14.35465,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1497, 8142.01172, -7563.33643, 14.35465,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18260, 8146.63477, -7567.67969, 15.93981,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(1497, 8142.00781, -7576.94775, 14.35465,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1437, 8135.71875, -7548.68555, 15.62885,   10.31324, 0.00000, 0.00000);
	CreateDynamicObject(1437, 8135.71680, -7548.73438, 20.07629,   10.31324, 0.00000, 0.00000);
	CreateDynamicObject(1437, 8145.01514, -7585.66992, 15.62885,   9.45380, 0.00000, 0.00000);
	CreateDynamicObject(1437, 8145.00586, -7585.61572, 20.79356,   9.45380, 0.00000, 0.00000);
	CreateDynamicObject(1437, 8172.58594, -7531.13623, 22.07913,   10.31324, 0.00000, 0.00000);
	CreateDynamicObject(1437, 8172.57861, -7531.14551, 28.25908,   10.31324, 0.00000, 0.00000);
	CreateDynamicObject(1437, 8172.46777, -7531.09863, 34.39047,   10.31324, 0.00000, 0.00000);
	CreateDynamicObject(1437, 8082.02832, -7568.90479, 16.55498,   10.31324, 0.00000, -89.99998);
	CreateDynamicObject(1437, 8081.99414, -7568.90918, 22.58348,   10.31324, 0.00000, -89.99998);
	CreateDynamicObject(1437, 8082.00537, -7568.91406, 25.83324,   10.31324, 0.00000, -89.99998);
	CreateDynamicObject(1437, 8077.97754, -7593.53369, 15.62885,   10.31324, 0.00000, -179.99997);
	CreateDynamicObject(1437, 8077.99121, -7593.52295, 21.74604,   10.31324, 0.00000, -179.99997);
	CreateDynamicObject(1437, 8077.99316, -7593.50000, 27.75269,   10.31324, 0.00000, -179.99997);
	CreateDynamicObject(1437, 8077.99023, -7593.45850, 32.17966,   10.31324, 0.00000, -179.99997);
	CreateDynamicObject(1635, 8071.80859, -7593.08936, 19.40563,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(1635, 8072.61182, -7519.09668, 18.12557,   0.00000, 0.00000, 89.99998);
	CreateDynamicObject(1635, 8067.36768, -7546.94043, 22.60154,   0.00000, 0.00000, 180.00002);
	CreateDynamicObject(1635, 8125.54248, -7590.24365, 18.56382,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(1635, 8150.25586, -7590.18408, 18.38124,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(1635, 8170.53369, -7536.85400, 20.93207,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1635, 8173.98975, -7524.76025, 24.34968,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1687, 8087.87109, -7585.62891, 38.60769,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1687, 8096.48926, -7589.43408, 38.60769,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1688, 8103.01904, -7585.02002, 38.81908,   0.00000, 0.00000, -269.99994);
	CreateDynamicObject(1688, 8114.15967, -7596.80127, 56.66604,   0.00000, 0.00000, -269.99994);
	CreateDynamicObject(1689, 8104.87305, -7589.12842, 39.00718,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1689, 8095.14209, -7598.22705, 56.85414,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1687, 8083.17236, -7596.31250, 56.45465,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(1687, 8132.16406, -7592.25244, 39.11093,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1687, 8145.69727, -7592.23193, 39.16706,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1687, 8173.56494, -7579.02344, 35.96095,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(1688, 8174.22949, -7588.15430, 36.17234,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1687, 8161.72461, -7562.52148, 26.92328,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(1688, 8162.31934, -7571.24707, 26.91760,   0.00000, 0.00000, -359.99997);
	CreateDynamicObject(1688, 8177.56982, -7527.30762, 41.19732,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1688, 8177.08105, -7516.06982, 41.19732,   0.00000, 0.00000, 89.99998);
	CreateDynamicObject(1687, 8175.26465, -7535.66211, 43.27273,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1687, 8174.27246, -7557.85156, 43.27273,   0.00000, 0.00000, 89.99998);
	CreateDynamicObject(1689, 8175.43945, -7544.75244, 43.67221,   0.00000, 0.00000, 89.99998);
	CreateDynamicObject(1689, 8093.44141, -7492.05273, 39.96041,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1687, 8085.01563, -7491.08838, 39.56092,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1687, 8070.73291, -7596.64941, 33.83205,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1688, 8078.04004, -7492.18604, 19.20200,   0.00000, 0.00000, -179.99997);
	CreateDynamicObject(1635, 8089.43848, -7494.62842, 22.50600,   0.00000, 0.00000, 89.99998);
	CreateDynamicObject(1635, 8091.17627, -7541.89551, 20.57246,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(1687, 8090.37109, -7552.17627, 33.17936,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(8661, 8087.17920, -7514.84473, 18.07185,   -89.38136, 0.00000, 0.00000);
	CreateDynamicObject(8661, 8129.15234, -7515.66211, 20.90702,   -89.38136, 0.00000, 0.00000);
	CreateDynamicObject(8661, 8157.16064, -7515.38672, 20.07667,   -89.38136, 0.00000, 0.00000);
	CreateDynamicObject(9910, 8170.84912, -7495.96387, 14.76549,   0.00000, 0.00000, -135.00003);
	CreateDynamicObject(9910, 8137.54297, -7500.13428, 17.75253,   0.00000, 0.00000, -135.00003);
	CreateDynamicObject(7921, 8085.90479, -7533.29688, 13.26363,   0.00000, 0.00000, -180.00002);

	//GIFTBOX
	GiftPosX = 1169.5314;
	GiftPosY = -1697.8749;
	GiftPosZ = 22.1044;
	giftboxobject = CreateDynamicObject(19054, GiftPosX,GiftPosY,GiftPosZ - 0.4, 0.0, 0.0, 0.2);
	giftbox3DText = CreateStreamed3DTextLabel("bluffs RPG Giftbox\nUse /getgift to get a gift",0xA9C4E4CC,GiftPosX,GiftPosY,GiftPosZ+0.25,8.0,0);

	// bug house
	CreateDynamicObject(19303, 442.47998, 509.23032, 1001.63678,   0.00000, 0.00000, 90.00000,-1,-1,-1,300.0);
	CreateDynamicObject(19304, 453.06204, 507.98209, 1001.92603,   0.00000, 0.00000, 90.00000,-1,-1,-1,300.0);
	CreateDynamicObject(19304, 453.11362, 509.63824, 1001.92603,   0.00000, 0.00000, 90.00000,-1,-1,-1,300.0);

	//NG BAZA
    gateng = CreateDynamicObject(19313, 135.2833, 1941.3331, 21.6932, 0.0000, 0.0000, 0.0000,-1,-1,-1,300.0);
    CreateDynamicObject(19312, 191.14, 1870.04, 21.48,0.0000, 0.0000, 0.0000,-1,-1,-1,300.0);

     // Hq Bug
    CreateDynamicObject(19357, 968.4691, -53.4128, 1001.8241, 0.0000, 0.0000, 0.0000,-1,-1,-1,300.0);

	//Lspd
	gatelspd = CreateObject(10184, 1592.67676, -1638.05225, 14.95110,   0.00000, 0.00000, -89.70000);

	//Lvpd
	gatelvpd = CreateDynamicObject(10184, 2335.89282, 2444.87451, 7.29770,   0.00000, 0.00000, -30.08000, -1, -1, -1, 300.0);
	gatelvpd2 = CreateDynamicObject(10184, 2294.02222, 2503.16650, 4.70800,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.0);
	CreateDynamicObject(955, 2273.52612, 2429.61206, 10.21940, 0.00000, 0.00000, 0.00000,-1,-1,-1,300.0); //usa
	CreateDynamicObject(1569, 2293.94946, 2492.96411, 2.28980,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.0); //dozatorul
	CreateDynamicObject(19313, 2251.27319, 2498.03394, 5.56540,   0.00000, 0.00000, -90.36000,-1,-1,-1,300.0); //gratii

    //Lspd Object
	CreateDynamicObject(2952, 1581.99524, -1637.93494, 12.36840,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(983, 1545.0706787109, -1635.6511230469, 13.237774848938, 0, 0, 0,-1,-1,-1,300.0);
    CreateDynamicObject(983, 1544.4979248047, -1620.7434082031, 13.238116264343, 0, 0, 0,-1,-1,-1,300.0);
    lspdbar = CreateDynamicObject(968, 1544.7007, -1630.7527, 13.2983, 0.0000, 90.0200, 90.0000,-1,-1,-1,300.0);

    //Lvpd Object
    lvpdbar = CreateDynamicObject(968, 2238.22021, 2450.44312, 10.58781, 0.0000, 90.0200, 90.0000,-1,-1,-1,300.0);

	//Garduri Fish
	CreateDynamicObject(970, 382.19919, -2042.00671, 7.32180,   0.00000, 0.00000, 0.00000,-1,-1,-1,500.0);
	CreateDynamicObject(970, 378.70398, -2045.08789, 7.32180,   0.00000, 0.00000, -91.98001,-1,-1,-1,500.0);
	CreateDynamicObject(970, 378.51715, -2050.44434, 7.32180,   0.00000, 0.00000, -92.76000,-1,-1,-1,500.0);
	CreateDynamicObject(970, 352.48499, -2050.70313, 7.29520, 0.00000, 0.00000, 0.00000,-1,-1,-1,500.0);
	CreateDynamicObject(897, -440.1703, 1438.4260, 20.1293,   0.00000, 0.00000, 32.16000);//mine object
	
	// strawberry bushes
	CreateDynamicObject(14468,-118.925872,97.370094,2.677187,0.000000,0.000000,72.000022);
	CreateDynamicObject(14468,-111.770423,119.642478,2.687187,0.000000,0.000000,71.800003);
	CreateDynamicObject(14468,-102.665382,146.928131,2.635536,0.000000,0.000000,69.799987);
	CreateDynamicObject(14468,-114.417427,137.766021,2.752832,0.000000,0.000000,71.699974);
	CreateDynamicObject(14468,-122.647964,112.837081,2.537188,0.000000,0.000000,60.699996);
	CreateDynamicObject(14468,-127.107131,127.238517,2.618841,0.000000,0.000000,64.999969);
	CreateDynamicObject(14468,-136.231994,103.201309,2.767187,0.000000,0.000000,52.700000);
	CreateDynamicObject(14468,-118.234802,153.577636,3.071757,0.000000,0.000000,71.799980);
	CreateDynamicObject(14468,-129.650619,145.975677,3.114523,0.000000,0.000000,66.900001);
	CreateDynamicObject(14468,-139.216079,119.849624,2.839200,1.800001,0.000000,59.899993);
	CreateDynamicObject(14468,-152.336135,109.459480,2.839714,0.000000,0.000000,55.699985);
	CreateDynamicObject(14468,-142.332672,136.376892,3.251166,0.000000,0.000000,63.800003);
	CreateDynamicObject(14468,-134.835662,158.919143,4.037118,0.000000,0.000000,63.099994);
	CreateDynamicObject(14468,-155.220565,127.092094,3.089858,0.000000,0.000000,65.599990);
	CreateDynamicObject(14468,-147.195373,151.406204,4.205470,0.000000,0.000000,58.600021);
	CreateDynamicObject(14468,-151.601669,163.456130,5.268763,-1.000000,-5.599995,58.899997);
	CreateDynamicObject(14468,-159.051376,141.946212,3.675622,0.000000,0.000000,67.699996);
	CreateDynamicObject(14468,-167.965362,114.951469,2.798941,0.000000,0.000000,70.300010);
	CreateDynamicObject(14468,-171.546722,131.723800,3.298267,0.000000,-7.499993,67.100006);
	CreateDynamicObject(14468,-161.955337,160.237854,5.345029,0.000000,-7.000004,54.399997);
	CreateDynamicObject(14468,-168.078750,169.485809,7.059284,0.000000,-7.099999,54.700000);
	CreateDynamicObject(14468,-174.028869,151.099700,4.966668,0.000000,-2.900000,66.299987);
	CreateDynamicObject(14468,-184.247406,120.295433,2.955419,0.000000,-7.000001,61.199993);
	CreateDynamicObject(14468,-185.954437,143.959625,4.756767,0.000000,-5.299999,52.099994);
	CreateDynamicObject(14468,-178.177947,165.631332,6.955915,0.000000,-6.600001,68.599983);
	CreateDynamicObject(14468,-185.115692,174.122268,8.079847,2.699999,-11.899999,68.299995);
	CreateDynamicObject(14468,-190.674560,159.539840,6.061470,0.000000,-6.699994,54.299999);
	CreateDynamicObject(14468,-199.278015,132.579055,3.000188,0.000000,-6.700000,74.600013);
	CreateDynamicObject(14468,-201.442276,151.353988,4.348612,0.000000,-4.699999,67.000000);
	CreateDynamicObject(14468,-194.560394,169.320220,7.115818,0.000000,-9.399996,60.699996);
	CreateDynamicObject(14468,-206.987258,162.197753,5.414794,0.000000,-11.700001,59.299995);
	CreateDynamicObject(14468,-213.302337,144.949478,3.194112,0.000000,-8.999999,65.199996);
	CreateDynamicObject(14468,-134.287643,108.678611,2.437188,0.000000,0.000000,69.700004);
	CreateDynamicObject(14468,-131.462478,113.786476,2.548646,0.000000,-4.099999,60.599994);
	CreateDynamicObject(14468,-129.035659,119.410209,2.647187,0.000000,0.000000,62.699993);
	CreateDynamicObject(14468,-124.741340,132.772994,2.711935,0.000000,-2.999999,69.000015);
	CreateDynamicObject(14468,-123.148094,138.175674,2.651063,0.000000,-1.399999,73.400001);
	CreateDynamicObject(14468,-120.678352,143.209762,2.872584,0.000000,-4.099999,62.499996);
	CreateDynamicObject(14468,-119.036041,148.075942,2.991926,0.000000,0.000000,73.000000);
	CreateDynamicObject(14468,-109.809700,149.093322,2.827517,0.000000,0.000000,72.899993);
	CreateDynamicObject(14468,-111.969436,143.212921,2.664301,0.000000,0.000000,73.000007);
	CreateDynamicObject(14468,-115.519149,131.181274,2.597187,0.000000,0.000000,71.599983);
	CreateDynamicObject(14468,-117.560096,125.436889,2.537188,0.000000,0.000000,71.999992);
	CreateDynamicObject(14468,-119.684738,119.169509,2.747802,0.000000,-3.299999,68.899993);
	CreateDynamicObject(14468,-123.892280,106.056854,2.717187,0.000000,0.000000,70.200012);
	CreateDynamicObject(14468,-126.232055,99.854888,2.577188,0.000000,0.000000,71.399986);
	CreateDynamicObject(14468,-117.026901,104.144943,2.527188,0.000000,0.000000,65.699996);
	CreateDynamicObject(14468,-114.828758,110.356124,2.547188,0.000000,0.000000,63.099998);
	CreateDynamicObject(14468,-109.404014,125.393844,2.437188,0.000000,0.000000,72.199996);
	CreateDynamicObject(14468,-107.228889,131.749633,2.607187,0.000000,0.000000,71.099998);
	CreateDynamicObject(14468,-104.690650,139.643554,2.694262,0.000000,0.000000,72.800003);
	CreateDynamicObject(14468,-126.079147,155.189361,3.609264,0.000000,-4.500000,70.900001);
	CreateDynamicObject(14468,-127.439521,150.746536,3.446117,0.000000,-7.300000,71.099998);
	CreateDynamicObject(14468,-131.578979,139.509933,3.035497,0.000000,-2.699996,72.399986);
	CreateDynamicObject(14468,-134.061828,133.140457,2.915334,0.000000,-0.899999,72.399986);
	CreateDynamicObject(14468,-136.251266,125.995613,3.082990,0.000000,-3.299999,70.900001);
	CreateDynamicObject(14468,-141.181854,113.543670,2.618315,0.000000,-3.499999,65.299995);
	CreateDynamicObject(14468,-143.860565,105.310188,2.491455,0.000000,-5.099999,69.499992);
	CreateDynamicObject(14468,-149.792770,115.123786,2.827398,0.000000,-1.500001,69.100006);
	CreateDynamicObject(14468,-147.543243,121.544563,2.872433,0.000000,-3.200001,68.199981);
	CreateDynamicObject(14468,-144.791519,128.332122,3.042853,0.000000,-1.699999,71.700012);
	CreateDynamicObject(14468,-139.856216,142.829406,3.347315,0.000000,-2.000003,68.699989);
	CreateDynamicObject(14468,-137.618240,149.185424,3.326799,0.000000,-2.299996,71.299972);
	CreateDynamicObject(14468,-143.470703,159.200790,4.710304,0.000000,-4.600001,74.600006);
	CreateDynamicObject(14468,-148.513229,145.009841,3.634053,0.000000,-2.899996,72.400001);
	CreateDynamicObject(14468,-145.269348,155.238006,4.270707,0.000000,-5.799999,67.499992);
	CreateDynamicObject(14468,-150.495925,139.082687,3.291377,0.000000,-2.200000,71.999992);
	CreateDynamicObject(14468,-152.525146,132.816772,3.214575,0.000000,-1.100000,70.199996);
	CreateDynamicObject(14468,-157.056015,120.854606,2.895458,0.000000,-0.900000,72.899986);
	CreateDynamicObject(14468,-158.804931,115.561943,2.787823,0.000000,-1.299999,67.100006);
	CreateDynamicObject(14468,-160.657516,111.356399,2.741663,0.000000,0.000000,66.899986);
	CreateDynamicObject(14468,-166.260833,120.597831,2.828362,0.000000,-2.499999,68.099998);
	CreateDynamicObject(14468,-164.089187,126.306053,3.009140,0.000000,-3.499999,67.199989);
	CreateDynamicObject(14468,-161.750442,132.090225,3.291979,0.000000,-4.399999,66.399993);
	CreateDynamicObject(14468,-160.610855,137.022949,3.344565,0.000000,-2.800000,70.099998);
	CreateDynamicObject(14468,-157.257995,147.304077,3.967139,0.000000,-3.900000,69.299987);
	CreateDynamicObject(14468,-155.459182,152.659896,4.493640,0.000000,-5.199999,69.800003);
	CreateDynamicObject(14468,-153.725128,158.154479,4.841969,0.000000,-3.500000,64.999984);
	CreateDynamicObject(14468,-160.092636,165.811538,6.210996,0.000000,-7.300000,74.399978);
	CreateDynamicObject(14468,-164.025466,154.788497,4.962085,0.000000,-5.000000,70.500007);
	CreateDynamicObject(14468,-165.379196,149.305633,4.634742,0.000000,-2.999999,79.599998);
	CreateDynamicObject(14468,-167.347991,144.131454,4.359837,0.000000,-5.800000,70.299995);
	CreateDynamicObject(14468,-169.424530,138.054870,3.703424,0.000000,-6.199999,66.000007);
	CreateDynamicObject(14468,-173.784271,125.304252,3.058410,0.000000,-1.800000,73.699989);
	CreateDynamicObject(14468,-176.402664,118.799003,2.689545,0.000000,-4.699999,64.500000);
	CreateDynamicObject(14468,-182.921371,125.561363,3.338023,0.000000,-6.899998,61.299991);
	CreateDynamicObject(14468,-180.971847,131.239532,3.726360,0.000000,-3.799998,66.199996);
	CreateDynamicObject(14468,-178.744003,137.112777,4.287835,0.000000,-3.599999,68.799995);
	CreateDynamicObject(14468,-176.924621,142.312713,4.568756,0.000000,-6.699999,68.499992);
	CreateDynamicObject(14468,-175.376327,147.071594,4.917738,0.000000,-5.000000,67.499992);
	CreateDynamicObject(14468,-172.508895,156.339248,5.319609,0.000000,-4.300001,71.699996);
	CreateDynamicObject(14468,-170.586685,161.237777,6.034217,0.000000,-5.999999,78.199996);
	CreateDynamicObject(14468,-169.448104,165.987579,6.624076,0.000000,-8.200001,68.000000);
	CreateDynamicObject(14468,-176.230422,170.902023,7.854707,0.000000,-4.100000,73.299995);
	CreateDynamicObject(14468,-180.305191,159.670394,6.162918,0.000000,-4.399999,65.400001);
	CreateDynamicObject(14468,-182.491744,154.402008,5.787098,0.000000,-4.199999,77.900009);
	CreateDynamicObject(14468,-184.334869,149.145614,5.146570,0.000000,-3.599999,67.699996);
	CreateDynamicObject(14468,-187.810516,138.865951,4.691677,0.000000,-4.700000,71.899993);
	CreateDynamicObject(14468,-189.685058,133.753952,4.056702,0.000000,-6.099998,72.400009);
	CreateDynamicObject(14468,-191.782531,127.100234,3.215810,0.000000,-9.200001,64.799987);
	CreateDynamicObject(14468,-197.182830,138.050628,3.822801,0.000000,-4.899999,66.699974);
	CreateDynamicObject(14468,-195.054336,143.672500,4.508543,0.000000,-5.599998,68.699996);
	CreateDynamicObject(14468,-193.131484,148.935989,5.087290,0.000000,-5.799999,69.000007);
	CreateDynamicObject(14468,-191.654525,154.368621,5.618639,0.000000,-3.899999,79.199981);
	CreateDynamicObject(14468,-188.269943,164.368255,6.955970,0.000000,-6.500000,71.899978);
	CreateDynamicObject(14468,-186.513015,169.230178,7.755801,0.000000,-6.899996,79.999992);
	CreateDynamicObject(14468,-192.865020,173.995315,7.771668,0.000000,-4.299999,71.400009);
	CreateDynamicObject(14468,-196.549087,164.003875,6.415810,0.000000,-10.699998,73.999992);
	CreateDynamicObject(14468,-198.501785,159.049880,5.674416,0.000000,-5.500000,78.099990);
	CreateDynamicObject(14468,-200.317550,155.206298,5.008619,0.000000,-7.699996,72.799995);
	CreateDynamicObject(14468,-203.397186,146.784942,4.077305,0.000000,-6.399998,73.100006);
	CreateDynamicObject(14468,-205.028030,141.440048,3.702324,0.000000,-5.700000,71.800003);
	CreateDynamicObject(14468,-207.060409,136.896286,2.881639,0.000000,-3.299999,72.899986);
	CreateDynamicObject(14468,-215.022979,141.660797,2.822205,0.000000,-3.799998,72.300010);
	CreateDynamicObject(14468,-211.859054,149.532196,3.833880,0.000000,-4.300000,72.499992);
	CreateDynamicObject(14468,-209.919616,153.533386,4.498275,0.000000,-6.099997,77.099983);
	CreateDynamicObject(14468,-208.418640,158.079864,5.003709,0.000000,-8.100000,75.099998);
	CreateDynamicObject(14468,-204.537246,166.732742,6.225613,0.000000,-7.599999,69.899993);
	CreateDynamicObject(14468,-202.040618,172.187820,7.416848,0.000000,-9.599998,70.699981);
	return 1;
}

stock LoadTextdraws()
{
    Date = TextDrawCreate(549.599975, 14.933262, "31.12.2018");
	TextDrawLetterSize(Date, 0.275599, 1.555199);
	TextDrawAlignment(Date, 1);
	TextDrawColor(Date, -1);
	TextDrawSetShadow(Date, 0);
	TextDrawSetOutline(Date, 1);
	TextDrawBackgroundColor(Date, 51);
	TextDrawFont(Date, 2);
	TextDrawSetProportional(Date, 1);

	Time = TextDrawCreate(549.600036, 26.133247, "18:24");
	TextDrawLetterSize(Time, 0.306000, 1.338666);
	TextDrawAlignment(Time, 1);
	TextDrawColor(Time, -1);
	TextDrawSetShadow(Time, 0);
	TextDrawSetOutline(Time, 1);
	TextDrawBackgroundColor(Time, 51);
	TextDrawFont(Time, 2);
	TextDrawSetProportional(Time, 1);
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
   new newcar = GetClosestVehicle2(playerid, 40);
   new veh = GetPlayerVehicleID(playerid);
   new engine,lights,alarm,doors,bonnet,boot,objective;
   if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
   if(newkeys & KEY_FIRE || newkeys & KEY_AIM)
   {
	   new weapon = GetPlayerWeapon(playerid),
           slot = GetWeaponSlot(weapon);
	   if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && WeaponData[playerid][slot] == false && slot != 0 && weapon != 46  && GetPlayerWeapon(playerid) != 9 && curatj[playerid] == 0)
       {
           ResetPlayerWeaponsEx(playerid);
           ResetPlayerWeapons(playerid);
		   new sendername[25],gunname[50],string[256];
		   GetWeaponNameEx(weapon,gunname,sizeof(gunname));
		   GetPlayerName(playerid, sendername, sizeof(sendername));
		   format(string, sizeof(string), "(N) %s (%d, level %d) may be using weapon hack, weapon created: %s.",sendername, playerid, PlayerInfo[playerid][pLevel], gunname);
		   ABroadCast(COLOR_RED,string,1);
		   return 1;
	   }
   }
   if(newkeys & KEY_FIRE) //Anti DM la spawn
   {
		if(!IsPlayerInAnyVehicle(playerid))
		{
			new wep = GetPlayerWeapon(playerid);
			if((wep > 0 && wep < 43) && IsPlayerInRangeOfPoint(playerid, 50,1213.9047,-1747.8059,13.5947) && !IsACop(playerid) && GetPlayerVirtualWorld(playerid) < 1)
			{
	    		SetPlayerArmedWeapon(playerid,0);
				SendClientMessage(playerid, COLOR_RED, "Nu poti folosi armele in zona spawn-ului. Poti petrece 30-90 minute in inchisoare pentru DM!");
			}
   		}
   		if(EnableBoast[playerid] == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
			new Float:vx,Float:vy,Float:vz;
			GetVehicleVelocity(GetPlayerVehicleID(playerid),vx,vy,vz);
			SetVehicleVelocity(GetPlayerVehicleID(playerid), vx * 1.8, vy *1.8, vz * 1.8);
        }	
        if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) && Trucker[playerid] != 0)
		{
			new Float:cposx,Float:cposy,Float:cposz,Float:cposx2,Float:cposy2,Float:cposz2,Float:distance;
			GetVehiclePos(GetPlayerVehicleID(playerid), cposx, cposy, cposz);
			GetVehiclePos(viddd[playerid], cposx2, cposy2, cposz2);
			distance = GetDistanceBetweenPoints(cposx, cposy, cposz, cposx2, cposy2, cposz2);
			if(distance > 30) return SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} Your trailer is too far."); 
			AttachTrailerToVehicle(viddd[playerid],GetPlayerVehicleID(playerid));
			new string[128];
			format(string,sizeof(string), "(Job){FFFFFF} You attached trailer %d on vehicle %d with success.",viddd[playerid], GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, COLOR_JOB, string);
		}
   }
   if(newkeys & KEY_WALK)
   {
		if(Spectate[playerid] != -1)
		{
			TogglePlayerControllable(playerid, 1);
			TogglePlayerSpectating(playerid, 0);
			SetPlayerInterior(playerid,Unspec[playerid][sPint]);
			PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
			PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
			Unspec[playerid][sLocal] = -1;
			gTeam[playerid] = PlayerInfo[playerid][pTeam];
			SetPlayerToTeamColor(playerid);
	        PlayerTextDrawHide(playerid, TextDrawSpec[playerid][1]);
		    PlayerTextDrawHide(playerid, TextDrawSpec[playerid][2]);
			PlayerTextDrawHide(playerid, TextDrawSpec[playerid][3]);
		    PlayerTextDrawHide(playerid, TextDrawSpec[playerid][4]);
		    PlayerTextDrawHide(playerid, TextDrawSpec[playerid][5]);
			Spectate[playerid] = -1;
			togfind[playerid] = 0;
		}
		if(PlayerToPoint(3.0,playerid, 1902.8530,99.2951,33.5180) && PlayerInfo[playerid][pBeePlaced] == 2) {
			new prize = random(500000) + 100000*PlayerInfo[playerid][pLevel];
			new strp[128];
			format(strp, sizeof strp, "(Beehives){FFFFFF} You received %s$ from collecting product of your beehives.", FormatNumber(prize));
			SendClientMessage(playerid, COLOR_JOB, strp);
			PlayerInfo[playerid][pBeePlaced] = 0;
			ResetPlayerCash(playerid);
			GivePlayerCash(playerid, prize);
			Update(playerid, pBeePlacedx);
			DestroyBeeHiveObjects(playerid);
		}
   }
   if(IsKeyJustDown(KEY_SECONDARY_ATTACK, newkeys, oldkeys) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
   {
   		if(IsABoat(newcar))
		{
		    if(PlayerInfo[playerid][pBoatLic] < 1)
			{
                if(TakingLesson[playerid] == 1) { }
                else 
                {
				    SendClientMessage(playerid,COLOR_GREY, "You don't have a boat license.");
				    ClearAnimations(playerid); 
				}
			}
		}
		if(IsAPlane(newcar))
		{
		    if(PlayerInfo[playerid][pFlyLic] < 1)
			{
			    if(TakingLesson[playerid] == 1) { }
			    else 
			    {
				    SendClientMessage(playerid, COLOR_GREY, "You don't have a flying license.");
				    ClearAnimations(playerid); 
				}
			}
		}
		if(GetVehicleModel(newcar) >= 400 && GetVehicleModel(newcar) <= 611)
		{
			if(PlayerInfo[playerid][pCarLic] < 1)
			{
			    if(IsABike(newcar) || IsAPlane(newcar) || GetVehicleModel(newcar) == 462) { }
			    else
			    {
					if(TakingLesson[playerid] == 1) { }
					else 
					{
					 	SendClientMessage(playerid,COLOR_GREY, "You don't have a driving license.");
		                ClearAnimations(playerid);
					}
				}
			}
		}
		for(new x = 0; x < sizeof(VehicleInfo); x++)
		{
			if(VehicleInfo[x][vehCarID] == newcar)
			{
				if(VehicleInfo[x][vehGroup] != 0 && VehicleInfo[x][vehGroup] != 30 && VehicleInfo[x][vehGroup] != 8 && VehicleInfo[x][vehGroup] != 2 && VehicleInfo[x][vehGroup] != 3 && VehicleInfo[x][vehGroup] != 1)
				{
					new strr[128];
					if(PlayerInfo[playerid][pMember] == VehicleInfo[x][vehGroup]) { }
					else
					{
						ClearAnimations(playerid);
						format(strr,sizeof(strr),"This vehicle is locked to group %s.",DynamicFactions[VehicleInfo[x][vehGroup]][fName]);
						SendClientMessage(playerid, COLOR_WHITE, strr);
					}
				}
				if(VehicleInfo[x][vehJob] != 0)
				{
					if(AdminDuty[playerid] != 1)
					{
						if(VehicleInfo[x][vehJob] == 5 && PlayerInfo[playerid][pJob] != 5)
						{
							ClearAnimations(playerid);
							SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} You need to be a pizza boy to drive this car.");
						}
						if(VehicleInfo[x][vehJob] == 6 && PlayerInfo[playerid][pJob] != 6)
						{
							ClearAnimations(playerid);
							SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} You need to be a farmer to drive this car.");
						}
						if(VehicleInfo[x][vehJob] == 7 && PlayerInfo[playerid][pJob] != 7)
						{
							ClearAnimations(playerid);
							SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} You need to be a bus driver to drive this car.");
						}
						if(VehicleInfo[x][vehJob] == 8 && PlayerInfo[playerid][pJob] != 8)
						{
							ClearAnimations(playerid);
							SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} You need to be a mechanic to drive this car.");
						}
						if(VehicleInfo[x][vehJob] == 10 && PlayerInfo[playerid][pJob] != 10)
						{
							ClearAnimations(playerid);
							SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} You need to be a garbage man to drive this car.");
						}
						if(VehicleInfo[x][vehJob] == 14 && PlayerInfo[playerid][pJob] != 14)
						{
							ClearAnimations(playerid);
							SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} You need to be a trucker to drive this car.");
						}
					}
				}
			}
		}
   }
   if((IsACBUGWeapon(playerid) && RELEASED(KEY_FIRE)) && newkeys != KEY_FIRE && newkeys & KEY_CROUCH)
   {
       ApplyAnimation ( playerid , "PED" , "getup" , 4.1 , 0 , 0 , 0 , 0 , 0 ) ;
       SendClientMessage(playerid,COLOR_WHITE,"{AA3333}Pe serverul nostru este interzis c-bug, risti ban 3 zile.");
   }
   if((newkeys==KEY_CTRL_BACK )&&(IsPlayerInAnyVehicle(playerid))&&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
	{
		new stringy[MAX_STRING],strings[500],listen[20];
		for(new x; x < 20; x++)
		{
			foreach(new i : Player)
			{
				if(Listening[i] == x) listen[x]++;
			}
		}
		format(strings, sizeof(strings), "Radio station\tListeners\n{FF0000}Turn Off Radio\t\nPro FM Romania\t%d\nRadio Bandit Romania\t%d\nRadio Taraf Romania\t%d\nRadio Hot Romania\t%d\nRadio Gangsta Dance\t%d\nRadio Gangsta Manele\t%d\n.977 Hitz\t%d\n",listen[0],listen[1],listen[2],listen[3],listen[4],listen[5],listen[6]);
		strcat(stringy, strings);
		format(strings, sizeof(strings), ".977 Mix\t%d\n.977 Alternative\t%d\nRadio BBC One UK\t%d\nDubstep.fm\t%d\nRadio Hit Romania\t%d\nRadio ClubMix Romania\t%d\nKiss FM Romania [Audio Plugin]\t%d\nRadio Zu Romania [Audio Plugin]\t%d\n",listen[7],listen[8],listen[9],listen[10],listen[11],listen[12],listen[13],listen[14]);
		strcat(stringy, strings);
		format(strings, sizeof(strings), "Radio Popular\t%d\nTrap.FM\t%d\nRadio Tequila Hip Hop\t%d",listen[15],listen[16],listen[17]);
        strcat(stringy, strings);
		ShowPlayerDialog(playerid, DIALOG_RADIO, DIALOG_STYLE_TABLIST_HEADERS, "Vehicle Radio", stringy, "Play", "Cancel");
	}
   if(newkeys & KEY_YES)
    {
		if(GarbageTimer[playerid] == 0)
		{
			if(TrashID[playerid] != -1)
			{
				for(new x; x < sizeof(CHKGarbage); x++)
				{
					if(TrashID[playerid] == x)
					{
						if(IsPlayerInRangeOfPoint(playerid,2,CHKGarbage[x][0], CHKGarbage[x][1], CHKGarbage[x][2]))
						{
							SetPlayerAttachedObject(playerid, 9, 1265, 6, -0.083000, 0.326000, -0.324999, -115.199836, -26.500011, 3.699998, 0.729000, 0.830000, 0.915000);
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
							GarbageTimer[playerid] = 60;
							TrashID[playerid] = -1;
							GameTextForPlayer(playerid, "~w~press ~r~y~w~ behind the garbage vehicle.", 5000, 3);
						}
					}
				}
			}
		}
		else
		{
			new Float:rot,Float:x,Float:y,Float:z,strings[128];
			GetVehicleZAngle(JobCar[playerid], rot);
			rot = 360 - rot;
			GetVehiclePos(JobCar[playerid], x, y, z);
			x = floatsin(rot,degrees) * -4.0 + floatcos(rot,degrees) * 0.0 + x;
			y = floatcos(rot,degrees) * -4.0 - floatsin(rot,degrees) * 0.0 + y;
			z = 0.0 + z;
			if(IsPlayerInRangeOfPoint(playerid,2.0, x, y, z))
			{
				RemovePlayerAttachedObject(playerid, 9);
				if(PlayerInfo[playerid][pPet] != 0 && PlayerInfo[playerid][pPetStatus] != 0) AttachPet(playerid);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				GarbageTimer[playerid] = 0;
				new find,Float:distance,maxim;
				if(PlayerInfo[playerid][pGarbageSkill] == 1) maxim = 75;
				else if(PlayerInfo[playerid][pGarbageSkill] == 2) maxim = 125;
				else if(PlayerInfo[playerid][pGarbageSkill] == 3) maxim = 175;
				else if(PlayerInfo[playerid][pGarbageSkill] == 4) maxim = 250;
				else if(PlayerInfo[playerid][pGarbageSkill] == 5) maxim = 350;
				else if(PlayerInfo[playerid][pGarbageSkill] == 6) maxim = 500;
				if((GarbageInCar[JobCar[playerid]] + GarbageCollected[playerid]) >= maxim)
				{
					GarbageInCar[JobCar[playerid]] = maxim;
				}
				else
				{
					GarbageInCar[JobCar[playerid]] += GarbageCollected[playerid];
				}
				format(strings,sizeof(strings),"you collected %d kg of garbage~n~~r~garbage collected in car:~n~~g~%d/%d kg",GarbageCollected[playerid],GarbageInCar[JobCar[playerid]],maxim);
				GameTextForPlayer(playerid, strings, 5000, 3);
				for(new t; t < 1000; t++)
				{
					new rand = random(sizeof(CHKGarbage));
					if(!IsPlayerInRangeOfPoint(playerid,1000.0, CHKGarbage[rand][0], CHKGarbage[rand][1], CHKGarbage[rand][2])) find = 1;
					if(find == 1)
					{
						GetPlayerPos(playerid, x, y, z);
						distance = GetDistanceBetweenPoints(x, y, z, CHKGarbage[rand][0], CHKGarbage[rand][1], CHKGarbage[rand][2]);
						format(strings,sizeof(strings),"(Job){FFFFFF} Go to the checkpoint to start collect garbage. Distance: %.0fm.",distance);
						SendClientMessage(playerid, COLOR_JOB, strings);
						SetPlayerCheckpoint(playerid, CHKGarbage[rand][0],CHKGarbage[rand][1],CHKGarbage[rand][2], 2.0);
						if(floatround(distance, floatround_round) >= 1000 && floatround(distance, floatround_round) <= 1500) GarbageCollected[playerid] = 5 + random(5);
						else if(floatround(distance, floatround_round) >= 1501 && floatround(distance, floatround_round) <= 2000) GarbageCollected[playerid] = 7 + random(5);
						else if(floatround(distance, floatround_round) >= 2001 && floatround(distance, floatround_round) <= 2500) GarbageCollected[playerid] = 9 + random(5);
						else if(floatround(distance, floatround_round) >= 2501 && floatround(distance, floatround_round) <= 3000) GarbageCollected[playerid] = 11 + random(5);
						else if(floatround(distance, floatround_round) >= 3001) GarbageCollected[playerid] = 14 + random(5);
						CP[playerid] = 10972;
						TrashID[playerid] = rand;
						break;
					}
				}
			}
			else
			{
				format(strings,sizeof(strings),"You are not behind the garbage car (id %d).",JobCar[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTGREEN3, strings);
			}
		}
	}
   if(newkeys & KEY_NO)
   {
		new string[128];
		for(new v; v < MAX_PERSONAL_VEHICLES; v++)
		{
   			if(CheckPlayerDistanceToVehicle(5.0, playerid, PlayerInfo[playerid][pCarID][v]))
			{
	 			if(PlayerInfo[playerid][pCarLock][v] == 1)
		  		{
   					GetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
	  	    		SetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,0,bonnet,boot,objective);
					format(string, sizeof(string), "~h~%s~n~~g~Unlocked",aVehicleNames[PlayerInfo[playerid][pCarModel][v] - 400]);
					GameTextForPlayer(playerid, string, 5000, 3);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pCarLock][v] = 0;
					gCarLock[PlayerInfo[playerid][pCarID][v]] = 0;
					cUpdate(playerid, v, cLockx);
					return 1;
				}
				else
				{
 					GetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
	    			SetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,1,bonnet,boot,objective);
					SetVehicleParamsForPlayer(PlayerInfo[playerid][pCarID][v],playerid,0,0);
					format(string, sizeof(string), "~h~%s~n~~r~Locked",aVehicleNames[PlayerInfo[playerid][pCarModel][v] - 400]);
					GameTextForPlayer(playerid, string, 5000, 3);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pCarLock][v] = 1;
					gCarLock[PlayerInfo[playerid][pCarID][v]] = 1;
					cUpdate(playerid, v, cLockx);
     				return 1;
				}
			}
			else if(CheckPlayerDistanceToVehicle(5.0, playerid, HireCar[playerid]))
			{
				new carid = HireCar[playerid];
				if(gCarLock[carid] == 0)
		        {
			        new vehicles = GetVehicleModel(carid) - 400;
				    format(string, sizeof(string), "~h~%s~n~~r~Locked", aVehicleNames[vehicles]);
				    GameTextForPlayer(playerid, string, 5000, 3);
		  	        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 1;
	    			GetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,1,bonnet,boot,objective);
		            return 1;
			    }
				else if(gCarLock[carid] == 1)
				{
					new vehicles = GetVehicleModel(carid) - 400;
					format(string, sizeof(string), "~h~%s~n~~g~Unlocked", aVehicleNames[vehicles]);
				    GameTextForPlayer(playerid, string, 5000, 3);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 0;
	    			GetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,0,bonnet,boot,objective);
		            return 1;
				}
			}
			else if(CheckPlayerDistanceToVehicle(5.0, playerid, RentCar[playerid]))
			{
				new carid = RentCar[playerid];
				if(gCarLock[carid] == 0)
		        {
				    GameTextForPlayer(playerid, "~h~rentcar~n~~r~locked", 5000, 3);
		  	        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 1;
	    			GetVehicleParamsEx(RentCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(RentCar[playerid],engine,lights,alarm,1,bonnet,boot,objective);
		            return 1;
			    }
				else if(gCarLock[carid] == 1)
				{
				    GameTextForPlayer(playerid, "~h~rentcar~n~~g~unlocked", 5000, 3);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 0;
	    			GetVehicleParamsEx(RentCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(RentCar[playerid],engine,lights,alarm,0,bonnet,boot,objective);
		            return 1;
				}
			}
			else if(CheckPlayerDistanceToVehicle(5.0, playerid, JobCar[playerid]))
			{
				new carid = JobCar[playerid];
				if(gCarLock[carid] == 0)
		        {
			        new vehicles = GetVehicleModel(carid) - 400;
				    format(string, sizeof(string), "~h~%s~n~~r~Locked", aVehicleNames[vehicles]);
				    GameTextForPlayer(playerid, string, 5000, 3);
		  	        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 1;
	    			GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(carid,engine,lights,alarm,1,bonnet,boot,objective);
		            return 1;
			    }
				else if(gCarLock[carid] == 1)
				{
					new vehicles = GetVehicleModel(carid) - 400;
					format(string, sizeof(string), "~h~%s~n~~g~Unlocked", aVehicleNames[vehicles]);
				    GameTextForPlayer(playerid, string, 5000, 3);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 0;
	    			GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(carid,engine,lights,alarm,0,bonnet,boot,objective);
		            return 1;
				}
			}
		}
	}
   if(newkeys & KEY_CROUCH)
   {
       if(IsACop(playerid))
       {
		   if(PlayerToPoint(15.0, playerid,1588.6552, -1637.9025, 15.0358))
           {
               MoveObject(gatelspd,1592.65674, -1638.05286, 9.89110,2, -1000.0, -1000.0, -1000.0);
               SetTimer("lspdgateclose" ,9000 ,false);
               return 1;
           }
           if(PlayerToPoint(15.0, playerid,2334.8999000, 2444.3999000, 8.3000000))
           {
               MoveDynamicObject(gatelvpd, 2335.89282, 2444.87451, 2.01770,2, -1000.0, -1000.0, -1000.0);
               SetTimer("lvpdgateclose" ,9000 ,false);
               return 1;
           }
           if(PlayerToPoint(15.0, playerid,2295.3000000, 2507.0000000, 5.7000000))
           {
               MoveDynamicObject(gatelvpd2, 2294.02222, 2503.16650, -0.27200,2, -1000.0, -1000.0, -1000.0);
               SetTimer("lvpdgateclose2" ,9000 ,false);
               return 1;
           }
		   if(PlayerToPoint(15.0, playerid,135.2833, 1941.3331, 21.6932))
           {
               MoveDynamicObject(gateng,122.0023, 1941.4100, 21.6932,2, -1000.0, -1000.0, -1000.0);
               SetTimer("nggateclose" ,9000 ,false);
               return 1;
           }
		   if(PlayerToPoint(15.0, playerid,1544.7007, -1630.7527, 13.2983))
           {
               MoveDynamicObject(lspdbar,1544.7007, -1630.7527, 13.2983,1,0.0000, 0.0000, 90.0000);
               SetTimer("lspdbarclose" ,9000 ,false);
               return 1;
           }
           if(PlayerToPoint(15.0, playerid,2238.22021, 2450.44312, 10.58781))
           {
               MoveDynamicObject(lvpdbar,2238.22021, 2450.44312, 10.58781,1,0.0000, 0.0000, 90.0000);
               SetTimer("lvpdbarclose" ,9000 ,false);
               return 1;
           }
	   }
   }
   if(newkeys == KEY_LOOK_BEHIND)
   {
	   if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	   {
		   new idcar = GetPlayerVehicleID(playerid),string[128],sendername[25];
		   if(IsABike(idcar)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi comanda /engine pentru biciclete.", "(Error){FFFFFF} You can't do that for bikes!");
		   if(Refueling[playerid] == 0)
	  	   {
     	       if(vehEngine[idcar] == 0)
        	   {
				   vehEngine[idcar] = 1;
	               GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
	               SetVehicleParamsEx(idcar,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
	               new vehicle;
	               vehicle = GetVehicleModel(idcar) - 400;
	    		   GetPlayerName(playerid, sendername, sizeof(sendername));
	               SetPVarInt(playerid, "Engine", 1);
	               if(Undercover[playerid] != 0)
	               {
	                   format(string,sizeof(string),"* An unknown hitman starts the engine of his %s.",aVehicleNames[vehicle]);
		               ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	               }
	               else
	               {
		               format(string,sizeof(string),"* %s starts the engine of his %s.",sendername,aVehicleNames[vehicle]);
		               ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				   }
        	   }
      	  	   else if(vehEngine[idcar] == 1)
        	   {
    			   vehEngine[idcar] = 0;
    			   GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
      	    	   SetVehicleParamsEx(idcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
            	   new vehicle;
            	   vehicle = GetVehicleModel(idcar) - 400;
	        	   GetPlayerName(playerid, sendername, sizeof(sendername));
            	   SetPVarInt(playerid, "Engine", 0);
            	   if(Undercover[playerid] != 0)
            	   {
	                   format(string,sizeof(string),"* An unknown hitman stops the engine of his %s.",aVehicleNames[vehicle]);
	            	   ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	   }
            	   else
            	   {
	            	   format(string,sizeof(string),"* %s stops the engine of his %s.",sendername,aVehicleNames[vehicle]);
	            	   ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				   }
        	   }
	       }
		   else return SendClientMessage(playerid,COLOR_ERROR,"(Error){FFFFFF} Please wait, you refill your vehicle.");
	   }
   }
   if(newkeys & KEY_SPRINT)
   {
       if(gPlayerUsingLoopingAnim[playerid] == 1)
       {
	       StopLoopingAnim(playerid);
       }
       if(Spectate[playerid] != -1)
       {
	       new onlineid[MAX_PLAYERS],totalplayers,string[256];
	       foreach(new i : Player)
	       {
	       		if(Spectate[i] != -1 || TutTime[i] > 0 || CanSpectate[i] == 0) continue;
	       		onlineid[totalplayers] = i;
	       		totalplayers++;
	       }
	       if(totalplayers > 0)
	       {
		       new specid = onlineid[random(totalplayers)];
		       Spectate[playerid] = specid;
		       new Float:health,country[50],sendername[30],giveplayer[30],city[64];
			   GetPlayerHealth(specid, health);
			   GetPlayerName(specid, giveplayer, sizeof(giveplayer));
			   GetPlayerName(playerid, sendername, sizeof(sendername));
			   GetPlayerCountry(specid, country, sizeof(country));
			   GetPlayerCity(specid, city, sizeof(city));
			   format(string, sizeof(string), "(%d) %s | Level: %d | Health: %.0f | AFK: %d | Duty: %d | Country: %s (%s) | Ping: %d",specid,giveplayer,PlayerInfo[specid][pLevel],health,IsPlayerAFK[specid],OnDuty[specid],country,city,GetPlayerPing(specid));
			   SendSplitMessage(playerid, COLOR_DARKPINK, string);
		   	   TogglePlayerSpectating(playerid, 1);
		   	   if(IsPlayerInAnyVehicle(specid))
			   {
				    new carid = GetPlayerVehicleID(specid);
				    PlayerSpectateVehicle(playerid, carid);
					SpectateState[specid] = 2;
			   }
			   else
			   {
				    PlayerSpectatePlayer(playerid, specid);
					SpectateState[specid] = 1;
			   }
			   PlayerTextDrawSetString(playerid, TextDrawSpec[playerid][1], "LOADING...");
			   PlayerTextDrawShow(playerid, TextDrawSpec[playerid][1]);
		   }
		}
   }
   if(newkeys & KEY_ANALOG_DOWN)
   {
      if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
      {
         if(GetPVarInt(playerid, "Boot") == 0)
         {
			 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
			 SetPVarInt(playerid, "Boot", 1);
         }
         else if(GetPVarInt(playerid, "Boot") == 1)
         {
			 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
			 SetPVarInt(playerid, "Boot", 0);
         }
      }
      return 1;
   }
   if(newkeys & KEY_ACTION)
   {
	  if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
      {
         if(GetPVarInt(playerid, "Lights") == 0)
         {
			 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(veh,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
			 SetPVarInt(playerid, "Lights", 1);
         }
         else if(GetPVarInt(playerid, "Lights") == 1)
         {
			 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(veh,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
			 SetPVarInt(playerid, "Lights", 0);
         }
      }
      return 1;
   }
   if(newkeys & KEY_ANALOG_UP)
   {
      if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
      {
         if(GetPVarInt(playerid, "Bonnet") == 0)
         {
			 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(veh,engine,lights,alarm,doors,VEHICLE_PARAMS_ON,boot,objective);
			 SetPVarInt(playerid, "Bonnet", 1);
         }
         else if(GetPVarInt(playerid, "Bonnet") == 1)
         {
			 GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 SetVehicleParamsEx(veh,engine,lights,alarm,doors,VEHICLE_PARAMS_OFF,boot,objective);
			 SetPVarInt(playerid, "Bonnet", 0);
         }
      }
      return 1;
   }
   if(newkeys & KEY_SECONDARY_ATTACK)
   {
   	   if(InMinerJob[playerid] != 0 || InStrawberryJob[playerid] != 0) return 1;
	   new string[300];
	   PlayerHandsup[playerid] = 0;
	   if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	   {
		   if(IsPlayerConnected(playerid))
		   {
			   if(flymode[playerid] == 1)
			   {
					flymode[playerid] = 0;
					SendClientMessage(playerid, COLOR_DARKPINK, "Fly mode off.");
					StopFly(playerid);
					SetPlayerHealthEx(playerid, 100);
			   }
			   if(BusinessRob[playerid] == 3) return SendClientMessage(playerid, COLOR_ROB, "Wait 10 seconds to rob the business.");
			   for(new i = 1; i < sizeof(HouseInfo); i++)
			   {
				   if(IsPlayerInRangeOfPoint(playerid,2,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) && GetPlayerVirtualWorld(playerid) == 0)
				   {
					   if(PlayerInfo[playerid][pPhousekey] == i || HouseInfo[i][hLock] == 0 || PlayerInfo[playerid][pRented] == i)
					   {
					   	   if(builddeelay[playerid] != 0)
					       {
								if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "(Info){FFFFFF} Trebuie sa astepti %d secunde pentru a intra din nou intr-o cladire.",builddeelay[playerid]);
								else format(string, sizeof(string), "(Info){FFFFFF} You need to wait %d seconds for enter again in a building.",builddeelay[playerid]);
								SendClientMessage(playerid, COLOR_JOB, string);
								return 1;
						   }
						   builddeelay[playerid] = 10;
						   SetPlayerInterior(playerid,HouseInfo[i][hInterior]);
						   SetPlayerPosEx(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
						   PlayerInfo[playerid][pInt] = HouseInfo[i][hInterior];
						   PlayerInfo[playerid][pLocal] = i;
						   SetPlayerVirtualWorld(playerid,HouseInfo[i][hVirtual]);
						   InHouse[playerid] = i;
						   if(strlen(housestring[InHouse[playerid]]) > 0)
						   {
			   			       StopAudioStreamForPlayer(playerid);
	    				       PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
						   }
					   }
					   else
					   {
						   SendClientMessage(playerid, COLOR_GREY, "This house is locked.");
						   if(IsACop(playerid))
						   {
						   		BreachID[playerid] = i;
			            		ShowPlayerDialog(playerid, DIALOG_RAMHOUSE, DIALOG_STYLE_MSGBOX, "SERVER: Housing", "This house is locked.\nAs a law enforcement officer, you can breach this door and enter. Would you like to do so?", "Yes", "No");
						   }
						   if(PlayerInfo[playerid][pMember] == 11)
						   {
						   		BreachID[playerid] = i;
			            		ShowPlayerDialog(playerid, DIALOG_RAMHOUSE, DIALOG_STYLE_MSGBOX, "SERVER: Housing", "This house is locked.\nAs a hitman, you can breach this door and enter. Would you like to do so?", "Yes", "No");
						   }
					   }
				   }
			   }
			   for(new i = 1; i < sizeof(BizzInfo); i++)
			   {
				   if(IsPlayerInRangeOfPoint(playerid,2,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]) && GetPlayerVirtualWorld(playerid) == 0)
				   {
					   if(BizzInfo[i][bSbiz] != 0) return 0;
					   if(GetPlayerCash(playerid) >= BizzInfo[i][bEntranceCost])
					   {
						   if(BizzInfo[i][bLocked] == 1)
						   {
							   SendClientMessage(playerid, COLOR_GREY, "This business is locked.");
							   if(IsACop(playerid))
							   {
							   		BreachID[playerid] = i;
				            		ShowPlayerDialog(playerid, DIALOG_RAMBIZ, DIALOG_STYLE_MSGBOX, "SERVER: Businesses", "This business is locked.\nAs a law enforcement officer, you can breach this door and enter. Would you like to do so?", "Yes", "No");
							   }
							   if(PlayerInfo[playerid][pMember] == 11)
							   {
							   		BreachID[playerid] = i;
				            		ShowPlayerDialog(playerid, DIALOG_RAMBIZ, DIALOG_STYLE_MSGBOX, "SERVER: Businesses", "This business is locked.\nAs a hitman, you can breach this door and enter. Would you like to do so?", "Yes", "No");
							   }
							   return 1;
						   }
						   if(builddeelay[playerid] != 0)
					        {
								if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "(Info){FFFFFF} Trebuie sa astepti %d secunde pentru a intra din nou intr-o cladire.",builddeelay[playerid]);
								else format(string, sizeof(string), "(Info){FFFFFF} You need to wait %d seconds for enter again in a building.",builddeelay[playerid]);
								SendClientMessage(playerid, COLOR_JOB, string);
								return 1;
						    }
						   builddeelay[playerid] = 10;
						   if(LastBiz[playerid] != i)
						   {
							   GivePlayerCash(playerid,-BizzInfo[i][bEntranceCost]);
							   BizzInfo[i][bTill] += BizzInfo[i][bEntranceCost];
							   format(string,sizeof(string),"~r~-$%d",BizzInfo[i][bEntranceCost]);
							   GameTextForPlayer(playerid, string, 5000, 1);
							   LastBizTime[playerid] = 30;
						   }
						   else
						   {
							   GameTextForPlayer(playerid, "welcome back", 5000, 1);
						   }
						   LastBiz[playerid] = i;
						   if(BizzInfo[i][bType] == 3)
						   {
							   if(strlen(barstring[i][playerid]) > 0)
							   {
									StopAudioStreamForPlayer(playerid);
									PlayAudioStreamForPlayer(playerid, barstring[i]);
							   }
						   }
						   if(BizzInfo[i][bType] == 1)
						   {
                               SS(playerid,COLOR_GREEN3,"Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban permanent.", "Scamming is not allowed! Any attempt of scamming can result in getting your account permanent banned.");
                               SS(playerid,COLOR_GREEN3,"Imprumuturile de orice fel (inclusiv datoriile) se fac pe proprie raspundere. Nu ai nicio garantie ca ii vei recupera.", "Keep in mind that if you loan money to other players, you have no guarantee that you'll receive them back.");
                               SS(playerid,COLOR_GREEN3,"Afacerile cu bani reali nu sunt permise. Se pedepseste cu ban 7-14 zile la prima abatere si ban permanent la urmatoarea abatere.", "Selling in-game goods/money for real money/goods is not allowed.");
					           SendClientMessage(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /deposit, /withdraw, /balance, /transfer");
						   }
						   else if(BizzInfo[i][bType] == 2)
						   {
					           SendClientMessage(playerid,COLOR_WHITE,"Welcome to the gun shop! The commands of this business are as follows: /buygun");
						   }
						   else if(BizzInfo[i][bType] == 3)
						   {
					           SendClientMessage(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buydrink");
						   }
						   else if(BizzInfo[i][bType] == 4)
						   {
					           SendClientMessage(playerid,COLOR_WHITE,"Welcome to the sex shop! The commands of this business are as follows: /buytoys");
						   }
						   else if(BizzInfo[i][bType] == 5)
						   {
					           SendClientMessage(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /dice, /blackjack, /roulette, /spin");
						   }
						   else if(BizzInfo[i][bType] == 6)
						   {
								SendClientMessage(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buy");
								if(PlayerInfo[playerid][pFishPrice] != 0)
								{
									ShowPlayerDialog(playerid, DIALOG_SELLFISH, DIALOG_STYLE_MSGBOX, "Sell fish", "Do you want to sell the fish you are carying?", "Yes", "No");
								}
						   }
						   else if(BizzInfo[i][bType] == 7 || BizzInfo[i][bType] == 14)
						   {
					           SendClientMessage(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buyfood");
							   if(AreFaina[playerid] > 0)
						        {
						        	new money,faina = AreFaina[playerid];
		       						if(SvarInfo[2][svValue] == 0) money = faina * 10 + SvarInfo[7][svValue] + PlayerInfo[playerid][pFarmSkill]*50 + random(5000);
		       						else money = faina * 10 + SvarInfo[7][svValue] + PlayerInfo[playerid][pFarmSkill]*50 + random(5000) + 2000;
									PlayerInfo[playerid][pFarmTimes]++;
									PlayerInfo[playerid][pFarmRem]--;
									if(PlayerInfo[playerid][pQuest2] == 5)
									{
										if(PlayerInfo[playerid][pQuestNeed2] > PlayerInfo[playerid][pQuestProgress2])
										{
											PlayerInfo[playerid][pQuestProgress2] += faina;
											Update(playerid, pQuestProgress2x);
											if(PlayerInfo[playerid][pQuestProgress2] >= PlayerInfo[playerid][pQuestNeed2])
											{
												FinishQuest2(playerid, 5);
											}
											else
											{
												new str[128];
												if(PlayerInfo[playerid][pLanguage] == 1)
												{
													format(str, sizeof(str),"Quest [Sell %d KG of flour] progress: %d/%d",PlayerInfo[playerid][pQuestNeed2],PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
													SendClientMessage(playerid, COLOR_YELLOW, str);
												}
												else
												{
													format(str, sizeof(str),"Progres pentru misiunea [Vinde %d KG de faina]: %d/%d",PlayerInfo[playerid][pQuestNeed2],PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
													SendClientMessage(playerid, COLOR_YELLOW, str);
												}
											}
										}
									}
									AreFaina[playerid] = 0;
									GivePlayerCash(playerid, money);
									if(PlayerInfo[playerid][pClan]!=0) {
								    	new safestring[128];
										ClanInfo[PlayerInfo[playerid][pClan]][cClanSeif]+=money/10;
										ClanUpdate(PlayerInfo[playerid][pClan], ClanSafex);
										PlayerInfo[playerid][pClanDep]+=money/10;
										Update(playerid, pClanDepx);
										format(safestring,sizeof(safestring), "(Job){FFFFFF} After your work %s$ was added in {%s}clan safe{FFFFFF}.",FormatNumber(money/10),ClanInfo[PlayerInfo[playerid][pClan]][cClanColor]);
										SendClientMessage(playerid,COLOR_JOB,safestring);
									}
									Update(playerid, pFarmTimesx);
									Update(playerid, pFarmRemx);
									new stringe[128];
									if(PlayerInfo[playerid][pFarmSkill] <= 5)
									{
										if(PlayerInfo[playerid][pFarmRem] <= 0)
										{
			    							PlayerInfo[playerid][pFarmSkill]++;
			    							if(PlayerInfo[playerid][pFarmSkill] == 2)
											{
												PlayerInfo[playerid][pFarmRem] = 34;
											}
											else if(PlayerInfo[playerid][pFarmSkill] == 3)
											{
												PlayerInfo[playerid][pFarmRem] = 49;
											}
											else if(PlayerInfo[playerid][pFarmSkill] == 4)
											{
												PlayerInfo[playerid][pFarmRem] = 89;
											}
											else if(PlayerInfo[playerid][pFarmSkill] == 5)
											{
												PlayerInfo[playerid][pFarmRem] = 99;
											}
		    								Update(playerid,pFarmSkillx);
		    								Update(playerid,pFarmRemx);
			    							format(string,sizeof(string),"Felicitari! Ai acum skill %d pentru acest job!",PlayerInfo[playerid][pFarmSkill]);
											format(stringe,sizeof(stringe),"Congratulations! Now you have skill %d for this job!",PlayerInfo[playerid][pFarmSkill]);
			    							SS(playerid, COLOR_YELLOW, string, stringe);
										}
									}
									format(string,sizeof(string),"(Job){FFFFFF} Ai vandut un sac de faina pentru $%s.", FormatNumber(money));
									format(stringe,sizeof(stringe),"(Job){FFFFFF} You sold a bag of flour for $%s.", FormatNumber(money));
									SS(playerid, COLOR_JOB, string, stringe);
								}
						   }
						   else if(BizzInfo[i][bType] == 8)
						   {
					           SendClientMessage(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buyfightstyle");
						   }
						   else if(BizzInfo[i][bType] == 9)
						   {
					           SendClientMessage(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buyfood");
						   }
						   else if(BizzInfo[i][bType] == 11)
						   {
					           SendClientMessage(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buyaccs /clothes");
						   }
						   SetPlayerInterior(playerid,BizzInfo[i][bInterior]);
						   SetPlayerPosEx(playerid,BizzInfo[i][bExitX],BizzInfo[i][bExitY],BizzInfo[i][bExitZ]);
						   PlayerInfo[playerid][pInt] = BizzInfo[i][bInterior];
						   PlayerInfo[playerid][pLocal] = i+99;
	                       SetPlayerVirtualWorld(playerid,BizzInfo[i][bVirtual]);
						   InBussines[playerid] = i;
			               new str1[184];
						   mysql_format(SQL,str1,sizeof(str1),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[i][bTill],i);
						   mysql_tquery(SQL,str1,"","");
					   }
					   else
					   {
						   GameTextForPlayer(playerid, "you don't have enough money", 5000, 1);
					   }
				   }
			   }
			   // Sistem dinamic HQ
		   	   for(new fid; fid < sizeof(DynamicFactions); fid++)
		   	   {
				   if(IsPlayerInRangeOfPoint(playerid, 2, DynamicFactions[fid][fceX], DynamicFactions[fid][fceY], DynamicFactions[fid][fceZ]) && GetPlayerVirtualWorld(playerid) == 0)
				   {
				   		if(DynamicFactions[fid][fLocked] == 1 && PlayerInfo[playerid][pMember] == fid)
				   		{
					   		SetPlayerPosEx(playerid, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]);
			                SetPlayerInterior(playerid, DynamicFactions[fid][fInterior]);
			                SetPlayerVirtualWorld(playerid, DynamicFactions[fid][fVirtual]);
			                InHQ[playerid] = fid;
			            }
			            else if(DynamicFactions[fid][fLocked] == 0)
			            {
			            	SetPlayerPosEx(playerid, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]);
			                SetPlayerInterior(playerid, DynamicFactions[fid][fInterior]);
			                SetPlayerVirtualWorld(playerid, DynamicFactions[fid][fVirtual]);
			                InHQ[playerid] = fid;
			            }
			            else
			            {
			            	SendClientMessage(playerid, COLOR_GREY, "This HQ is locked.");
			            	if(IsACop(playerid))
			            	{
			            		BreachID[playerid] = fid;
			            		ShowPlayerDialog(playerid, DIALOG_RAMHQ, DIALOG_STYLE_MSGBOX, "SERVER: Group HQ", "This Group HQ is locked.\nAs a law enforcement officer, you can breach this door and enter. Would you like to do so?", "Yes", "No");
			            	}
			            	if(PlayerInfo[playerid][pMember] == 11)
			            	{
			            		BreachID[playerid] = fid;
			            		ShowPlayerDialog(playerid, DIALOG_RAMHQ, DIALOG_STYLE_MSGBOX, "SERVER: Group HQ", "This Group HQ is locked.\nAs a hitman, you can breach this door and enter. Would you like to do so?", "Yes", "No");
			            	}
			            }
				   }
			   }
			   for(new fid; fid < sizeof(DynamicFactions); fid++)
		   	   {
			   	   if(IsPlayerInRangeOfPoint(playerid, 2, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]) && GetPlayerVirtualWorld(playerid) == DynamicFactions[fid][fVirtual])
				   {
				   		SetPlayerPosEx(playerid, DynamicFactions[fid][fceX], DynamicFactions[fid][fceY], DynamicFactions[fid][fceZ]);
					    SetPlayerInterior(playerid, 0);
					    PlayerInfo[playerid][pInt] = 0;
					    SetPlayerVirtualWorld(playerid, 0);
					    InHQ[playerid] = -1;
					    if(IsAMember(playerid))
					    {
					    	if(InWar[PlayerInfo[playerid][pMember]] == 1)
					    	{
					    		SetPlayerVirtualWorld(playerid, DynamicFactions[PlayerInfo[playerid][pMember]][fWarTurf]);
					    	}
					    }
				   }
			   }
			   // Sistem dinamic HQ
			   if(IsPlayerInRangeOfPoint(playerid,2,1584.8812, 1797.7262, 10.8280) && PlayerInfo[playerid][pMember] == 14) // paramedic elevator
			   {
				   SetPlayerPosEx(playerid, 1585.8629, 1793.7830, 30.4688);
			   }
			   if(IsPlayerInRangeOfPoint(playerid,2,1585.8629, 1793.7830, 30.4688) && PlayerInfo[playerid][pMember] == 14) // paramedic elevator
			   {
				   SetPlayerPosEx(playerid, 1584.8812, 1797.7262, 10.8280);
			   }
			   if(IsPlayerInRangeOfPoint(playerid,2,611.1835, -585.6877, 17.2266) && IsACop(playerid)) // fbi elevator
			   {
				   SetPlayerPosEx(playerid, 618.1414,-566.7900,26.1432);
			   }
			   if(IsPlayerInRangeOfPoint(playerid,2,618.1414,-566.7900,26.1432) && IsACop(playerid)) // fbi elevator
			   {
				   SetPlayerPosEx(playerid, 611.1835, -585.6877, 17.2266);
			   }
			   else if(IsPlayerInRangeOfPoint(playerid,1,1552.5898,-1683.4698,13.5504) && Vending[playerid] == 0 && GetPlayerVirtualWorld(playerid) == 0) // dozator
			   {
			      	if(GetPlayerCash(playerid) < 200) return 1;
					new sendername[MAX_PLAYER_NAME];
					GetPlayerName(playerid, sendername, sizeof(sendername));
					SetPlayerPos(playerid, 1552.8281,-1683.4645,13.5500);
           			SetPlayerFacingAngle(playerid, 272.63);
        			ApplyAnimation(playerid, "VENDING", "VEND_USE", 4.0, 0, 0, 0, 0, 0);
           			PlayerPlaySound(playerid, 42600, 0.0, 0.0, 0.0);
              		GameTextForPlayer(playerid, "~r~-200$", 5000, 1);
                	GivePlayerCash(playerid, -200);
					Vending[playerid] = 1;
					vendi[playerid] = SetTimerEx("Vendingg", 6000, 0, "i", playerid);
					vendi2[playerid] = SetTimerEx("Vendingg2", 2300, 0, "i", playerid);
					format(string, sizeof(string), "* %s bought a drink from vending machine.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			   }
			   else if(IsPlayerInRangeOfPoint(playerid,1,2273.5654,2428.7834,10.8203) && Vending[playerid] == 0) // dozator
			   {
					if(GetPlayerCash(playerid) < 200) return 1;
					new sendername[MAX_PLAYER_NAME];
					GetPlayerName(playerid, sendername, sizeof(sendername));
					SetPlayerPos(playerid, 2273.5645,2428.7981,10.8203);
					SetPlayerFacingAngle(playerid, 3.20);
        			ApplyAnimation(playerid, "VENDING", "VEND_USE", 4.0, 0, 0, 0, 0, 0);
           			PlayerPlaySound(playerid, 42600, 0.0, 0.0, 0.0);
              		GameTextForPlayer(playerid, "~r~-200$", 5000, 1);
                	GivePlayerCash(playerid, -200);
					Vending[playerid] = 1;
					vendi[playerid] = SetTimerEx("Vendingg", 6000, 0, "i", playerid);
					vendi2[playerid] = SetTimerEx("Vendingg2", 2300, 0, "i", playerid);
					format(string, sizeof(string), "* %s bought a drink from vending machine.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			   }
			   else if(IsPlayerInRangeOfPoint(playerid,1,495.9684,-23.5361,1000.6797) && Vending[playerid] == 0) // dozator
			   {
					if(GetPlayerCash(playerid) < 200) return 1;
					new sendername[MAX_PLAYER_NAME];
					GetPlayerName(playerid, sendername, sizeof(sendername));
					SetPlayerPos(playerid, 495.9684,-23.5361,1000.6797);
					SetPlayerFacingAngle(playerid, 182.5);
        			ApplyAnimation(playerid, "VENDING", "VEND_USE", 4.0, 0, 0, 0, 0, 0);
           			PlayerPlaySound(playerid, 42600, 0.0, 0.0, 0.0);
              		GameTextForPlayer(playerid, "~r~-200$", 5000, 1);
                	GivePlayerCash(playerid, -200);
					Vending[playerid] = 1;
					vendi[playerid] = SetTimerEx("Vendingg", 6000, 0, "i", playerid);
					vendi2[playerid] = SetTimerEx("Vendingg2", 2300, 0, "i", playerid);
					format(string, sizeof(string), "* %s bought a drink from vending machine.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			   }
			   else if(IsPlayerInRangeOfPoint(playerid,1,316.0904,-140.3487,999.6016) && Vending[playerid] == 0) // dozator
			   {
					if(GetPlayerCash(playerid) < 200) return 1;
					new sendername[MAX_PLAYER_NAME];
					GetPlayerName(playerid, sendername, sizeof(sendername));
					SetPlayerPos(playerid, 316.0904,-140.3487,999.6016);
					SetPlayerFacingAngle(playerid, 269.10);
        			ApplyAnimation(playerid,"FOOD","EAT_Burger", 3.0, 0, 0, 0, 0, 0);
           			PlayerPlaySound(playerid, 42601, 0.0, 0.0, 0.0);
              		GameTextForPlayer(playerid, "~r~-200$", 5000, 1);
                	GivePlayerCash(playerid, -200);
					Vending[playerid] = 1;
					vendi[playerid] = SetTimerEx("Vendingg", 6000, 0, "i", playerid);
					vendi2[playerid] = SetTimerEx("Vendingg2", 2300, 0, "i", playerid);
					format(string, sizeof(string), "* %s bought a drink from vending machine.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			   }
			   else if(IsPlayerInRangeOfPoint(playerid,2,1090.7542,-1476.3380,22.7465)) //tatto
			   {
			       SetPlayerInterior(playerid,16);
				   SetPlayerPosEx(playerid,-204.439987,-26.453998,1002.273437);
				   GameTextForPlayer(playerid, "~r~Tatto", 5000, 1);
				   PlayerInfo[playerid][pInt] = 16;
			   }
			   else if(IsPlayerInRangeOfPoint(playerid,2,1765.1732,-1569.0253,1742.4930)) // enter visit
			   {
				   SetPlayerPosEx(playerid,1764.3419,-1567.7599,1742.4967);
			   }
			   else if(IsPlayerInRangeOfPoint(playerid,2,2139.2612,-1697.9432,15.0784)) // drugs house
			   {
	               SetPlayerInterior(playerid,5);
				   SetPlayerPosEx(playerid,318.5867,1115.4735,1083.8828);
				   PlayerInfo[playerid][pInt] = 5;
			   }
			   else if(IsPlayerInRangeOfPoint(playerid,2,2307.2935,-1786.0671,13.5557)) // b'dub house
			   {
			       SetPlayerInterior(playerid,3);
				   SetPlayerPosEx(playerid,1527.229980,-11.574499,1002.097106);
			       GameTextForPlayer(playerid, "~w~B'Dub House", 5000, 1);
				   PlayerInfo[playerid][pInt] = 3;
			   }
			   else if(IsPlayerInRangeOfPoint(playerid,2,242.8626,66.2978,1003.6406) && GetPlayerVirtualWorld(playerid) == 0) // lspd armoury
			   {
	               if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a cop.");
	               {
			           SetPlayerInterior(playerid,3);
			           SetPlayerVirtualWorld(playerid,333);
			    	   SetPlayerPosEx(playerid,288.8405,167.7809,1007.1719);
			    	   PlayerInfo[playerid][pInt] = 3;
			    	   InHQ[playerid] = 1;
		    	   }
		       }
		       else if(IsPlayerInRangeOfPoint(playerid,2,242.8626,66.2978,1003.6406) && GetPlayerVirtualWorld(playerid) == 3) // lvpd armoury
			   {
	               if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a cop.");
	               {
			           SetPlayerInterior(playerid,3);
			           SetPlayerVirtualWorld(playerid,343);
			    	   SetPlayerPosEx(playerid,288.8405,167.7809,1007.1719);
			    	   PlayerInfo[playerid][pInt] = 3;
			    	   InHQ[playerid] = 1;
		    	   }
		       }
			   else if(IsPlayerInRangeOfPoint(playerid,2,1510.3986,-1059.5723,25.0625))
			   {
				   if(areape == 1)
				   {
				       SetPlayerInterior(playerid,15);
					   SetPlayerPosEx(playerid,-1423.5153,935.8321,1036.4756);
					   PlayerInfo[playerid][pInt] = 15;
				   }
				   else return SendClientMessage(playerid,COLOR_ERROR,"(Error){FFFFFF} Event area is closed.");
			   }
		   }
		   for(new i = 1; i <  sizeof(HouseInfo); i++)
		   {
			   if(PlayerToPoint(2, playerid,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]) && HouseInfo[i][hVirtual] == GetPlayerVirtualWorld(playerid))
		       {
				   SetPlayerVirtualWorld(playerid,0);
				   SetPlayerInterior(playerid,0);
				   SetPlayerPosEx(playerid,HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez]);
				   PlayerInfo[playerid][pInt] = 0;
				   PlayerInfo[playerid][pLocal] = 255;
				   InHouse[playerid] = -1;
				   StopAudioStreamForPlayer(playerid);
			   }
		   }
		   for(new i = 1; i <  sizeof(BizzInfo); i++)
		   {
			   if(PlayerToPoint(2, playerid,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]) && BizzInfo[i][bVirtual]==GetPlayerVirtualWorld(playerid) && BizzInfo[i][bSbiz] == 0)
			   {
				   SetPlayerInterior(playerid,0);
				   PlayerInfo[playerid][pInt] = 0;
				   SetPlayerPosEx(playerid,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ]);
				   PlayerInfo[playerid][pLocal] = 255;
	               SetPlayerVirtualWorld(playerid,0);
	               InBussines[playerid] = -1;
				   StopAudioStreamForPlayer(playerid);
			   }
		   }
		   if(IsPlayerInRangeOfPoint(playerid,2,1756.4181,-1577.8954,1742.5309) && PlayerInfo[playerid][pJailed] == 0)//jail
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,1798.5801,-1578.1804,14.0827);
			   PlayerInfo[playerid][pInt] = 0;
		   }
		   else if(IsPlayerInRangeOfPoint(playerid,2,1764.3419,-1567.7599,1742.4967)) // exit visit
		   {
			   SetPlayerPosEx(playerid,1765.1732,-1569.0253,1742.4930);
		   }
		   else if(IsPlayerInRangeOfPoint(playerid,2,626.3122,-11.8606,1000.9219) && GetPlayerVirtualWorld(playerid) == 10) //tow
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,918.6766,-1252.2185,16.2109);
			   PlayerInfo[playerid][pInt] = 0;
			   SetPlayerVirtualWorld(playerid, 0);
			   InHQ[playerid] = -1;
		   }
		   else if(IsPlayerInRangeOfPoint(playerid,2,318.5867,1115.4735,1083.8828)) // drugs house
		   {
	           SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,2139.2612,-1697.9432,15.0784);
			   PlayerInfo[playerid][pInt] = 0;
		   }
		   else if(IsPlayerInRangeOfPoint(playerid,2,-204.439987,-26.453998,1002.273437))
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,1090.7542,-1476.3380,22.7465);
			   PlayerInfo[playerid][pInt] = 0;
		   }
		   else if(IsPlayerInRangeOfPoint(playerid,2,1527.229980,-11.574499,1002.097106))
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,2307.2935,-1786.0671,13.5557);
			   PlayerInfo[playerid][pInt] = 0;
		   }
		   else if(IsPlayerInRangeOfPoint(playerid,2,288.8405,167.7809,1007.1719) && GetPlayerVirtualWorld(playerid) == 333) // LSPD Armoury
		   {
			   SetPlayerInterior(playerid,6);
			   SetPlayerVirtualWorld(playerid,0);
			   SetPlayerPosEx(playerid,242.8626,66.2978,1003.6406);
			   PlayerInfo[playerid][pInt] = 6;
			   PlayerInfo[playerid][pLocal] = 0;
			   InHQ[playerid] = -1;
		   }
		   else if(IsPlayerInRangeOfPoint(playerid,2,288.8405,167.7809,1007.1719) && GetPlayerVirtualWorld(playerid) == 343) // LVPD Armoury
		   {
			   SetPlayerInterior(playerid,6);
			   SetPlayerVirtualWorld(playerid,3);
			   SetPlayerPosEx(playerid,242.8626,66.2978,1003.6406);
			   PlayerInfo[playerid][pInt] = 6;
			   PlayerInfo[playerid][pLocal] = 0;
			   InHQ[playerid] = -1;
		   }
		   else if(IsPlayerInRangeOfPoint(playerid,1,304.5868,-141.9874,1004.0625))//gunshopusa
		   {
			   SetPlayerPosEx(playerid,305.7950,-141.8203,1004.0547);
		   }
		   else if(IsPlayerInRangeOfPoint(playerid,1,298.8386,-141.9191,1004.0547))//gunshopusa
		   {
			   SetPlayerPosEx(playerid,300.1631,-141.8074,1004.0625);
		   }
		   else if(IsPlayerInRangeOfPoint(playerid,2,1262.1383,-785.3315,1091.9063) && GetPlayerVirtualWorld(playerid) == 3)//Guvern
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,1481.1063,-1771.2532,18.7958);
			   PlayerInfo[playerid][pInt] = 0;
			   SetPlayerVirtualWorld(playerid,0);
			   InHQ[playerid] = -1;
		   }
		   else if(IsPlayerInRangeOfPoint(playerid,2,834.1988,7.1422,1004.1870))
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,1247.9105,-1560.4454,13.5556);
			   PlayerInfo[playerid][pInt] = 0;
		   }
     /*else if(PlayerToPoint(5,playerid,387.7978,173.8582,1008.3828))
	       {
		       SetPlayerPosEx(playerid,1481.1063,-1771.2532,18.7958);
		       SetPlayerVirtualWorld(playerid,0);
		       SetPlayerInterior(playerid,0);
		       PlayerInfo[playerid][pInt] = 0;
	           format(string, sizeof(string), "~w~Los Santos");
	           GameTextForPlayer(playerid, string, 1000, 1);
	       }*/
		   else if(IsPlayerInRangeOfPoint(playerid,2,761.412963,1440.191650,1102.703125))
		   {
			   SetPlayerInterior(playerid,0);
			   SetPlayerPosEx(playerid,387.7978,173.8582,1008.3828);
			   PlayerInfo[playerid][pInt] = 0;
			   PlayerInfo[playerid][pLocal] = 255;
		   }
		   else if(IsPlayerInRangeOfPoint(playerid,2,-1423.5153,935.8321,1036.4756))
		   {
			   if(areape == 1)
			   {
			       SetPlayerInterior(playerid,0);
				   SetPlayerPosEx(playerid,1510.3986,-1059.5723,25.0625);
				   PlayerInfo[playerid][pInt] = 0;
			   }
			   else return SendClientMessage(playerid,COLOR_ERROR,"(Error){FFFFFF} Event area is closed.");
		   }
	   }
	   if(NoFuel[playerid] == 1)
	   {
		   RemovePlayerFromVehicle(playerid);
           TogglePlayerControllable(playerid, 1);
		   NoFuel[playerid] = 0;
	   }
   }
   return 0;
}

public OnVehicleSpawn(vehicleid)
{
    if(!IsAnOwnableCar(vehicleid))
	{
		Gas[vehicleid] = 100;
		if(GarbageInCar[vehicleid] > 0) GarbageInCar[vehicleid] = 0;
		foreach(new i : Player)
		{
			if(JobCar[i] == vehicleid) JobCar[i] = -1;
			if(HireCar[i] == vehicleid) HireCar[i] = -1;
		}
  	}
  	else
  	{
  	    new engine,lights,alarm,doors,bonnet,boot,objective;
		foreach(new i : Player)
		{
			for(new v; v < MAX_PERSONAL_VEHICLES; v++)
			{
				if(PlayerInfo[i][pCarID][v] == vehicleid)
				{
					LoadCar(i);
					if(PlayerInfo[i][pCarLock][v] == 1)
					{
						GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
						SetVehicleParamsEx(vehicleid,engine,lights,alarm,1,bonnet,boot,objective);
					}
					else
					{
						GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
						SetVehicleParamsEx(vehicleid,engine,lights,alarm,0,bonnet,boot,objective);
					}
					ChangeVehiclePaintjob(vehicleid, PlayerInfo[i][pCarPaintJ][v]);
					for(new d; d < 17; d++)
					{
						if(CarMod[i][v][d] != 0) AddVehicleComponent(PlayerInfo[i][pCarID][v],CarMod[i][v][d]);
					}
					SetVehicleNumberPlate(vehicleid,CarPlate[i][v]);
					cUpdate(i, v, cKMx);
					SetVipText(i, v);
					AttachNeon(i,v);
				}
			}
		}
  	}
  	vehRadio[vehicleid] = 0;
	return 1;
}

forward SyncUp();
public SyncUp()
{
	new tmphour,
		tmpminute,
		tmpsecond,
		hour,
		minn,
		sec,
		da,
		mo,
		ye;
	gettime(hour,minn,sec);
	gettime(tmphour, tmpminute, tmpsecond);
	hour+=SERVER_HOUR_FIX;
	tmphour+=SERVER_HOUR_FIX;
	if(hour == 24) hour = 0;
	if(tmphour == 24) tmphour = 0;
	getdate(ye, mo, da);
	FixHour(tmphour);
	tmphour = shifthour;
	if((hour == 19 || hour == 20 || hour == 21 || hour == 22 || hour == 17 || hour == 18) && mo <= 3 && mo >= 9)
	{
		SetWorldTime(23);
	}
	else
	{
		SetWorldTime(hour);
	}
	if((tmphour > ghour) || (tmphour == 0 && ghour == 23))
	{
		ghour = tmphour;
		PayDay();
		if(hour == 23)
		{
			new str[256];
			mysql_tquery(SQL,"UPDATE cars SET Inscarprice = Inscarprice+50","","");
			foreach(new i : Player)
		    {
		        for(new v; v < MAX_PERSONAL_VEHICLES; v++)
				{
					if(PlayerInfo[i][pCar][v] != -1)
					{
						PlayerInfo[i][pCarInsPrice][v] += 50;
					}
				}
			}
			mysql_tquery(SQL,"UPDATE `users` SET `OnlineToday` = '0'","","");
			foreach(new i : Player)
			{
				if(IsPlayerConnected(i))
				{
					mysql_format(SQL,str,sizeof(str),"UPDATE `users` SET `OnlineToday` = '1' WHERE `name`='%s'",PlayerInfo[i][pNormalName]);
					mysql_tquery(SQL,str,"","");
				}
			}
		}
		if(hour == 7 || hour == 19)
		{
			mysql_tquery(SQL,"UPDATE `users` SET `Quest1` = '0', `Quest2` = '0', `QuestProgress1`='0', `QuestProgress2`='0'","","");
			foreach(new playerid : Player)
			{
				SS(playerid, COLOR_YELLOW, "Misiunile zilnice au fost resetate, tasteaza /quests pentru a le vedea!", "Daily quests was reseted, write /quests to view!");
				new quest1 = 1 + random(7),quest2 = 1 + random(8);
				if(IsACop(playerid) && quest1 == 4) quest1 = 2;
				PlayerInfo[playerid][pQuest1] = quest1;
				PlayerInfo[playerid][pQuest2] = quest2;
				PlayerInfo[playerid][pQuestProgress1] = 0;
				PlayerInfo[playerid][pQuestProgress2] = 0;
				Update(playerid, pQuest1x);
				Update(playerid, pQuest2x);
				if(quest1 == 1 || quest1 == 2 || quest1 == 4)
				{
					PlayerInfo[playerid][pQuestNeed1] = 1;
					Update(playerid, pQuestNeed1x);
				}
				if(quest2 == 6 || quest2 == 7)
				{
					PlayerInfo[playerid][pQuestNeed2] = 1;
					Update(playerid, pQuestNeed2x);
				}
				if(quest1 == 3)
				{
					new randcar = random(12);
					if(randcar == 0) PlayerInfo[playerid][pQuestCar] = 400;
					if(randcar == 1) PlayerInfo[playerid][pQuestCar] = 401;
					if(randcar == 2) PlayerInfo[playerid][pQuestCar] = 404;
					if(randcar == 3) PlayerInfo[playerid][pQuestCar] = 408;
					if(randcar == 4) PlayerInfo[playerid][pQuestCar] = 439;
					if(randcar == 5) PlayerInfo[playerid][pQuestCar] = 462;
					if(randcar == 6) PlayerInfo[playerid][pQuestCar] = 471;
					if(randcar == 7) PlayerInfo[playerid][pQuestCar] = 481;
					if(randcar == 8) PlayerInfo[playerid][pQuestCar] = 496;
					if(randcar == 9) PlayerInfo[playerid][pQuestCar] = 509;
					if(randcar == 10) PlayerInfo[playerid][pQuestCar] = 515;
					if(randcar == 11) PlayerInfo[playerid][pQuestCar] = 522;
					new randkm = 10 + random(25);
					PlayerInfo[playerid][pQuestNeed1] = randkm;
					Update(playerid, pQuestCarx);
					Update(playerid, pQuestNeed1x);
				}
				if(quest1 == 5)
				{
					new randmats = 3000 + random(7000);
					PlayerInfo[playerid][pQuestNeed1] = randmats;
					Update(playerid, pQuestNeed1x);
				}
				if(quest1 == 6)
				{
					new randfish = 5 + random(15);
					PlayerInfo[playerid][pQuestNeed1] = randfish;
					Update(playerid, pQuestNeed1x);
				}
				if(quest2 == 1)
				{
					new randpizza = 5 + random(10);
					PlayerInfo[playerid][pQuestNeed2] = randpizza;
					Update(playerid, pQuestNeed2x);
				}
				if(quest2 == 2)
				{
					new randcops = 2 + random(5);
					PlayerInfo[playerid][pQuestNeed2] = randcops;
					Update(playerid, pQuestNeed2x);
				}
				if(quest2 == 3)
				{
					new rand = 10 + random(15) + random(20);
					PlayerInfo[playerid][pQuestNeed2] = rand;
					Update(playerid, pQuestNeed2x);
				}
				if(quest2 == 4)
				{
					new rand = 25 + random(25) + random(25);
					PlayerInfo[playerid][pQuestNeed2] = rand;
					Update(playerid, pQuestNeed2x);
				}
				if(quest2 == 5)
				{
					new rand = 50 + random(25) + random(25);
					PlayerInfo[playerid][pQuestNeed2] = rand;
					Update(playerid, pQuestNeed2x);
				}
			}
		}
		mysql_tquery(SQL, "UPDATE cars SET Block = Block-1 WHERE Block > 0");
		foreach(new i : Player)
	    {
	        for(new v; v < MAX_PERSONAL_VEHICLES; v++)
			{
				if(PlayerInfo[i][pCar][v] != -1)
				{
					if(PlayerInfo[i][pCarBlock][v] > 0) PlayerInfo[i][pCarBlock][v]--;
				}
			}
		}
		if(da == 1 && hour == 1)
		{
			new strr[128];
			mysql_format(SQL,strr,sizeof(strr),"INSERT INTO `timeonline` (`m`,`y`) VALUES ('%d','%d')",mo,ye);
			mysql_tquery(SQL,strr,"","");
		}
		if(GetWeekDay() == 3 && hour == 1) // SCOATERE LA LICITATIE - TRANSFER ADMBOT - CASA
		{
			new pid[1000],strr[256],var100[256],house[1000],xd;
			new Cache: housex = mysql_query(SQL, "SELECT * FROM `users` WHERE `House` < '999' AND `Rented`='-1'");
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				pid[xd] = cache_get_field_content_int(i, "id");
				house[xd] = cache_get_field_content_int(i, "House");
				xd++;
			}
			cache_delete(housex);
			for(new p; p < 1000; p++)
			{
				if(pid[p] > 4)
				{
					new time;
					format(strr, sizeof(strr), "SELECT * FROM `timeplayed` WHERE `pid`='%d'", pid[p]);
					new Cache: abhouse = mysql_query(SQL, strr);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						time += cache_get_field_content_int(i, "time");
					}
					cache_delete(abhouse);
					if(time < 36000)
					{
						mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `House`='999' WHERE `id`='%d'", pid[p]);
						mysql_tquery(SQL, strr, "", "");
						mysql_format(SQL, strr, sizeof(strr), "UPDATE `houses` SET `Owner`='AdmBot',`Owned`='0',`Rentabil`='1',`Rent`='5',`Prices`='0' WHERE `ID`='%d'", house[p]);
						mysql_tquery(SQL, strr, "", "");
						HouseInfo[house[p]][hOwned] = 1;
						HouseInfo[house[p]][hRent] = 5;
						HouseInfo[house[p]][hRentabil] = 1;
						HouseInfo[house[p]][hPrice] = 0;
						strmid(HouseInfo[house[p]][hOwner], "AdmBot", 0, 25, 255);
						foreach(new sal : Player)
						{
							if(PlayerInfo[sal][pSQLID] == pid[p])
							{
								PlayerInfo[sal][pPhousekey] = 999;
							}
						}
						OnPropTextdrawUpdate(1, house[p]);
						format(strr, sizeof(strr), "Your house (%d) was confiscated by state because you dont have enought hours.",house[p]);
						mysql_format(SQL, var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')",pid[p],strr);
						mysql_tquery(SQL,var100,"","");

						format(strr, sizeof(strr), "Casa [house:%d] va fi scoasa la licitatie in viitor (proprietar inactiv).", house[p]);
						Log(pid[p], strr, "bidadd");
					}
				}
			}
		}
		if(GetWeekDay() == 3 && hour == 2) // SCOATERE LA LICITATIE - TRANSFER ADMBOT - BIZ
		{
			new pid[1000],strr[256],var100[256],biz[1000],xd;
			new Cache: bizx = mysql_query(SQL, "SELECT * FROM `users` WHERE `Bizz` < '255'");
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				pid[xd] = cache_get_field_content_int(i, "id");
				biz[xd] = cache_get_field_content_int(i, "Bizz");
				xd++;
			}
			cache_delete(bizx);
			for(new p; p < 1000; p++)
			{
				if(pid[p] > 4)
				{
					new time;
					format(strr, sizeof(strr), "SELECT * FROM `timeplayed` WHERE `pid`='%d'", pid[p]);
					new Cache: abhouse = mysql_query(SQL, strr);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						time += cache_get_field_content_int(i, "time");
					}
					cache_delete(abhouse);
					if(time < 36000)
					{
						mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `Bizz`='255' WHERE `id`='%d'", pid[p]);
						mysql_tquery(SQL, strr, "", "");
						mysql_format(SQL, strr, sizeof(strr), "UPDATE `bizz` SET `Owner`='AdmBot',`Owned`='1',`Locked`='0' WHERE `ID`='%d'", biz[p]);
						mysql_tquery(SQL, strr, "", "");
						BizzInfo[biz[p]][bOwned] = 1;
						BizzInfo[biz[p]][bLocked] = 0;
						BizzInfo[biz[p]][bPrice] = 0;
						strmid(BizzInfo[biz[p]][bOwner], "AdmBot", 0, 25, 255);
						foreach(new sal : Player)
						{
							if(PlayerInfo[sal][pSQLID] == pid[p])
							{
								PlayerInfo[sal][pPbiskey] = 255;
							}
						}
						OnPropTextdrawUpdate(2, biz[p]);
						format(strr, sizeof(strr), "Your house (%d) was confiscated by state because you dont have enought hours.",biz[p]);
						mysql_format(SQL, var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')",pid[p],strr);
						mysql_tquery(SQL,var100,"","");

						format(strr, sizeof(strr), "Afacerea [biz:%d] va fi scoasa la licitatie in viitor (proprietar inactiv).", biz[p]);
						Log(pid[p], strr, "bidadd");
					}
				}
			}
		}
		if(GetWeekDay() == 2 && hour == 23)
		{
			new str[256];
			mysql_format(SQL,str,sizeof(str),"UPDATE `users` SET `OnlineLastWeek` = '1', `OnlineThisWeek` = '0' WHERE `OnlineThisWeek`='1'");
			mysql_tquery(SQL,str,"","");
			foreach(new i : Player)
			{
				if(IsPlayerConnected(i))
				{
					mysql_format(SQL,str,sizeof(str),"UPDATE `users` SET `OnlineThisWeek` = '1' WHERE `name`='%s'",PlayerInfo[i][pNormalName]);
					mysql_tquery(SQL,str,"","");
				}
			}
		}
	}
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pReportMuted] > 0)
		{
			PlayerInfo[i][pReportMuted]--;
			Update(i, pReportMutedx);
			if(PlayerInfo[i][pReportMuted] == 0) SendClientMessage(i, COLOR_YELLOW, "Your mute on /report has expired.");
		}
	}
	new minute, second;
	gettime(hour, minute, second);
	hour+=SERVER_HOUR_FIX;
	if(hour == 24) hour = 0;
	if(GetWeekDay() == 1 || GetWeekDay() == 2)
	{
		if(hour == 20 || hour == 21 || hour == 22 || hour == 23)
		{
			if(IsABid == 0)
			{
				new biz, house, strr[256], strr2[128];
				new Cache: ab1 = mysql_query(SQL, "SELECT * FROM `bizz` WHERE `Owner`='AdmBot'");
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					biz = cache_get_field_content_int(i, "ID");
					break;
				}
				cache_delete(ab1);
				if(biz == 0)
				{
					new Cache: ab2 = mysql_query(SQL, "SELECT * FROM `houses` WHERE `Owner`='AdmBot'");
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						house = cache_get_field_content_int(0, "ID");
						break;
					}
					cache_delete(ab2);
					if(house != 0)
					{
						IsABid = 1;
						TopBidder = -1;
						BidAmount = 1000000;
						BidAmount2 = 1;
						IsAtBid = house;
						format(strr, sizeof(strr), "[BID] Acum se poate licita pentru house cu ID-ul %d.", IsAtBid);
						format(strr2, sizeof(strr2), "[BID] You can now bid for the house with the ID %d.", IsAtBid);
						foreach(new x : Player)
						{
							if(PlayerInfo[x][pLanguage] == 2) SendClientMessage(x, COLOR_BID, strr);
							else return SendClientMessage(x, COLOR_BID, strr2);
							SS(x, COLOR_RADIOCHAT, "[BID] Poti folosi /togbid pentru a afisa/ascunde sumele licitate de alti playeri.", "[BID] You can use /togbid to show or hide bids placed by other players.");
							SS(x, COLOR_RADIOCHAT, "[BID] Poti folosi /bid pentru a licita. O data ce licitezi, iti vor fi retrasi banii din cont. Daca un alt player liciteaza mai mult, iti vei primi banii inapoi.", "[BID] You can use /bid to bid. Once you placed a bid, the money will be taken out of your account. If someone wants to bid more than you for a property, you will get your money back.");
						}
					}
				}
				else
				{
					IsABid = 2;
					TopBidder = -1;
					BidAmount = 2000000;
					BidAmount2 = 2;
					IsAtBid = biz;
					format(strr, sizeof(strr), "[BID] Acum se poate licita pentru business cu ID-ul %d.", IsAtBid);
					format(strr2, sizeof(strr2), "[BID] You can now bid for the business with the ID %d.", IsAtBid);
					foreach(new x : Player)
					{
						if(PlayerInfo[x][pLanguage] == 2) SendClientMessage(x, COLOR_BID, strr);
						else return SendClientMessage(x, COLOR_BID, strr2);
						SS(x, COLOR_RADIOCHAT, "[BID] Poti folosi /togbid pentru a afisa/ascunde sumele licitate de alti playeri.", "[BID] You can use /togbid to show or hide bids placed by other players.");
						SS(x, COLOR_RADIOCHAT, "[BID] Poti folosi /bid pentru a licita. O data ce licitezi, iti vor fi retrasi banii din cont. Daca un alt player liciteaza mai mult, iti vei primi banii inapoi.", "[BID] You can use /bid to bid. Once you placed a bid, the money will be taken out of your account. If someone wants to bid more than you for a property, you will get your money back.");
					}
				}
			}
		}
	}
	if(GetWeekDay() == 1 || GetWeekDay() == 2) // LICITATII AUTOMATE
	{
		if(hour == 20 || hour == 21 || hour == 22 || hour == 23)
		{
			if(IsABid != 0 && IsAtBid != 0)
			{
				if(TopBidder != -1)
				{
					if(BidTime > 0)
					{
						BidTime--;
						new strr[256], strr2[128], name[30], house, biz;
						if(BidTime != 0)
						{
							format(strr, sizeof(strr), "SELECT * FROM `users` WHERE `id`='%d'", TopBidder);
							new Cache: abc = mysql_query(SQL, strr);
							cache_get_field_content(0, "name", name);
							cache_delete(abc);
							foreach(new xd : Player)
							{
								if(PlayerInfo[xd][pSQLID] == TopBidder) GetPlayerName(xd, name, sizeof(name));
							}
							if(IsABid == 1)
							{
								format(strr, sizeof(strr), "> %s a licitat cea mai mare suma ($%s) pentru casa (house) %d.", name, FormatNumber(BidAmount), IsAtBid);
								format(strr2, sizeof(strr2), "> %s has the highest bid ($%s) for casa (house) %d.", name, FormatNumber(BidAmount), IsAtBid);
							}
							else if(IsABid == 2)
							{
								format(strr, sizeof(strr), "> %s a licitat cea mai mare suma ($%s) pentru BIZ %d.", name, FormatNumber(BidAmount), IsAtBid);
								format(strr2, sizeof(strr2), "> %s has the highest bid ($%s) for BIZ %d.", name, FormatNumber(BidAmount), IsAtBid);
							}
							foreach(new x : Player)
							{
								if(TogBid[x] == 1)
								{
									if(PlayerInfo[x][pLanguage] == 2) SendClientMessage(x, COLOR_BID, strr);
									else return SendClientMessage(x, COLOR_BID, strr2);
								}
							}
							format(strr, sizeof(strr), "> Daca nimeni nu liciteaza mai mult, playerul ce a licitat cel mai mult va castiga proprietatea peste %d minute.", BidTime);
							format(strr2, sizeof(strr2), "> If no one places a higher bid, the highest bidder will win the property in %d minutes.", BidTime);
							foreach(new x : Player)
							{
								if(TogBid[x] == 1)
								{
									if(PlayerInfo[x][pLanguage] == 2) SendClientMessage(x, COLOR_BID, strr);
									else return SendClientMessage(x, COLOR_BID, strr2);
								}
							}
						}
						else
						{
							format(strr, sizeof(strr), "SELECT * FROM `users` WHERE `id`='%d'", TopBidder);
							new Cache: abx = mysql_query(SQL, strr);
							cache_get_field_content(0, "name", name);
							house = cache_get_field_content_int(0, "House");
							biz = cache_get_field_content_int(0, "Bizz");
							cache_delete(abx);
							if(IsABid == 1)
							{
								if(house != 999)
								{
									mysql_format(SQL, strr, sizeof(strr), "UPDATE `houses` SET `Owner`='AdmBot',`Owned`='1',`Rentabil`='1',`Rent`='5',`Prices`='0' WHERE `Owner`='%s'", name);
									mysql_tquery(SQL, strr, "", "");
									mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `House`='%d' WHERE `name`='AdmBot'", house);
									mysql_tquery(SQL, strr, "", "");
									HouseInfo[house][hOwned] = 1;
									HouseInfo[house][hRent] = 5;
									HouseInfo[house][hRentabil] = 1;
									HouseInfo[house][hPrice] = 0;
									strmid(HouseInfo[house][hOwner], "AdmBot", 0, 25, 255);
									OnPropTextdrawUpdate(1, house);
								}
								mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `House`='%d' WHERE `id`='%d'", IsAtBid, TopBidder);
								mysql_tquery(SQL, strr, "", "");
								mysql_format(SQL, strr, sizeof(strr), "UPDATE `houses` SET `Owner`='%s' WHERE `ID`='%d'", name, IsAtBid);
								mysql_tquery(SQL, strr, "", "");
								HouseInfo[IsAtBid][hOwned] = 1;
								strmid(HouseInfo[IsAtBid][hOwner], name, 0, 25, 255);
								foreach(new d : Player)
								{
									if(PlayerInfo[d][pSQLID] == TopBidder)
									{
										PlayerInfo[d][pPhousekey] = IsAtBid;
										GetPlayerName(d, name, sizeof(name));
									}
								}
								format(strr, sizeof(strr), "> %s a licitat cea mai mare suma ($%s) si a castigat casa (house) %d.", name, FormatNumber(BidAmount), IsAtBid);
								format(strr2, sizeof(strr2), "> %s had the highest bid ($%s) and won [casa (house) %d].", name, FormatNumber(BidAmount), IsAtBid);
								foreach(new xd : Player)
								{
									SS(xd, COLOR_BID, "[LICITATIE TERMINATA]", "[BID OVER]");
									if(PlayerInfo[xd][pLanguage] == 2) SendClientMessage(xd, COLOR_BID, strr);
									else return SendClientMessage(xd, COLOR_BID, strr2);
									SendClientMessage(xd, COLOR_BID, "---");
								}
								OnPropTextdrawUpdate(1, IsAtBid);
								IsABid = 0;
								TopBidder = -1;
								BidAmount = 1000000;
								BidAmount2 = 1;
								IsAtBid = 0;
							}
							else if(IsABid == 2)
							{
								if(biz != 255)
								{
									mysql_format(SQL, strr, sizeof(strr), "UPDATE `bizz` SET `Owner`='AdmBot',`Owned`='0',`Locked`='0' WHERE `Owner`='%s'", name);
									mysql_tquery(SQL, strr, "", "");
									mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `Bizz`='%d' WHERE `name`='AdmBot'", biz);
									mysql_tquery(SQL, strr, "", "");
									BizzInfo[biz][bOwned] = 1;
									BizzInfo[biz][bLocked] = 0;
									BizzInfo[biz][bPrice] = 0;
									strmid(BizzInfo[biz][bOwner], "AdmBot", 0, 25, 255);
									OnPropTextdrawUpdate(2, biz);
								}
								mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `Bizz`='%d' WHERE `id`='%d'", IsAtBid, TopBidder);
								mysql_tquery(SQL, strr, "", "");
								mysql_format(SQL, strr, sizeof(strr), "UPDATE `bizz` SET `Owner`='%s' WHERE `ID`='%d'", name, IsAtBid);
								mysql_tquery(SQL, strr, "", "");
								BizzInfo[IsAtBid][bOwned] = 1;
								strmid(BizzInfo[IsAtBid][bOwner], name, 0, 25, 255);
								foreach(new d : Player)
								{
									if(PlayerInfo[d][pSQLID] == TopBidder)
									{
										PlayerInfo[d][pPbiskey] = IsAtBid;
										GetPlayerName(d, name, sizeof(name));
									}
								}
								format(strr, sizeof(strr), "> %s a licitat cea mai mare suma ($%s) si a castigat BIZ %d.", name, FormatNumber(BidAmount), IsAtBid);
								format(strr2, sizeof(strr2), "> %s had the highest bid ($%s) and won BIZ %d.", name, FormatNumber(BidAmount), IsAtBid);
								foreach(new xd : Player)
								{
									SS(xd, COLOR_BID, "[LICITATIE TERMINATA]", "[BID OVER]");
									if(PlayerInfo[xd][pLanguage] == 2) SendClientMessage(xd, COLOR_BID, strr);
									else return SendClientMessage(xd, COLOR_BID, strr2);
									SendClientMessage(xd, COLOR_BID, "---");
								}
								OnPropTextdrawUpdate(2, IsAtBid);
								IsABid = 0;
								TopBidder = -1;
								BidAmount = 1000000;
								BidAmount2 = 1;
								IsAtBid = 0;
							}
						}
					}
				}
			}
		}
	}
	if(GetWeekDay() == 2 || GetWeekDay() == 3) // IN CAZ CA NU LICITEAZA NIMENI
	{
		if(hour == 1 && minute == 30 && IsABid != 0 && BidTime == 0)
		{
			IsABid = 0;
			TopBidder = -1;
			BidAmount = 1000000;
			BidAmount2 = 1;
			IsAtBid = 0;
			BidTime = 0;
		}
	}
	return 1;
}

forward SendRandMsg();
public SendRandMsg()
{
	foreach(new i : Player) SendMSG(i);
	return 1;
}

forward SendMSG(playerid);
public SendMSG(playerid)
{
	if(PlayerInfo[playerid][pLanguage] == 2)
	{
    	new randMSG = random(sizeof(RandomMSG));
    	SendClientMessage(playerid, COLOR_GREEN3, RandomMSG[randMSG]);
	}
	else if(PlayerInfo[playerid][pLanguage] == 1)
	{
    	new randMSGENG = random(sizeof(RandomMSGENG));
    	SendClientMessage(playerid, COLOR_GREEN3, RandomMSGENG[randMSGENG]);
	}
}

forward PlaceAD(playerid);
public PlaceAD(playerid)
{
	new string[256],sendername[30];
	KillTimer(AdvTimer[playerid]);
	GetPlayerName(playerid, sendername, sizeof(sendername));
	format(string,sizeof(string),"Ad by %s (phone: {FFFFFF}%d{00FF00}): %s",sendername,PlayerInfo[playerid][pPnumber],AdvMSG[playerid]);
	foreach(new i : Player)
	{
		if(i != playerid && PlayerInfo[i][pAdmin] == 0 && PlayerInfo[i][pHelper] == 0)
		{
			SendSplitMessage(i, COLOR_ADV, string);
		}
	}
	SendClientMessage(playerid, COLOR_GREEN, "Ad-ul tau:");
	format(string,sizeof(string),"Ad by %s (phone: {FFFFFF}%d{33AA33}): %s",sendername,PlayerInfo[playerid][pPnumber],AdvMSG[playerid]);
	SendClientMessage(playerid, COLOR_GREEN, string);
	SS(playerid, COLOR_DARKPINK, "Acum poti plasa un nou /ad.","Now you can place antoher /ad.");
	AdvPlayer[playerid] = 0;
	format(AdvMSG[playerid], 256, "");
	return 1;
}

forward IsPlayerInArea(playerid, Float:minx, Float:miny, Float:maxx, Float:maxy);
public IsPlayerInArea(playerid, Float:minx, Float:miny, Float:maxx, Float:maxy)
{
   new Float:x, Float:y, Float:z;
   GetPlayerPos(playerid, x, y, z);
   if(x > minx && x < maxx && y > miny && y < maxy) return 1;
   return 0;
}

forward IsPlayerInTurf(playerid, turfid);
public IsPlayerInTurf(playerid, turfid)
{
	if(IsPlayerConnected(playerid))
	{
		if(turfid == -1)
		{
			return 0;
		}
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid,x,y,z);
		if(x >= TurfInfo[turfid][zMinX] && x < TurfInfo[turfid][zMaxX] && y >= TurfInfo[turfid][zMinY] && y < TurfInfo[turfid][zMaxY])
		{
	 		return 1;
		}
	}
	return 0;
}

forward GetPlayerTurf(playerid);
public GetPlayerTurf(playerid)
{
    for(new i = 1; i < sizeof(Turfs); i++)
    {
        if(IsPlayerInTurf(playerid, i))
        {
            return i;
        }
    }
    return -1;
}

forward Production();
public Production()
{
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerDrunk[i] > 0)
			{
			    PlayerDrunk[i] = 0;
		     	PlayerDrunkTime[i] = 0;
	    		GameTextForPlayer(i, "~p~Drunk effect~n~~w~Gone", 3500, 1);
	    		SetPlayerDrunkLevel(i, 0);
			}
		}
	}
	if(RestartTimer == 1)
	{
		SendClientMessageToAll(COLOR_GENANNOUNCE, "SERVER: The server restart is scheduled for the next payday.");
		SendClientMessageToAll(COLOR_GENANNOUNCE, "SERVER: If nothing posted on panel, probabily nothing new has been added.");
	}
	return 1;
}

forward TwoMinutesTimer();
public TwoMinutesTimer()
{
	if(kickafk == 1)
	{
		new name[30],string[128];
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pSleeping] == 0)
				{
					if(IsPlayerAFK[i] >= 1680)
					{
						SS(i, COLOR_LIGHTRED, "Daca nu te misti vei primi kick in 2 minute.", "If you don't move you will be kicked in 2 minutes.");
					}
					if(IsPlayerAFK[i] >= 1800)
					{
						SS(i, COLOR_WHITE, "Ai primit kick pentru ca ai fost AFK mai mult de 30 de minute.", "You were kicked for being AFK (away from keyboard) for more than 30 minutes.");
						SS(i, COLOR_WHITE, "Pentru a-ti lasa caracterul AFK mai mult de 30 de minute, foloseste /sleep intr-o casa.", "To leave your character AFK for longer than 30 minutes, use /sleep in a house.");
						SendClientMessage(i, COLOR_GENANNOUNCE, "You have been kicked for being AFK.");
						GetPlayerName(i, name, sizeof(name));
						format(string, sizeof(string),"AdmCmd: %s was kicked by AdmBot for being AFK for more than 30 minutes.",name);
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						new var100[300];
						mysql_format(SQL, var100, sizeof(var100), "INSERT INTO kicklogs (`playerid`,`giverid`,`playername`,`givername`,`reason`) VALUES ('%d','3','%s','AdmBot','AFK for more than 30 minutes')", PlayerInfo[i][pSQLID],PlayerInfo[i][pNormalName]);
						mysql_tquery(SQL,var100,"","");
						KickEx(i);
					}
				}
			}
		}
	}
	new test[256],questions,helpers,string[128];
	mysql_format(SQL, test, sizeof(test), "DELETE FROM `timeplayed` WHERE `unixtime` < '%d'", (gettime() - 86400*60));
	mysql_tquery(SQL, test, "", "");
	mysql_format(SQL, test, sizeof(test), "DELETE FROM `recover` WHERE `time` < '%d'", (gettime() - 36000));
	mysql_tquery(SQL, test, "", "");
	mysql_format(SQL, test, sizeof(test), "DELETE FROM `changemail` WHERE `time` < '%d'", (gettime() - 36000));
	mysql_tquery(SQL, test, "", "");
	mysql_format(SQL, test, sizeof(test), "DELETE FROM `login` WHERE `time` < '%d'", (gettime() - 36000));
	mysql_tquery(SQL, test, "", "");
	mysql_format(SQL, test, sizeof(test), "DELETE FROM `antifraudaraport` WHERE `time` < '%d'", gettime());
	mysql_tquery(SQL, test, "", "");
	mysql_format(SQL, test, sizeof(test), "UPDATE `blockedaccounts` SET `unblock`='0',`key`='',`linkexpire`='0' WHERE `unblock` < '%d'", (gettime() - 86400*3));
	mysql_tquery(SQL, test, "", "");
	mysql_format(SQL, test, sizeof(test), "UPDATE `blockedaccounts` SET `linkexpire`='0',`key`='' WHERE `linkexpire` < '%d'", gettime());
	mysql_tquery(SQL, test, "", "");
	foreach(new j : Player)
	{
		if(strcmp(PlayerInfo[j][pNewbieQuestion], "NULL", true)) questions++;
		if((PlayerInfo[j][pHelper] > 0 && HelperDuty[j] == 1) || (PlayerInfo[j][pAdmin] > 0 && HelperDuty[j] == 1)) helpers++;
	}
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pHelper] > 0 || PlayerInfo[i][pAdmin] > 0)
		{
			if(questions > helpers)
			{
				format(string, sizeof(string),"{FF6200}** {FFFF00}There are %d questions and %d helpers on duty. {FF6200}**", questions, helpers);
				SendClientMessage(i, COLOR_YELLOW, string);
			}
		}
	}
	return 1;
}

AntiFlood_Check( playerid, bool:inc=true ) {
	AntiFlood_Data[playerid][floodRate] += inc ? RATE_INC : 0;
	AntiFlood_Data[playerid][floodRate] = AntiFlood_Data[playerid][floodRate] - ( GetTickCount() - AntiFlood_Data[playerid][lastCheck] );
	AntiFlood_Data[playerid][lastCheck] = GetTickCount();
	AntiFlood_Data[playerid][floodRate] = AntiFlood_Data[playerid][floodRate] < 0 ? 0 : AntiFlood_Data[playerid][floodRate];
	if( AntiFlood_Data[playerid][floodRate] >= RATE_MAX ) {
		#if THRESOLD_ACTION == 1
			KickEx(playerid);
		#elseif THRESOLD_ACTION == 2
			KickEx(playerid);
		#else
			SCM(playerid,COLOR_RED,"Inceteaza sa mai faci spam!");
		#endif

		return false;
	}
	return true;
}

AntiFlood_InitPlayer( playerid ) {
	AntiFlood_Data[playerid][lastCheck] = GetTickCount();
	AntiFlood_Data[playerid][floodRate] = 0;
}

function PlayerPayDay(playerid) {
	new string[128],
		str[256],
		string3[128],
		interest,
		hour,
		minn,
		sec,
		ye,
		mo,
		da,
		rent[MAX_PLAYERS],
		hourscount;
	gettime(hour,minn,sec);
	hour+=SERVER_HOUR_FIX;
	if(hour == 24) hour = 0;
	getdate(ye, mo, da);

	if(PlayerInfo[playerid][pLevel] >= 0)
    {
    	new wakaname[25];
        GetPlayerName(playerid,wakaname,sizeof(wakaname));

        // money on payday
		PlayerInfo[playerid][pPayCheck] = PlayerInfo[playerid][pLevel] * 100000;
		TaxValue = 0;

        // jail for lack of money
	    if(MoneyMessage[playerid]==1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "You failed to pay your debt, Jail time.");
            new rand;
			rand = random(sizeof(gRandomJailSpawns));
			SetPlayerInterior(playerid, 6);
			SetPlayerPosEx(playerid,gRandomJailSpawns[rand][0],gRandomJailSpawns[rand][1],gRandomJailSpawns[rand][2]);
            PlayerInfo[playerid][pJailed] = 1;
            ResetPlayerWeaponsEx(playerid);
            ResetPlayerWeapons(playerid);
			WantedPoints[playerid] = 0;
			PlayerInfo[playerid][pJailTime] = 240;
			format(string, sizeof(string), "You are jailed for %d seconds. Bail: Unable", PlayerInfo[playerid][pJailTime]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			ResetPlayerCash(playerid);
			GivePlayerCash(playerid, 1000);
			Update(playerid,pJailedx);
			Update(playerid,pJailTimex);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnFreezeStation", 1000, false, "playerid", playerid);
		}

		// house rent money
		new key = PlayerInfo[playerid][pRented];
		if(key != -1)
		{
			rent[playerid] = HouseInfo[key][hRent];
			if(rent[playerid] > GetPlayerCash(playerid) && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[key][hOwner], false) == 0)
			{
				PlayerInfo[playerid][pRented] = -1;
				Update(playerid,pRentedx);
			}
			TaxValue += rent[playerid];
			HouseInfo[key][hTakings] += rent[playerid];
		    mysql_format(SQL,str,sizeof(str),"UPDATE `houses` SET `Takings`='%d' WHERE `ID`='%d'",HouseInfo[key][hTakings],key);
		    mysql_tquery(SQL,str,"","");
		}

		// payday on for faction members
		if(PlayerInfo[playerid][pMember] != 0)
		{
			PlayerInfo[playerid][pPaydayON]++;
			Update(playerid, pPaydayONx);
		}

		// more money for premium users
		new tmpintrate;
		if(PlayerInfo[playerid][pPremiumAccount] > 0)
		{
			tmpintrate = 2;
			new bonus = PlayerInfo[playerid][pPayCheck] / 2;
		    PlayerInfo[playerid][pPayCheck] += bonus;
		}
		else tmpintrate = 1;

		TaxValue += PlayerInfo[playerid][pLevel] * 1000;

		PlayerInfo[playerid][pPayCheck] -= TaxValue;
		
		interest = (PlayerInfo[playerid][pAccount]/1000)*(tmpintrate);

		PlayerInfo[playerid][pPayCheck] += interest;

		PlayerInfo[playerid][pAccount] += PlayerInfo[playerid][pPayCheck];


		new stringore[128];
		new Float:timee,Float:timee2;
		SendClientMessage(playerid, COLOR_TEAL, "----------------------------------------------------------------------------");
		SendClientMessage(playerid, COLOR_WHITE, "Your paycheck has arrived; please visit the bank to withdraw your money.");

		// for hours played
		PlayerInfo[playerid][pConnectTime] += PlayerInfo[playerid][pPayDay] / 3600.0;
		timee = PlayerInfo[playerid][pPayDay] / 3600.0;
		timee2 = PlayerInfo[playerid][pPayDay] / 60.0;

		if(PlayerInfo[playerid][pPayDay] > 1801)
		{
			PlayerInfo[playerid][pGiftTime] += 40;
			Update(playerid, pGiftTimex);
			if(PlayerInfo[playerid][pPet] != 0)
			{
				PlayerInfo[playerid][pPetPoints] += 3;
				Update(playerid,pPetPointsx);
				if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "(Pet){FFFFFF} Ai primit 3 puncte pentru pet si %s$ pentru ca ai un pet de nivel %d.",FormatNumber(PlayerInfo[playerid][pPetLevel]*2000),PlayerInfo[playerid][pPetLevel]);
				else format(string, sizeof(string), "(Pet){FFFFFF} You received 3 pet points and %s$ because you have a pet of level %d.",FormatNumber(PlayerInfo[playerid][pPetLevel]*2000),PlayerInfo[playerid][pPetLevel]);
				GivePlayerCash(playerid, PlayerInfo[playerid][pPetLevel]*2000);
				SendClientMessage(playerid, COLOR_PET, string);
			}
			SS(playerid,COLOR_GREY, "Ai primit 40 gift points pentru ca ai jucat 1801 secunde.","You recieved 40 gift points because you played 1801 seconds.");
		}
		else 
		{
			PlayerInfo[playerid][pGiftTime] += 20;
			Update(playerid, pGiftTimex);
			if(PlayerInfo[playerid][pPet] != 0)
			{
				PlayerInfo[playerid][pPetPoints]++;
				Update(playerid,pPetPointsx);
				if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "(Pet){FFFFFF} Ai primit un punct pentru pet si %s$ pentru ca ai un pet de nivel %d.",FormatNumber(PlayerInfo[playerid][pPetLevel]*1000),PlayerInfo[playerid][pPetLevel]);
				else format(string, sizeof(string), "(Pet){FFFFFF} You received a pet point and %s$ because you have a pet of level %d.",FormatNumber(PlayerInfo[playerid][pPetLevel]*1000),PlayerInfo[playerid][pPetLevel]);
				GivePlayerCash(playerid, PlayerInfo[playerid][pPetLevel]*1000);
				SendClientMessage(playerid, COLOR_PET, string);
			}
			SS(playerid,COLOR_GREY, "Ai primit 20 gift points pentru ca nu ai jucat 1801 secunde.","You recieved 20 gift points because you not played 1801 seconds.");
		}

		if(PlayerInfo[playerid][pNextCase] > 1) {
			PlayerInfo[playerid][pNextCase]--;
			Update(playerid,pNextCasex);
			format(string, sizeof(string), "You'll receive one case in %d paydays.",PlayerInfo[playerid][pNextCase]);
			SendClientMessage(playerid, COLOR_GREY, string);
		}
		else 
		{
			SendClientMessage(playerid, COLOR_GREY, "You received the case for 5 paydays online, use /opencase to open it.");
			PlayerInfo[playerid][pCases]++;
			Update(playerid,pCasesx);
			PlayerInfo[playerid][pNextCase] = 5;
			Update(playerid,pNextCasex);
		}

		PlayerInfo[playerid][pPayDay] = 0;
		hourscount++;
		if(PlayerInfo[playerid][pLanguage] == 1) format(stringore, sizeof(stringore), "You received %.2f hours played (%d minutes).",timee,floatround(timee2));
		else format(stringore, sizeof(stringore), "Ai primit %.2f ore jucate (%d minute).",timee,floatround(timee2));
		SendClientMessage(playerid, COLOR_WHITE, stringore);

		if(PlayerInfo[playerid][pRob] < 20)
		{
				PlayerInfo[playerid][pRob]++;
				Update(playerid,pRobx);
   		}
   		else SS(playerid, COLOR_WHITE, "Nu ai primit niciun rob/free point pentru ca ai deja 20 rob/free points.", "No rob points for you! You have too many rob/free points. You can't store more than 20 rob/free points.");
		
		format(string, sizeof(string), "Paycheck: $%s | Bank balance: $%s | Bank interest: $%s | Tax: $%s", FormatNumber(PlayerInfo[playerid][pPayCheck] + TaxValue), FormatNumber(PlayerInfo[playerid][pAccount]), FormatNumber(interest), FormatNumber(TaxValue));
		SendClientMessage(playerid, COLOR_GREY, string);
		format(string3, sizeof(string3), "Rent: $%s | Total earnings: $%s", FormatNumber(rent[playerid]), FormatNumber(PlayerInfo[playerid][pPayCheck]));
		SendClientMessage(playerid, COLOR_GREY, string3);
		SendClientMessage(playerid, COLOR_TEAL, "----------------------------------------------------------------------------");
		format(string, sizeof(string), "~g~payday");
		GameTextForPlayer(playerid, string, 5000, 1);

		// rp and level buy announcement
		PlayerInfo[playerid][pExp]++;
		new nxtlevel = PlayerInfo[playerid][pLevel];
		new expamount;
		if(PlayerInfo[playerid][pLevel] <= 4)
		{
		    expamount = nxtlevel*2;
		    if(PlayerInfo[playerid][pExp] >= expamount) SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have enought respect points to get the next level, use /buylevel.");
		}
		else if(PlayerInfo[playerid][pLevel] >= 5)
		{
		    expamount = nxtlevel*levelexp;
		    if(PlayerInfo[playerid][pExp] >= expamount) SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have enought respect points to get the next level, use /buylevel.");
		}

		// licences verify
		if(PlayerInfo[playerid][pCarLicT] > 0)
		{
			PlayerInfo[playerid][pCarLicT] -= 1;
			Update(playerid,pCarLicTx);
			if(PlayerInfo[playerid][pCarLicT] == 0) 
			{
				SS(playerid, COLOR_LIGHTRED, "* Licenta ta de condus a expirat, poti merge la DMV pentru a obtine alta.","* Your driving licence was expired, you can go to the DMV to get another.");
				PlayerInfo[playerid][pCarLic] = 0;
				Update(playerid, pCarLicx);
			}
		}
		if(PlayerInfo[playerid][pFlyLicT] > 0)
		{
			PlayerInfo[playerid][pFlyLicT] -= 1;
			Update(playerid,pFlyLicTx);
			if(PlayerInfo[playerid][pFlyLicT] == 0) 
			{
				SS(playerid, COLOR_LIGHTRED, "* Licenta ta de zburat a expirat, poti obtine alta daca dai din nou examenul.","* Your flying licence was expired, you can get antoher if you take the exam again.");
				PlayerInfo[playerid][pFlyLic] = 0;
				Update(playerid, pFlyLicx);
			}
		}
		if(PlayerInfo[playerid][pBoatLicT] > 0)
		{
			PlayerInfo[playerid][pBoatLicT] -= 1;
			Update(playerid,pBoatLicTx);
			if(PlayerInfo[playerid][pBoatLicT] == 0) 
			{
				SS(playerid, COLOR_LIGHTRED, "* Licenta ta de barci a expirat, poti obtine alta daca dai din nou examenul.","* Your boat licence was expired, you can get antoher if you take the exam again.");
				PlayerInfo[playerid][pBoatLic] = 0;
				Update(playerid, pBoatLicx);
			}
		}
		if(PlayerInfo[playerid][pGunLicT] > 0)
		{
			PlayerInfo[playerid][pGunLicT] -= 1;
			Update(playerid, pGunLicTx);
			if(PlayerInfo[playerid][pGunLicT] == 0) 
			{
				SS(playerid, COLOR_LIGHTRED, "* Licenta ta de arme a expirat, poti obtine alta daca dai din nou examenul.","* Your weapon licence was expired, you can get antoher if you take the exam again.");
				PlayerInfo[playerid][pGunLic] = 0;
				Update(playerid, pGunLicx);
			}
		}

		//fpunish
		if(PlayerInfo[playerid][pFpunish] > 0)
		{
			PlayerInfo[playerid][pFpunish]--;
			Update(playerid, pFpunishx);
 		}
 		if(PlayerInfo[playerid][pFpunish] < 0)
 		{
			PlayerInfo[playerid][pFpunish] = 0;
			Update(playerid, pFpunishx);
		}

		//licences suspend verify
		if(PlayerInfo[playerid][pCarLicSuspend] > 0)
		{
			PlayerInfo[playerid][pCarLicSuspend]--;
			Update(playerid, pCarLicSuspendx);
			if(PlayerInfo[playerid][pCarLicSuspend] == 0) SS(playerid, COLOR_LIGHTRED, "* Licenta ta de condus a fost confiscata recent, acum poti merge iar la DMV pentru a obtine alta.","* Your driving licence was confiscated recently, now you can go to the DMV to get another.");
		}
		if(PlayerInfo[playerid][pGunLicSuspend] > 0)
		{
			PlayerInfo[playerid][pGunLicSuspend]--;
			Update(playerid, pGunLicSuspendx);
			if(PlayerInfo[playerid][pGunLicSuspend] == 0) SS(playerid, COLOR_LIGHTRED, "* Licenta ta de arme a fost confiscata recent, acum poti obtine alta daca dai din nou examenul.","* Your weapon licence was confiscated recently, now you can get antoher if you take the exam again.");
		}

		new month, day, inserted, dx;
		format(str, sizeof(str), "SELECT * FROM `timeplayed` WHERE `pid`='%d'", PlayerInfo[playerid][pSQLID]);
		new Cache: xd = mysql_query(SQL, str);
		if(cache_get_row_count() > 0)
		{
			for(new d, js = cache_get_row_count (); d != js; ++d)
			{
				month = cache_get_field_content_int(d, "month");
				day = cache_get_field_content_int(d, "day");
				if(day == da && month == mo)
				{
					inserted = 1;
				}
			}
		}
		else
		{
			mysql_format(SQL, str, sizeof(str), "INSERT INTO `timeplayed` (`pid`,`time`,`month`,`day`,`year`,`unixtime`) VALUES ('%d','%d','%s%d','%s%d','%d','%d')", PlayerInfo[playerid][pSQLID], OnlineTimeToday[playerid], ((mo < 10) ? ("0") : ("")), mo, ((da < 10) ? ("0") : ("")), da, ye, gettime());
			mysql_tquery(SQL, str, "", "");
			dx = 1;
			OnlineTimeToday[playerid] = 0;
			Update(playerid, pOnlineTimeTodayx);
		}
		cache_delete(xd);
		if(dx == 0)
		{
			if(inserted == 1)
			{
				mysql_format(SQL, str, sizeof(str), "UPDATE timeplayed SET time = time+%d WHERE month = %d AND day = %d AND pid = %d", OnlineTimeToday[playerid], mo, da, PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL, str, "", "");
				OnlineTimeToday[playerid] = 0;
				Update(playerid, pOnlineTimeTodayx);
			}
			else
			{
				mysql_format(SQL, str, sizeof(str), "INSERT INTO `timeplayed` (`pid`,`time`,`month`,`day`,`year`,`unixtime`) VALUES ('%d','%d','%s%d','%s%d','%d','%d')", PlayerInfo[playerid][pSQLID], OnlineTimeToday[playerid], ((mo < 10) ? ("0") : ("")), mo, ((da < 10) ? ("0") : ("")), da, ye, gettime());
				mysql_tquery(SQL, str, "", "");
				OnlineTimeToday[playerid] = 0;
				Update(playerid, pOnlineTimeTodayx);
			}
		}
	}
}

forward PayDay();
public PayDay()
{
	new str[256],
		hour,
		minn,
		sec,
		ye,
		mo,
		da,
		hourscount;
	gettime(hour,minn,sec);
	hour+=SERVER_HOUR_FIX;
	if(hour == 24) hour = 0;
	getdate(ye, mo, da);
	if(RestartTimer == 1)
	{
		SendClientMessageToAll(COLOR_YELLOW, "---- SERVER RESTART ----");
		SendClientMessageToAll(COLOR_RED2, "The server will be restarted in 60 seconds.");
		foreach(new x : Player)
		{
			Update(x, pPayDayx);
			Update(x, pFpunishx);
			Update(x, pConnectTimex);
			Update(x, pBank);
			Update(x, pCashx);
			Update(x, pExpx);
			Update(x, pJailTimex);
			Update(x, pLevelx);
			Update(x, pOnlineTimeTodayx);
		}
		iGMXTick = 60;
		iGMXTimer = SetTimer("restartTimer", 1000, true);
		RestartTimer = 0;
	}

	format(str, sizeof(str), "INSERT INTO `toph` (`ponline`,`hour`) VALUES ('%d','%s%d:00')", GetOnLinePlayers(), ((hour < 10) ? ("0") : ("")), hour);
	mysql_query(SQL, str);
	mysql_query(SQL, "DELETE FROM `toph` ORDER BY `id` ASC limit 1");
	format(str, sizeof(str), "SELECT * FROM `timeonline` WHERE m = %d AND y = %d",mo,ye);
	new Cache: result = mysql_query(SQL, str);
	if(cache_get_row_count() >= 1)
	{
		mysql_format(SQL,str,sizeof(str),"UPDATE timeonline SET hoursplayed = hoursplayed+%d WHERE m = %d AND y = %d",hourscount,mo,ye);
		mysql_tquery(SQL,str,"","");
	}
	cache_delete(result);
	return 1;
}

stock GetWeaponSlot (weaponid)
{
	switch (weaponid)
	{
		case 0, 1:
			return 0;

		case 2 .. 9:
			return 1;
		case 10 .. 15:
			return 10;
		case 16 .. 19, 39:
			return 8;
		case 22 .. 24:
			return 2;
		case 25 .. 27:
			return 3;
		case 28, 29, 32:
			return 4;
		case 30, 31:
			return 5;
		case 33, 34:
			return 6;
		case 35 .. 38:
			return 7;
		case 40:
			return 12;
		case 41 .. 43:
			return 9;

		case 44 .. 46:
			return 11;
	}
	return 0;
}

stock GivePlayerWeaponEx(playerid,weapon,ammo)
{
	WeaponData[playerid][GetWeaponSlot(weapon)] = true;
	return GivePlayerWeapon(playerid,weapon,ammo);
}

stock ResetPlayerWeaponsEx(playerid)
{
	WeaponData[playerid][0] = false; WeaponData[playerid][1] = false; WeaponData[playerid][2] = false; WeaponData[playerid][3] = false;
	WeaponData[playerid][4] = false; WeaponData[playerid][5] = false; WeaponData[playerid][6] = false; WeaponData[playerid][7] = false;
	WeaponData[playerid][8] = false; WeaponData[playerid][9] = false; WeaponData[playerid][10] = false; WeaponData[playerid][11] = false;
	WeaponData[playerid][12] = false;
	return ResetPlayerWeapons(playerid);
}

stock GetWeaponNameEx(id, name[], len) return format(name,len, "%s", GunNames[id]);

stock RemovePlayerWeapon(playerid, weaponid);
public RemovePlayerWeapon(playerid, weaponid)
{
	new plyWeapons[12] = 0,
		plyAmmo[12] = 0;
	for(new sslot = 0; sslot != 12; sslot++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, sslot, wep, ammo);
		if(wep != weaponid && ammo != 0) GetPlayerWeaponData(playerid, sslot, plyWeapons[sslot], plyAmmo[sslot]);
	}
	ResetPlayerWeaponsEx(playerid);
	ResetPlayerWeapons(playerid);
	for(new sslot = 0; sslot != 12; sslot++)
	{
	    if(plyAmmo[sslot] != 0) GivePlayerWeaponEx(playerid, plyWeapons[sslot], plyAmmo[sslot]);
	}
	return 1;
}

forward split(const strsrc[], strdest[][], delimiter);
public split(const strsrc[], strdest[][], delimiter)
{
	new i,
		li,
		aNum,
		len;
	while(i <= strlen(strsrc)){
	    if(strsrc[i]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}

forward OnPlayerRegister(playerid, password[]);
public OnPlayerRegister(playerid, password[])
{
	if(IsPlayerConnected(playerid))
	{
		new playername3[MAX_PLAYER_NAME]; 
		GetPlayerName(playerid, playername3, sizeof(playername3));
		new Str[200];
		new y, m, d, h, mi, s;
		getdate(y,m,d);
		gettime(h,mi,s);
		h+=SERVER_HOUR_FIX;
		if(h == 24) h = 0;
		mysql_format(SQL,Str,sizeof(Str),"INSERT INTO `users` (`name`, `password`, `RegisterDate`, `Sex`, `Age`, `Language`) VALUES ('%s','%s','%d-%02d-%02d %02d:%02d:%02d', '%d', '%d', '%d')",playername3,password, y, m, d, h, mi, s, RegSex[playerid], RegAge[playerid], RegLanguage[playerid]);
		mysql_tquery(SQL,Str,"","");
		strmid(PlayerInfo[playerid][pKey], password, 0, strlen(password), 255);
		PlayerInfo[playerid][pCash] = GetPlayerCash(playerid);
		if((PlayerInfo[playerid][pPos_x]==0.0 && PlayerInfo[playerid][pPos_y]==0.0 && PlayerInfo[playerid][pPos_z]==0.0))
		{
     	    PlayerInfo[playerid][pPos_x] = 2246.6;
     	    PlayerInfo[playerid][pPos_y] = -1161.9;
     	    PlayerInfo[playerid][pPos_z] = 1029.7;
		}
		if(Spectate[playerid] != -1)
		{
			PlayerInfo[playerid][pPos_x] = Unspec[playerid][sPx];
			PlayerInfo[playerid][pPos_y] = Unspec[playerid][sPy];
			PlayerInfo[playerid][pPos_z] = Unspec[playerid][sPz];
			PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
			PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
		}
		format(KeepPassword[playerid], 129, "NULL");
		HideRegisterTds(playerid);
		ShowLoginTds(playerid);
		
		new connectplayer[60],stringplayer[128],country[64],bans,stre[256],playerip[16],city[64];
 		GetPlayerName(playerid,connectplayer,sizeof(connectplayer));
		GetPlayerCountry(playerid, country, sizeof(country));
		GetPlayerCity(playerid, city, sizeof(city));
		GetPlayerIp(playerid, playerip, sizeof(playerip));
		format(stre, sizeof(stre), "SELECT * FROM `bans` WHERE `IP`='%s'", playerip);
		new Cache: ab = mysql_query(SQL, stre);
		bans = cache_get_row_count();
		cache_delete(ab);
		if(bans > 0) format(stringplayer,sizeof(stringplayer),"New account: %s (%d) - from %s (%s) - %d banned accounts with this IP (%s).", connectplayer, playerid, country, city, bans, playerip);
		else format(stringplayer,sizeof(stringplayer),"New account: %s (%d) - from %s (%s).",connectplayer,playerid,country, city);
 		HLChat(COLOR_RED2,stringplayer);
  		ABroadCast(COLOR_RED2,stringplayer,1);
		foreach(new iss : Player)
		{
			if(PlayerInfo[iss][pHelper] > 0 || PlayerInfo[iss][pAdmin] > 0)
			{
				KillTimer(deathdeletetime[iss]);
				SendDeathMessageToPlayer(iss, INVALID_PLAYER_ID, playerid, 200);
				deathdeletetime[iss] = SetTimerEx("DeleteDeathMessage",30000,0,"d",iss);
			}
		}
		return 1;
	}
	return 1;
}

forward OnPlayerLogin(playerid,password[]);
public OnPlayerLogin(playerid,password[])
{
	new playername2[MAX_PLAYER_NAME],playerip[16];
    GetPlayerName(playerid, playername2, sizeof(playername2));
    GameTextForPlayer(playerid, "~w~LOADING...~n~~g~CHECKING THE PASSWORD", 700, 3);
	GetPlayerIp(playerid,playerip,sizeof(playerip));
	if(NumIp(playerip, playerid) >= SvarInfo[20][svValue])
	{
		new string[128];
		format(string,sizeof(string), "(Error){FFFFFF} Maximum connections with same ip is %d. You need to be kicked.",SvarInfo[20][svValue]);
 		SendClientMessage(playerid, COLOR_ERROR, string);
 		KickEx(playerid);
 		return 1;
	}
    new qstr[256];
    format(qstr,sizeof(qstr),"SELECT * FROM users WHERE `name`='%s' AND `password`='%s'",playername2,password);
    new Cache: pass = mysql_query(SQL,qstr);
    if(cache_get_row_count() > 0)
    {
    	HideLoginTds(playerid);
    	format(KeepPassword[playerid], 129, "NULL");
		cache_get_field_content(0, "password", PlayerInfo[playerid][pKey], SQL, 130);
    	cache_get_field_content(0, "name", PlayerInfo[playerid][pNormalName], SQL, 130);
    	PlayerInfo[playerid][pLevel]                    = cache_get_field_content_int(0, "Level");
    	PlayerInfo[playerid][pAdmin]                    = cache_get_field_content_int(0, "Admin");
    	PlayerInfo[playerid][pHelper]                   = cache_get_field_content_int(0, "Helper");
    	PlayerInfo[playerid][pPremiumAccount]           = cache_get_field_content_int(0, "Premium");
    	PlayerInfo[playerid][pPremiumPoints]            = cache_get_field_content_int(0, "PremiumPoints");
    	PlayerInfo[playerid][pConnectTime]              = cache_get_field_content_float(0, "ConnectedTime");
    	PlayerInfo[playerid][pReg]                      = cache_get_field_content_int(0, "Registered");
    	PlayerInfo[playerid][pSex]                      = cache_get_field_content_int(0, "Sex");
    	PlayerInfo[playerid][pAge]                      = cache_get_field_content_int(0, "Age");
		PlayerInfo[playerid][pGasCan]                   = cache_get_field_content_int(0, "GasCan");
    	PlayerInfo[playerid][pOrigin]                   = cache_get_field_content_int(0, "Origin");
    	PlayerInfo[playerid][pMuted]                    = cache_get_field_content_int(0, "Muted");
	 	PlayerInfo[playerid][pMuteTime]                 = cache_get_field_content_int(0, "MuteTime");
    	PlayerInfo[playerid][pExp]                      = cache_get_field_content_int(0, "Respect");
    	PlayerInfo[playerid][pCash]                     = cache_get_field_content_int(0, "Money");
    	PlayerInfo[playerid][pAccount]                  = cache_get_field_content_int(0, "Bank");
    	PlayerInfo[playerid][pCrimes]                   = cache_get_field_content_int(0, "Crimes");
    	PlayerInfo[playerid][pKills]                    = cache_get_field_content_int(0, "Kills");
    	PlayerInfo[playerid][pDeaths]                   = cache_get_field_content_int(0, "Deaths");
    	PlayerInfo[playerid][pWantedDeaths]             = cache_get_field_content_int(0, "WantedDeaths");
    	PlayerInfo[playerid][pPhoneBook]                = cache_get_field_content_int(0, "Phonebook");
    	PlayerInfo[playerid][pWantedLevel]              = cache_get_field_content_int(0, "WantedLevel");
    	PlayerInfo[playerid][pJob]                      = cache_get_field_content_int(0, "Job");
    	PlayerInfo[playerid][pHeadValue]                = cache_get_field_content_int(0, "HeadValue");
    	PlayerInfo[playerid][pJailed]                   = cache_get_field_content_int(0, "Jailed");
    	PlayerInfo[playerid][pJailTime]                 = cache_get_field_content_int(0, "JailTime");
    	PlayerInfo[playerid][pMats]                     = cache_get_field_content_int(0, "Materials");
    	PlayerInfo[playerid][pDrugs]                    = cache_get_field_content_int(0, "Drugs");
    	PlayerInfo[playerid][pLeader]                   = cache_get_field_content_int(0, "Leader");
    	PlayerInfo[playerid][pMember]                   = cache_get_field_content_int(0, "Member");
    	PlayerInfo[playerid][pRank]                     = cache_get_field_content_int(0, "Rank");
    	PlayerInfo[playerid][pFACWarns]                 = cache_get_field_content_int(0, "FWarn");
    	PlayerInfo[playerid][pFpunish]                  = cache_get_field_content_int(0, "FPunish");
    	PlayerInfo[playerid][pFishSkill]                = cache_get_field_content_int(0, "FishSkill");
    	PlayerInfo[playerid][pSpawnChange]              = cache_get_field_content_int(0, "SpawnChange");
		PlayerInfo[playerid][pReportMuted]              = cache_get_field_content_int(0, "ReportMuted");
 		PlayerInfo[playerid][pRobSkill]                 = cache_get_field_content_int(0, "RobSkill");
    	PlayerInfo[playerid][pTruckSkill]               = cache_get_field_content_int(0, "TruckSkill");
    	PlayerInfo[playerid][pTruckTimes]               = cache_get_field_content_int(0, "TruckTimes");
    	PlayerInfo[playerid][pTruckRem]                 = cache_get_field_content_int(0, "TruckRem");
    	PlayerInfo[playerid][pFarmSkill]                = cache_get_field_content_int(0, "FarmSkill");
    	PlayerInfo[playerid][pFarmTimes]                = cache_get_field_content_int(0, "FarmTimes");
    	PlayerInfo[playerid][pFarmRem]                  = cache_get_field_content_int(0, "FarmRem");
		PlayerInfo[playerid][pPizzaSkill]               = cache_get_field_content_int(0, "PizzaSkill");
    	PlayerInfo[playerid][pPizzaTimes]               = cache_get_field_content_int(0, "PizzaTimes");
    	PlayerInfo[playerid][pPizzaRem]                 = cache_get_field_content_int(0, "PizzaRem");
		PlayerInfo[playerid][pArmsSkill]                = cache_get_field_content_int(0, "ArmsSkill");
		PlayerInfo[playerid][pArmsTimes]                = cache_get_field_content_int(0, "ArmsTimes");
		PlayerInfo[playerid][pArmsRem]                	= cache_get_field_content_int(0, "ArmsRem");
		PlayerInfo[playerid][pBusSkill]                	= cache_get_field_content_int(0, "BusSkill");
		PlayerInfo[playerid][pBusTimes]                	= cache_get_field_content_int(0, "BusTimes");
		PlayerInfo[playerid][pBusRem]                	= cache_get_field_content_int(0, "BusRem");
    	PlayerInfo[playerid][pFishTimes]                = cache_get_field_content_int(0, "FishTimes");
    	PlayerInfo[playerid][pFishRem]                  = cache_get_field_content_int(0, "FishRem");
    	PlayerInfo[playerid][pRobRem]                   = cache_get_field_content_int(0, "RobRem");
    	PlayerInfo[playerid][pRobTimes]                 = cache_get_field_content_int(0, "RobTimes");
		PlayerInfo[playerid][pGarbageSkill]             = cache_get_field_content_int(0, "GarbageSkill");
		PlayerInfo[playerid][pGarbageTimes]             = cache_get_field_content_int(0, "GarbageTimes");
		PlayerInfo[playerid][pGarbageRem]             	= cache_get_field_content_int(0, "GarbageRem");
    	PlayerInfo[playerid][pModel]                    = cache_get_field_content_int(0, "Model");
    	PlayerInfo[playerid][pPnumber]                  = cache_get_field_content_int(0, "PhoneNr");
    	PlayerInfo[playerid][pPhousekey]                = cache_get_field_content_int(0, "House");
    	PlayerInfo[playerid][pPbiskey]                  = cache_get_field_content_int(0, "Bizz");
    	PlayerInfo[playerid][pPos_x]                    = cache_get_field_content_float(0, "Pos_x");
    	PlayerInfo[playerid][pPos_y]                    = cache_get_field_content_float(0, "Pos_y");
    	PlayerInfo[playerid][pPos_z]                    = cache_get_field_content_float(0, "Pos_z");
    	PlayerInfo[playerid][pRob]                      = cache_get_field_content_int(0, "Rob");
    	PlayerInfo[playerid][pCarLicT]                  = cache_get_field_content_int(0, "CarLicT");
    	PlayerInfo[playerid][pCarLic]                   = cache_get_field_content_int(0, "CarLic");
		PlayerInfo[playerid][pCarLicSuspend]            = cache_get_field_content_int(0, "CarLicSuspend");
		PlayerInfo[playerid][pGunLicSuspend]            = cache_get_field_content_int(0, "GunLicSuspend");
    	PlayerInfo[playerid][pFlyLicT]                  = cache_get_field_content_int(0, "FlyLicT");
    	PlayerInfo[playerid][pFlyLic]                   = cache_get_field_content_int(0, "FlyLic");
    	PlayerInfo[playerid][pBoatLicT]                 = cache_get_field_content_int(0, "BoatLicT");
    	PlayerInfo[playerid][pBoatLic]                  = cache_get_field_content_int(0, "BoatLic");
    	PlayerInfo[playerid][pGunLicT]                  = cache_get_field_content_int(0, "GunLicT");
    	PlayerInfo[playerid][pGunLic]                   = cache_get_field_content_int(0, "GunLic");
    	PlayerInfo[playerid][pPayDay]                   = cache_get_field_content_int(0, "PayDay");
    	PlayerInfo[playerid][pTut]                      = cache_get_field_content_int(0, "Tutorial");
    	PlayerInfo[playerid][pWarns]                    = cache_get_field_content_int(0, "Warnings");
    	PlayerInfo[playerid][pRented]                   = cache_get_field_content_int(0, "Rented");
    	PlayerInfo[playerid][pFuel]                     = cache_get_field_content_int(0, "Fuel");
		PlayerInfo[playerid][pColors]                    = cache_get_field_content_int(0, "Color");
    	PlayerInfo[playerid][pWTalkie]                  = cache_get_field_content_int(0, "WTalkie");
    	cache_get_field_content(0, "Email", PlayerInfo[playerid][pEmail], SQL, 255);
    	PlayerInfo[playerid][pClan]                     = cache_get_field_content_int(0, "Clan");
    	PlayerInfo[playerid][pHitT]                     = cache_get_field_content_int(0, "HitT");
    	PlayerInfo[playerid][pCRank]                    = cache_get_field_content_int(0, "CRank");
		PlayerInfo[playerid][pCWarns]                   = cache_get_field_content_int(0, "ClanWarns");
    	PlayerInfo[playerid][pPhone]                    = cache_get_field_content_int(0, "Phone");
    	PlayerInfo[playerid][pSQLID]                    = cache_get_field_content_int(0, "id");
    	cache_get_field_content(0, "Victim", PlayerInfo[playerid][pVictim], SQL, 255);
    	cache_get_field_content(0, "Accused", PlayerInfo[playerid][pAccused], SQL, 255);
    	cache_get_field_content(0, "Crime1", PlayerInfo[playerid][pCrime1], SQL, 255);
    	cache_get_field_content(0, "Crime2", PlayerInfo[playerid][pCrime2], SQL, 255);
    	cache_get_field_content(0, "Crime3", PlayerInfo[playerid][pCrime3], SQL, 255);
		cache_get_field_content(0, "gpci", PlayerInfo[playerid][pSerial], SQL, 128);
    	PlayerInfo[playerid][pStatus]                   = cache_get_field_content_int(0, "Status");
    	PlayerInfo[playerid][pLanguage]                 = cache_get_field_content_int(0, "Language");
    	PlayerInfo[playerid][pClanTag]                  = cache_get_field_content_int(0, "ClanTag");
    	PlayerInfo[playerid][pFWorks]                   = cache_get_field_content_int(0, "FWorks");
    	PlayerInfo[playerid][pVirtualPD]                = cache_get_field_content_int(0, "VirtualPD");
    	PlayerInfo[playerid][pFactionJoin]              = cache_get_field_content_int(0, "FactionJoin");
    	PlayerInfo[playerid][pFactionTime]				= cache_get_field_content_int(0, "FactionTime");
    	PlayerInfo[playerid][pCredits]                  = cache_get_field_content_int(0, "CreditsF");
    	PlayerInfo[playerid][pNMuted]                   = cache_get_field_content_int(0, "NMuted");
    	PlayerInfo[playerid][pHost]            			= cache_get_field_content_int(0, "Host");
    	PlayerInfo[playerid][pHiddenColor]            	= cache_get_field_content_int(0, "HiddenColor");
    	PlayerInfo[playerid][pHelpedplayers]            = cache_get_field_content_int(0, "HelpedPlayers");
    	PlayerInfo[playerid][pGiftTime]            		= cache_get_field_content_int(0, "GiftTime");
    	PlayerInfo[playerid][pCases]            		= cache_get_field_content_int(0, "Cases");
    	PlayerInfo[playerid][pPayDaymin]            	= cache_get_field_content_int(0, "PayDaymin");
    	PlayerInfo[playerid][pPayDaysec]            	= cache_get_field_content_int(0, "PayDaysec");
    	PlayerInfo[playerid][pBeesec]            		= cache_get_field_content_int(0, "Beesec");
    	PlayerInfo[playerid][pBeemin]            		= cache_get_field_content_int(0, "Beemin");
    	PlayerInfo[playerid][pBeePlaced]            	= cache_get_field_content_int(0, "BeePlaced");
    	PlayerInfo[playerid][pNextCase]            		= cache_get_field_content_int(0, "NextCase");
    	PlayerInfo[playerid][pFightStyle]               = cache_get_field_content_int(0, "FightStyle");
    	PlayerInfo[playerid][pHUD1]               		= cache_get_field_content_int(0, "HUD1");
    	PlayerInfo[playerid][pHUD2]               		= cache_get_field_content_int(0, "HUD2");
    	PlayerInfo[playerid][pHUD3]              	 	= cache_get_field_content_int(0, "HUD3");
    	PlayerInfo[playerid][pHUD4]              	 	= cache_get_field_content_int(0, "HUD4");
		PlayerInfo[playerid][pCarSlots]              	= cache_get_field_content_int(0, "CarSlots");
		PlayerInfo[playerid][pSession]              	= cache_get_field_content_int(0, "Session");
		PlayerInfo[playerid][pPaydayON]              	= cache_get_field_content_int(0, "PaydayON");
		PlayerInfo[playerid][pQuest1]              		= cache_get_field_content_int(0, "Quest1");
		PlayerInfo[playerid][pQuest2]              		= cache_get_field_content_int(0, "Quest2");
		PlayerInfo[playerid][pQuestNeed1]              	= cache_get_field_content_int(0, "QuestNeed1");
		PlayerInfo[playerid][pQuestNeed2]              	= cache_get_field_content_int(0, "QuestNeed2");
		PlayerInfo[playerid][pQuestProgress1]           = cache_get_field_content_int(0, "QuestProgress1");
		PlayerInfo[playerid][pQuestProgress2]           = cache_get_field_content_int(0, "QuestProgress2");
		PlayerInfo[playerid][pQuestCar]           		= cache_get_field_content_int(0, "QuestCar");
		WTChannel[playerid] 							= cache_get_field_content_int(0, "WTChannel");
		PlayerInfo[playerid][Raport1]					= cache_get_field_content_int(0, "Raport1");
		PlayerInfo[playerid][Raport2]					= cache_get_field_content_int(0, "Raport2");
		PlayerInfo[playerid][Raport3]					= cache_get_field_content_int(0, "Raport3");
		PlayerInfo[playerid][Raport4]					= cache_get_field_content_int(0, "Raport4");
		PlayerInfo[playerid][Raport5]					= cache_get_field_content_int(0, "Raport5");
		PlayerInfo[playerid][Raport6]					= cache_get_field_content_int(0, "Raport6");
		PlayerInfo[playerid][pClanDep]					= cache_get_field_content_int(0, "ClanDep");
		cache_get_field_content(0, "PetName", PlayerInfo[playerid][pPetName], SQL, 255);
		PlayerInfo[playerid][pPetLevel]					= cache_get_field_content_int(0, "PetLevel");
		PlayerInfo[playerid][pPetSkin]					= cache_get_field_content_int(0, "PetSkin");
		PlayerInfo[playerid][pPet]						= cache_get_field_content_int(0, "Pet");
		PlayerInfo[playerid][pPetPoints]				= cache_get_field_content_int(0, "PetPoints");
		PlayerInfo[playerid][pNeonR]					= cache_get_field_content_int(0, "NeonR");
		PlayerInfo[playerid][pNeonRZ]					= cache_get_field_content_int(0, "NeonRZ");
		PlayerInfo[playerid][pNeonV]					= cache_get_field_content_int(0, "NeonV");
		PlayerInfo[playerid][pNeonG]					= cache_get_field_content_int(0, "NeonG");
		PlayerInfo[playerid][pNeonA]					= cache_get_field_content_int(0, "NeonA");
		PlayerInfo[playerid][pAccepted]					= cache_get_field_content_int(0, "Accepted");
		PlayerInfo[playerid][pAirSkill]               	= cache_get_field_content_int(0, "AirSkill");
    	PlayerInfo[playerid][pAirTimes]               	= cache_get_field_content_int(0, "AirTimes");
    	PlayerInfo[playerid][pAirRem]                 	= cache_get_field_content_int(0, "AirRem");
    	PlayerInfo[playerid][pStrawSkill]               = cache_get_field_content_int(0, "StrawSkill");
    	PlayerInfo[playerid][pStrawTimes]               = cache_get_field_content_int(0, "StrawTimes");
    	PlayerInfo[playerid][pStrawRem]                 = cache_get_field_content_int(0, "StrawRem");
    	PlayerInfo[playerid][pMp3]                 		= cache_get_field_content_int(0, "Mp3");
    	PlayerInfo[playerid][pBillboard]                = cache_get_field_content_int(0, "Billboard");
    	PlayerInfo[playerid][pPaintKills]				= cache_get_field_content_int(0, "PaintKills");
    	PlayerInfo[playerid][pPaintDeaths]				= cache_get_field_content_int(0, "PaintDeaths");
    	PlayerInfo[playerid][pPaintRank]				= cache_get_field_content_int(0, "PaintRank");
    	PlayerInfo[playerid][pPaintWon]					= cache_get_field_content_int(0, "PaintWon");
    	PlayerInfo[playerid][pRaceExp]					= cache_get_field_content_int(0, "RaceExp");
    	PlayerInfo[playerid][pRaceWon]					= cache_get_field_content_int(0, "RaceWon");
    	PlayerInfo[playerid][pNewYear]					= cache_get_field_content_int(0, "NewYear");

    	OnlineTimeToday[playerid]                 		= cache_get_field_content_int(0, "OnlineTimeToday");
		#if ACTIVE_QUEST == 1
			new kz=0,queststr[256],qobj[50],jz=0;
			cache_get_field_content(0, "QuestObjects", PlayerInfo[playerid][pQuestStr], SQL, 256);
			cache_get_field_content(0, "QuestObjects", queststr, SQL, 256);
			for(new i=0;i<strlen(queststr);i++)
		    {
		        if(queststr[i] == '|')
		        {
		            PlayerInfo[playerid][pQuestObjects][kz] = strval(qobj);
		            kz++;
		            while(jz) { qobj[jz]=' '; jz--; }
		        }
		        else {
		            qobj[jz]=queststr[i];
		            jz++;
		            queststr[i]=' ';
		        }
		    }
		#endif

		new skin[50],k=0,j=0,skinstr[1600];
		cache_get_field_content(0, "skins", PlayerInfo[playerid][pStrSkins], SQL, 1600);
		cache_get_field_content(0, "skins", skinstr, SQL, 1600);
		for(new i=0;i<strlen(skinstr);i++)
	    {
	        if(skinstr[i] == '|')
	        {
	            PlayerInfo[playerid][pSkins][k] = strval(skin);
	            k++;
	            while(j) { skin[j]=' '; j--; }
	        }
	        else {
	            skin[j]=skinstr[i];
	            j++;
	            skinstr[i]=' ';
	        }
	    }
	    PlayerInfo[playerid][pTSkins] = k-1;
	}
	else
	{
		new loginname[64];
		GetPlayerName(playerid,loginname,sizeof(loginname));
		gPlayerLogTries[playerid]++;
		if(gPlayerLogTries[playerid] == 1 || gPlayerLogTries[playerid] == 2)
		{
			format(KeepPassword[playerid], 129, "NULL");
			PlayerTextDrawShow(playerid, IncorrectTD[playerid][1]);
			new str1[128];
			format(str1,sizeof(str1),"Incorrect password! Attemps - %d/3",gPlayerLogTries[playerid]);
			PlayerTextDrawSetString(playerid, IncorrectTD[playerid][0], str1);
			PlayerTextDrawShow(playerid, IncorrectTD[playerid][0]);
		}
		if(gPlayerLogTries[playerid] == 3)
		{
			HideLoginTds(playerid);
		    new stringkick[256];
		    format(stringkick, sizeof(stringkick), "AdmWarn: {FFFFFF}%s has been kicked for entering the wrong password 3 times.",loginname);
		   	ABroadCast(COLOR_RED2,stringkick,1);
		   	SendClientMessage(playerid, COLOR_LIGHTRED, "(Login){FFFFFF} You have used all available login attempts.");
			KickEx(playerid);
		}
        return 1;
	}
	cache_delete(pass);
	ResetPlayerCash(playerid);
	GivePlayerCash(playerid,PlayerInfo[playerid][pCash]);
	CurrentMoney[playerid] = PlayerInfo[playerid][pCash];
	new name2[MAX_PLAYER_NAME],str2[50];
 /*if(PlayerInfo[playerid][pOneHost] == 0)
	{
		PlayerInfo[playerid][pOneHost] = 1;

		new var[256];
		mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Host`='%s' WHERE `name`='%s'",GetPlayerHost(playerid),name2);
		mysql_tquery(SQL, var,"","");
	}
	if(PlayerInfo[playerid][pHost] != GetPlayerHost(playerid)) {
		SendClientMessage(playerid, COLOR_RED, "TEST: asdasd!");
	//	KickEx(playerid);
	}*/
	if(PlayerInfo[playerid][pReg] == 0)
	{
		PlayerInfo[playerid][pLevel] = 1;
 	    PlayerInfo[playerid][pPos_x] = 2246.6;
 	    PlayerInfo[playerid][pPos_y] = -1161.9;
 	    PlayerInfo[playerid][pPos_z] = 1029.7;
		PlayerInfo[playerid][pInt] = 0;
		PlayerInfo[playerid][pLocal] = 255;
		PlayerInfo[playerid][pTeam] = 3;
		if(PlayerInfo[playerid][pSex] == 1) PlayerInfo[playerid][pModel] = 250;
		else PlayerInfo[playerid][pModel] = 216;
		PlayerInfo[playerid][pPnumber] = 0;
		PlayerInfo[playerid][pPhousekey] = 999;
		PlayerInfo[playerid][pPbiskey] = 255;
		PlayerInfo[playerid][pAccount] = 1000;
		PlayerInfo[playerid][pReg] = 1;
		PlayerInfo[playerid][pCarSlots] = 2; 
		SetPlayerInterior(playerid,0);
		new str[256];
		gpci(playerid, PlayerInfo[playerid][pSerial], 128);
		mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Team`='3',`Model`='%d',`IP`='%s',`gpci`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pModel],playerip,PlayerInfo[playerid][pSerial],PlayerInfo[playerid][pNormalName]);
		mysql_tquery(SQL,str,"","");
		Update(playerid,pLevelx);
		Update(playerid,pPhousekeyx);
		Update(playerid,pPbiskeyx);
		Update(playerid,pPnumberx);
		Update(playerid,pRegx);
	}
	if(PlayerInfo[playerid][pFightStyle] > 0)
	{
	    if(PlayerInfo[playerid][pFightStyle] == 1)
	    {
	        SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
		}
		else if(PlayerInfo[playerid][pFightStyle] == 2)
	    {
	        SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
		}
		else if(PlayerInfo[playerid][pFightStyle] == 3)
	    {
	        SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
		}
		else if(PlayerInfo[playerid][pFightStyle] == 4)
	    {
	        SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
		}
		else if(PlayerInfo[playerid][pFightStyle] == 5)
	    {
	        SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
		}
	}
	else if(PlayerInfo[playerid][pFightStyle] == 0)
	{
		SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
	}
    new string2[128];
    if(PlayerInfo[playerid][pTut] == 1)
    {
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
		SendClientMessage(playerid,COLOR_WHITE,"");
	}
	SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	new adminss=0, adminsafk=0, helperss=0, helpersafk=0;
	foreach(new ids2 : Player)
	{
		if(PlayerInfo[ids2][pAdmin] > 0)
		{
			adminss++;
			if(IsPlayerAFK[ids2] > 0)
			{
				adminsafk++;
			}
		}
		if(PlayerInfo[ids2][pHelper] > 0)
		{
			helperss++;
			if(IsPlayerAFK[ids2] > 0)
			{
				helpersafk++;
			}
		}
	}
	new query[256],playeriddd,strings[128],namee[30];
	GetPlayerName(playerid, namee, sizeof(namee));
	if(PlayerInfo[playerid][pPremiumAccount] == 1) SendClientMessage(playerid, COLOR_WHITE,"You are a Premium Account user!");
	else if(PlayerInfo[playerid][pPremiumAccount] == 2) SendClientMessage(playerid, COLOR_WHITE,"You are a VIP user!");
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
		format(string2, sizeof(string2), "You are a level %d admin. There are %d admins online (%d not afk).",PlayerInfo[playerid][pAdmin],adminss,(adminss-adminsafk));
		SendClientMessage(playerid, COLOR_WHITE,string2);
		format(string2, sizeof(string2), "(B) HelloBot: %s has just logged in.",namee);
		ABroadCast(COLOR_ADMCHAT, string2,1);
		HLChat(COLOR_ADMCHAT,string2);
	}
	if(PlayerInfo[playerid][pHelper] > 0)
	{
	    format(string2,sizeof(string2), "You are a level %d helper. There are %d helpers online (%d not afk).", PlayerInfo[playerid][pHelper],helperss,(helperss-helpersafk));
		SendClientMessage(playerid, COLOR_WHITE,string2);
		format(string2, sizeof(string2), "(B) HelloBot: %s has just logged in.",namee);
		ABroadCast(COLOR_ADMCHAT, string2,1);
		HLChat(COLOR_ADMCHAT,string2);
	}
	format(query,sizeof(query),"SELECT PlayerID FROM `friends` WHERE `FriendID`='%d'", PlayerInfo[playerid][pSQLID]);
	new Cache: resultt = mysql_query(SQL,query);
	if(cache_get_row_count() > 0)
	{
		for(new iddd, jddd = cache_get_row_count (); iddd != jddd; ++iddd)
		{
			playeriddd = cache_get_field_content_int(iddd, "PlayerID");
			foreach(new ids : Player)
			{
				if(PlayerInfo[ids][pSQLID] == playeriddd)
				{
					if(PlayerInfo[ids][pLanguage] == 2) format(strings,sizeof(strings),"{FFC266}** {FFFF00}Prietenul tau, %s, s-a logat pe server. {FFC266}**", namee);
					else format(strings,sizeof(strings),"{FFC266}** {FFFF00}Your friend %s is now online. {FFC266}**", namee);
					SendClientMessage(ids, COLOR_YELLOW, strings);
				}
			}
		}
	}
	cache_delete(resultt);
	if(PlayerInfo[playerid][pWantedLevel] > 0)
	{
		SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
		PlayerTextDrawShow(playerid, WantedText[playerid]);
		new str1[256];
        if(PlayerInfo[playerid][pLanguage] == 2) format(str1,sizeof(str1),"WANTED SCADE IN: ~r~%d MINUTE",wantedlost[playerid]/60+1);
		else format(str1,sizeof(str1),"WANTED DECREASES IN: ~r~%d MINUTES",wantedlost[playerid]/60+1);
		PlayerTextDrawSetString(playerid, WantedText[playerid], str1);
		SS(playerid, COLOR_RED2, "Esti inca urmarit de politie. Nivelul de wanted ti-a fost restaurat.", "You're still a wanted man! Your criminal record was reinstated.");
		wantedlost[playerid] = 900;
		WantedPoints[playerid] = PlayerInfo[playerid][pWantedLevel]*2;
	}
	SetSpawnInfo(playerid, PlayerInfo[playerid][pTeam], PlayerInfo[playerid][pModel], 1213.9047,-1747.8059,13.5947, 1.0, -1, -1, -1, -1, -1, -1);
    if(PlayerInfo[playerid][pClan] > 0)
    {
        new szName[25];
        if(PlayerInfo[playerid][pClanTag] == 1)
        {
            format(szName, sizeof(szName), "%s%s", ClanInfo[PlayerInfo[playerid][pClan]][cClanTag], PlayerInfo[playerid][pNormalName]);
            SetPlayerName(playerid, szName);
		}
		else if(PlayerInfo[playerid][pClanTag] == 2)
		{
            format(szName, sizeof(szName), "%s%s", PlayerInfo[playerid][pNormalName], ClanInfo[PlayerInfo[playerid][pClan]][cClanTag]);
            SetPlayerName(playerid, szName);
		}
	}
	if(gTeam[playerid] == 0) gTeam[playerid] = 3;
	else gTeam[playerid] = PlayerInfo[playerid][pTeam];
	if(PlayerInfo[playerid][pMember] != 0)
	{
	    new namex[25],disc[84];
	    GetPlayerName(playerid,namex,sizeof(namex));
	    format(disc,sizeof(disc),"(Group) {FFFFFF}%s from your group has just logged in.",namex);
	    SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, disc);
	    SendClientMessage(playerid,COLOR_GENANNOUNCE,disc);
	}
	if(PlayerInfo[playerid][pMember] != 0)
	{
		if(strlen(DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]) > 0)
		{
		    new factioninfo[128];
			format(factioninfo, sizeof(factioninfo), "Group MOTD: {FFFFFF}%s", DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]);
			SendClientMessage(playerid, COLOR_GENANNOUNCE, factioninfo);
		}
	}
	if(PlayerInfo[playerid][pClan] != 0)
	{
		new namex[25],disc[84];
	    GetPlayerName(playerid,namex,sizeof(namex));
	    format(disc,sizeof(disc),"(Clan) {FFFFFF}%s from your clan has just logged in.",namex);
		SendToClan(PlayerInfo[playerid][pClan], COLOR_GENANNOUNCE, disc);
	}
	//if(PlayerInfo[playerid][pNewYear] == 0) SendClientMessage(playerid, COLOR_YELLOW,"(Happy new year!){FFFFFF} Type /newyear to receive a little gift for the start of this new year!");
	if(PlayerInfo[playerid][pMuteTime] < 20 && PlayerInfo[playerid][pMuted] == 1) PlayerInfo[playerid][pMuted] = 0;
	if(PlayerInfo[playerid][pQuest1] == 0)
	{
		new quest1 = 1 + random(8),quest2 = 1 + random(8);
		if(IsACop(playerid) && quest1 == 4) quest1 = 2;
		PlayerInfo[playerid][pQuest1] = quest1;
		PlayerInfo[playerid][pQuest2] = quest2;
		PlayerInfo[playerid][pQuestProgress1] = 0;
		PlayerInfo[playerid][pQuestProgress2] = 0;
		Update(playerid, pQuestProgress1x);
		Update(playerid, pQuestProgress2x);
		Update(playerid, pQuest1x);
		Update(playerid, pQuest2x);
		if(quest1 == 1 || quest1 == 2 || quest1 == 4)
		{
			PlayerInfo[playerid][pQuestNeed1] = 1;
			Update(playerid, pQuestNeed1x);
		}
		if(quest2 == 6 || quest2 == 7)
		{
			PlayerInfo[playerid][pQuestNeed2] = 1;
			Update(playerid, pQuestNeed2x);
		}
		if(quest1 == 3)
		{
			new randcar = random(11);
			if(randcar == 0) PlayerInfo[playerid][pQuestCar] = 400;
			if(randcar == 1) PlayerInfo[playerid][pQuestCar] = 401;
			if(randcar == 2) PlayerInfo[playerid][pQuestCar] = 404;
			if(randcar == 3) PlayerInfo[playerid][pQuestCar] = 408;
			if(randcar == 4) PlayerInfo[playerid][pQuestCar] = 439;
			if(randcar == 5) PlayerInfo[playerid][pQuestCar] = 462;
			if(randcar == 6) PlayerInfo[playerid][pQuestCar] = 471;
			if(randcar == 7) PlayerInfo[playerid][pQuestCar] = 481;
			if(randcar == 8) PlayerInfo[playerid][pQuestCar] = 496;
			if(randcar == 9) PlayerInfo[playerid][pQuestCar] = 509;
			if(randcar == 10) PlayerInfo[playerid][pQuestCar] = 522;
			new randkm = 10 + random(25);
			PlayerInfo[playerid][pQuestNeed1] = randkm;
			Update(playerid, pQuestCarx);
			Update(playerid, pQuestNeed1x);
		}
		if(quest1 == 5)
		{
			new randmats = 3000 + random(7000);
			PlayerInfo[playerid][pQuestNeed1] = randmats;
			Update(playerid, pQuestNeed1x);
		}
		if(quest1 == 6)
		{
			new randfish = 5 + random(15);
			PlayerInfo[playerid][pQuestNeed1] = randfish;
			Update(playerid, pQuestNeed1x);
		}
		if(quest2 == 1)
		{
			new randpizza = 5 + random(10);
			PlayerInfo[playerid][pQuestNeed2] = randpizza;
			Update(playerid, pQuestNeed2x);
		}
		if(quest2 == 2)
		{
			new randcops = 2 + random(5);
			PlayerInfo[playerid][pQuestNeed2] = randcops;
			Update(playerid, pQuestNeed2x);
		}
		if(quest2 == 3)
		{
			new rand = 10 + random(15) + random(20);
			PlayerInfo[playerid][pQuestNeed2] = rand;
			Update(playerid, pQuestNeed2x);
		}
		if(quest2 == 4)
		{
			new rand = 25 + random(25) + random(25);
			PlayerInfo[playerid][pQuestNeed2] = rand;
			Update(playerid, pQuestNeed2x);
		}
		if(quest2 == 5)
		{
			new rand = 50 + random(25) + random(25);
			PlayerInfo[playerid][pQuestNeed2] = rand;
			Update(playerid, pQuestNeed2x);
		}
		if(quest1 == 7)
		{
			new rand = 10 + random(10);
			PlayerInfo[playerid][pQuestNeed1] = rand;
			Update(playerid, pQuestNeed1x);
		}
		if(quest1 == 8)
		{
			new rand = 20 + random(15);
			PlayerInfo[playerid][pQuestNeed1] = rand;
			Update(playerid, pQuestNeed1x);
		}
		if(quest2 == 8)
		{
			new rand = 5 + random(5);
			PlayerInfo[playerid][pQuestNeed2] = rand;
			Update(playerid, pQuestNeed2x);
		}
		new questt1[128],questt2[128],questt11[256],questt22[256];
		if(PlayerInfo[playerid][pLanguage] == 1)
		{
			if(PlayerInfo[playerid][pQuest1] == 1)  format(questt1,sizeof(questt1),"Go to the baseball stadium located in Las Venturas");
			else if(PlayerInfo[playerid][pQuest1] == 2)  format(questt1,sizeof(questt1),"Climb mount Chiliad");
			else if(PlayerInfo[playerid][pQuest1] == 3)  format(questt1,sizeof(questt1),"Travel %d KM with vehicle %s",PlayerInfo[playerid][pQuestNeed1],aVehicleNames[PlayerInfo[playerid][pQuestCar] - 400]);
			else if(PlayerInfo[playerid][pQuest1] == 4)  format(questt1,sizeof(questt1),"Rob a business");
			else if(PlayerInfo[playerid][pQuest1] == 5)  format(questt1,sizeof(questt1),"Collect %d materials",PlayerInfo[playerid][pQuestNeed1]);
			else if(PlayerInfo[playerid][pQuest1] == 6)  format(questt1,sizeof(questt1),"Catch and sell %d fish",PlayerInfo[playerid][pQuestNeed1]);
			else if(PlayerInfo[playerid][pQuest1] == 7)  format(questt1,sizeof(questt1),"Collect %d metals from the mine",PlayerInfo[playerid][pQuestNeed1]);
			else if(PlayerInfo[playerid][pQuest1] == 8)  format(questt1,sizeof(questt1),"Collect %d strawberrys",PlayerInfo[playerid][pQuestNeed1]);
			if(PlayerInfo[playerid][pQuest2] == 1)  format(questt2,sizeof(questt2),"Deliver %d pizza",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 2)
			{
				if(!IsACop(playerid))
				{
					format(questt2,sizeof(questt2),"Kill %d cops",PlayerInfo[playerid][pQuestNeed2]);
				}
				else
				{
					format(questt2,sizeof(questt2),"Arrest %d suspects",PlayerInfo[playerid][pQuestNeed2]);
				}
			}
			else if(PlayerInfo[playerid][pQuest2] == 3)  format(questt2,sizeof(questt2),"Kill %d players at paintball",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 4)  format(questt2,sizeof(questt2),"Collect and unload %d KG of garbage",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 5)  format(questt2,sizeof(questt2),"Sell %d KG of flour",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 6)  format(questt2,sizeof(questt2),"Buy drugs and use them");
			else if(PlayerInfo[playerid][pQuest2] == 7)  format(questt2,sizeof(questt2),"Go in a bar and get drunk");
			else if(PlayerInfo[playerid][pQuest2] == 8)  format(questt2,sizeof(questt2),"Deliver %d packages at Air Transporter",PlayerInfo[playerid][pQuestNeed2]);

			if(PlayerInfo[playerid][pQuestProgress1]<PlayerInfo[playerid][pQuestNeed1])
				format(questt11,sizeof(questt11),"Quest: %s | Progress: %d/%d",questt1,PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
			if(PlayerInfo[playerid][pQuestProgress2]<PlayerInfo[playerid][pQuestNeed2])
				format(questt22,sizeof(questt22),"Quest: %s | Progress: %d/%d",questt2,PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
		}
		else
		{
			if(PlayerInfo[playerid][pQuest1] == 1)  format(questt1,sizeof(questt1),"Mergi pe stadionul de baseball din Las Venturas");
			else if(PlayerInfo[playerid][pQuest1] == 2)  format(questt1,sizeof(questt1),"Urca pe muntele Chiliad");
			else if(PlayerInfo[playerid][pQuest1] == 3)  format(questt1,sizeof(questt1),"Parcurge distanta de %d KM cu un vehicul de tipul %s",PlayerInfo[playerid][pQuestNeed1],aVehicleNames[PlayerInfo[playerid][pQuestCar] - 400]);
			else if(PlayerInfo[playerid][pQuest1] == 4)  format(questt1,sizeof(questt1),"Jefuieste o afacere");
			else if(PlayerInfo[playerid][pQuest1] == 5)  format(questt1,sizeof(questt1),"Colecteaza %d materiale",PlayerInfo[playerid][pQuestNeed1]);
			else if(PlayerInfo[playerid][pQuest1] == 6)  format(questt1,sizeof(questt1),"Vinde %d pesti",PlayerInfo[playerid][pQuestNeed1]);
			else if(PlayerInfo[playerid][pQuest1] == 7)  format(questt1,sizeof(questt1),"Colecteaza %d metale din mina",PlayerInfo[playerid][pQuestNeed1]);
			else if(PlayerInfo[playerid][pQuest1] == 8)  format(questt1,sizeof(questt1),"Colecteaza %d capsuni",PlayerInfo[playerid][pQuestNeed1]);
			if(PlayerInfo[playerid][pQuest2] == 1)  format(questt2,sizeof(questt2),"Livreaza %d pizza",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 2)
			{
				if(!IsACop(playerid))
				{
					format(questt2,sizeof(questt2),"Omoara %d politisti",PlayerInfo[playerid][pQuestNeed2]);
				}
				else
				{
					format(questt2,sizeof(questt2),"Aresteaza %d suspecti",PlayerInfo[playerid][pQuestNeed2]);
				}
			}
			else if(PlayerInfo[playerid][pQuest2] == 3)  format(questt2,sizeof(questt2),"Omoara %d playeri la Paintball",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 4)  format(questt2,sizeof(questt2),"Colecteaza si descarca %d KG de gunoi",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 5)  format(questt2,sizeof(questt2),"Vinde %d KG de faina",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 6)  format(questt2,sizeof(questt2),"Cumpara droguri si foloseste-le");
			else if(PlayerInfo[playerid][pQuest2] == 7)  format(questt2,sizeof(questt2),"Du-te intr-un bar si imbata-te");
			else if(PlayerInfo[playerid][pQuest2] == 8)  format(questt2,sizeof(questt2),"Livreaza %d pachete la Air Transporter",PlayerInfo[playerid][pQuestNeed2]);
			if(PlayerInfo[playerid][pQuestProgress1]<PlayerInfo[playerid][pQuestNeed1])
				format(questt11,sizeof(questt11),"Misiune: %s | Progres: %d/%d",questt1,PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
			if(PlayerInfo[playerid][pQuestProgress2]<PlayerInfo[playerid][pQuestNeed2])
				format(questt22,sizeof(questt22),"Misiune: %s | Progres: %d/%d",questt2,PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
		}
		if(PlayerInfo[playerid][pQuestProgress1]<PlayerInfo[playerid][pQuestNeed1]) SendClientMessage(playerid, COLOR_YELLOW, questt11);
		if(PlayerInfo[playerid][pQuestProgress2]<PlayerInfo[playerid][pQuestNeed2]) SendClientMessage(playerid, COLOR_YELLOW, questt22);
	}
	else
	{
		new questt1[128],questt2[128],questt11[256],questt22[256];
		if(PlayerInfo[playerid][pLanguage] == 1)
		{
			if(PlayerInfo[playerid][pQuest1] == 1)  format(questt1,sizeof(questt1),"Go to the baseball stadium located in Las Venturas");
			else if(PlayerInfo[playerid][pQuest1] == 2)  format(questt1,sizeof(questt1),"Climb mount Chiliad");
			else if(PlayerInfo[playerid][pQuest1] == 3)  format(questt1,sizeof(questt1),"Travel %d KM with vehicle %s",PlayerInfo[playerid][pQuestNeed1],aVehicleNames[PlayerInfo[playerid][pQuestCar] - 400]);
			else if(PlayerInfo[playerid][pQuest1] == 4)  format(questt1,sizeof(questt1),"Rob a business");
			else if(PlayerInfo[playerid][pQuest1] == 5)  format(questt1,sizeof(questt1),"Collect %d materials",PlayerInfo[playerid][pQuestNeed1]);
			else if(PlayerInfo[playerid][pQuest1] == 6)  format(questt1,sizeof(questt1),"Catch and sell %d fish",PlayerInfo[playerid][pQuestNeed1]);
			else if(PlayerInfo[playerid][pQuest1] == 7)  format(questt1,sizeof(questt1),"Collect %d metals from the mine",PlayerInfo[playerid][pQuestNeed1]);
			else if(PlayerInfo[playerid][pQuest1] == 8)  format(questt1,sizeof(questt1),"Collect %d strawberrys",PlayerInfo[playerid][pQuestNeed1]);
			if(PlayerInfo[playerid][pQuest2] == 1)  format(questt2,sizeof(questt2),"Deliver %d pizza",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 2)
			{
				if(!IsACop(playerid))
				{
					format(questt2,sizeof(questt2),"Kill %d cops",PlayerInfo[playerid][pQuestNeed2]);
				}
				else
				{
					format(questt2,sizeof(questt2),"Arrest %d suspects",PlayerInfo[playerid][pQuestNeed2]);
				}
			}
			else if(PlayerInfo[playerid][pQuest2] == 3)  format(questt2,sizeof(questt2),"Kill %d players at paintball",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 4)  format(questt2,sizeof(questt2),"Collect and unload %d KG of garbage",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 5)  format(questt2,sizeof(questt2),"Sell %d KG of flour",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 6)  format(questt2,sizeof(questt2),"Buy drugs and use them");
			else if(PlayerInfo[playerid][pQuest2] == 7)  format(questt2,sizeof(questt2),"Go in a bar and get drunk");
			else if(PlayerInfo[playerid][pQuest2] == 8)  format(questt2,sizeof(questt2),"Deliver %d packages at Air Transporter",PlayerInfo[playerid][pQuestNeed2]);

			if(PlayerInfo[playerid][pQuestProgress1]<PlayerInfo[playerid][pQuestNeed1])
				format(questt11,sizeof(questt11),"Quest: %s | Progress: %d/%d",questt1,PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
			if(PlayerInfo[playerid][pQuestProgress2]<PlayerInfo[playerid][pQuestNeed2])
				format(questt22,sizeof(questt22),"Quest: %s | Progress: %d/%d",questt2,PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
		}
		else
		{
			if(PlayerInfo[playerid][pQuest1] == 1)  format(questt1,sizeof(questt1),"Mergi pe stadionul de baseball din Las Venturas");
			else if(PlayerInfo[playerid][pQuest1] == 2)  format(questt1,sizeof(questt1),"Urca pe muntele Chiliad");
			else if(PlayerInfo[playerid][pQuest1] == 3)  format(questt1,sizeof(questt1),"Parcurge distanta de %d KM cu un vehicul de tipul %s",PlayerInfo[playerid][pQuestNeed1],aVehicleNames[PlayerInfo[playerid][pQuestCar] - 400]);
			else if(PlayerInfo[playerid][pQuest1] == 4)  format(questt1,sizeof(questt1),"Jefuieste o afacere");
			else if(PlayerInfo[playerid][pQuest1] == 5)  format(questt1,sizeof(questt1),"Colecteaza %d materiale",PlayerInfo[playerid][pQuestNeed1]);
			else if(PlayerInfo[playerid][pQuest1] == 6)  format(questt1,sizeof(questt1),"Vinde %d pesti",PlayerInfo[playerid][pQuestNeed1]);
			else if(PlayerInfo[playerid][pQuest1] == 7)  format(questt1,sizeof(questt1),"Colecteaza %d metale din mina",PlayerInfo[playerid][pQuestNeed1]);
			else if(PlayerInfo[playerid][pQuest1] == 8)  format(questt1,sizeof(questt1),"Colecteaza %d capsuni",PlayerInfo[playerid][pQuestNeed1]);
			if(PlayerInfo[playerid][pQuest2] == 1)  format(questt2,sizeof(questt2),"Livreaza %d pizza",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 2)
			{
				if(!IsACop(playerid))
				{
					format(questt2,sizeof(questt2),"Omoara %d politisti",PlayerInfo[playerid][pQuestNeed2]);
				}
				else
				{
					format(questt2,sizeof(questt2),"Aresteaza %d suspecti",PlayerInfo[playerid][pQuestNeed2]);
				}
			}
			else if(PlayerInfo[playerid][pQuest2] == 3)  format(questt2,sizeof(questt2),"Omoara %d playeri la Paintball",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 4)  format(questt2,sizeof(questt2),"Colecteaza si descarca %d KG de gunoi",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 5)  format(questt2,sizeof(questt2),"Vinde %d KG de faina",PlayerInfo[playerid][pQuestNeed2]);
			else if(PlayerInfo[playerid][pQuest2] == 6)  format(questt2,sizeof(questt2),"Cumpara droguri si foloseste-le");
			else if(PlayerInfo[playerid][pQuest2] == 7)  format(questt2,sizeof(questt2),"Du-te intr-un bar si imbata-te");
			else if(PlayerInfo[playerid][pQuest2] == 8)  format(questt2,sizeof(questt2),"Livreaza %d pachete la Air Transporter",PlayerInfo[playerid][pQuestNeed2]);

			if(PlayerInfo[playerid][pQuestProgress1]<PlayerInfo[playerid][pQuestNeed1])
				format(questt11,sizeof(questt11),"Misiune: %s | Progres: %d/%d",questt1,PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
			if(PlayerInfo[playerid][pQuestProgress2]<PlayerInfo[playerid][pQuestNeed2])
				format(questt22,sizeof(questt22),"Misiune: %s | Progres: %d/%d",questt2,PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
		}

		if(PlayerInfo[playerid][pQuestProgress1]<PlayerInfo[playerid][pQuestNeed1]) SendClientMessage(playerid, COLOR_YELLOW, questt11);
		if(PlayerInfo[playerid][pQuestProgress2]<PlayerInfo[playerid][pQuestNeed2]) SendClientMessage(playerid, COLOR_YELLOW, questt22);
	}
	#if ACTIVE_QUEST == 1
		new questtext[128],questtext2[128],countobj;
		for(new obj = 0; obj < questobjectss; obj++)
		{
			if(PlayerInfo[playerid][pQuestObjects][obj] == 1) countobj++;
			else 
			{
				PlayerInfo[playerid][pMapIcon][obj] = CreateDynamicMapIcon(ObjectInfo[obj][objPosX], ObjectInfo[obj][objPosY], ObjectInfo[obj][objPosZ],56,0,-1,-1,playerid,1000.0,MAPICON_LOCAL); //obiectequest
				PlayerInfo[playerid][pObject][obj] = CreateDynamicPickup(ObjectInfo[obj][objModel], 1, ObjectInfo[obj][objPosX], ObjectInfo[obj][objPosY], ObjectInfo[obj][objPosZ], -1, -1, playerid, 100.0);
			}
		}
		if(countobj != 50) {
			SendClientMessage(playerid, COLOR_WHITE, "");
			format(questtext, sizeof(questtext), "Misiune Speciala: Gaseste toate cadourile ascunse. Progres: %d/%d.", countobj, questobjectss);
			format(questtext2, sizeof(questtext2), "Special Quest: Find all the hidden gifts. Progress: %d/%d.", countobj, questobjectss);
			SS(playerid, COLOR_YELLOW, questtext, questtext2);
			SS(playerid, COLOR_YELLOW, "Premii: 4.000.000$-5.000.000$, 40-70 premium points, 10-20 RP, 10-20 rob points si 250-350 gift points.", "Rewards: 4.000.000$-5.000.000$, 40-70 premium points, 10-20 RP, 10-20 rob points si 250-350 gift points.");
		}
	#endif
	new sendername[30],
		playersip[64],
		qqerry[500],
		stringname[128],
		serial[128];
	GetPlayerName(playerid,sendername,sizeof(sendername));
	GetPlayerIp(playerid,playersip,sizeof(playersip));
	gpci(playerid, serial, sizeof(serial));
	mysql_format(SQL, qqerry, sizeof(qqerry), "INSERT INTO `playerconnections` (`playerid`,`ip`,`gpci`,`time`) VALUES ('%d','%s','%s','%d')", PlayerInfo[playerid][pSQLID], playersip, serial, gettime());
	mysql_tquery(SQL, qqerry, "", "");
	gPlayerLogged[playerid] = 1;
	SpawnPlayer(playerid);
	new y, m, d, h, mi, s;
	getdate(y,m,d);
	gettime(h,mi,s);
	h+=SERVER_HOUR_FIX;
	if(h == 24) h = 0;
	mysql_format(SQL,qqerry, sizeof(qqerry), "UPDATE `users` SET `Status`='1',`OnlineToday`='1',`OnlineThisWeek`='1',`LastIP`='%s',`lastOn`='%d-%02d-%02d %02d:%02d:%02d' WHERE `id` = '%d'", playersip, y, m, d, h, mi, s, PlayerInfo[playerid][pSQLID]);
    mysql_tquery(SQL,qqerry,"","");
	mysql_format(SQL,qqerry, sizeof(qqerry), "UPDATE `friends` SET `Status` = '1' WHERE `FriendID` = '%d'", PlayerInfo[playerid][pSQLID]);
    mysql_tquery(SQL,qqerry,"","");
	printf("%s has been connected to the server (IP: %s).",sendername,playersip);
 	format(stringname,sizeof(stringname),"%s / rpg.bluffs.ga", PlayerInfo[playerid][pNormalName]);
	PlayerTextDrawSetString(playerid, TextLogo[playerid], stringname);
	PlayerTextDrawShow(playerid, TextLogo[playerid]);

	if(PlayerInfo[playerid][pBeePlaced] != 0) CreateBeeHiveObjects(playerid);

	if(PlayerInfo[playerid][pLevel] > 4)
	{
		if(strcmp(PlayerInfo[playerid][pSerial], serial, true))
		{
			new unblocked;
			format(str2, sizeof(str2), "SELECT * FROM `blockedaccounts` WHERE `pid`='%d' AND `gpci`='%s'", PlayerInfo[playerid][pSQLID], serial);
			new Cache: abbb = mysql_query(SQL, str2);
			if(cache_get_row_count() > 0)
			{
				unblocked = cache_get_field_content_int(0, "unblock");
			}
			else
			{
				unblocked = 1;
			}
			cache_delete(abbb);
			if(unblocked == 1)
			{
				SS(playerid, COLOR_RED2, "Te-ai logat dintr-o locatie diferita decat locatia din care te loghezi de obicei.", "You logged in from a different location.");
				SS(playerid, COLOR_RED2, "Contul tau este blocat temporar. Nu poti transfera bani unui alt player si nu poti vinde bunuri personale.", "Your account is limited. You can't transfer money or make business.");
				SS(playerid, COLOR_RED2, "Nu trebuie sa faci nimic pentru deblocarea contului. Contul tau va fi deblocat automat peste 72 ore.", "You don't need to do anything in order to unblock your account. Your account will be unlocked in 72 hours.");
				SS(playerid, COLOR_RED2, "Timpul pana la deblocarea contului trece si daca nu esti online.", "Your account will be unblocked even if you're not online.");
				PlayerInfo[playerid][pBlockedAcc] = 1;
				format(str2, sizeof(str2), "SELECT * FROM `blockedaccounts` WHERE `pid`='%d' AND `gpci`='%s'", PlayerInfo[playerid][pSQLID], serial);
				new Cache: ab = mysql_query(SQL, str2);
				if(cache_get_row_count() == 0)
				{
					new text[256], text2[256], year, month, day, hour, minute, second;
					getdate(year, month, day);
					gettime(hour, minute, second);
					hour+=SERVER_HOUR_FIX;
					if(hour == 24) hour = 0;
					if(PlayerInfo[playerid][pLanguage] == 2) format(text, sizeof(text), "SECURITATE: Cineva a incercat sa se logheze pe contul tau de pe IP-ul %s pe data de %d.%d.%d, %s%d:%s%d. Daca nu ai fost tu, schimba-ti parola (/changepass).", playersip, day, month, year, ((hour < 10) ? ("0") : ("")), hour, ((minute < 10) ? ("0") : ("")), minute);
					else format(text, sizeof(text), "SECURITY: Someone tried logging in on your account using IP %s on %d.%d.%d, %s%d:%s%d. If it wasn't you, please change your password. Use /changepass to change your password.", playersip, day, month, year, ((hour < 10) ? ("0") : ("")), hour, ((minute < 10) ? ("0") : ("")), minute);
					mysql_real_escape_string(text, text2);
					mysql_format(SQL, qqerry, sizeof(qqerry), "INSERT INTO `emails` (`playerid`,`Message`) VALUES ('%d','%s')", PlayerInfo[playerid][pSQLID], text2);
					mysql_tquery(SQL, qqerry, "", "");
				}
				cache_delete(ab);
				if(strcmp(PlayerInfo[playerid][pEmail], "email@yahoo.com", true))
				{
					new emails[500],key[64],key2[65];
					randomString(key, 64);
					format(key2, sizeof(key2), key);
					format(str2, sizeof(str2), "SELECT * FROM `blockedaccounts` WHERE `pid`='%d' AND `gpci`='%s'", PlayerInfo[playerid][pSQLID], serial);
					new Cache: xdd = mysql_query(SQL, str2);
					if(cache_get_row_count() > 0)
					{
						mysql_format(SQL, emails, sizeof(emails), "UPDATE `blockedaccounts` SET `key`='%s',`linkexpire`='%d' WHERE `pid`='%d' AND `gpci`='%s'", key, (gettime() + 3600*2), PlayerInfo[playerid][pSQLID], serial);
						mysql_tquery(SQL, emails, "", "");
					}
					else
					{
						mysql_format(SQL, emails, sizeof(emails), "INSERT INTO `blockedaccounts` (`pid`,`gpci`,`key`,`unblock`,`linkexpire`) VALUES ('%d','%s','%s','%d','%d')", PlayerInfo[playerid][pSQLID], serial, key, (gettime() + 3*86400), (gettime() + 2*3600));
						mysql_tquery(SQL, emails, "", "");
					}
					cache_delete(xdd);
     				/*format(emails, sizeof(emails), "bluffs.ga/panel/%s/%s/%d/%s", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pEmail], PlayerInfo[playerid][pSQLID], key2);
					HTTP(playerid, HTTP_GET, emails, "", "EmailDelivered");*/
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "-- -- --");
					SendClientMessage(playerid, COLOR_YELLOW, "Email couldn't send because you don't have an valid email.");
					SendClientMessage(playerid, COLOR_WHITE, "-- -- --");
				}
			}
		}
	}
	login[playerid] = 0;
	LoadCarID(playerid);
	GetPlayerName(playerid,name2,sizeof(name2));
	PlayerTextDrawShow(playerid, TextLogo[playerid]);
	format(str2,sizeof(str2),"%s / rpg.bluffs.ga", PlayerInfo[playerid][pNormalName]);
	PlayerTextDrawSetString(playerid, TextLogo[playerid], str2);
	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	#if ACTIVE_QUEST == 1
		for(new o = 0; o < questobjectss; o++)
		{
			if(pickupid == PlayerInfo[playerid][pObject][o])
			{
				if(PlayerInfo[playerid][pQuestObjects][o] == 0)
				{
					new string[128],string2[128],amount;
					if(QuestWait[playerid] == 0)
					{
						DestroyDynamicPickup(PlayerInfo[playerid][pObject][o]);
						DestroyDynamicMapIcon(PlayerInfo[playerid][pMapIcon][o]);
						PlayerInfo[playerid][pObject][o] = 0;
						PlayerInfo[playerid][pMapIcon][o] = 0;
						addObject(playerid, o);
						new objectsfound;
						objectsfound = countSObjects(playerid);
						amount = 10000 + random(5000);
						GivePlayerCash(playerid, amount);
						format(string, sizeof(string), "Quest special actualizat. Ai gasit %d/%d cadouri ascunse. (+%s$)", objectsfound, questobjectss,FormatNumber(amount));
						format(string2, sizeof(string2), "Special quest updated. You found %d/%d hidden gifts. (+%s$)", objectsfound, questobjectss,FormatNumber(amount));
						SS(playerid, COLOR_YELLOW, string, string2);
						if(objectsfound == questobjectss)
						{
							new name[30],money,xp,rob,pp,giftpoint;
							GetPlayerName(playerid, name, sizeof(name));
							format(string, sizeof(string), "** Misiune speciala: %s a gasit toate cadouri ascunse! **", name);
							format(string2, sizeof(string2), "** Special quest: %s found all the hidden gifts! **", name);
							foreach(new p: Player)
							{
								SS(p, COLOR_GENANNOUNCE, string, string2);
							}
							money = 40000000 + random(10000000); 
							xp = 20 + random(10);
							rob = 20 + random(10);
							pp = 70 + random(40);
							giftpoint = 350 + random(100);
							PlayerInfo[playerid][pGiftTime] += giftpoint;
							Update(playerid, pGiftTimex);
							PlayerInfo[playerid][pAccount] += money;
							PlayerInfo[playerid][pExp] += xp;
							PlayerInfo[playerid][pRob] += rob;
							PlayerInfo[playerid][pPremiumPoints] += pp;
							Update(playerid,pPremiumPointsx);
							Update(playerid,pExpx);
							Update(playerid,pRobx);
							Update(playerid, pBank);
							new str2[256];
							if(PlayerInfo[playerid][pCarSlots] < 10)
							{
								PlayerInfo[playerid][pCarSlots] += 1;
								mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `CarSlots`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarSlots],PlayerInfo[playerid][pNormalName]);
								mysql_tquery(SQL,str2,"","");
								format(string,sizeof(string), "Ai primit %s$, %d respect points, %d rob points, un slot pentru vehicule, %d gift points si %d puncte premium.",FormatNumber(money),xp,rob,giftpoint,pp);
								format(string2,sizeof(string2), "You recieved %s$, %d respect points, %d rob points, a vehicle slot, %d gift points and %d premium points.",FormatNumber(money),xp,rob,giftpoint,pp);
								SS(playerid, COLOR_YELLOW, string,string2);
							}
							else 
							{
								format(string,sizeof(string), "Ai primit %s$, %d respect points, %d rob points, %d gift points si %d puncte premium.",FormatNumber(money),xp,rob,giftpoint,pp);
								format(string2,sizeof(string2), "You recieved %s$, %d respect points, %d rob points, %d gift points and %d premium points.",FormatNumber(money),xp,rob,giftpoint,pp);
								SS(playerid, COLOR_YELLOW, string,string2);
							}
						}
						if(PlayerInfo[playerid][pAdmin] < 7) QuestWait[playerid] = 30;
					}
					else
					{
						format(string, sizeof(string), "Trebuie sa astepti %d secunde inainte sa iei un alt obiect ascuns.", QuestWait[playerid]);
						format(string2, sizeof(string2), "You need to wait %d seconds before collecting another hidden object.", QuestWait[playerid]);
						SS(playerid, COLOR_LIGHTGREEN3, string, string2);
					}
				}
				else
				{
					DestroyDynamicPickup(PlayerInfo[playerid][pObject][o]);
					DestroyDynamicMapIcon(PlayerInfo[playerid][pMapIcon][o]);
				}
			}
		}
	#endif
    return 1;
}

forward LeaderChat(color,const string[]);
public LeaderChat(color,const string[])
{
	foreach(new i : Player)
 	{
		if(gPlayerLogged[i] == 1)
		{
			if(PlayerInfo[i][pLeader] >= 1 || PlayerInfo[i][pAdmin] >= 1)
			{
			    if(toglc[i] == 0)
				{
					SendClientMessage(i, color, string);
				}
			}
		}
	}
	return 1;
}

forward ABroadCast(color,const string[],level);
public ABroadCast(color,const string[],level)
{
	foreach(new i : Player)
	{
	    if(IsPlayerConnected(i))
	    {
			if(gPlayerLogged[i] == 1)
			{
				if(PlayerInfo[i][pAdmin] >= level)
				{
					SendClientMessage(i, color, string);
				}
			}
		}
	}
	return 1;
}

forward HLChat(color,const string[]);
public HLChat(color,const string[])
{
	foreach(new i : Player)
	{
		if(gPlayerLogged[i] == 1)
		{
			if(PlayerInfo[i][pHelper] >= 1)
			{
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}

stock SendSplitMessage(playerid, color, final[])
{
    new len = strlen(final),
		_iL = len / EX_SPLITLENGTHH;
	if( ( len % EX_SPLITLENGTHH ) ) _iL++;
	new _Line[EX_SPLITLENGTHH+5];
	new _:_i@Index;
	while( _i@Index < _iL )
	{
		if( _i@Index == 0 )
			strmid( _Line, final, ( _i@Index * EX_SPLITLENGTHH ), ( _i@Index * EX_SPLITLENGTHH ) + EX_SPLITLENGTHH );
		else
			strmid( _Line, final, ( _i@Index * EX_SPLITLENGTHH ), ( _i@Index * EX_SPLITLENGTHH ) + EX_SPLITLENGTHH );

		if( _iL > 1 )
		{
			if( _i@Index > 0 )
			{
				format( _Line, sizeof _Line, "... %s", _Line );
			}
		}
		SendClientMessage(playerid, color, _Line);
		_i@Index++;
	}
    return 1;
}

stock countSObjects(playerid)
{
	new nr=0;
	for(new i = 0;i < questobjectss;i++)
		if(PlayerInfo[playerid][pQuestObjects][i] == 1) nr++;
	return nr;
}

stock addObject(playerid, objectid)
{
	new nr=-1;
	PlayerInfo[playerid][pQuestObjects][objectid] = 1;
	for(new i = 0;i < strlen(PlayerInfo[playerid][pQuestStr]);i++)
		if(PlayerInfo[playerid][pQuestStr][i] != '|')
		{
			nr++;
			if(nr == objectid)
			{
				PlayerInfo[playerid][pQuestStr][i] = '1';
				break;
			}
		}
	new var[256];
	mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `QuestObjects`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pQuestStr],PlayerInfo[playerid][pNormalName]);
	mysql_tquery(SQL, var,"","");
	return 1;
}

stock verifySkin(playerid, skin)
{
	new t=0;
	for(new i=0;i<=PlayerInfo[playerid][pTSkins];i++)
		if(skin == PlayerInfo[playerid][pSkins][i]) t=1;
	return t;
}

stock addSkin(playerid, skin)
{
	PlayerInfo[playerid][pTSkins]++;
	PlayerInfo[playerid][pSkins][PlayerInfo[playerid][pTSkins]] = skin;
	new var[2048];
	mysql_format(SQL, var, sizeof(var), "UPDATE `users` SET `Skins`='%s%d|' WHERE `name`='%s'",PlayerInfo[playerid][pStrSkins],skin,PlayerInfo[playerid][pNormalName]);
	mysql_tquery(SQL, var,"","");
	return 1;
}

stock randomString(strDest[], strLen = 10)
{
	while(strLen--)
		strDest[strLen] = random(2) ? (random(26) + (random(2) ? 'a' : 'A')) : (random(10) + '0');
}

forward OOCNews(color,string[]);
public OOCNews(color,string[])
{
	foreach(new i : Player)
	{
	    if(!gNews[i])
	    {
			SendSplitMessage(i, color, string);
		}
	}
	return 1;
}

forward OOCNews2(color,const string[]);
public OOCNews2(color,const string[])
{
	foreach(new i : Player)
	{
		SendClientMessage(i, color, string);
	}
	return 1;
}

forward SendRadioMessage(member, color, string[]);
public SendRadioMessage(member, color, string[])
{
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pMember] == member || PlayerInfo[i][pLeader] == member)
	    {
			SendClientMessage(i, color, string);
		}
		if(FactionSpec[i] == member && PlayerInfo[i][pAdmin] >= 1)
		{
			SendClientMessage(i, COLOR_RADIOCHAT, string);
		}
	}
	return 1;
}

forward SendTeamMessage(member, color, string[]);
public SendTeamMessage(member, color, string[])
{
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pMember] == member || PlayerInfo[i][pLeader] == member)
	    {
			SendClientMessage(i, color, string);
		}
		if(FactionSpec[i] == member && PlayerInfo[i][pAdmin] >= 1)
		{
			SendClientMessage(i, COLOR_RADIOCHAT, string);
		}
	}
	return 1;
}

forward SendFamilyMessage(family, color, string[]);
public SendFamilyMessage(family, color, string[])
{
	foreach(new i : Player)
	{
        if(gPlayerLogged[i] == 1)
        {
		    if(PlayerInfo[i][pMember] == family || PlayerInfo[i][pLeader] == family)
		    {
	            if(!gFam[i])
	            {
					SendClientMessage(i, color, string);
				}
			}
			if(FactionSpec[i] == family && PlayerInfo[i][pAdmin] >= 1)
			{
				SendClientMessage(i, COLOR_RADIOCHAT, string);
			}
		}
	}
	return 1;
}

stock nearByMessage(playerid, color, string[], Float: Distance3 = 12.0) {
	new
	    Float: nbCoords[3];

	GetPlayerPos(playerid, nbCoords[0], nbCoords[1], nbCoords[2]);

	foreach(new i : Player) {
	        if(IsPlayerInRangeOfPoint(i, Distance3, nbCoords[0], nbCoords[1], nbCoords[2]) && (GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))) {
				SendClientMessage(i, color, string);
	    }
	}

	return 1;
}

stock CalculateBestScore(turfid)
{
    new bestid;
    if(WarInfo[turfid][wAttacker] != 0 && WarInfo[turfid][wFaction] != 0)
    {
        new bestscore,
            group1 = WarInfo[turfid][wAttacker],
            group2 = WarInfo[turfid][wFaction];
        foreach(new i : Player)
        {
            if(group1 == PlayerInfo[i][pMember] || group2 == PlayerInfo[i][pMember])
            {
                new score;
                score = ucideri[i][turfid] - decese[i][turfid];
                if(score >= bestscore)
                {
                    bestscore = score;
                    bestid = i;
                }
            }
        }
    }
	return bestid;
}

stock CalculateWorstScore(turfid)
{
    new bestid;
    if(WarInfo[turfid][wAttacker] != 0 && WarInfo[turfid][wFaction] != 0)
    {
        new bestscore,
            group1 = WarInfo[turfid][wAttacker],
            group2 = WarInfo[turfid][wFaction];
        foreach(new i : Player)
        {
            if(group1 == PlayerInfo[i][pMember] || group2 == PlayerInfo[i][pMember])
            {
                new score;
                score = ucideri[i][turfid] - decese[i][turfid];
                if(score <= bestscore)
                {
                    bestscore = score;
                    bestid = i;
                }
            }
        }
    }
    return bestid;
}

OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}

LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    gPlayerUsingLoopingAnim[playerid] = 1;
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}

StopLoopingAnim(playerid)
{
	gPlayerUsingLoopingAnim[playerid] = 0;
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	
	if(pickupid == dmvp)
	{
	    PlayerTextDrawShow(playerid, TextJos[playerid]);
		PlayerTextDrawSetString(playerid, TextJos[playerid], "Type ~r~/exam ~w~to start the test");
		return 1;
	}
	else if(pickupid == gslsenter1)
	{
		SetPlayerPosEx(playerid, 302.3855,-142.1355,1004.0625);
		return 1;
	}
	else if(pickupid == gslsenter2)
	{
		SetPlayerPosEx(playerid, 296.4399,-141.7991,1004.0625);
		return 1;
	}
	else if(pickupid == gslsenter3)
	{
		SetPlayerPosEx(playerid, 308.8968,-141.8929,1004.0625);
		return 1;
	}
	else if(pickupid == gslsenter4)
	{
		SetPlayerPosEx(playerid, 302.3855,-142.1355,1004.0625);
		return 1;
    }
    for(new i = 0; i< MAX_OBJECTS; i++)
	{
		if(pickupid == ObjectIDD[i] && ObjectIDD[i] != -1)
		{
			if(PlayerInfo[playerid][pAdmin] >= 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't pick this object because you are an admin!");

			new id = CountObjects(),string[128],name[30];
			GetPlayerName(playerid, name, sizeof(name));
			format(string,sizeof(string),"NR AdmBot: One object from event was found by %s. He won a prize of $%s!",name,FormatNumber(ObjectMoney[i]));
		    OOCNews(COLOR_ORANGE,string);
		    GivePlayerCash(playerid,ObjectMoney[i]);

		    if(id-1 > 1) format(string,sizeof(string),"NR AdmBot: The event continues. Are more %d objects to find!",id-1);
            else if(id-1 == 1) format(string,sizeof(string),"NR AdmBot: The event continues. Are one more object to find!");
            else if(id-1 == 0) format(string,sizeof(string),"NR AdmBot: The event has ended. Thanks for participation!");
            OOCNews(COLOR_ORANGE,string);
		    DestroyPickup(ObjectIDD[i]);
		    ObjectIDD[i] = -1;
		    ObjectMoney[i] = 0;
		}	
	}
	return 1;
}

forward ValidTuningCar(carid);
public	ValidTuningCar(carid)
{
	if(GetVehicleModel(carid) == 558 || GetVehicleModel(carid) == 565 || GetVehicleModel(carid) == 561 || GetVehicleModel(carid) == 562 || GetVehicleModel(carid) == 559 || GetVehicleModel(carid) == 560)
	{
	    return 1;
	}
	return 0;
}
forward PacaneleTimer();
public PacaneleTimer()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(joacapacanele[i] > 0)
			{
				if(timerpacanele[i] > 0)
				{
					timerpacanele[i]--;
					rundapacanele[i]++;
					new icoana = random(10);
					new finalicoana;
					if(icoana == 0) finalicoana = 1274;
					if(icoana == 1 || icoana == 3) finalicoana = 1240;
					if(icoana == 2 || icoana == 4) finalicoana = 1276;
					if(icoana == 5 || icoana == 6) finalicoana = 1254;
					if(icoana == 7 || icoana == 9) finalicoana = 1247;
					if(icoana == 8 || icoana == 10) finalicoana = 1274;
					if(rundapacanele[i] == 1) PlayerTextDrawSetPreviewModel(i, PacaneleTD[10], finalicoana),IcoanaPacanele[i][rundapacanele[i]-1] = finalicoana,PlayerTextDrawShow(i, PacaneleTD[10]);
					if(rundapacanele[i] == 2)
					{
						PlayerTextDrawSetPreviewModel(i, PacaneleTD[13], finalicoana),IcoanaPacanele[i][rundapacanele[i]-1] = finalicoana,PlayerTextDrawShow(i, PacaneleTD[13]);
						PlayerTextDrawSetPreviewRot(i, PacaneleTD[40], 40.000000, 0.000000, 15.000000, 1.000000);
						PlayerTextDrawShow(i, PacaneleTD[40]);
					}
					if(rundapacanele[i] == 3) PlayerTextDrawSetPreviewModel(i, PacaneleTD[16], finalicoana),IcoanaPacanele[i][rundapacanele[i]-1] = finalicoana,PlayerTextDrawShow(i, PacaneleTD[16]);
					if(rundapacanele[i] == 4) PlayerTextDrawSetPreviewModel(i, PacaneleTD[11], finalicoana),IcoanaPacanele[i][rundapacanele[i]-1] = finalicoana,PlayerTextDrawShow(i, PacaneleTD[11]);
					if(rundapacanele[i] == 5) PlayerTextDrawSetPreviewModel(i, PacaneleTD[14], finalicoana),IcoanaPacanele[i][rundapacanele[i]-1] = finalicoana,PlayerTextDrawShow(i, PacaneleTD[14]);
					if(rundapacanele[i] == 6) PlayerTextDrawSetPreviewModel(i, PacaneleTD[17], finalicoana),IcoanaPacanele[i][rundapacanele[i]-1] = finalicoana,PlayerTextDrawShow(i, PacaneleTD[17]);
					if(rundapacanele[i] == 7) PlayerTextDrawSetPreviewModel(i, PacaneleTD[12], finalicoana),IcoanaPacanele[i][rundapacanele[i]-1] = finalicoana,PlayerTextDrawShow(i, PacaneleTD[12]);
					if(rundapacanele[i] == 8) PlayerTextDrawSetPreviewModel(i, PacaneleTD[15], finalicoana),IcoanaPacanele[i][rundapacanele[i]-1] = finalicoana,PlayerTextDrawShow(i, PacaneleTD[15]);
					if(rundapacanele[i] == 9) PlayerTextDrawSetPreviewModel(i, PacaneleTD[18], finalicoana),IcoanaPacanele[i][rundapacanele[i]-1] = finalicoana,PlayerTextDrawShow(i, PacaneleTD[18]);
				}
				if(timerpacanele[i] == 0)
				{
					timerpacanele[i] = -1;
					new acastigat = 0;
					//orizontala
					if(IcoanaPacanele[i][0] == 1274 && IcoanaPacanele[i][3] == 1274 && IcoanaPacanele[i][6] == 1274) acastigat = 10;
					if(IcoanaPacanele[i][1] == 1274 && IcoanaPacanele[i][4] == 1274 && IcoanaPacanele[i][7] == 1274) acastigat = 10;
					if(IcoanaPacanele[i][2] == 1274 && IcoanaPacanele[i][5] == 1274 && IcoanaPacanele[i][8] == 1274) acastigat = 10;

					if(IcoanaPacanele[i][0] == 1240 && IcoanaPacanele[i][3] == 1240 && IcoanaPacanele[i][6] == 1240) acastigat = 8;
					if(IcoanaPacanele[i][1] == 1240 && IcoanaPacanele[i][4] == 1240 && IcoanaPacanele[i][7] == 1240) acastigat = 8;
					if(IcoanaPacanele[i][2] == 1240 && IcoanaPacanele[i][5] == 1240 && IcoanaPacanele[i][8] == 1240) acastigat = 8;

					if(IcoanaPacanele[i][0] == 1247 && IcoanaPacanele[i][3] == 1247 && IcoanaPacanele[i][6] == 1247) acastigat = 6;
					if(IcoanaPacanele[i][1] == 1247 && IcoanaPacanele[i][4] == 1247 && IcoanaPacanele[i][7] == 1247) acastigat = 6;
					if(IcoanaPacanele[i][2] == 1247 && IcoanaPacanele[i][5] == 1247 && IcoanaPacanele[i][8] == 1247) acastigat = 6;

					if(IcoanaPacanele[i][0] == 1276 && IcoanaPacanele[i][3] == 1276 && IcoanaPacanele[i][6] == 1276) acastigat = 4;
					if(IcoanaPacanele[i][1] == 1276 && IcoanaPacanele[i][4] == 1276 && IcoanaPacanele[i][7] == 1276) acastigat = 4;
					if(IcoanaPacanele[i][2] == 1276 && IcoanaPacanele[i][5] == 1276 && IcoanaPacanele[i][8] == 1276) acastigat = 4;

					if(IcoanaPacanele[i][0] == 1254 && IcoanaPacanele[i][3] == 1254 && IcoanaPacanele[i][6] == 1254) acastigat = 2;
					if(IcoanaPacanele[i][1] == 1254 && IcoanaPacanele[i][4] == 1254 && IcoanaPacanele[i][7] == 1254) acastigat = 2;
					if(IcoanaPacanele[i][2] == 1254 && IcoanaPacanele[i][5] == 1254 && IcoanaPacanele[i][8] == 1254) acastigat = 2;

     /*//verticala
					if(IcoanaPacanele[i][0] == 1274 && IcoanaPacanele[i][1] == 1274 && IcoanaPacanele[i][2] == 1274) acastigat = 10;
					if(IcoanaPacanele[i][3] == 1274 && IcoanaPacanele[i][4] == 1274 && IcoanaPacanele[i][5] == 1274) acastigat = 10;
					if(IcoanaPacanele[i][6] == 1274 && IcoanaPacanele[i][7] == 1274 && IcoanaPacanele[i][8] == 1274) acastigat = 10;

					if(IcoanaPacanele[i][0] == 1240 && IcoanaPacanele[i][1] == 1240 && IcoanaPacanele[i][2] == 1240) acastigat = 8;
					if(IcoanaPacanele[i][3] == 1240 && IcoanaPacanele[i][4] == 1240 && IcoanaPacanele[i][5] == 1240) acastigat = 8;
					if(IcoanaPacanele[i][6] == 1240 && IcoanaPacanele[i][7] == 1240 && IcoanaPacanele[i][8] == 1240) acastigat = 8;

					if(IcoanaPacanele[i][0] == 1247 && IcoanaPacanele[i][1] == 1247 && IcoanaPacanele[i][2] == 1247) acastigat = 6;
					if(IcoanaPacanele[i][3] == 1247 && IcoanaPacanele[i][4] == 1247 && IcoanaPacanele[i][5] == 1247) acastigat = 6;
					if(IcoanaPacanele[i][6] == 1247 && IcoanaPacanele[i][7] == 1247 && IcoanaPacanele[i][8] == 1247) acastigat = 6;

					if(IcoanaPacanele[i][0] == 1276 && IcoanaPacanele[i][1] == 1276 && IcoanaPacanele[i][2] == 1276) acastigat = 4;
					if(IcoanaPacanele[i][3] == 1276 && IcoanaPacanele[i][4] == 1276 && IcoanaPacanele[i][5] == 1276) acastigat = 4;
					if(IcoanaPacanele[i][6] == 1276 && IcoanaPacanele[i][7] == 1276 && IcoanaPacanele[i][8] == 1276) acastigat = 4;

					if(IcoanaPacanele[i][0] == 1254 && IcoanaPacanele[i][1] == 1254 && IcoanaPacanele[i][2] == 1254) acastigat = 2;
					if(IcoanaPacanele[i][3] == 1254 && IcoanaPacanele[i][4] == 1254 && IcoanaPacanele[i][5] == 1254) acastigat = 2;
					if(IcoanaPacanele[i][6] == 1254 && IcoanaPacanele[i][7] == 1254 && IcoanaPacanele[i][8] == 1254) acastigat = 2;*/

					/*//diagonala
					if(IcoanaPacanele[i][0] == 1274 && IcoanaPacanele[i][4] == 1274 && IcoanaPacanele[i][8] == 1274) acastigat = 10;
					if(IcoanaPacanele[i][2] == 1274 && IcoanaPacanele[i][4] == 1274 && IcoanaPacanele[i][6] == 1274) acastigat = 10;

					if(IcoanaPacanele[i][0] == 1240 && IcoanaPacanele[i][4] == 1240 && IcoanaPacanele[i][8] == 1240) acastigat = 8;
					if(IcoanaPacanele[i][2] == 1240 && IcoanaPacanele[i][4] == 1240 && IcoanaPacanele[i][6] == 1240) acastigat = 8;

					if(IcoanaPacanele[i][0] == 1247 && IcoanaPacanele[i][4] == 1247 && IcoanaPacanele[i][8] == 1247) acastigat = 6;
					if(IcoanaPacanele[i][2] == 1247 && IcoanaPacanele[i][4] == 1247 && IcoanaPacanele[i][6] == 1247) acastigat = 6;

					if(IcoanaPacanele[i][0] == 1276 && IcoanaPacanele[i][4] == 1276 && IcoanaPacanele[i][8] == 1276) acastigat = 4;
					if(IcoanaPacanele[i][2] == 1276 && IcoanaPacanele[i][4] == 1276 && IcoanaPacanele[i][6] == 1276) acastigat = 4;

					if(IcoanaPacanele[i][0] == 1254 && IcoanaPacanele[i][4] == 1254 && IcoanaPacanele[i][8] == 1254) acastigat = 2;
					if(IcoanaPacanele[i][2] == 1254 && IcoanaPacanele[i][4] == 1254 && IcoanaPacanele[i][6] == 1254) acastigat = 2;*/
					new stringglobal[128];
					if(acastigat == 0)
					{
						GivePlayerCash(i, -sumapacanele[i]);		
						PlayerTextDrawSetString(i, PacaneleTD[49], "~R~LOSE");
						PlayerTextDrawShow(i, PacaneleTD[49]);
						format(stringglobal, sizeof(stringglobal), "Your_Cash:_$%s",FormatNumber(GetPlayerCash(i)));
						PlayerTextDrawSetString(i, PacaneleTD[41], stringglobal);
						PlayerTextDrawShow(i, PacaneleTD[41]);
						new string2[128],var100[256];
						format(string2,sizeof(string2),"%s loses %s$ on /spin.",PlayerInfo[i][pNormalName],FormatNumber(sumapacanele[i]));
						mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','0','%s')", PlayerInfo[i][pSQLID],string2);
						mysql_tquery(SQL,var100,"","");
					}
					else
					{
						GivePlayerCash(i, sumapacanele[i] * acastigat);
						PlayerTextDrawSetString(i, PacaneleTD[49], "WIN");
						PlayerTextDrawShow(i, PacaneleTD[49]);
						format(stringglobal, sizeof(stringglobal), "Your_Cash:_$%s",FormatNumber(GetPlayerCash(i)));
						PlayerTextDrawSetString(i, PacaneleTD[41], stringglobal);
						PlayerTextDrawShow(i, PacaneleTD[41]);
						PlayerPlaySound(i, 5448, 0.0, 0.0, 0.0 );
						new string2[128],var100[256];
						format(string2,sizeof(string2),"%s win %s$ on /spin.",PlayerInfo[i][pNormalName],FormatNumber(sumapacanele[i] * acastigat));
						mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','0','%s')", PlayerInfo[i][pSQLID],string2);
						mysql_tquery(SQL,var100,"","");
					}
				}
			}
		}
	}
	return 1;
}
stock Castigator(playerid, bool:status, inmultitcu)
{
	if(status == true) PlayerTextDrawSetString(playerid, PacaneleTD[49], "WIN"), PlayerTextDrawShow(playerid, PacaneleTD[49]),GivePlayerCash(playerid sumapacanele[playerid]*inmultitcu);
	if(status == false) PlayerTextDrawSetString(playerid, PacaneleTD[49], "~r~LOSE"), PlayerTextDrawShow(playerid, PacaneleTD[49]),GivePlayerCash(playerid -sumapacanele[playerid]);
}
stock Pacanele(playerid, bool:status)
{
	if(status == true)
	{
		PlayerTextDrawSetPreviewRot(playerid, PacaneleTD[40], 40.000000, 0.000000, 15.000000, 1.000000);
		for(new i = 0; i < 10; i++) IcoanaPacanele[playerid][i] = 0;
		for(new i = 10; i < 19; i++) PlayerTextDrawSetPreviewModel(playerid, PacaneleTD[i], 18631);
		timerpacanele[playerid] = -1;
		rundapacanele[playerid] = -1;
		new castiguri[128];
		new stringglobal[128];
		sumapacanele[playerid] = 1000;
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid] * 10));
		PlayerTextDrawSetString(playerid, PacaneleTD[22], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 8));
		PlayerTextDrawSetString(playerid, PacaneleTD[26], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 6));
		PlayerTextDrawSetString(playerid, PacaneleTD[30], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 4));
		PlayerTextDrawSetString(playerid, PacaneleTD[34], castiguri);
		format(castiguri, sizeof(castiguri), "=_$%s",FormatNumber(sumapacanele[playerid]* 2));
		PlayerTextDrawSetString(playerid, PacaneleTD[38], castiguri);
		joacapacanele[playerid] = 1;
		format(stringglobal, sizeof(stringglobal), "Your_Cash:_$%s",FormatNumber(GetPlayerCash(playerid)));
		PlayerTextDrawSetString(playerid, PacaneleTD[41], stringglobal);
		PlayerTextDrawSetString(playerid, PacaneleTD[45], "$1,000");
		SelectTextDraw(playerid, 0xFF00000FF);
		for(new i = 0; i < sizeof(PacaneleTD); i++) PlayerTextDrawShow(playerid, PacaneleTD[i]);
		PlayerTextDrawHide(playerid, PacaneleTD[49]);
		hide_accs_tds(playerid);
	}
	if(status == false)
	{
		for(new i = 0; i < 10; i++) IcoanaPacanele[playerid][i] = 0;
		rundapacanele[playerid] = -1;
		timerpacanele[playerid] = -1;
		joacapacanele[playerid] = -1;
		sumapacanele[playerid] = -1;
		CancelSelectTextDraw(playerid);
		for(new i = 0; i < sizeof(PacaneleTD); i++) PlayerTextDrawHide(playerid, PacaneleTD[i]);
	}
	return 1;
}

CMD:clothes(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(BizzInfo[InBussines[playerid]][bType] != 11) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in a clothing store.");
	if(PlayerInfo[playerid][pMember] != 0 && OnDuty[playerid] != 0)  return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't change your skin when you are on duty."); 
	ShowModelSelectionMenuEx(playerid, PlayerInfo[playerid][pSkins], PlayerInfo[playerid][pTSkins]+1, "Skins", -1, 0.0, 0.0, 0.0, 1.0, 0x4A5A6BBB, 0x88888899 , 0xFFFF00AA);
	ChangeClothes[playerid] = 1;
	return 1;
}
CMD:spin(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to login first.");
    if(PlayerInfo[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have level 3.");
	if(!IsPlayerInRangeOfPoint(playerid,50.0,1977.7538,1017.7076,994.4688)) return SendClientMessage(playerid,COLOR_ERROR,"(Error){FFFFFF} You can use this command only in casinos.");
    if(InBlackJackGame[playerid] == 1 || RouletteInGame[playerid] == 1 || joacapacanele[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are already playing a casino game!");
    if(InOpenCase[playerid] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are already in a textdraw.");
    Pacanele(playerid, true);
    return 1;
}
CMD:roulette(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have level 3.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1963.4786, 1009.7115, 993.4035) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1959.3018, 1009.7852, 993.4035) && !IsPlayerInRangeOfPoint(playerid, 10.0, 1961.3555, 1016.0435, 992.4688) && !IsPlayerInRangeOfPoint(playerid, 10.0, 1961.3580, 1019.7963, 992.4688) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1959.2462, 1025.4403, 993.4035)
	&& !IsPlayerInRangeOfPoint(playerid, 5.0, 1963.5283, 1025.4406, 993.4035)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu esti la o masa pentru ruleta.", "(Error){FFFFFF} You are not at a Roulette table.");
	if(InBlackJackGame[playerid] == 1 || RouletteInGame[playerid] == 1 || joacapacanele[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are already playing a casino game!");
   	if(InOpenCase[playerid] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are already in a textdraw.");
    for(new t; t<20; t++) 
    	if(t != 15 && t!= 9 && t != 10 && t!=11) 
    		TextDrawShowForPlayer(playerid,CasinoDraw[t]);
    SelectTextDrawEx(playerid,0xFFFFFFFF);
	RouletteInGame[playerid] = 1;
	update_ruleta(playerid);
	zmidialog[playerid] = 0;
	return 1;
}

CMD:blackjack(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have level 3.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1963.4786, 1009.7115, 993.4035) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1959.3018, 1009.7852, 993.4035) && !IsPlayerInRangeOfPoint(playerid, 10.0, 1961.3555, 1016.0435, 992.4688) && !IsPlayerInRangeOfPoint(playerid, 10.0, 1961.3580, 1019.7963, 992.4688) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1959.2462, 1025.4403, 993.4035)
	&& !IsPlayerInRangeOfPoint(playerid, 5.0, 1963.5283, 1025.4406, 993.4035)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu esti la o masa de Black Jack.", "(Error){FFFFFF} You are not at a Black Jack table.");
	if(InBlackJackGame[playerid] == 1 || RouletteInGame[playerid] == 1 || joacapacanele[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are already playing a casino game!");
	if(InOpenCase[playerid] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are already in a textdraw.");
	new text[128];
	BJMatch[playerid] = 0;
	InBlackJackGame[playerid] = 1;
	CloseBMatch[playerid] = 0;
	BDeal[playerid] = 0;
	BDealerScore[playerid] = 0;
	BlackJackPlayerScore[playerid] = 0;
	BDealerCards[playerid] = 0;
	BlackJackActions[playerid]=0;
	BlackJackPlayerCards[playerid] = 0;
	BlackJackStand[playerid]=0;
	for(new x; x < 5; x++)
	{
		BDealerCard[playerid][x] = 0;
		BlackJackPlayerCard[playerid][x] = 0;
	}
	PlayerTextDrawShow(playerid, BJusebox1[playerid]);
	PlayerTextDrawShow(playerid, BJusebox2[playerid]);
	PlayerTextDrawShow(playerid, BJusebox3[playerid]);
	PlayerTextDrawShow(playerid, BJDealerText[playerid]);
	PlayerTextDrawShow(playerid, BJPlayerText[playerid]);
	PlayerTextDrawShow(playerid, BJBlackJackText[playerid]);
	PlayerTextDrawShow(playerid, BJScoreText[playerid]);
	PlayerTextDrawShow(playerid, BJDealText[playerid]);
	PlayerTextDrawShow(playerid, BJBalanceText[playerid]);
	PlayerTextDrawShow(playerid, BJDealButtonText[playerid]);
	PlayerTextDrawShow(playerid, BJEnterBetText[playerid]);
	PlayerTextDrawShow(playerid, BJDealerScoreText[playerid]);
	PlayerTextDrawShow(playerid, BJPlayerScoreText[playerid]);
	PlayerTextDrawShow(playerid, BJClearBetText[playerid]);
	PlayerTextDrawShow(playerid, BJHitOptionText[playerid]);
	PlayerTextDrawShow(playerid, BJStandOptionText[playerid]);
	PlayerTextDrawShow(playerid, BJDealerCard1[playerid]);
	PlayerTextDrawShow(playerid, BJDealerCard2[playerid]);
	PlayerTextDrawShow(playerid, BJDealerCard3[playerid]);
	PlayerTextDrawShow(playerid, BJDealerCard4[playerid]);
	PlayerTextDrawShow(playerid, BJDealerCard5[playerid]);
	PlayerTextDrawShow(playerid, BJPlayerCard1[playerid]);
	PlayerTextDrawShow(playerid, BJPlayerCard2[playerid]);
	PlayerTextDrawShow(playerid, BJPlayerCard3[playerid]);
	PlayerTextDrawShow(playerid, BJPlayerCard4[playerid]);
	PlayerTextDrawShow(playerid, BJPlayerCard5[playerid]);
	format(text, sizeof(text), "BALANACE:~n~%s$", FormatNumber(GetPlayerCash(playerid)));
	PlayerTextDrawSetString(playerid, BJBalanceText[playerid], text);
	PlayerTextDrawSetString(playerid, BJDealText[playerid], "DEAL:~n~0$");
	PlayerTextDrawSetString(playerid, BJDealerCard1[playerid], "LD_CARD:cdback");
	PlayerTextDrawSetString(playerid, BJDealerCard2[playerid], "LD_CARD:cdback");
	PlayerTextDrawSetString(playerid, BJDealerCard3[playerid], "LD_CARD:cdback");
	PlayerTextDrawSetString(playerid, BJDealerCard4[playerid], "LD_CARD:cdback");
	PlayerTextDrawSetString(playerid, BJDealerCard5[playerid], "LD_CARD:cdback");
	PlayerTextDrawSetString(playerid, BJPlayerCard1[playerid], "LD_CARD:cdback");
	PlayerTextDrawSetString(playerid, BJPlayerCard2[playerid], "LD_CARD:cdback");
	PlayerTextDrawSetString(playerid, BJPlayerCard3[playerid], "LD_CARD:cdback");
	PlayerTextDrawSetString(playerid, BJPlayerCard4[playerid], "LD_CARD:cdback");
	PlayerTextDrawSetString(playerid, BJPlayerCard5[playerid], "LD_CARD:cdback");
	PlayerTextDrawSetString(playerid, BJDealerScoreText[playerid], "DEALER: 0");
	PlayerTextDrawSetString(playerid, BJPlayerScoreText[playerid], "PLAYER: 0");

	TogglePlayerControllable(playerid, false);
	SelectTextDraw(playerid, 0xFF0000FF);
	return 1;
}

CMD:pcolor(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pPremiumAccount] > 0)
	{
		new string[700],string2[1000];
		format(string,sizeof(string),"{CECECE}White\n{0087FE}Blue\n{4700C2}Dark purple\n{EBFF00}Yellow\n{EF00FF}Purple\n{40FF00}Green\n{9CFF29}Lime green\n{0E7F03}Dark green\n{FF9A00}Orange\n{6E6E6E}Black\n{FF4C9D}Pink\n{F4FA58}Yellow 2\n{00BFFF}Blue 2\n{819FF7}Blue 3\n{FE9A2E}Orange 2\n{FA8258}Orange 3\n{00FF40}Green 2\n{D358F7}Purple 2");
		format(string2,sizeof(string2),"%s\n{4169E1}Royan Blue\n{9ACD32}YellowGreen\n{F0E68C}Khaki\n{BDB76B}DarkKhaki\n{FF1493}DeepPink\n{9966CC}Amethyst\n{F0B2B2}PinkOrange\n{DB7093}PaleVioletRed",string);
		ShowPlayerDialog(playerid, 6267, DIALOG_STYLE_LIST, "Nickname color", string2, "Choose", "Cancel");
	}
	else return SendClientMessage(playerid,COLOR_ERROR,"(Error){FFFFFF} You are not a premium user.");
	return 1;
}
CMD:acolor(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pHelper] >= 1 || PlayerInfo[playerid][pAdmin] >= 1)
		ShowPlayerDialog(playerid, 6268, DIALOG_STYLE_LIST, "Nickname color", "White\nCool Red\nDark Red\nLight Red", "Choose", "Cancel");
	return 1;
}
CMD:myneons(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new iString[256];
	format(iString, sizeof(iString), "{E02121}Red (%d), {28E128}Green (%d), {DCE617}Yellow (%d), {E617CA}Pink (%d), {1E5EE0}Blue (%d)",PlayerInfo[playerid][pNeonR],PlayerInfo[playerid][pNeonV]
		,PlayerInfo[playerid][pNeonG],PlayerInfo[playerid][pNeonRZ],PlayerInfo[playerid][pNeonA]);
	ShowPlayerDialog(playerid, DIALOG_MYNEONS, DIALOG_STYLE_MSGBOX, "Your neons", iString, "Ok", "");
	return 1;
}
CMD:flip(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] >= 1)
	{
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You're not in a vehicle.");

        new Float:angle,
    		currentveh = GetPlayerVehicleID(playerid);
    	GetVehicleZAngle(currentveh, angle);
    	SetVehicleZAngle(currentveh, angle);
        SendClientMessage(playerid, COLOR_WHITE, "Your vehicle has been flipped back over.");
        Adminlog(PlayerInfo[playerid][pSQLID], "flipped vehicle", "flip");
    }
	return 1;
}
CMD:angle(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] >= 1)
	{
        new Float:Angle, string[26];
		GetPlayerFacingAngle(playerid, Angle);
		format(string, sizeof(string), "Your facing angle: %0.2f", Angle);
		SendClientMessage(playerid, COLOR_WHITE, string);
    }
	return 1;
}
CMD:showmotd(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pMember] == 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You are not in a group.");
	if(strlen(DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]) > 0)
	{
	    new factioninfo[128];
		format(factioninfo,sizeof(factioninfo), "Group MOTD: {FFFFFF}%s",DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]);
		SendClientMessage(playerid,COLOR_GENANNOUNCE,factioninfo);
	}
	return 1;
}

CMD:gmotd(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pMember] == 0) return 1;
	if(PlayerInfo[playerid][pRank] < 6) return 1;
	new newsf[128],string[256],name[30],newsfe[128];
	if(sscanf(params, "s[128]",newsf)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gmotd [message]");
	GetPlayerName(playerid, name, sizeof(name));
	mysql_real_escape_string(newsf, newsfe);
	strmid(DynamicFactions[PlayerInfo[playerid][pMember]][fAnn], newsfe, 0, strlen(newsfe), 255);
	format(string,sizeof(string),"You have changed the group MOTD to %s.",DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	SS(playerid, COLOR_WHITE, "{58FAAC}Foloseste /gmotd doar pentru anunturi importante. Folosirea /gmotd pentru glume, spam va fi sanctionata.","{58FAAC}Use /gmotd only important announcements. Uses of /gmotd for jokes, spamming will be sanctionated.");
	format(string,sizeof(string),"%s has changed the group MOTD to '%s'.",name,DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]);
	SendFamilyMessage(PlayerInfo[playerid][pMember],COLOR_GENANNOUNCE,string);
	mysql_format(SQL,string, sizeof(string), "UPDATE `factions` SET `Anunt`='%s' WHERE `ID`='%d'",DynamicFactions[PlayerInfo[playerid][pMember]][fAnn], PlayerInfo[playerid][pMember]);
	mysql_tquery(SQL,string,"","");
	return 1;
}

CMD:gsafepos(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		if(PlayerInfo[playerid][pMember] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be a member of a group.");
		GetPlayerPos(playerid, DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][0], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][1], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][2]);

		DestroyDynamicPickup(DynamicFactions[PlayerInfo[playerid][pMember]][fSafePickupID]);
		DestroyDynamic3DTextLabel(DynamicFactions[PlayerInfo[playerid][pMember]][fSafeLabelID]);

		new string[256];
		format(string, sizeof(string), "%s\nGroup Safe", DynamicFactions[PlayerInfo[playerid][pMember]][fName]);

		DynamicFactions[PlayerInfo[playerid][pMember]][fSafePickupID] = CreateDynamicPickup(1274, 23, DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][0], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][1], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][2], DynamicFactions[PlayerInfo[playerid][pMember]][fVirtual], DynamicFactions[PlayerInfo[playerid][pMember]][fInterior], -1, 50);
		DynamicFactions[PlayerInfo[playerid][pMember]][fSafeLabelID] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][0], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][1], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, DynamicFactions[PlayerInfo[playerid][pMember]][fVirtual], DynamicFactions[PlayerInfo[playerid][pMember]][fInterior], -1, 20.0);

		mysql_format(SQL, string, sizeof(string), "UPDATE `factions` SET `SafePos1`='%f', `SafePos2`='%f', `SafePos3`='%f' WHERE `ID`='%d'", DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][0], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][1], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][2], PlayerInfo[playerid][pMember]);
		mysql_tquery(SQL, string, "", "");

		SendClientMessage(playerid, COLOR_WHITE, "You have adjusted the position of your group's safe.");
		Adminlog(PlayerInfo[playerid][pSQLID], "changed groupsafe pos", "gsafe");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}

CMD:accs(playerid, params[]) {
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string[512], string2[512];
	if(GetPVarInt(playerid, "accs") == 1 && PlayerInfo[playerid][pAdmin] >= 6) {
		new price, pp;
		if(sscanf(params, "ii", price, pp)) return SendClientMessage(playerid, -1, "(ADMIN) /accs <price> <premium points>");
		new i = ObjectSlot[playerid][ObjectID[playerid]];

		objectInfo[i][objPremium] = pp;
		objectInfo[i][objMoney] = price;

		foreach(Player, x) {
			if(IsPlayerConnected(x) && GetPVarInt(x, "accs") == 1) update_accs(playerid);
		}
		
		new query[128];
		format(query, sizeof(query), "UPDATE `objects_accesory` SET `Money`='%d', `Premium`='%d' WHERE `ID`='%d'", price, pp, i);
		mysql_tquery(SQL, query, "", "");
		return 1;
	}	
	strcat(string, "Category\tModel\tStatus\n");
	for(new i = 0; i < 7; i++) {
		if(attachInfo[playerid][aModel][i] != 0) format(string2, sizeof(string2), "%s\t%d\t%s{ffffff}\n", categoryName(i), attachInfo[playerid][aModel][i], (attachInfo[playerid][aStatus][i] > 0) ? ("{D60404}disabled") : ("{10B807}activated"));
		else format(string2, sizeof(string2), "%s\tnone\tunavailable\n", categoryName(i));
		strcat(string, string2);
	}
	//strcat(string, "{D60404}Delete all");
    ShowPlayerDialog(playerid, DIALOG_EDITACCS, DIALOG_STYLE_TABLIST_HEADERS, "SERVER: Edit clothes", string, "Select", "Cancel");
    return 1;				
}

CMD:buyaccs(playerid, params[]) {
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(BizzInfo[InBussines[playerid]][bType] != 11) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in a clothing store.");
	if(InOpenCase[playerid] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are already in a textdraw.");
	SetPVarInt(playerid, "accs", 1);
	show_accs_dialog(playerid);
	SetPlayerFacingAngle(playerid, 266.7052);
	return 1;
}

CMD:insertobject(playerid, params[]) {
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new model, type;
	if(sscanf(params, "i", model, type)) return SendClientMessage(playerid, -1, "/insertobject <model> <type>");
	new query[256];
	format(query, sizeof(query), "INSERT INTO `objects_accesory` (`Model`) VALUES ('%d')", model, type);
	mysql_tquery(SQL, query, "", "");
	SendClientMessage(playerid, COLOR_LIGHTRED, "Object added!");
	return 1;
}

CMD:resetobjects(playerid, params[]) {
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
    for(new i; i < MAX_PLAYER_ATTACHED_OBJECTS-1; i++) {
    	RemovePlayerAttachedObject(playerid, i);
    }
	return 1;
}
CMD:resetevent(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new query[256],string[128];
	mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `QuestObjects`='0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|'");
	mysql_tquery(SQL, query, "", "");
	foreach(new i : Player)
	{
		for(new j=0;j<questobjectss;j++)
			PlayerInfo[i][pQuestObjects][j] = 0;
	}
	format(string, sizeof(string), "(AdmCmd){FFFFFF} %s[%d] reseted the special quest.", GetName(playerid), playerid);
	ABroadCast(COLOR_RED2,string, 5);
	Adminlog(PlayerInfo[playerid][pSQLID], "reseted special quest", "/resetevent");
	return 1;
}
CMD:resetquests(playerid, params[]) {
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
    foreach(new i : Player)
	{
		PlayerInfo[i][pQuest1] = 0;
		PlayerInfo[i][pQuest2] = 0;
		PlayerInfo[playerid][pQuestProgress1] = 0;
		PlayerInfo[playerid][pQuestProgress2] = 0;
		Update(i, pQuestProgress1x);
		Update(i, pQuestProgress2x);
		Update(playerid, pQuest1x);
		Update(playerid, pQuest2x);
		if(PlayerInfo[i][pQuest1] == 0)
		{
			new quest1 = 1 + random(8),quest2 = 1 + random(8);
			if(IsACop(i) && quest1 == 4) quest1 = 2;
			PlayerInfo[i][pQuest1] = quest1;
			PlayerInfo[i][pQuest2] = quest2;
			Update(i, pQuest1x);
			Update(i, pQuest2x);
			if(quest1 == 1 || quest1 == 2 || quest1 == 4)
			{
				PlayerInfo[i][pQuestNeed1] = 1;
				Update(i, pQuestNeed1x);
			}
			if(quest2 == 6 || quest2 == 7)
			{
				PlayerInfo[i][pQuestNeed2] = 1;
				Update(i, pQuestNeed2x);
			}
			if(quest1 == 3)
			{
				new randcar = random(11);
				if(randcar == 0) PlayerInfo[i][pQuestCar] = 400;
				if(randcar == 1) PlayerInfo[i][pQuestCar] = 401;
				if(randcar == 2) PlayerInfo[i][pQuestCar] = 404;
				if(randcar == 3) PlayerInfo[i][pQuestCar] = 408;
				if(randcar == 4) PlayerInfo[i][pQuestCar] = 439;
				if(randcar == 5) PlayerInfo[i][pQuestCar] = 462;
				if(randcar == 6) PlayerInfo[i][pQuestCar] = 471;
				if(randcar == 7) PlayerInfo[i][pQuestCar] = 481;
				if(randcar == 8) PlayerInfo[i][pQuestCar] = 496;
				if(randcar == 9) PlayerInfo[i][pQuestCar] = 509;
				if(randcar == 10) PlayerInfo[i][pQuestCar] = 522;
				new randkm = 10 + random(25);
				PlayerInfo[i][pQuestNeed1] = randkm;
				Update(i, pQuestCarx);
				Update(i, pQuestNeed1x);
			}
			if(quest1 == 5)
			{
				new randmats = 3000 + random(7000);
				PlayerInfo[i][pQuestNeed1] = randmats;
				Update(i, pQuestNeed1x);
			}
			if(quest1 == 6)
			{
				new randfish = 5 + random(15);
				PlayerInfo[i][pQuestNeed1] = randfish;
				Update(i, pQuestNeed1x);
			}
			if(quest2 == 1)
			{
				new randpizza = 5 + random(10);
				PlayerInfo[i][pQuestNeed2] = randpizza;
				Update(i, pQuestNeed2x);
			}
			if(quest2 == 2)
			{
				new randcops = 2 + random(5);
				PlayerInfo[i][pQuestNeed2] = randcops;
				Update(i, pQuestNeed2x);
			}
			if(quest2 == 3)
			{
				new rand = 10 + random(15) + random(20);
				PlayerInfo[i][pQuestNeed2] = rand;
				Update(i, pQuestNeed2x);
			}
			if(quest2 == 4)
			{
				new rand = 25 + random(25) + random(25);
				PlayerInfo[i][pQuestNeed2] = rand;
				Update(i, pQuestNeed2x);
			}
			if(quest2 == 5)
			{
				new rand = 50 + random(25) + random(25);
				PlayerInfo[i][pQuestNeed2] = rand;
				Update(i, pQuestNeed2x);
			}
			if(quest1 == 7)
			{
				new rand = 10 + random(10);
				PlayerInfo[i][pQuestNeed1] = rand;
				Update(i, pQuestNeed1x);
			}
			if(quest1 == 8)
			{
				new rand = 20 + random(15);
				PlayerInfo[i][pQuestNeed1] = rand;
				Update(i, pQuestNeed1x);
			}
			if(quest2 == 8)
			{
				new rand = 5 + random(5);
				PlayerInfo[i][pQuestNeed2] = rand;
				Update(i, pQuestNeed2x);
			}
			new questt1[128],questt2[128],questt11[256],questt22[256];
			if(PlayerInfo[i][pLanguage] == 1)
			{
				if(PlayerInfo[i][pQuest1] == 1)  format(questt1,sizeof(questt1),"Go to the baseball stadium located in Las Venturas");
				else if(PlayerInfo[i][pQuest1] == 2)  format(questt1,sizeof(questt1),"Climb mount Chiliad");
				else if(PlayerInfo[i][pQuest1] == 3)  format(questt1,sizeof(questt1),"Travel %d KM with vehicle %s",PlayerInfo[i][pQuestNeed1],aVehicleNames[PlayerInfo[i][pQuestCar] - 400]);
				else if(PlayerInfo[i][pQuest1] == 4)  format(questt1,sizeof(questt1),"Rob a business");
				else if(PlayerInfo[i][pQuest1] == 5)  format(questt1,sizeof(questt1),"Collect %d materials",PlayerInfo[i][pQuestNeed1]);
				else if(PlayerInfo[i][pQuest1] == 6)  format(questt1,sizeof(questt1),"Catch and sell %d fish",PlayerInfo[i][pQuestNeed1]);
				else if(PlayerInfo[i][pQuest1] == 7)  format(questt1,sizeof(questt1),"Collect %d from the mine",PlayerInfo[i][pQuestNeed1]);
				else if(PlayerInfo[i][pQuest1] == 8)  format(questt1,sizeof(questt1),"Collect %d strawberrys",PlayerInfo[i][pQuestNeed1]);
				if(PlayerInfo[i][pQuest2] == 1)  format(questt2,sizeof(questt2),"Deliver %d pizza",PlayerInfo[i][pQuestNeed2]);
				else if(PlayerInfo[i][pQuest2] == 2)
				{
					if(!IsACop(i))
					{
						format(questt2,sizeof(questt2),"Kill %d cops",PlayerInfo[i][pQuestNeed2]);
					}
					else
					{
						format(questt2,sizeof(questt2),"Arrest %d suspects",PlayerInfo[i][pQuestNeed2]);
					}
				}
				else if(PlayerInfo[i][pQuest2] == 3)  format(questt2,sizeof(questt2),"Kill %d players at paintball",PlayerInfo[i][pQuestNeed2]);
				else if(PlayerInfo[i][pQuest2] == 4)  format(questt2,sizeof(questt2),"Collect and unload %d KG of garbage",PlayerInfo[i][pQuestNeed2]);
				else if(PlayerInfo[i][pQuest2] == 5)  format(questt2,sizeof(questt2),"Sell %d KG of flour",PlayerInfo[i][pQuestNeed2]);
				else if(PlayerInfo[i][pQuest2] == 6)  format(questt2,sizeof(questt2),"Buy drugs and use them");
				else if(PlayerInfo[i][pQuest2] == 7)  format(questt2,sizeof(questt2),"Go in a bar and get drunk");
				else if(PlayerInfo[i][pQuest2] == 8)  format(questt2,sizeof(questt2),"Deliver %d packages at Air Transporter",PlayerInfo[i][pQuestNeed2]);

				if(PlayerInfo[i][pQuestProgress1]<PlayerInfo[i][pQuestNeed1])
					format(questt11,sizeof(questt11),"Quest: %s | Progress: %d/%d",questt1,PlayerInfo[i][pQuestProgress1],PlayerInfo[i][pQuestNeed1]);
				if(PlayerInfo[i][pQuestProgress2]<PlayerInfo[i][pQuestNeed2])
					format(questt22,sizeof(questt22),"Quest: %s | Progress: %d/%d",questt2,PlayerInfo[i][pQuestProgress2],PlayerInfo[i][pQuestNeed2]);
			}
			else
			{
				if(PlayerInfo[i][pQuest1] == 1)  format(questt1,sizeof(questt1),"Mergi pe stadionul de baseball din Las Venturas");
				else if(PlayerInfo[i][pQuest1] == 2)  format(questt1,sizeof(questt1),"Urca pe muntele Chiliad");
				else if(PlayerInfo[i][pQuest1] == 3)  format(questt1,sizeof(questt1),"Parcurge distanta de %d KM cu un vehicul de tipul %s",PlayerInfo[i][pQuestNeed1],aVehicleNames[PlayerInfo[i][pQuestCar] - 400]);
				else if(PlayerInfo[i][pQuest1] == 4)  format(questt1,sizeof(questt1),"Jefuieste o afacere");
				else if(PlayerInfo[i][pQuest1] == 5)  format(questt1,sizeof(questt1),"Colecteaza %d materiale",PlayerInfo[i][pQuestNeed1]);
				else if(PlayerInfo[i][pQuest1] == 6)  format(questt1,sizeof(questt1),"Vinde %d pesti",PlayerInfo[i][pQuestNeed1]);
				else if(PlayerInfo[i][pQuest1] == 7)  format(questt1,sizeof(questt1),"Colecteaza %d metale din mina",PlayerInfo[i][pQuestNeed1]);
				else if(PlayerInfo[i][pQuest1] == 8)  format(questt1,sizeof(questt1),"Colecteaza %d capsuni",PlayerInfo[i][pQuestNeed1]);
				if(PlayerInfo[i][pQuest2] == 1)  format(questt2,sizeof(questt2),"Livreaza %d pizza",PlayerInfo[i][pQuestNeed2]);
				else if(PlayerInfo[i][pQuest2] == 2)
				{
					if(!IsACop(i))
					{
						format(questt2,sizeof(questt2),"Omoara %d politisti",PlayerInfo[i][pQuestNeed2]);
					}
					else
					{
						format(questt2,sizeof(questt2),"Aresteaza %d suspecti",PlayerInfo[i][pQuestNeed2]);
					}
				}
				else if(PlayerInfo[i][pQuest2] == 3)  format(questt2,sizeof(questt2),"Omoara %d playeri la Paintball",PlayerInfo[i][pQuestNeed2]);
				else if(PlayerInfo[i][pQuest2] == 4)  format(questt2,sizeof(questt2),"Colecteaza si descarca %d KG de gunoi",PlayerInfo[i][pQuestNeed2]);
				else if(PlayerInfo[i][pQuest2] == 5)  format(questt2,sizeof(questt2),"Vinde %d KG de faina",PlayerInfo[i][pQuestNeed2]);
				else if(PlayerInfo[i][pQuest2] == 6)  format(questt2,sizeof(questt2),"Cumpara droguri si foloseste-le");
				else if(PlayerInfo[i][pQuest2] == 7)  format(questt2,sizeof(questt2),"Du-te intr-un bar si imbata-te");
				else if(PlayerInfo[i][pQuest2] == 8)  format(questt2,sizeof(questt2),"Livreaza %d pachete la Air Transporter",PlayerInfo[i][pQuestNeed2]);

				if(PlayerInfo[i][pQuestProgress1]<PlayerInfo[i][pQuestNeed1])
					format(questt11,sizeof(questt11),"Misiune: %s | Progres: %d/%d",questt1,PlayerInfo[i][pQuestProgress1],PlayerInfo[i][pQuestNeed1]);
				if(PlayerInfo[i][pQuestProgress2]<PlayerInfo[i][pQuestNeed2])
					format(questt22,sizeof(questt22),"Misiune: %s | Progres: %d/%d",questt2,PlayerInfo[i][pQuestProgress2],PlayerInfo[i][pQuestNeed2]);
			}

			if(PlayerInfo[i][pQuestProgress1]<PlayerInfo[i][pQuestNeed1]) SendClientMessage(i, COLOR_YELLOW, questt11);
			if(PlayerInfo[i][pQuestProgress2]<PlayerInfo[i][pQuestNeed2]) SendClientMessage(i, COLOR_YELLOW, questt22);
		}
		else
		{
			new questt1[128],questt2[128],questt11[256],questt22[256];
			if(PlayerInfo[i][pLanguage] == 1)
			{
				if(PlayerInfo[i][pQuest1] == 1)  format(questt1,sizeof(questt1),"Go to the baseball stadium located in Las Venturas");
				else if(PlayerInfo[i][pQuest1] == 2)  format(questt1,sizeof(questt1),"Climb mount Chiliad");
				else if(PlayerInfo[i][pQuest1] == 3)  format(questt1,sizeof(questt1),"Travel %d KM with vehicle %s",PlayerInfo[i][pQuestNeed1],aVehicleNames[PlayerInfo[i][pQuestCar] - 400]);
				else if(PlayerInfo[i][pQuest1] == 4)  format(questt1,sizeof(questt1),"Rob a business");
				else if(PlayerInfo[i][pQuest1] == 5)  format(questt1,sizeof(questt1),"Collect %d materials",PlayerInfo[i][pQuestNeed1]);
				else if(PlayerInfo[i][pQuest1] == 6)  format(questt1,sizeof(questt1),"Catch and sell %d fish",PlayerInfo[i][pQuestNeed1]);
				else if(PlayerInfo[i][pQuest1] == 7)  format(questt1,sizeof(questt1),"Collect %d from the mine",PlayerInfo[i][pQuestNeed1]);
				else if(PlayerInfo[i][pQuest1] == 8)  format(questt1,sizeof(questt1),"Collect %d strawberrys",PlayerInfo[i][pQuestNeed1]);
				if(PlayerInfo[i][pQuest2] == 1)  format(questt2,sizeof(questt2),"Deliver %d pizza",PlayerInfo[i][pQuestNeed2]);
				else if(PlayerInfo[i][pQuest2] == 2)
				{
					if(!IsACop(i))
					{
						format(questt2,sizeof(questt2),"Kill %d cops",PlayerInfo[i][pQuestNeed2]);
					}
					else
					{
						format(questt2,sizeof(questt2),"Arrest %d suspects",PlayerInfo[i][pQuestNeed2]);
					}
				}
				else if(PlayerInfo[i][pQuest2] == 3)  format(questt2,sizeof(questt2),"Kill %d players at paintball",PlayerInfo[i][pQuestNeed2]);
				else if(PlayerInfo[i][pQuest2] == 4)  format(questt2,sizeof(questt2),"Collect and unload %d KG of garbage",PlayerInfo[i][pQuestNeed2]);
				else if(PlayerInfo[i][pQuest2] == 5)  format(questt2,sizeof(questt2),"Sell %d KG of flour",PlayerInfo[i][pQuestNeed2]);
				else if(PlayerInfo[i][pQuest2] == 6)  format(questt2,sizeof(questt2),"Buy drugs and use them");
				else if(PlayerInfo[i][pQuest2] == 7)  format(questt2,sizeof(questt2),"Go in a bar and get drunk");
				else if(PlayerInfo[i][pQuest2] == 8)  format(questt2,sizeof(questt2),"Deliver %d packages at Air Transporter",PlayerInfo[i][pQuestNeed2]);
				if(PlayerInfo[i][pQuestProgress1]<PlayerInfo[i][pQuestNeed1])
					format(questt11,sizeof(questt11),"Quest: %s | Progress: %d/%d",questt1,PlayerInfo[i][pQuestProgress1],PlayerInfo[i][pQuestNeed1]);
				if(PlayerInfo[i][pQuestProgress2]<PlayerInfo[i][pQuestNeed2])
					format(questt22,sizeof(questt22),"Quest: %s | Progress: %d/%d",questt2,PlayerInfo[i][pQuestProgress2],PlayerInfo[i][pQuestNeed2]);
			}
			else
			{
				if(PlayerInfo[i][pQuest1] == 1)  format(questt1,sizeof(questt1),"Mergi pe stadionul de baseball din Las Venturas");
				else if(PlayerInfo[i][pQuest1] == 2)  format(questt1,sizeof(questt1),"Urca pe muntele Chiliad");
				else if(PlayerInfo[i][pQuest1] == 3)  format(questt1,sizeof(questt1),"Parcurge distanta de %d KM cu un vehicul de tipul %s",PlayerInfo[i][pQuestNeed1],aVehicleNames[PlayerInfo[i][pQuestCar] - 400]);
				else if(PlayerInfo[i][pQuest1] == 4)  format(questt1,sizeof(questt1),"Jefuieste o afacere");
				else if(PlayerInfo[i][pQuest1] == 5)  format(questt1,sizeof(questt1),"Colecteaza %d materiale",PlayerInfo[i][pQuestNeed1]);
				else if(PlayerInfo[i][pQuest1] == 6)  format(questt1,sizeof(questt1),"Vinde %d pesti",PlayerInfo[i][pQuestNeed1]);
				else if(PlayerInfo[i][pQuest1] == 7)  format(questt1,sizeof(questt1),"Colecteaza %d metale din mina",PlayerInfo[i][pQuestNeed1]);
				else if(PlayerInfo[i][pQuest1] == 8)  format(questt1,sizeof(questt1),"Colecteaza %d capsuni",PlayerInfo[i][pQuestNeed1]);
				if(PlayerInfo[i][pQuest2] == 1)  format(questt2,sizeof(questt2),"Livreaza %d pizza",PlayerInfo[i][pQuestNeed2]);
				else if(PlayerInfo[i][pQuest2] == 2)
				{
					if(!IsACop(i))
					{
						format(questt2,sizeof(questt2),"Omoara %d politisti",PlayerInfo[i][pQuestNeed2]);
					}
					else
					{
						format(questt2,sizeof(questt2),"Aresteaza %d suspecti",PlayerInfo[i][pQuestNeed2]);
					}
				}
				else if(PlayerInfo[i][pQuest2] == 3)  format(questt2,sizeof(questt2),"Omoara %d playeri la Paintball",PlayerInfo[i][pQuestNeed2]);
				else if(PlayerInfo[i][pQuest2] == 4)  format(questt2,sizeof(questt2),"Colecteaza si descarca %d KG de gunoi",PlayerInfo[i][pQuestNeed2]);
				else if(PlayerInfo[i][pQuest2] == 5)  format(questt2,sizeof(questt2),"Vinde %d KG de faina",PlayerInfo[i][pQuestNeed2]);
				else if(PlayerInfo[i][pQuest2] == 6)  format(questt2,sizeof(questt2),"Cumpara droguri si foloseste-le");
				else if(PlayerInfo[i][pQuest2] == 7)  format(questt2,sizeof(questt2),"Du-te intr-un bar si imbata-te");
				else if(PlayerInfo[i][pQuest2] == 8)  format(questt2,sizeof(questt2),"Livreaza %d pachete la Air Transporter",PlayerInfo[i][pQuestNeed2]);

				if(PlayerInfo[i][pQuestProgress1]<PlayerInfo[i][pQuestNeed1])
					format(questt11,sizeof(questt11),"Misiune: %s | Progres: %d/%d",questt1,PlayerInfo[i][pQuestProgress1],PlayerInfo[i][pQuestNeed1]);
				if(PlayerInfo[i][pQuestProgress2]<PlayerInfo[i][pQuestNeed2])
					format(questt22,sizeof(questt22),"Misiune: %s | Progres: %d/%d",questt2,PlayerInfo[i][pQuestProgress2],PlayerInfo[i][pQuestNeed2]);
			}

			if(PlayerInfo[i][pQuestProgress1]<PlayerInfo[i][pQuestNeed1]) SendClientMessage(i, COLOR_YELLOW, questt11);
			if(PlayerInfo[i][pQuestProgress2]<PlayerInfo[i][pQuestNeed2]) SendClientMessage(i, COLOR_YELLOW, questt22);
		}
	}	
	return 1;
}

CMD:cmotd(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pClan] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in a clan.");
	new string[128],mesaj[128],sendername[30],str[256],string2[128];
	if(sscanf(params, "s[128]",mesaj))
	{
		format(string, sizeof(string), "Clan MOTD: %s", ClanInfo[PlayerInfo[playerid][pClan]][cClanMOTD]);
		SendClientMessage(playerid, COLOR_CLAN, string);
		return 1;
	}
	if(PlayerInfo[playerid][pCRank] >= 6)
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(ClanInfo[PlayerInfo[playerid][pClan]][cClanMOTD], 128, mesaj);
		format(string, sizeof(string), "{%s}The clan MOTD was modified by %s:", ClanInfo[PlayerInfo[playerid][pClan]][cClanColor], sendername);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "{%s}%s", ClanInfo[PlayerInfo[playerid][pClan]][cClanColor], ClanInfo[PlayerInfo[playerid][pClan]][cClanMOTD]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		mysql_real_escape_string(mesaj, string2);
		mysql_format(SQL, str, sizeof(str), "UPDATE `clans` SET `clanMOTD` = '%s' WHERE `clanName` = '%s'", string2, ClanInfo[PlayerInfo[playerid][pClan]][cClanName]);
		mysql_tquery(SQL, str, "", "");
	}
	else SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Doar playerii cu rank 6 sau 7 pot folosi /cmotd.", "(Error){FFFFFF} Only players that have rank 6 or rank 7 can use /cmotd.");
	return 1;
}
CMD:managearea(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new x_nr[10];
    if(sscanf(params, "s[10]",x_nr)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /managearea [close/open]");
    if(strcmp(x_nr,"open",true) == 0)
 	{
		Update3DTextLabelText(areap, 0xFFFFFFFF, "{FF0000}bluffs RPG Event Area{FFFFFF}\nEvent Area is open\nPress enter to enter");
		SendClientMessage(playerid, COLOR_WHITE, "Event Area is open!");
		areape = 1;
	}
    if(strcmp(x_nr,"close",true) == 0)
 	{
		Update3DTextLabelText(areap, 0xFFFFFFFF, "Event Area is closed\nPlease wait...");
		SendClientMessage(playerid, COLOR_WHITE, "Event Area is closed!");
		areape = 0;
 	}
 	Adminlog(PlayerInfo[playerid][pSQLID], "used command /managearea", "eventarena");
	return 1;
}
CMD:top(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new p=0,t=0,s=0,r=0,x=0, string[184];
    for(new i = 1; i < sizeof(Turfs); i++)
	{
		if(TurfInfo[i][zOwned] == 4)
		{
		    t++;
		}
		if(TurfInfo[i][zOwned] == 5)
		{
		    p++;
		}
		if(TurfInfo[i][zOwned] == 6)
		{
		    s++;
		}
		if(TurfInfo[i][zOwned] == 10)
		{
		    r++;
		}
		if(TurfInfo[i][zOwned] == 15)
		{
		    x++;
		}
	}
	SendClientMessage(playerid,COLOR_WHITE,"----- TOP GANGS -----");
	format(string,sizeof(string),"Los Aztecas - %d turfs",t);
	SendClientMessage(playerid,COLOR_WHITE,string);
	format(string,sizeof(string),"Grove Street - %d turfs",p);
	SendClientMessage(playerid,COLOR_WHITE,string);
	format(string,sizeof(string),"Los Vagos - %d turfs",s);
	SendClientMessage(playerid,COLOR_WHITE,string);
	format(string,sizeof(string),"Ballas - %d turfs",r);
	SendClientMessage(playerid,COLOR_WHITE,string);
	format(string,sizeof(string),"The Rifa - %d turfs",x);
	SendClientMessage(playerid,COLOR_WHITE,string);
	return 1;
}
CMD:oplace(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to login first.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid,COLOR_LIGHTGREEN3, AdminOnly);
	new obj, money;
	if(sscanf(params, "ii", obj,money)) 
	{
		SendClientMessage(playerid, COLOR_GREY,"Syntax: {FFFFFF}/oplace <ObjectID> <Prize>");
		SendClientMessage(playerid, COLOR_WHITE,"[OBJECTS] Cadou: 19054 - 19058 | Glob craciun: 19059 - 19063 | Oua paste: 19341 - 19345");
		return 1;
	}
	if(obj < 1 || obj > 20000) return SCM(playerid,COLOR_ERROR, "(Error){FFFFFF} Invalid object id! (1-20000)");
	if(money < 10000 || money > 10000000) return SCM(playerid,COLOR_ERROR, "(Error){FFFFFF} Invalid money! (10.000$-10.000.000$)");
	new id = CountObjects(), Float: Pos[3];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	ObjectIDD[id] = CreatePickup(obj, 23, Pos[0]+2, Pos[1], Pos[2]);
	ObjectMoney[id] = money;
	new string[128], sendername[30];
	GetPlayerName(playerid, sendername, sizeof(sendername));
	format(string,sizeof(string),"Admin %s[admin:%d] started an event. Object: %d, prize: $%s (Total Objects: %d).",sendername,PlayerInfo[playerid][pSQLID],obj,FormatNumber(money),id+1);
	ABroadCast(COLOR_RED2, string,1);
	Adminlog(PlayerInfo[playerid][pSQLID], string, "oplace");
	return 1;
}

forward CountObjects();
public CountObjects()
{
	new x;
	for(new i = 0; i < MAX_OBJECTS; i++)
	{
		if(ObjectIDD[i] != -1) x++;
	}
	return x;	
}
forward ResetObjects();
public ResetObjects()
{
	new x;
	for(new i = 0; i< MAX_OBJECTS; i++)
	{
		ObjectIDD[i] = -1;
	}
	return x;	
}
CMD:clearoplace(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to login first.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid,COLOR_LIGHTGREEN3, AdminOnly);
	new string[128], sendername[30];
	GetPlayerName(playerid, sendername, sizeof(sendername));
	format(string,sizeof(string),"Admin %s[admin:%d] deleted all objects for events. Number of object deleted: %d.",sendername,PlayerInfo[playerid][pSQLID],CountObjects());
	ABroadCast(COLOR_RED, string,1);
	Adminlog(PlayerInfo[playerid][pSQLID], string, "clearoplace");
	for(new i = 0; i< MAX_OBJECTS; i++)
	{
		if(ObjectIDD[i] != -1)
		{
			DestroyPickup(ObjectIDD[i]);
			ObjectIDD[i] = -1;
			ObjectMoney[i] = 0;
		}	
	}

	return 1;		
}
CMD:checkv(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new id,string[256];
	if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /checkv [name/playerid]");
	if(IsPlayerConnected(id))
	{
		for(new v; v < MAX_PERSONAL_VEHICLES; v++)
		{
			if(PlayerInfo[id][pCarID][v] != 0)
			{
				format(string,sizeof(string),"[ID:%d] [SQLID:%d] %s | age: %d | km: %.0f | colors: %d, %d",PlayerInfo[id][pCarID][v],PlayerInfo[id][pCar][v],aVehicleNames[PlayerInfo[id][pCarModel][v] - 400],GetDaysFromTimestamp(PlayerInfo[id][pCarBuyTime][v]),PlayerInfo[id][pCarKM][v],PlayerInfo[id][pCarColor1][v],PlayerInfo[id][pCarColor2][v]);
				SendClientMessage(playerid, COLOR_LIGHTGREEN3, string);
			}
			else if(PlayerInfo[id][pCar][v] != -1) {
				format(string,sizeof(string),"[SQLID: %d] %s | age: %d | km: %.0f | colors: %d, %d",PlayerInfo[id][pCar][v],aVehicleNames[PlayerInfo[id][pCarModel][v] - 400],GetDaysFromTimestamp(PlayerInfo[id][pCarBuyTime][v]),PlayerInfo[id][pCarKM][v],PlayerInfo[id][pCarColor1][v],PlayerInfo[id][pCarColor2][v]);
				SendClientMessage(playerid, COLOR_LIGHTGREEN3, string);
			}
		}
	}
	return 1;
}
CMD:removetunning(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your vehicle.");
	new count,carid = GetPlayerVehicleID(playerid),Float:PosX,Float:PosY,Float:PosZ;
	for(new v; v < MAX_PERSONAL_VEHICLES; v++)
	{
		if(PlayerInfo[playerid][pCarID][v] == carid)
		{
			PlayerInfo[playerid][pCarPaintJ][v] = 6;
			for(new s; s < 17; s++)
			{
				CarMod[playerid][v][s] = 0;
			}
			cUpdate(playerid, v, cModsx);
			cUpdate(playerid, v, cPaintJx);
			GetVehiclePos(PlayerInfo[playerid][pCarID][v], PosX, PosY, PosZ);
			SetVehicleToRespawnEx2(PlayerInfo[playerid][pCarID][v]);
			SetVehiclePos(PlayerInfo[playerid][pCarID][v], PosX, PosY, PosZ);
			count++;
		}
	}
	if(count == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your vehicle.");
	return 1;
}
CMD:givekey(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    new id,giveplayer[30],sendername[30],string[128],idcar=-1;
	if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /givekey [name/playerid]");
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
	{
		if(PlayerInfo[playerid][pCarID][vv] == GetPlayerVehicleID(playerid))
		{
			idcar = vv;
		}
	}
	if(idcar == -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be inside your car to change its lock.");
	if(IsPlayerConnected(id))
	{
		if(id != INVALID_PLAYER_ID)
		{
			if(ProxDetectorS(5.0, playerid, id))
			{
				HireCar[id] = GetPlayerVehicleID(playerid);
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "* %s takes out a set of keys, and tosses them to %s.", sendername ,giveplayer);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetVehicleParamsForPlayer(HireCar[id],id,0,0);
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	return 1;
}
CMD:changelock(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new idcar=-1;
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
	{
		if(PlayerInfo[playerid][pCarID][vv] == GetPlayerVehicleID(playerid))
		{
			idcar = vv;
		}
	}
	if(idcar == -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be inside your car to change its lock.");
	foreach(new i : Player)
	{
		if(PlayerInfo[playerid][pCarID][idcar] == HireCar[i])
		{
			SetVehicleParamsForPlayer(HireCar[i],i,0,1);
			HireCar[i] = -1;
			SendClientMessage(i, COLOR_WHITE, "The lock of the car you had the keys for have been changed.");
		}
	}
	SendClientMessage(playerid, COLOR_WHITE, "The lock of the car you had the keys for have been changed.");
	SendClientMessage(playerid, COLOR_DARKPINK, "The locks of the car where changed. No one has keys to your car now.");
	return 1;
}
CMD:buycar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You need to be on foot.");
	if(IsPlayerInRangeOfPoint(playerid, 7.0, 326.4294,-1517.0165,36.0391))
	{
		if(PlayerInfo[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need level 3 to buy a vehicle.");
		if(floatround(PlayerInfo[playerid][pConnectTime], floatround_round) < 2) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need 2 played hours to use this command.");
		BuyCar[playerid] = -1;
		ShowPlayerDialog(playerid,DIALOG_CARBUY, DIALOG_STYLE_LIST, "Buy a car", "Cheap cars\nRegular cars\nExpensive cars\nPremium cars", "Select", "Close");
	}
	else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You are not at the DealerShip.");
  	return 1;
}
CMD:getprice(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] == 0 && PlayerInfo[playerid][pHelper] == 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new prices,stocks,speeds,string[256],veh[32],vehmodel,ppre;
	if(sscanf(params, "s[32]",veh)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /getprice [vehicle name]");
	format(string, sizeof(string), "SELECT * FROM `stock` WHERE `Car`='%s'",veh);
	new Cache: result = mysql_query(SQL, string);
	if(cache_get_row_count() > 0)
	{
		for(new i, j = cache_get_row_count(); j != i; ++i)
		{
			stocks = cache_get_field_content_int(i, "Stock");
			prices = cache_get_field_content_int(i, "Price");
			speeds = cache_get_field_content_int(i, "speed");
			vehmodel = cache_get_field_content_int(i, "vid");
		}
		if(vehmodel == 469) 
		{
			ppre = 220;
			format(string, sizeof(string), "(Info){FFFFFF} Vehicle %s's info: %d stock in dealership, price %d premium points and %d km/h maximum speed.",veh,FormatNumber(stocks),ppre,speeds);
		}
		else if(vehmodel == 503 || vehmodel == 502 || vehmodel == 539 || vehmodel == 494)
		{ 
			ppre = 250;
			format(string, sizeof(string), "(Info){FFFFFF} Vehicle %s's info: %d stock in dealership, price %d premium points and %d km/h maximum speed.",veh,FormatNumber(stocks),ppre,speeds);
		}
		else if(vehmodel == 487)
		{ 
			ppre = 300;
			format(string, sizeof(string), "(Info){FFFFFF} Vehicle %s's info: %d stock in dealership, price %d premium points and %d km/h maximum speed.",veh,FormatNumber(stocks),ppre,speeds);
		}
		else format(string, sizeof(string), "(Info){FFFFFF} Vehicle %s's info: %d stock in dealership, price %s$ and %d km/h maximum speed.",veh,FormatNumber(stocks),FormatNumber(prices),speeds);
		SendClientMessage(playerid, COLOR_JOB, string);
	}
	else
	{
		SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This model doesn't exist in dealership.");
		cache_delete(result);
		return 1;
	}
	cache_delete(result);
 	return 1;
}
CMD:dsprice(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new model,price,stocks,string[300],id,name[30];
	if(sscanf(params, "ddd",model,price,stocks)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /dsprice [model] [price] [stock]");
	format(string, sizeof(string), "SELECT * FROM `stock` WHERE `vid`='%d'",model);
	new Cache: result = mysql_query(SQL, string);
	if(cache_get_row_count() > 0)
	{
		for(new i, j = cache_get_row_count(); j != i; ++i)
		{
			id = cache_get_field_content_int(i, "ID") + 1;
		}
		mysql_format(SQL, string, sizeof(string), "UPDATE `stock` SET `Price`='%d',`Stock`='%d' WHERE `vid`='%d'",price,stocks,model);
		mysql_tquery(SQL, string, "", "");
		Stock[id][vPrice] = price;
		Stock[id][vStock] = stocks;
		GetPlayerName(playerid, name, sizeof(name));
		format(string, sizeof(string), "/dsprice: Admin %s[admin:%d] changed data for car %d (%s) | Price: $%s | Stock: %d",name,PlayerInfo[playerid][pSQLID],model,aVehicleNames[model - 400],FormatNumber(price),stocks);
		ABroadCast(COLOR_ADMCOMMANDS, string, 5);
		Adminlog(PlayerInfo[playerid][pSQLID], string, "dsprice");
	}
	else
	{
		SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This model doesn't exist in dealership.");
		cache_delete(result);
		return 1;
	}
	cache_delete(result);
 	return 1;
}

CMD:v(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(BlockVehUse[playerid] != 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Ai prea multe masini, foloseste /sellcar si vinde una.", "(Error){FFFFFF} You have to many vehicles, use /sellcar and sell one.");
	new masina1[256],masina[1000],count=0,nrs=0;
	for(new v; v < PlayerInfo[playerid][pCarSlots]; v++)
	{
		if(PlayerInfo[playerid][pCar][v] != -1) count++;
	}
	if(count == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own any cars.");
	format(masina1, sizeof(masina1), "Vehicle\tSQLID\tStatus\tOthers\n");
	strcat(masina, masina1);
	for(new id; id < PlayerInfo[playerid][pCarSlots]; id++)
	{
		if(PlayerInfo[playerid][pCar][id] != -1)
		{
			new vip[64];
			if(PlayerInfo[playerid][pCarVIP][id] > 0) format(vip, sizeof(vip), "{FFFF00}[VIP]");
			else format(vip, sizeof(vip), "");
			if(PlayerInfo[playerid][pCarStage][id] > 0) format(vip, sizeof(vip), "%s {31a010}[S:%d/3]", vip, PlayerInfo[playerid][pCarStage][id]);

			if(PlayerInfo[playerid][pCarNeon][id] == 1) format(vip, sizeof(vip), "%s {E02121}[N]", vip);
			else if(PlayerInfo[playerid][pCarNeon][id] == 2) format(vip, sizeof(vip), "%s {28E128}[N]", vip);
			else if(PlayerInfo[playerid][pCarNeon][id] == 3) format(vip, sizeof(vip), "%s {DCE617}[N]", vip);
			else if(PlayerInfo[playerid][pCarNeon][id] == 4) format(vip, sizeof(vip), "%s {E617CA}[N]", vip);
			else if(PlayerInfo[playerid][pCarNeon][id] == 5) format(vip, sizeof(vip), "%s {1E5EE0}[N]", vip);

			if(PlayerInfo[playerid][pCarID][id] != 0)
			{
				format(masina1, sizeof(masina1), "%s\t%d\t{0C370A}(spawned)\t%s\n",aVehicleNames[PlayerInfo[playerid][pCarModel][id] - 400],PlayerInfo[playerid][pCar][id],vip);
				strcat(masina, masina1);
				nrs++;
			}
			else
			{
				format(masina1, sizeof(masina1), "%s\t%d\t{FB0404}(despawned)\t%s\n",aVehicleNames[PlayerInfo[playerid][pCarModel][id] - 400],PlayerInfo[playerid][pCar][id],vip);
				strcat(masina, masina1);
			}
		}
	}
	if(nrs!=count)
	{
		format(masina1, sizeof(masina1), "{FFFFFF}Spawn all vehicles (-15.000$)\n");
		strcat(masina, masina1);
	}
	ShowPlayerDialog(playerid,DIALOG_VEHSPAWN,DIALOG_STYLE_TABLIST_HEADERS,"Manage your vehicles",masina,"Select","Exit");
	return 1;
}
CMD:sellhidden(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	new id,price,sendername[30],giveplayer[30],string[500],other[128];
	if(sscanf(params, "uiS(NULL)[128]", id,price,other)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sellhidden [name/playerid] [price]");
	if(PlayerInfo[playerid][pPremiumPoints] <= 19)
	{
 		ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
   		return 1;
	}
	if(strcmp(other, "NULL", true)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu folosi spatii in pret.", "(Error){FFFFFF} Don't use spaces in the price.");
	if(playerid == id) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu iti poti vinde hidden singur.", "(Error){FFFFFF} You can't sell a hidden color to yourself.");
	if(SellTradeTimer[playerid] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already have sent an offer. The offer will expire in 2 minutes.");
	if(price < 100000 || price > 2000000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Price must be between 100.000$ and 2.000.000$.");
	if(GetPlayerCash(id) < price) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player don't have enough money.");
	if(floatround(PlayerInfo[playerid][pConnectTime], floatround_round) < 2) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need 2 played hours to use this command.");
	GetPlayerName(playerid, sendername, sizeof(sendername));
	GetPlayerName(id, giveplayer, sizeof(giveplayer));
	if(IsPlayerConnected(id))
	{
	    if(IsPlayerInRangeOfPlayer(playerid, id, 5.0))
	    {
	    	SellHiddenID[playerid] = id;
	    	SellHiddenPrice[playerid] = price;
	    	if(PlayerInfo[playerid][pLanguage] == 2)
	    	{
				format(string, sizeof(string), "Esti sigur ca vrei sa platesti 20 de puncte premium pentru a-i vinde un hidden lui %s?\nVei primi suma de $%s, iar %s va primi o culoare hidden.", giveplayer, FormatNumber(price), giveplayer);
				ShowPlayerDialog(playerid, DIALOG_SELLHIDDEN, DIALOG_STYLE_MSGBOX, "Esti sigur?", string, "Da", "Nu");
			}
			else
			{
				format(string, sizeof(string), "Are you sure you want to pay 20 premium points to sell a hidden color to %s?\nYou will receive $%s and %s will receive a hidden color.", giveplayer, FormatNumber(price), giveplayer);
				ShowPlayerDialog(playerid, DIALOG_SELLHIDDEN, DIALOG_STYLE_MSGBOX, "Are you sure?", string, "Yes", "No");
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
	}
	return 1;
}

CMD:tradecar(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	new id,price,other[128],idcar1=-1,idcar2=-1;
	if(sscanf(params, "uiS(NULL)[128]", id,price,other)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /tradecar [name/playerid] [difference] - You will pay the difference.");
    if(strcmp(other, "NULL", true)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu folosi spatii in pret.", "(Error){FFFFFF} Don't use spaces in the price.");
	if(id == playerid) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu iti poti schimba masina singur.", "(Error){FFFFFF} You can't trade your car to yourself.");
	if(SellTradeTimer[playerid] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already have sent an offer. The offer will expire in 2 minutes.");
	new sendername[30],giveplayer[30];
	if(price < 100000 || price > 200000000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Price not lower than $100.000 and not higher than $200,000,000.");
    new vid = GetPlayerVehicleID(playerid),vid2 = GetPlayerVehicleID(id);
	if(!IsPlayerInAnyVehicle(playerid)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu esti in masina personala.", "(Error){FFFFFF} You need to be in your personal car.");
	if(!IsPlayerInAnyVehicle(id)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Acel jucator nu este in masina personala.", "(Error){FFFFFF} That player needs to be in his personal car.");
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
	{
		if(vid == PlayerInfo[playerid][pCarID][vv])
		{
			idcar1 = vv;
		}
	}
	if(idcar1 == -1) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu esti in masina personala.", "(Error){FFFFFF} You need to be in your personal car.");
    for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
	{
		if(vid2 == PlayerInfo[id][pCarID][vv])
		{
			idcar2 = vv;
		}
	}
	if(idcar2 == -1) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Acel jucator nu este in masina personala.", "(Error){FFFFFF} That player needs to be in his personal car.");
	if(PlayerInfo[playerid][pCarBlock][idcar1] > 0)
	{
		format(other, sizeof(other), "(Error){FFFFFF} Your vehicle is blocked for %d hours.", PlayerInfo[playerid][pCarBlock][idcar1]);
		SendClientMessage(playerid, COLOR_ERROR, other);
		return 1;
	}
	if(PlayerInfo[id][pCarBlock][idcar2] > 0)
	{
		format(other, sizeof(other), "(Error){FFFFFF} That player have his vehicle blocked for %d hours.", PlayerInfo[id][pCarBlock][idcar2]);
		SendClientMessage(playerid, COLOR_ERROR, other);
		return 1;
	}
	if(GetPlayerCash(playerid) < price) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
	if(PlayerInfo[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have level 3.");
	if(PlayerInfo[id][pLevel] < 3) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} That player doesn't have level 3.");
    GetPlayerName(playerid, sendername, sizeof(sendername));
	GetPlayerName(id, giveplayer, sizeof(giveplayer));
	if(IsPlayerConnected(id))
	{
	    if(IsPlayerInRangeOfPlayer(playerid, id, 5.0))
	    {
			new string[500],hidden[128],vip[128];
			SelectedCar[playerid] = idcar1;
			SelectedCar[id] = idcar2;
			SellTradeID[playerid] = id;
			SellTradePrice[playerid] = price;
			if(PlayerInfo[id][pCarVIP][idcar2] > 0) format(vip, sizeof(vip), "{FFFF00}vip{FFFFFF}");
			else format(vip, sizeof(vip), "no vip");
			if(PlayerInfo[id][pCarColor1][idcar2] >= 128 || PlayerInfo[id][pCarColor2][idcar2] >= 128)
			{
				format(hidden, sizeof(hidden),"hidden colors: %d, %d",PlayerInfo[id][pCarColor1][idcar2],PlayerInfo[id][pCarColor2][idcar2]);
			}
			else
			{
				format(hidden, sizeof(hidden),"no hidden colors");
			}
			if(PlayerInfo[playerid][pLanguage] == 2)
			{
				format(string,sizeof(string),"Vrei sa oferi masina ta (%s) + $%s pentru masina lui %s (%s[age: %d, distance: %.0fKM, %s %s])?",aVehicleNames[PlayerInfo[playerid][pCarModel][idcar1] - 400],FormatNumber(price),giveplayer,aVehicleNames[PlayerInfo[id][pCarModel][idcar2] - 400],GetDaysFromTimestamp(PlayerInfo[id][pCarBuyTime][idcar2]),PlayerInfo[id][pCarKM][idcar2],hidden,vip);
				format(string,sizeof(string),"%s\n\nAtentie! Este INTERZIS sa vindeti masina cuiva pentru a va pune hidden pe masina.\nEste interzis sa vindeti bunuri din joc (masini, bani, case) pentru bani reali sau bunuri ce nu tin de joc (itemuri metin, bani pe alt server, conturi steam).",string);
				ShowPlayerDialog(playerid, DIALOG_TRADECAR, DIALOG_STYLE_MSGBOX, "Schimb de masini", string, "Da", "Nu");
			}
			else
			{
				format(string,sizeof(string),"You want to trade your car (%s) + $%s for %s's car (%s[age: %d, distance: %.0fKM, %s %s])?",aVehicleNames[PlayerInfo[playerid][pCarModel][idcar1] - 400],FormatNumber(price),giveplayer,aVehicleNames[PlayerInfo[id][pCarModel][idcar2] - 400],GetDaysFromTimestamp(PlayerInfo[id][pCarBuyTime][idcar2]),PlayerInfo[id][pCarKM][idcar2],hidden,vip);
				format(string,sizeof(string),"%s\n\nWarning! It's FORBIDDEN to sell your car to someone to put a hidden color on your car.\nIt's forbidden to sell in game goods (cars, money, houses) for real money or goods that doesn't belong to game (metin items, money on other server, steam accounts).",string);
				ShowPlayerDialog(playerid, DIALOG_TRADECAR, DIALOG_STYLE_MSGBOX, "Trade car", string, "Yes", "No");
			}
   		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	return 1;
}
CMD:tradehouse(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	SendClientMessage(playerid, COLOR_LIGHTGREEN3, "/tradehouseforcar - trade house for car");
	SendClientMessage(playerid, COLOR_LIGHTGREEN3, "/tradehouseforhouse - trade house for house");
	return 1;
}
CMD:tradehouseforcar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	if(PlayerInfo[playerid][pPhousekey] == 999) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own a house.");
	new id, price, other[128], string[300], giveplayer[30], idcar=-1, hidden[128],vip[128];
	if(sscanf(params, "uiS(NULL)[128]", id,price,other)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /tradehouseforcar [name/playerid] [difference] - You will pay the difference.");
	if(strcmp(other, "NULL", true)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu folosi spatii in pret.", "(Error){FFFFFF} Don't use spaces in the price.");
	if(id == playerid) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu iti poti schimba casa singur.", "(Error){FFFFFF} You can't trade your house to yourself.");
	if(SellTradeTimer[playerid] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already have sent an offer. The offer will expire in 2 minutes.");
	if(price < 100000 || price > 200000000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Price not lower than $100.000 and not higher than $200,000,000.");
	if(GetPlayerCash(playerid) < price) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
	if(!IsPlayerInAnyVehicle(id)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Acel jucator nu este in masina personala.", "(Error){FFFFFF} That player needs to be in his personal car.");
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
	{
		if(GetPlayerVehicleID(id) == PlayerInfo[id][pCarID][vv])
		{
			idcar = vv;
		}
	}
	if(idcar == -1) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Acel jucator nu este in masina personala.", "(Error){FFFFFF} That player needs to be in his personal car.");
	if(PlayerInfo[id][pCarBlock][idcar] > 0)
	{
		format(other, sizeof(other), "(Error){FFFFFF} That player have his vehicle blocked for %d hours.", PlayerInfo[id][pCarBlock][idcar]);
		SendClientMessage(playerid, COLOR_ERROR, other);
		return 1;
	}
	GetPlayerName(id, giveplayer, sizeof(giveplayer));
	if(IsPlayerConnected(id))
	{
	    if(IsPlayerInRangeOfPlayer(playerid, id, 5.0))
	   	{
	   		SelectedCar[playerid] = idcar;
			SellTradeID[playerid] = id;
			SellTradePrice[playerid] = price;
			if(PlayerInfo[id][pCarVIP][idcar] > 0) format(vip, sizeof(vip), "{FFFF00}vip{FFFFFF}");
			else format(vip, sizeof(vip), "no vip");
			if(PlayerInfo[id][pCarColor1][idcar] >= 128 || PlayerInfo[id][pCarColor2][idcar] >= 128)
			{
				format(hidden, sizeof(hidden),"hidden colors: %d, %d",PlayerInfo[id][pCarColor1][idcar],PlayerInfo[id][pCarColor2][idcar]);
			}
			else
			{
				format(hidden, sizeof(hidden),"no hidden colors");
			}
			if(PlayerInfo[playerid][pLanguage] == 2)
			{
				format(string,sizeof(string),"Vrei sa oferi casa ta (%d) + $%s pentru masina lui %s (%s[age: %d, distance: %.0fKM, %s %s])?", PlayerInfo[playerid][pPhousekey], FormatNumber(price), giveplayer, aVehicleNames[PlayerInfo[id][pCarModel][idcar] - 400], GetDaysFromTimestamp(PlayerInfo[id][pCarBuyTime][idcar]), PlayerInfo[id][pCarKM][idcar], hidden,vip);
				format(string,sizeof(string),"%s\n\nAtentie! Este interzis sa vindeti bunuri din joc (masini, bani, case) pentru bani reali sau bunuri ce nu tin de joc (itemuri metin, bani pe alt server, conturi steam).",string);
				ShowPlayerDialog(playerid, DIALOG_TRADEHOUSECAR, DIALOG_STYLE_MSGBOX, "Schimb de casa cu masina", string, "Da", "Nu");
			}
			else
			{
				format(string,sizeof(string),"You want to trade your house (%s) + $%s for %s's car (%s[age: %d, distance: %.0fKM, %s %s])?", PlayerInfo[playerid][pPhousekey], FormatNumber(price), giveplayer, aVehicleNames[PlayerInfo[id][pCarModel][idcar] - 400], GetDaysFromTimestamp(PlayerInfo[id][pCarBuyTime][idcar]), PlayerInfo[id][pCarKM][idcar], hidden,vip);
				format(string,sizeof(string),"%s\n\nWarning! It's forbidden to sell in game goods (cars, money, houses) for real money or goods that doesn't belong to game (metin items, money on other server, steam accounts).",string);
				ShowPlayerDialog(playerid, DIALOG_TRADEHOUSECAR, DIALOG_STYLE_MSGBOX, "Trade house for car", string, "Yes", "No");
			}
	   	}
	   	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	return 1;
}
CMD:tradehouseforhouse(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	if(PlayerInfo[playerid][pPhousekey] == 999) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own a house.");
	new id, price, other[128], string[300], giveplayer[30];
	if(sscanf(params, "uiS(NULL)[128]", id,price,other)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /tradehouseforhouse [name/playerid] [difference] - You will pay the difference.");
    if(strcmp(other, "NULL", true)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu folosi spatii in pret.", "(Error){FFFFFF} Don't use spaces in the price.");
    if(id == playerid) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu iti poti schimba casa singur.", "(Error){FFFFFF} You can't trade your house to yourself.");
    if(SellTradeTimer[playerid] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already have sent an offer. The offer will expire in 2 minutes.");
    if(PlayerInfo[id][pPhousekey] == 999) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player don't own a house.");
    if(price < 100000 || price > 200000000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Price not lower than $100.000 and not higher than $200,000,000.");
    if(GetPlayerCash(playerid) < price) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
    if(IsPlayerConnected(id))
	{
	    if(IsPlayerInRangeOfPlayer(playerid, id, 5.0))
	    {
	    	SellTradeID[playerid] = id;
	    	SellTradePrice[playerid] = price;
	    	GetPlayerName(id, giveplayer, sizeof(giveplayer));
	    	if(PlayerInfo[playerid][pLanguage] == 2)
			{
		    	format(string,sizeof(string),"Vrei sa oferi casa ta (id: %d) + $%s pentru casa lui %s (id: %d)?\n\nAtentie! Este interzis sa vindeti bunuri din joc (masini, bani, case) pentru bani reali sau bunuri ce nu tin de joc (itemuri metin, bani pe alt server, conturi steam).", PlayerInfo[playerid][pPhousekey], FormatNumber(price), giveplayer, PlayerInfo[id][pPhousekey]);
				ShowPlayerDialog(playerid, DIALOG_TRADEHOUSEHOUSE, DIALOG_STYLE_MSGBOX, "Schimb de case", string, "Da", "Nu");
		    }
		    else
		    {
		    	format(string,sizeof(string),"You want to trade your house (id: %d) + $%s for %s's house (id: %d)?\n\nWarning! It's forbidden to sell in game goods (cars, money, houses) for real money or goods that doesn't belong to game (metin items, money on other server, steam accounts).", PlayerInfo[playerid][pPhousekey], FormatNumber(price), giveplayer, PlayerInfo[id][pPhousekey]);
				ShowPlayerDialog(playerid, DIALOG_TRADEHOUSEHOUSE, DIALOG_STYLE_MSGBOX, "Trade house", string, "Yes", "No");
		    }
		}
	    else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	return 1;
}
CMD:sellcarto(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	new id,price,giveplayer[30],other[128];
	if(sscanf(params, "uiS(NULL)[128]", id,price,other)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sellcarto [name/playerid] [price]");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	if(strcmp(other, "NULL", true)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu folosi spatii in pret.", "(Error){FFFFFF} Don't use spaces in the price.");
	if(id == playerid) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu iti poti vinde masina singur.", "(Error){FFFFFF} You can't sell your car to yourself.");
	if(SellTradeTimer[playerid] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already have sent an offer. The offer will expire in 2 minutes.");
	if(price < 1 || price > 200000000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Price not lower then $1 and not higher then $200,000,000.");
	new vid = GetPlayerVehicleID(playerid),idcar=-1;
    if(!IsPlayerInAnyVehicle(playerid)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu esti in masina personala.", "(Error){FFFFFF} You are not in your personal car.");
	if(GetPlayerCash(id) < price) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player don't have money needed.");
	if(PlayerInfo[playerid][pLevel] < 4) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have level 4.");
	if(PlayerInfo[id][pLevel] < 4) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} That player doesn't have level 4.");
	if(floatround(PlayerInfo[playerid][pConnectTime], floatround_round) < 2) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need 2 played hours to use this command.");
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
	{
		if(vid == PlayerInfo[playerid][pCarID][vv])
		{
			idcar = vv;
		}
	}
	if(idcar == -1) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu esti in masina personala.", "(Error){FFFFFF} You are not in your personal car.");
	if(PlayerInfo[playerid][pCarBlock][idcar] > 0)
	{
		format(other, sizeof(other), "(Error){FFFFFF} Your vehicle is blocked for %d hours.", PlayerInfo[playerid][pCarBlock][idcar]);
		SendClientMessage(playerid, COLOR_ERROR, other);
		return 1;
	}
	if(IsPlayerConnected(id))
	{
		GetPlayerName(id, giveplayer, sizeof(giveplayer));
	    if(IsPlayerInRangeOfPlayer(playerid, id, 5.0))
	    {
			new string[500];
			SelectedCar[playerid] = idcar;
			SellTradeID[playerid] = id;
			SellTradePrice[playerid] = price;
			if(PlayerInfo[playerid][pLanguage] == 2)
			{
				format(string,sizeof(string),"Esti sigur ca vrei sa vinzi masina ta lui %s pentru %s$?\n\nAtentie! Este INTERZIS sa vindeti masina cuiva pentru a va pune hidden sau a va da clear KM.\nEste interzis sa vindeti bunuri din joc (masini, bani, case) pentru bani reali sau bunuri ce nu tin de joc (itemuri metin, bani pe alt server, conturi steam).\nDaca imprumuti cuiva masina, o faci pe proprie raspundere. Nu te astepta ca adminii sa te ajute sa o recuperezi.",giveplayer,FormatNumber(price));
				ShowPlayerDialog(playerid, DIALOG_SELLCARTO, DIALOG_STYLE_MSGBOX, "Esti sigur?", string, "Da", "Nu");
			}
			else
			{
				format(string,sizeof(string),"Are you sure you want to sell your car to %s for %s$?\n\nWarning! It's FORBIDDEN to sell your car to someone to put a hidden color on your car.\nIt's forbidden to sell in game goods (cars, money, houses) for real money or goods that doesn't belong to game (metin items, money on other server, steam accounts).\nIf you borrow your car to someone, you'll do this on your own. Admins will not help you to recover your car.",giveplayer,FormatNumber(price));
				ShowPlayerDialog(playerid, DIALOG_SELLCARTO, DIALOG_STYLE_MSGBOX, "Are you sure?", string, "Yes", "No");
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} The player you are trying to sell a car to needs to be near you.");
	}
	return 1;
}
CMD:sellcar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(!PlayerToPoint(4.0,playerid, 326.1860,-1516.8926,36.0325)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be at DealerShip to sell your car.");
	new masina1[256],masina[1000],count=0;
	for(new v; v < PlayerInfo[playerid][pCarSlots]; v++)
	{
		if(PlayerInfo[playerid][pCar][v] != -1) count++;
	}
	if(count == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own any cars.");
	format(masina1, sizeof(masina1), "Vehicle\tSqlID\tStatus\n");
	strcat(masina, masina1);
	for(new id; id < PlayerInfo[playerid][pCarSlots]; id++)
	{
		if(PlayerInfo[playerid][pCar][id] != -1)
		{
			if(PlayerInfo[playerid][pCarID][id] != 0)
			{
				format(masina1, sizeof(masina1), "%s\t%d\t{0C370A}(spawned)\n",aVehicleNames[PlayerInfo[playerid][pCarModel][id] - 400],PlayerInfo[playerid][pCar][id]);
				strcat(masina, masina1);
			}
			else
			{
				format(masina1, sizeof(masina1), "%s\t%d\t{FB0404}(despawned)\n",aVehicleNames[PlayerInfo[playerid][pCarModel][id] - 400],PlayerInfo[playerid][pCar][id]);
				strcat(masina, masina1);
			}
		}
	}
	ShowPlayerDialog(playerid,DIALOG_CARSELL,DIALOG_STYLE_TABLIST_HEADERS,"Sell vehicle",masina,"Select","Exit");
	return 1;
}

CMD:vehicles(playerid, params[]) return cmd_v(playerid, params);
CMD:cars(playerid, params[]) return cmd_v(playerid, params);
CMD:findhouse(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    new houseID,string[128];
	if(sscanf(params, "d", houseID)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /findhouse [house id]");
	new i = sizeof(HouseInfo) - 1;
	if(houseID > i || houseID < 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid House ID.");
	if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_ERROR,"(Error){FFFFFF} You can't use this while robbing the bank.");
    if(CP[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1 && PlayerInfo[playerid][pJobVehicle] == 0 && BeeCar[playerid] == 0 && UsedFind[playerid] == 0 && InMinerJob[playerid] == 0 && InStrawberryJob[playerid] == 0 && PizzaCP[playerid] != 1 && busc[playerid] != 1 && Trucker[playerid] ==0)
	{
		SetPlayerCheckpoint(playerid, HouseInfo[houseID][hEntrancex], HouseInfo[houseID][hEntrancey], HouseInfo[houseID][hEntrancez], 4.0);
		CP[playerid] = 43;
		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Mergi la checkpoint-ul de pe minimap pentru a ajunge la casa %d.", houseID);
		else format(string, sizeof(string), "Follow the checkpoint to reach the house %d.", houseID);
		SendClientMessage(playerid, COLOR_YELLOW, string);
    }
    else
    {
        ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel checkpoint", "You are sure to cancel the current checkpoint?", "Yes", "No");
	}
	return 1;
}
CMD:findbiz(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new houseID, string[128];
	if(sscanf(params, "d", houseID)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /findbiz [biz id]");
    new i = sizeof(BizzInfo) - 1;
	if(houseID > i || houseID < 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid bizz ID.");
	if(BusinessRob[playerid] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use this while robbing.");
    if(CP[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1 && PlayerInfo[playerid][pJobVehicle] == 0 && BeeCar[playerid] == 0 && UsedFind[playerid] == 0 && InMinerJob[playerid] == 0 && InStrawberryJob[playerid] == 0 && PizzaCP[playerid] != 1 && busc[playerid] != 1 && Trucker[playerid] ==0)
	{
		SetPlayerCheckpoint(playerid, BizzInfo[houseID][bEntranceX], BizzInfo[houseID][bEntranceY], BizzInfo[houseID][bEntranceZ], 4.0);
		CP[playerid] = 43;
		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Mergi la checkpoint-ul de pe minimap pentru a ajunge la biz-ul %d.", houseID);
		else format(string, sizeof(string), "Follow the checkpoint to reach the business %d.", houseID);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	else
	{
	    ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel checkpoint", "You are sure to cancel the current checkpoint?", "Yes", "No");
	}
	return 1;
}
CMD:carplate(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new idcar=-1;
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
	{
		if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pCarID][vv])
		{
			idcar = vv;
		}
	}
	if(idcar == -1) return SendClientMessage(playerid, COLOR_WHITE, "You are not in your personal car.");
	new Float:health2;
	GetVehicleHealth(GetPlayerVehicleID(playerid), health2);
	if(health2 < 500.0 || vehEngine[GetPlayerVehicleID(playerid)] == 1) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You need to stop the engine first. Also, your car needs to be reapaired first (more than 500 car health).");
	if(GetPlayerCash(playerid) >= 5000)
 	{
		if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pCarID][idcar])
		{
	   		ShowPlayerDialog(playerid, DIALOG_PLATE, DIALOG_STYLE_INPUT, "License plate registration", "{FFFFFF}Please enter a license plate for your vehicle.\n\nThere is only two conditions:\n- The license plate must be unique\n- The license can be alphanumerical, but it must consist of only 10 characters.", "Select", "");
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
	return 1;
}
CMD:ccarcolor(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your personal car.");
    if(PlayerInfo[playerid][pCRank] < 7) return  SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be rank 7 in clan to use this command.");
	new colorpart,colorid,VehI = GetPlayerVehicleID(playerid),idcar=-1;
	for(new vv; vv < MAX_CLAN_VEHICLES; vv++)
	{
		if(VehI == ClanInfo[PlayerInfo[playerid][pClan]][cCarID][vv])
		{
			idcar = vv;
		}
	}
	if(idcar == -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in clan car.");
	if(VehI == ClanInfo[PlayerInfo[playerid][pClan]][cCarID][idcar])
	{
		new car = GetPlayerVehicleID(playerid);
		if(sscanf(params, "ii", colorpart, colorid))
		{
			SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /ccarcolor [1/2] [color]");
			SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} Use /colors for a list of colors.");
			return 1;
		}
		if(colorpart==1)
		{
			if(colorid < 0 || colorid > 255)
			{
				SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /carcolor [1/2] [color]");
				SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} Use /colors for a list of colors.");
				return 1;
			}
			ClanInfo[PlayerInfo[playerid][pClan]][cCarColor1][idcar] = colorid;
			ChangeVehicleColor(car, colorid, ClanInfo[PlayerInfo[playerid][pClan]][cCarColor2][idcar]);
			ccUpdate(PlayerInfo[playerid][pClan], idcar, cColorOnex);
			SendClientMessage(playerid,COLOR_WHITE, "Vehicle color changed!");
			return 1;
		}
		if(colorpart==2)
		{
			if(colorid < 0 || colorid > 255)
			{
				SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /carcolor [1/2] [color]");
				SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} Use /colors for a list of colors.");
				return 1;
			}
			ClanInfo[PlayerInfo[playerid][pClan]][cCarColor2][idcar] = colorid;
			ChangeVehicleColor(car, ClanInfo[PlayerInfo[playerid][pClan]][cCarColor1][idcar], colorid);
			ccUpdate(PlayerInfo[playerid][pClan], idcar, cColorTwox);
			SendClientMessage(playerid,COLOR_WHITE, "Vehicle color changed!");
			return 1;
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your personal car.");
	return 1;
}
CMD:carcolor(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your personal car.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not the driver of the car.");
	new colorpart,colorid,VehI = GetPlayerVehicleID(playerid),idcar=-1,strx[128];
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
	{
		if(VehI == PlayerInfo[playerid][pCarID][vv])
		{
			idcar = vv;
		}
	}
	if(idcar == -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your personal car.");
	if(VehI == PlayerInfo[playerid][pCarID][idcar])
	{
		new car = GetPlayerVehicleID(playerid);
		if(sscanf(params, "ii", colorpart, colorid))
		{
			SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /carcolor [1/2] [color]");
			SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} Use /colors for a list of colors.");
			return 1;
		}
		if(colorpart==1)
		{
			if(colorid < 0 || colorid > 255)
			{
				SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /carcolor [1/2] [color]");
				SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} Use /colors for a list of colors.");
				return 1;
			}
			if(GetPlayerCash(playerid) < 500 && colorid <= 127) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
			if(colorid > 127 && PlayerInfo[playerid][pCarColor1][idcar] < 128)
			{
				if(PlayerInfo[playerid][pLanguage] == 2)
				{
					format(strx, sizeof(strx), "Esti sigur ca vrei sa pui culoarea %d pe aceasta masina?\nVei pierde o culoare hiden.", colorid);
					ShowPlayerDialog(playerid, DIALOG_HIDDEN, DIALOG_STYLE_MSGBOX, "Esti sigur?", strx, "Da", "Nu");
				}
				else
				{
					format(strx, sizeof(strx), "Do you want to put color %d on this car?\nYou will lose a hidden color.", colorid);
					ShowPlayerDialog(playerid, DIALOG_HIDDEN, DIALOG_STYLE_MSGBOX, "Are you sure?", strx, "Yes", "No");
				}
				SelectedCar[playerid] = idcar;
				SellTradeID[playerid] = colorid;
				SellTradePrice[playerid] = 1;
				return 1;
			}
			if(PlayerInfo[playerid][pCarColor1][idcar] > 127)
			{
				if(colorid <= 127)
				{
					if(PlayerInfo[playerid][pLanguage] == 2)
  					{
   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Esti sigur?", "Esti sigur ca doresti sa scoti hidden-ul de pe masina? Nu il vei mai putea recupera.", "Da", "Nu");
   					}
   					else
   					{
   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Are you sure?", "Are you sure you want to remove your car hidden? You can't recover it.", "Yes", "No");
   					}
   				}
   				else
   				{
   					if(PlayerInfo[playerid][pPremiumPoints] >= 5 || SvarInfo[1][svValue] == 1)
   					{
   						if(SvarInfo[1][svValue] == 0)
   						{
		   					if(PlayerInfo[playerid][pLanguage] == 2)
		  					{
		  						format(strx, sizeof(strx), "Esti sigur ca vrei sa schimbi culoare de pe masina cu culoarea %d?\nVei pierde 5 puncte premium.", colorid);
		   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Esti sigur?", strx, "Da", "Nu");
		   					}
		   					else
		   					{
		   						format(strx, sizeof(strx), "Do you want to change your car color with color %d?\nYou will lose 5 premium points.", colorid);
		   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Are you sure?", strx, "Yes", "No");
		   					}
		   				}
		   				else
		   				{
		   					if(PlayerInfo[playerid][pLanguage] == 2)
		  					{
		  						format(strx, sizeof(strx), "Esti sigur ca vrei sa schimbi culoare de pe masina cu culoarea %d?\nNu vei pierde niciun punct premium.", colorid);
		   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Esti sigur?", strx, "Da", "Nu");
		   					}
		   					else
		   					{
		   						format(strx, sizeof(strx), "Do you want to change your car color with color %d?\nYou will not lose any premium points.", colorid);
		   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Are you sure?", strx, "Yes", "No");
		   					}
		   				}
	   				}
	   				else return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu ai suficiente punte premium. Ai nevoie de 5 puncte premium pentru a schimba un hidden (127-256) pe masina.", "(Error){FFFFFF} You don't have enough premium points. You need 5 premium points to change a hidden on your car.");
   				}
				SelectedCar[playerid] = idcar;
				SellTradeID[playerid] = colorid;
				SellTradePrice[playerid] = 1;
				return 1;
			}
			PlayerInfo[playerid][pCarColor1][idcar] = colorid;
			GivePlayerCash(playerid, -500);
			ChangeVehicleColor(car, colorid, PlayerInfo[playerid][pCarColor2][idcar]);
			cUpdate(playerid, idcar, cColorOnex);
			SendClientMessage(playerid,COLOR_WHITE, "Vehicle color changed!");
			GameTextForPlayer(playerid, "~r~-$500", 5000, 1);
			return 1;
		}
		if(colorpart==2)
		{
			if(colorid < 0 || colorid > 255)
			{
				SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /carcolor [1/2] [color]");
				SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} Use /colors for a list of colors.");
				return 1;
			}
			if(GetPlayerCash(playerid) < 500 && colorid <= 127) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
			if(colorid > 127 && PlayerInfo[playerid][pCarColor2][idcar] < 128)
			{
				if(PlayerInfo[playerid][pLanguage] == 2)
				{
					format(strx, sizeof(strx), "Esti sigur ca vrei sa pui culoarea %d pe aceasta masina?\nVei pierde o culoare hidden.", colorid);
					ShowPlayerDialog(playerid, DIALOG_HIDDEN, DIALOG_STYLE_MSGBOX, "Esti sigur?", strx, "Da", "Nu");
				}
				else
				{
					format(strx, sizeof(strx), "Do you want to put color %d on this car?\nYou will lose a hidden color.", colorid);
					ShowPlayerDialog(playerid, DIALOG_HIDDEN, DIALOG_STYLE_MSGBOX, "Are you sure?", strx, "Yes", "No");
				}
				SelectedCar[playerid] = idcar;
				SellTradeID[playerid] = colorid;
				SellTradePrice[playerid] = 2;
				return 1;
			}
			if(PlayerInfo[playerid][pCarColor2][idcar] > 127)
			{
				if(colorid <= 127)
				{
					if(PlayerInfo[playerid][pLanguage] == 2)
  					{
   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Esti sigur?", "Esti sigur ca doresti sa scoti hidden-ul de pe masina? Nu il vei mai putea recupera.", "Da", "Nu");
   					}
   					else
   					{
   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Are you sure?", "Are you sure you want to remove your car hidden? You can't recover it.", "Yes", "No");
   					}
   				}
   				else
   				{
   					if(PlayerInfo[playerid][pPremiumPoints] >= 5 || SvarInfo[1][svValue] == 1)
   					{
   						if(SvarInfo[1][svValue] == 0)
   						{
		   					if(PlayerInfo[playerid][pLanguage] == 2)
		  					{
		  						format(strx, sizeof(strx), "Esti sigur ca vrei sa schimbi culoare de pe masina cu culoarea %d?\nVei pierde 5 puncte premium.", colorid);
		   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Esti sigur?", strx, "Da", "Nu");
		   					}
		   					else
		   					{
		   						format(strx, sizeof(strx), "Do you want to change your car color with color %d?\nYou will lose 5 premium points.", colorid);
		   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Are you sure?", strx, "Yes", "No");
		   					}
		   				}
		   				else
		   				{
		   					if(PlayerInfo[playerid][pLanguage] == 2)
		  					{
		  						format(strx, sizeof(strx), "Esti sigur ca vrei sa schimbi culoare de pe masina cu culoarea %d?\nNu vei pierde niciun punct premium.", colorid);
		   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Esti sigur?", strx, "Da", "Nu");
		   					}
		   					else
		   					{
		   						format(strx, sizeof(strx), "Do you want to change your car color with color %d?\nYou will not lose any premium points.", colorid);
		   						ShowPlayerDialog(playerid, DIALOG_HIDDEN1, DIALOG_STYLE_MSGBOX, "Are you sure?", strx, "Yes", "No");
		   					}
		   				}
	   				}
	   				else return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu ai suficiente punte premium. Ai nevoie de 5 puncte premium pentru a schimba un hidden (127-256) pe masina.", "(Error){FFFFFF} You don't have enough premium points. You need 5 premium points to change a hidden on your car.");
   				}
				SelectedCar[playerid] = idcar;
				SellTradeID[playerid] = colorid;
				SellTradePrice[playerid] = 2;
				return 1;
			}
			PlayerInfo[playerid][pCarColor2][idcar] = colorid;
			GivePlayerCash(playerid, -500);
			ChangeVehicleColor(car, PlayerInfo[playerid][pCarColor1][idcar], colorid);
			cUpdate(playerid, idcar, cColorTwox);
			SendClientMessage(playerid,COLOR_WHITE, "Vehicle color changed!");
			GameTextForPlayer(playerid, "~r~-$500", 5000, 1);
			return 1;
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your personal car.");
	return 1;
}
CMD:swapcolors(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(GetPlayerCash(playerid) < 500) return SendClientMessage(playerid, COLOR_ERROR,"(Error){FFFFFF} You don't have enough money.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR,"(Error){FFFFFF} You are not in your personal car.");
	new VehI = GetPlayerVehicleID(playerid),idcar=-1;
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
	{
		if(VehI == PlayerInfo[playerid][pCarID][vv])
		{
			idcar = vv;
		}
	}
	if(idcar == -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your personal car.");
	if(VehI == PlayerInfo[playerid][pCarID][idcar])
	{
		new color1 = PlayerInfo[playerid][pCarColor1][idcar], color2 = PlayerInfo[playerid][pCarColor2][idcar];
		PlayerInfo[playerid][pCarColor1][idcar] = color2;
		PlayerInfo[playerid][pCarColor2][idcar] = color1;
		ChangeVehicleColor(VehI, PlayerInfo[playerid][pCarColor1][idcar], PlayerInfo[playerid][pCarColor2][idcar]);
		GivePlayerCash(playerid, -500);
		cUpdate(playerid, idcar, cColorOnex);
		cUpdate(playerid, idcar, cColorTwox);
		SS(playerid,COLOR_WHITE, "Culorile masinii au fost schimbate!","Car color was changed!");
		GameTextForPlayer(playerid, "~r~-$500", 5000, 1);
	}
	return 1;
}
CMD:vipcar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(!IsPlayerInAnyVehicle(playerid)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu esti intr-un vehicul!", "(Error){FFFFFF} You are not in a vehicle!");
	new carid = GetPlayerVehicleID(playerid),idcar=-1;
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
	{
		if(carid == PlayerInfo[playerid][pCarID][vv] && PlayerInfo[playerid][pCarVIP][vv] == 1)
		{
			idcar = vv;
		}
	}
	if(idcar == -1) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Poti folosi aceasta comanda doar pe vehicule VIP.", "(Error){FFFFFF} You can use this command only on VIP vehicles.");
	ShowPlayerDialog(playerid, DIALOG_VIPNAME, DIALOG_STYLE_LIST, "Vip vehicle options", "text \ntext color\ntext position\ntext position reset\nwheels", "Next", "Cancel");
	return 1;
}
CMD:window(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be driver to use this command.");
    new window,string[128],window_state[4], vehicleid = GetPlayerVehicleID(playerid);
    if(sscanf(params, "i", window))
    {
        SendClientMessage(playerid, -1, "Usage: /window <window>");
       	GetVehicleParamsCarWindows(vehicleid, window_state[0], window_state[1], window_state[2], window_state[3]);
       	format(string,sizeof(string), "Vehicle windows status: %d %d %d %d", window_state[0], window_state[1], window_state[2], window_state[3]);
       	SendClientMessage(playerid, -1, string);
        return 1;
    }
    if(window < 1 || window > 4) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} The value of 'window' parameter should be between 1 and 4");

    GetVehicleParamsCarWindows(vehicleid, window_state[0], window_state[1], window_state[2], window_state[3]);
    window_state[--window] = !window_state[window];
    SetVehicleParamsCarWindows(vehicleid, window_state[0], window_state[1], window_state[2], window_state[3]);
    return 1;
}

CMD:cpark(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your personal car.");
	if(PlayerInfo[playerid][pCRank] < 7) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be the clan leader to use this command.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not the driver of the car.");
	if(IsPlayerInRangeOfPoint(playerid,100.0,1209.7803,-1728.4128,13.5707)) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You can't park the car in this area.");
	new Float:x,Float:y,Float:z,Float:a,getcarid,idcar=-1;
	getcarid = GetPlayerVehicleID(playerid);
	new interiorr = GetPlayerInterior(playerid),
	virtuall = GetPlayerVirtualWorld(playerid);
	GetVehiclePos(getcarid, x, y, z);
	GetVehicleZAngle(getcarid, a);
	for(new vv; vv < MAX_CLAN_VEHICLES; vv++)
	{
		if(getcarid == ClanInfo[PlayerInfo[playerid][pClan]][cCarID][vv])
		{
			idcar = vv;
		}
	}
	if(idcar == -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your clan car.");
	if(getcarid != ClanInfo[PlayerInfo[playerid][pClan]][cCarID][idcar]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be in clan vehicle.");
	new Float:health2;
	GetVehicleHealth(getcarid, health2);
	if(health2 < 500.0 || (vehEngine[getcarid] == 1 && !IsABike(getcarid))) return SendClientMessage(playerid,COLOR_ERROR,"(Error){FFFFFF} You need to stop the engine first. Also, your car needs to be reapaired first (more than 500 car health).");
	DestroyVehicle(ClanInfo[PlayerInfo[playerid][pClan]][cCarID][idcar]);
	LoadClanCar(PlayerInfo[playerid][pClan]);
	ClanInfo[PlayerInfo[playerid][pClan]][cCarLocX][idcar] = x;
	ClanInfo[PlayerInfo[playerid][pClan]][cCarLocY][idcar] = y;
	ClanInfo[PlayerInfo[playerid][pClan]][cCarLocZ][idcar] = z;
	ClanInfo[PlayerInfo[playerid][pClan]][cCarAngle][idcar] = a;
	ClanInfo[PlayerInfo[playerid][pClan]][cCarID][idcar] = CreateVehicle(ClanInfo[PlayerInfo[playerid][pClan]][cCarModel][idcar],ClanInfo[PlayerInfo[playerid][pClan]][cCarLocX][idcar],ClanInfo[PlayerInfo[playerid][pClan]][cCarLocY][idcar],ClanInfo[PlayerInfo[playerid][pClan]][cCarLocZ][idcar]+1.0,ClanInfo[PlayerInfo[playerid][pClan]][cCarAngle][idcar],ClanInfo[PlayerInfo[playerid][pClan]][cCarColor1][idcar],ClanInfo[PlayerInfo[playerid][pClan]][cCarColor2][idcar],-1);
	Gas[ClanInfo[PlayerInfo[playerid][pClan]][cCarID][idcar]] = 100;
	vehRadio[ClanInfo[PlayerInfo[playerid][pClan]][cCarID][idcar]] = 0;
	SetVehicleNumberPlate(ClanInfo[PlayerInfo[playerid][pClan]][cCarID][idcar], cCarPlate[PlayerInfo[playerid][pClan]][idcar]);
	SetVehicleHealth(ClanInfo[PlayerInfo[playerid][pClan]][cCarID][idcar], 1000);
	LinkVehicleToInterior(ClanInfo[PlayerInfo[playerid][pClan]][cCarID][idcar], interiorr);
	SetVehicleVirtualWorld(ClanInfo[PlayerInfo[playerid][pClan]][cCarID][idcar], virtuall);
	ccUpdate(PlayerInfo[playerid][pClan], idcar, cLocationxx);
	ccUpdate(PlayerInfo[playerid][pClan], idcar, cLocationyx);
	ccUpdate(PlayerInfo[playerid][pClan], idcar, cLocationzx);
	ccUpdate(PlayerInfo[playerid][pClan], idcar, cAnglex);
	SS(playerid, COLOR_DARKPINK, "Masina parcata. Pentru a respawna masina aici, foloseste /clan.","Vehicle parked. For respawn the car here, use /clan.");
	return 1;
}
CMD:park(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your personal car.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not the driver of the car.");
	if(IsPlayerInRangeOfPoint(playerid,100.0,1209.7803,-1728.4128,13.5707)) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You can't park the car in this area.");
	new engine,lights,alarm,doors,bonnet,boot,objective;
	new Float:x,Float:y,Float:z,Float:a,getcarid,idcar=-1;
	getcarid = GetPlayerVehicleID(playerid);
	new interiorr = GetPlayerInterior(playerid),
	virtuall = GetPlayerVirtualWorld(playerid);
	GetVehiclePos(getcarid, x, y, z);
	GetVehicleZAngle(getcarid, a);
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
	{
		if(getcarid == PlayerInfo[playerid][pCarID][vv])
		{
			idcar = vv;
		}
	}
	if(idcar == -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your personal car.");
	if(getcarid != PlayerInfo[playerid][pCarID][idcar]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be in your vehicle.");
	new Float:health2;
	GetVehicleHealth(getcarid, health2);
	if(health2 < 500.0 || (vehEngine[getcarid] == 1 && !IsABike(getcarid))) return SendClientMessage(playerid,COLOR_ERROR,"(Error){FFFFFF} You need to stop the engine first. Also, your car needs to be reapaired first (more than 500 car health).");
	cUpdate(playerid, idcar, cModsx);
	cUpdate(playerid, idcar, cPaintJx);
	LoadCar(playerid);
	PlayerInfo[playerid][pCarLocX][idcar] = x;
	PlayerInfo[playerid][pCarLocY][idcar] = y;
	PlayerInfo[playerid][pCarLocZ][idcar] = z;
	PlayerInfo[playerid][pCarAngle][idcar] = a;
	DestroyVehicle(PlayerInfo[playerid][pCarID][idcar]);
	PlayerInfo[playerid][pCarID][idcar] = CreateVehicle(PlayerInfo[playerid][pCarModel][idcar],PlayerInfo[playerid][pCarLocX][idcar],PlayerInfo[playerid][pCarLocY][idcar],PlayerInfo[playerid][pCarLocZ][idcar]+1.0,PlayerInfo[playerid][pCarAngle][idcar],PlayerInfo[playerid][pCarColor1][idcar],PlayerInfo[playerid][pCarColor2][idcar],-1);
	UpdateVehicleDamageStatus(PlayerInfo[playerid][pCarID][idcar], PlayerInfo[playerid][pCarDamage1][idcar], PlayerInfo[playerid][pCarDamage2][idcar], PlayerInfo[playerid][pCarDamage3][idcar], PlayerInfo[playerid][pCarDamage4][idcar]);
	Gas[PlayerInfo[playerid][pCarID][idcar]] = PlayerInfo[playerid][pCarGas][idcar];
	vehRadio[PlayerInfo[playerid][pCarID][idcar]] = 0;
	SetVehicleNumberPlate(PlayerInfo[playerid][pCarID][idcar], CarPlate[playerid][idcar]);
	SetVehicleHealth(PlayerInfo[playerid][pCarID][idcar], health2);
	LinkVehicleToInterior(PlayerInfo[playerid][pCarID][idcar], interiorr);
	SetVehicleVirtualWorld(PlayerInfo[playerid][pCarID][idcar], virtuall);
	vehEngine[PlayerInfo[playerid][pCarID][idcar]] = 0;
	GetVehicleParamsEx(PlayerInfo[playerid][pCarID][idcar],engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(PlayerInfo[playerid][pCarID][idcar],VEHICLE_PARAMS_OFF,lights,alarm,PlayerInfo[playerid][pCarLock][idcar],bonnet,boot,objective);
	SetPVarInt(playerid, "Engine", 0);
	cUpdate(playerid, idcar, cLocationxx);
	cUpdate(playerid, idcar, cLocationyx);
	cUpdate(playerid, idcar, cLocationzx);
	cUpdate(playerid, idcar, cAnglex);
	SetTimerEx("ModPVehicle", 500, false, "id", playerid, idcar);
	SetVipText(playerid, idcar);
	AttachNeon(playerid, idcar);
	SS(playerid, COLOR_DARKPINK, "Masina parcata. Pentru a respawna masina aici, foloseste /v.","Vehicle parked. For respawn the car here, use /v.");
	return 1;
}
CMD:lock(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new engine,lights,alarm,doors,bonnet,boot,objective;
	new string[128];
	for(new v; v < MAX_PERSONAL_VEHICLES; v++)
	{
	    if(CheckPlayerDistanceToVehicle(5.0, playerid, PlayerInfo[playerid][pCarID][v]))
		{
			if(PlayerInfo[playerid][pCarLock][v] == 1)
			{
	    		GetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
	      	    SetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,0,bonnet,boot,objective);
				format(string, sizeof(string), "~h~%s~n~~g~Unlocked",aVehicleNames[PlayerInfo[playerid][pCarModel][v] - 400]);
				GameTextForPlayer(playerid, string, 5000, 3);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				PlayerInfo[playerid][pCarLock][v] = 0;
				gCarLock[PlayerInfo[playerid][pCarID][v]] = 0;
				cUpdate(playerid, v, cLockx);
				return 1;
			}
			else
			{
	    		GetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
	      	    SetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,1,bonnet,boot,objective);
				SetVehicleParamsForPlayer(PlayerInfo[playerid][pCarID][v],playerid,0,0);
				format(string, sizeof(string), "~h~%s~n~~r~Locked",aVehicleNames[PlayerInfo[playerid][pCarModel][v] - 400]);
				GameTextForPlayer(playerid, string, 5000, 3);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				PlayerInfo[playerid][pCarLock][v] = 1;
				gCarLock[PlayerInfo[playerid][pCarID][v]] = 1;
				cUpdate(playerid, v, cLockx);
			    return 1;
			}
		}
		else if(CheckPlayerDistanceToVehicle(5.0, playerid, HireCar[playerid]))
		{
			new carid = HireCar[playerid];
			if(gCarLock[carid] == 0)
	        {
		        new vehicles = GetVehicleModel(carid) - 400;
			    format(string, sizeof(string), "~h~%s~n~~r~Locked", aVehicleNames[vehicles]);
			    GameTextForPlayer(playerid, string, 5000, 3);
	  	        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				gCarLock[carid] = 1;
    			GetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
      	    	SetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,1,bonnet,boot,objective);
	            return 1;
		    }
			else if(gCarLock[carid] == 1)
			{
				new vehicles = GetVehicleModel(carid) - 400;
				format(string, sizeof(string), "~h~%s~n~~g~Unlocked", aVehicleNames[vehicles]);
			    GameTextForPlayer(playerid, string, 5000, 3);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				gCarLock[carid] = 0;
    			GetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
      	    	SetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,0,bonnet,boot,objective);
	            return 1;
			}
		}
		else if(CheckPlayerDistanceToVehicle(5.0, playerid, RentCar[playerid]))
		{
			new carid = RentCar[playerid];
			if(gCarLock[carid] == 0)
	        {
			    GameTextForPlayer(playerid, "~h~rentcar~n~~r~locked", 5000, 3);
	  	        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				gCarLock[carid] = 1;
    			GetVehicleParamsEx(RentCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
      	    	SetVehicleParamsEx(RentCar[playerid],engine,lights,alarm,1,bonnet,boot,objective);
	            return 1;
		    }
			else if(gCarLock[carid] == 1)
			{
			    GameTextForPlayer(playerid, "~h~rentcar~n~~g~unlocked", 5000, 3);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				gCarLock[carid] = 0;
    			GetVehicleParamsEx(RentCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
      	    	SetVehicleParamsEx(RentCar[playerid],engine,lights,alarm,0,bonnet,boot,objective);
	            return 1;
			}
		}
		else if(CheckPlayerDistanceToVehicle(5.0, playerid, JobCar[playerid]))
		{
			new carid = JobCar[playerid];
			if(gCarLock[carid] == 0)
	        {
		        new vehicles = GetVehicleModel(carid) - 400;
			    format(string, sizeof(string), "~h~%s~n~~r~Locked", aVehicleNames[vehicles]);
			    GameTextForPlayer(playerid, string, 5000, 3);
	  	        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				gCarLock[carid] = 1;
    			GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
      	    	SetVehicleParamsEx(carid,engine,lights,alarm,1,bonnet,boot,objective);
	            return 1;
		    }
			else if(gCarLock[carid] == 1)
			{
				new vehicles = GetVehicleModel(carid) - 400;
				format(string, sizeof(string), "~h~%s~n~~g~Unlocked", aVehicleNames[vehicles]);
			    GameTextForPlayer(playerid, string, 5000, 3);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				gCarLock[carid] = 0;
    			GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
      	    	SetVehicleParamsEx(carid,engine,lights,alarm,0,bonnet,boot,objective);
	            return 1;
			}
		}
	}
    return 1;
}
CMD:premium(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    new string[556];
    if(PlayerInfo[playerid][pLanguage]==2) format(string,sizeof(string),"{ffffff}Avantaje cont premium:\n- 2 sloturi in plus.\n- mai multi bani la payday.\n- poti sa iti blochezi whisper-ul [/togwhisper].\n- acces la comanda /pcolor\n- limita la /pay este de 10,000$.\n- la rob vei pierde 8 puncte nu 10.\n- acces la comanda /rainbow (culori 0-127).");
	else format(string,sizeof(string),"{ffffff}Premium account benfities:\n- with 2 more slots.\n- more money on payday.\n- you can block whiper [/togwhisper].\n- allow to use command /pcolor\n- limit on /pay is 10,000$.\n- on robbery you lose 8 points not 10.\n- allow to use command /rainbow (colors 0-127).");
	ShowPlayerDialog(playerid, DIALOG_PREMIUM, DIALOG_STYLE_MSGBOX, "Premium account:", string, "Close", "");
	return 1;
}
CMD:vipaccount(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    new string[556];
    if(PlayerInfo[playerid][pLanguage]==2) format(string,sizeof(string),"{ffffff}Avantaje cont vip:\n- acces la comanda /vipcar\n- acces la comanda /vipcolors\n- acces la chat-ul vip.\n- va va aparea ca sunteti un vip la [/id].\n- acces la comanda /rainbow (culori 128-255).");
	else format(string,sizeof(string),"{ffffff}Premium account benfities:\n- allow to use command /VipColors\n- acces on vip chat.\n- on [/id] players can view that you are a vip.\n- allow to use command /rainbow (colors 128-255).");
	ShowPlayerDialog(playerid, DIALOG_PREMIUM, DIALOG_STYLE_MSGBOX, "Premium account:", string, "Close", "");
	return 1;
}
CMD:dice(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(!IsPlayerInRangeOfPoint(playerid,50.0,1977.7538,1017.7076,994.4688)) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You can use this command only in casinos.");
	if(PlayerInfo[playerid][pLevel] < 4) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have level 4.");
    if(InBlackJackGame[playerid] == 1 || RouletteInGame[playerid] == 1 || joacapacanele[playerid] == 1) return SendClientMessage(playerid, -COLOR_ERROR, "(Error){FFFFFF} You are already playing a casino game!");
	new id,money,sendername[25],string[184];
	if(sscanf(params, "ud",id,money)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /dice [name/playerid] [money]");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	if(money < 1 || money > PlayerInfo[playerid][pLevel]*100000)
	{
		format(string, sizeof(string), "You can bet maximum $%s.", FormatNumber(PlayerInfo[playerid][pLevel]*100000));
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}
	if(IsPlayerConnected(id))
	{
		if(GetPlayerCash(playerid) < money) return SS(playerid,COLOR_ERROR,"(Error){FFFFFF} Tu sau adversarul tau nu aveti suficienti bani pentru a juca barbut.","(Error){FFFFFF} You or your opponent not have enough money to player barbut.");
	    if(GetPlayerCash(id) < money) return SS(playerid,COLOR_ERROR,"(Error){FFFFFF} Tu sau adversarul tau nu aveti suficienti bani pentru a juca barbut.","(Error){FFFFFF} You or your opponent not have enough money to player barbut.");
	    if(id == playerid) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu te poti invita singur sa joci barbut.","(Error){FFFFFF} You can't play barbut with yourself.");
		if(ProxDetectorS(10.0, playerid, id))
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			SS(playerid, COLOR_DARKPINK, "Cerere de barbut trimisa.","Barbut request was sent.");
			if(PlayerInfo[playerid][pLanguage]==2) format(string, sizeof(string), "%s te-a invitat sa joci barbut cu el pe $%s. Scrie /accept dice %d pentru a juca.",sendername,FormatNumber(money),playerid);
			else format(string, sizeof(string), "%s invited you to play barbut on $%s. Write /accept dice %d to play.",sendername,FormatNumber(money),playerid);
			SendClientMessage(id, COLOR_DARKPINK, string);
			Diceid[id] = playerid;
			Dicem[id] = money;
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be near your opponent.");
	}
	return 1;
}
CMD:c(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pClan] < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Your are not in a clan.");
	new msj[100],string[150],sendername[25];
    if(PlayerInfo[playerid][pMuted] == 1)
    {
		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
		else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
		SendClientMessage(playerid, COLOR_DARKPINK, string);
		return 1;
	}
	if(sscanf(params, "s[100]",msj)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /c [message]");
	GetPlayerName(playerid,sendername,sizeof(sendername));
	if(PlayerInfo[playerid][pClan] != 0)
	{
		if(PlayerInfo[playerid][pClan] >= 1)
		{
			if(PlayerInfo[playerid][pCRank] == 1)
			{
				format(string,sizeof(string),"{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName1],sendername,msj);
			}
			else if(PlayerInfo[playerid][pCRank] == 2)
			{
				format(string,sizeof(string),"{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName2],sendername,msj);
			}
			else if(PlayerInfo[playerid][pCRank] == 3)
			{
				format(string,sizeof(string),"{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName3],sendername,msj);
			}
			else if(PlayerInfo[playerid][pCRank] == 4)
			{
				format(string,sizeof(string),"{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName4],sendername,msj);
			}
			else if(PlayerInfo[playerid][pCRank] == 5)
			{
				format(string,sizeof(string),"{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName5],sendername,msj);
			}
			else if(PlayerInfo[playerid][pCRank] == 6)
			{
				format(string,sizeof(string),"{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName6],sendername,msj);
			}
			else if(PlayerInfo[playerid][pCRank] >= 7)
			{
				format(string,sizeof(string),"{%s}[CLAN] %s %s: %s",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName7],sendername,msj);
			}
		}
		SendToClan(PlayerInfo[playerid][pClan], COLOR_WHITE, string);
		new var100[300],resulttt[300],strr[300];
		format(strr, sizeof(strr),"[CLAN] %s: %s", sendername, msj);
		mysql_real_escape_string(strr, resulttt);
		mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','c')", PlayerInfo[playerid][pSQLID], resulttt);
		mysql_tquery(SQL,var100,"","");
	}
	return 1;
}
CMD:quitclan(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pClan] != 0)
	{
		if(PlayerInfo[playerid][pCRank] != 7)
		{
		    ShowPlayerDialog(playerid,DIALOG_QUITCLAN,DIALOG_STYLE_MSGBOX,"You are sure?","You want to left the current clan?","Yes","No");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't leave your clan because you are the leader.");
   	}
   	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a clan to quit.");
	return 1;
}
CMD:cinvite(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pCRank] < 6) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Only players with rank 6 or 7 can invite members in clan.");
    new userID,giveplayer[25],sendername[25],szMessage[119];
    if(sscanf(params, "u", userID)) return SendClientMessage(playerid, COLOR_WHITE, "Usage: /cinvite [id]");
	{
		if(GetClanMembers(PlayerInfo[playerid][pClan]) >= ClanInfo[PlayerInfo[playerid][pClan]][cClanSlots]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have reached maximum members.");
		if(userID == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti sa te inviti singur in clan.");
		if(ClanInfo[PlayerInfo[playerid][pClan]][cClanActive] < 1) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti invita membri deoarece clanul a expirat (pentru prelungire intra pe panel).", "(Error){FFFFFF} You can't invite members because the clan has expired (for extending go to panel).");
		if(IsPlayerConnected(userID))
		{
			if(PlayerInfo[userID][pClan] == 0)
			{
				if(GetDistanceBetweenPlayers(playerid, userID) > 10) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be near the player.");
				GetPlayerName(userID,giveplayer,sizeof(giveplayer));
				format(szMessage, sizeof(szMessage), "You have invited %s to join your clan.", giveplayer);
				SendClientMessage(playerid, COLOR_WHITE, szMessage);

				GetPlayerName(playerid,sendername,sizeof(sendername));
				if(PlayerInfo[userID][pLanguage] == 2) format(szMessage, sizeof(szMessage), "%s te-a invitat in clanul %s. Foloseste /accept cinvite %d pentru a accepta.", sendername, ClanInfo[PlayerInfo[playerid][pClan]][cClanName], playerid);
				else format(szMessage, sizeof(szMessage), "%s has invited you in the clan %s. Type /accept cinvite %d to accept.", sendername, ClanInfo[PlayerInfo[playerid][pClan]][cClanName], playerid);
				SS(userID, COLOR_BLUE, "Invitatie noua in clan:", "New invite in clan:");
				SendClientMessage(userID, COLOR_BLUE, szMessage);

				SetPVarInt(userID, "cinvID", PlayerInfo[playerid][pClan]);
				SetPVarInt(userID, "cinvIDD", playerid);
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player already have a clan.");
		}
	}
    return 1;
}
CMD:clan(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pClan] >= 1)
		ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag\nClan Safebox\nClan Vehicles", "Select", "Close");
	return 1;
}
CMD:friends(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new online[1000],offline[1000],query[300],result[30],name[30],idd,mid=1,aim2[2000];
	format(query, sizeof(query), "SELECT * FROM `friends` WHERE `PlayerID` = '%d' AND `Status`='1'",PlayerInfo[playerid][pSQLID]);
	new Cache: membresult = mysql_query(SQL,query);
	for(new i, j = cache_get_row_count (); i != j; ++i)
	{
		idd = cache_get_field_content_int(i, "FriendID");
		cache_get_field_content(i, "FriendName", result); format(name, 30, result);
		Selected[playerid][mid] = idd;
		format(online, sizeof(online), "%s{228404}[online]{FFFFFF} %s\n",online,name);
		mid++;
	}
	cache_delete(membresult);
	format(query, sizeof(query), "SELECT * FROM `friends` WHERE `PlayerID` = '%d' AND `Status`='0'",PlayerInfo[playerid][pSQLID]);
	new Cache: membresult1 = mysql_query(SQL,query);
	for(new i, j = cache_get_row_count (); i != j; ++i)
	{
		idd = cache_get_field_content_int(i, "FriendID");
		cache_get_field_content(i, "FriendName", result); format(name, 30, result);
		Selected[playerid][mid] = idd;
		format(offline, sizeof(offline), "%s{BB172D}[offline]{FFFFFF} %s\n",offline,name);
		mid++;
	}
	cache_delete(membresult1);
	format(aim2,sizeof(aim2),"{F89B0E}[+] Add Friend\n%s%s",online, offline);
	ShowPlayerDialog(playerid, DIALOG_FRIENDS, DIALOG_STYLE_LIST, "Friends", aim2, "Select", "Exit");
	return 1;
}
CMD:togkickafk(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	if(kickafk == 1)
	{
	    kickafk = 0;
	    SendClientMessage(playerid,COLOR_WHITE,"You disable afk kick.");
	    return 1;
	}
	else
	{
	    SendClientMessage(playerid,COLOR_WHITE,"You enable afk kick.");
	    kickafk = 1;
	}
	return 1;
}
CMD:serverpass(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new pass[64],string[128];
		if(sscanf(params, "s[64]", pass)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /serverpass [password]");
		{
			format(string,sizeof(string),"password %s",pass);
			SendRconCommand(string);
			format(string,sizeof(string), "You changed the server password in: %s.",pass);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:servername(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new name[64],string[128];
		if(sscanf(params, "s[64]", name)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /servername [name]");
		{
			format(string,sizeof(string),"hostname %s",name);
			SendRconCommand(string);
			format(string,sizeof(string), "You changed the server name in: %s.",name);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:hmusic(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(InHouse[playerid] > -1)
	{
	    if(strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[InHouse[playerid]][hOwner]) == 0)
	    {
	    	if(HouseInfo[PlayerInfo[playerid][pPhousekey]][hMusic] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have this house upgrade, use /hupgrade.");
	    	new strings[500];
			format(strings, sizeof(strings), "{FF0000}Turn Off Radio\nPro FM Romania\nRadio Bandit Romania\nRadio Taraf Romania\nRadio Hot Romania\nRadio Gangsta Dance\nRadio Gangsta Manele\n.977 Hitz\n.977 Mix\n.977 Alternative\nRadio BBC One UK\nDubstep.fm\nRadio Hit Romania\nRadio ClubMix Romania\nKiss FM Romania [Audio Plugin]\nRadio Zu Romania [Audio Plugin]\nRadio Popular\nTrap.FM\nRadio Tequila Hip Hop");
			ShowPlayerDialog(playerid, DIALOG_HMUSIC, DIALOG_STYLE_LIST, "House music", strings, "Play", "Cancel");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have the key to this house.");
	}
	else SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu esti intr-o casa.", "(Error){FFFFFF} You are not in a house.");
	return 1;
}
CMD:bmusic(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(InBussines[playerid] > -1)
	{
		if(BizzInfo[InBussines[playerid]][bType] != 3) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You are not in a bar.");
		new link[358];
		if(strcmp(PlayerInfo[playerid][pNormalName], BizzInfo[InBussines[playerid]][bOwner]) == 0 || PlayerInfo[playerid][pAdmin] > 0)
		{
			if(sscanf(params, "s[358]",link)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /bmusic [link]");
			format(barstring[InBussines[playerid]], 256, "%s", link);
			foreach(new i : Player)
			{
			    if(InBussines[playerid] == InBussines[i])
			    {
			        StopAudioStreamForPlayer(i);
					PlayAudioStreamForPlayer(i, link);
				}
			}
		}
		else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} This is not your business.");
	}
	else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You are not in a bar.");
	return 1;
}
CMD:mp3(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pMp3] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a mp3.");
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use this command in a vehicle.");
	new strings[500];
	format(strings, sizeof(strings), "{FF0000}Turn Off Radio\nPro FM Romania\nRadio Bandit Romania\nRadio Taraf Romania\nRadio Hot Romania\nRadio Gangsta Dance\nRadio Gangsta Manele\n.977 Hitz\n.977 Mix\n.977 Alternative\nRadio BBC One UK\nDubstep.fm\nRadio Hit Romania\nRadio ClubMix Romania\nKiss FM Romania [Audio Plugin]\nRadio Zu Romania [Audio Plugin]\nRadio Popular\nTrap.FM\nRadio Tequila Hip Hop");
	ShowPlayerDialog(playerid, DIALOG_MP32, DIALOG_STYLE_LIST, "Mp3", strings, "Play", "Cancel");
    return 1;
}
CMD:carradio(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        new stringy[MAX_STRING],strings[500],listen[20];
		for(new x; x < 20; x++)
		{
			foreach(new i : Player)
			{
				if(Listening[i] == x) listen[x]++;
			}
		}
		format(strings, sizeof(strings), "Radio station\tListeners\n{FF0000}Turn Off Radio\t\nPro FM Romania\t%d\nRadio Bandit Romania\t%d\nRadio Taraf Romania\t%d\nRadio Hot Romania\t%d\nRadio Gangsta Dance\t%d\nRadio Gangsta Manele\t%d\n.977 Hitz\t%d\n",listen[0],listen[1],listen[2],listen[3],listen[4],listen[5],listen[6]);
		strcat(stringy, strings);
		format(strings, sizeof(strings), ".977 Mix\t%d\n.977 Alternative\t%d\nRadio BBC One UK\t%d\nDubstep.fm\t%d\nRadio Hit Romania\t%d\nRadio ClubMix Romania\t%d\nKiss FM Romania [Audio Plugin]\t%d\nRadio Zu Romania [Audio Plugin]\t%d\n",listen[7],listen[8],listen[9],listen[10],listen[11],listen[12],listen[13],listen[14]);
		strcat(stringy, strings);
		format(strings, sizeof(strings), "Radio Popular\t%d\nTrap.FM\t%d\nRadio Tequila Hip Hop\t%d",listen[15],listen[16],listen[17]);
        strcat(stringy, strings);
		ShowPlayerDialog(playerid, DIALOG_RADIO, DIALOG_STYLE_TABLIST_HEADERS, "Vehicle Radio", stringy, "Play", "Cancel");
    }
    return 1;
}
CMD:carmusic(playerid, params[]) return cmd_carradio(playerid, params);
CMD:jobs(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(CP[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1 && PlayerInfo[playerid][pJobVehicle] == 0 && BeeCar[playerid] == 0 && UsedFind[playerid] == 0 && InMinerJob[playerid] == 0 && InStrawberryJob[playerid] == 0 && PizzaCP[playerid] != 1 && busc[playerid] != 1 && Trucker[playerid] ==0)
	{
   	 	ShowPlayerDialog(playerid, DIALOG_JOBS, DIALOG_STYLE_LIST,"Jobs:", "Detective\nDrugs Dealer\nPizza Boy\nBus Driver\nMechanic\nArms Dealer\nGarbage\nFisherman\nTrucker\nFarmer\nCar Jacker\nMiner\nAir Transporter\nStrawberry Picker","Select", "Close");
		return 1;
	}
	else
	{
	    ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel checkpoint", "You are sure to cancel the current checkpoint?", "Yes", "No");
	}
	return 1;
}

CMD:event(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(activeevent == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} There is currently no active event running.");
   	new string[300],name[MAX_PLAYER_NAME];
   	foreach(new i : Player)
   	{
   		if(eventorganizer[i] == 1)
    	{
    		GetPlayerName(i, name, sizeof(name));
    	}
   	}
   	format(string, sizeof(string), "{FFFF00}Event: Title: %s Prize: $%s Location: %s Time: %s",eventtitle,FormatNumber(eventprize), eventlocation, eventtime);
   	SendClientMessage(playerid, 0xFFFFFFFF, string);
   	format(string, sizeof(string), "{FFFF00}Event: Organizer: %s Description: %s",name,eventdescription);
   	SendClientMessage(playerid, 0xFFFFFFFF, string);
   	return 1;
}
CMD:ev(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(eventorganizer[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You're not the organizer of the event.");
	new string[300],text[250];
	if(sscanf(params, "s[250]", text)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /ev [message]");
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	format(string, sizeof(string), "{7094DB}Event Organizer %s: %s", name, text);
	SendClientMessageToAll(0xFFFFFFFF, string);
	new var100[300],resulttt[300];
	mysql_real_escape_string(text, resulttt);
	mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','ev')", PlayerInfo[playerid][pSQLID], resulttt);
	mysql_tquery(SQL,var100,"","");
	return 1;
}
CMD:stopevent(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(activeevent == 0 && PlayerInfo[playerid][pAdmin] >= 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} There isn't any events active to stop.");
	if(eventorganizer[playerid] == 0 && PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not the organizer of the event.");
	foreach(new i : Player)
	{
		eventorganizer[i] = 0;
	}
	SendClientMessageToAll(COLOR_YELLOW, "Event over.");
	activeevent = 0;
	return 1;
}
CMD:acceptevent(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	if(activeevent == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} There is already an active event.");
	new eventid;
	if(sscanf(params, "d", eventid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /acceptevent [event id]");
	if(requestingevent[eventid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid event ID.");
	strmid(eventtitle, requestingtitle[eventid], 0, strlen(requestingtitle[eventid]));
	strmid(eventlocation, requestinglocation[eventid], 0, strlen(requestinglocation[eventid]));
	strmid(eventdescription, requestingdescription[eventid], 0, strlen(requestingdescription[eventid]));
	eventprize = requestingprize[eventid];
	strmid(eventtime, requestingtime[eventid], 0, strlen(requestingtime[eventid]));
	new string[300],name[MAX_PLAYER_NAME];
	GetPlayerName(eventid, name, sizeof(name));
 	format(string, sizeof(string), "Event: Title: %s Prize: $%s Location: %s Time: %s",eventtitle,FormatNumber(eventprize), eventlocation, eventtime);
   	SendClientMessageToAll(COLOR_YELLOW, string);
   	format(string, sizeof(string), "Event: Organizer: %s Description: %s",name,eventdescription);
	SendClientMessageToAll(COLOR_YELLOW, string);
	eventorganizer[eventid] = 1;
	requestingevent[eventid] = 0;
	activeevent = 1;
	new sendername[25];
	GetPlayerName(playerid,sendername,sizeof(sendername));
	format(string, sizeof(string), "Admin %s accepted %s event request.",sendername,name);
	ABroadCast(COLOR_YELLOW,string,1);
	return 1;
}
CMD:requestevent(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pWantedLevel] > 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You can't request an event while you have wanted.");
	if(activeevent == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} There is already an active event.");
	if(requestingevent[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have already requested an event.");
	if(PlayerInfo[playerid][pLevel] < 6) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need level 6 use this command.");
	new title[50], location[50], description[100], prize, time[50];
	if(sscanf(params, "p<|>s[50]s[50]s[50]s[100]d", title, location, time, description, prize)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /requestevent [title|location|time|description|prize]");
	if(strlen(title) < 1 || strlen(title) > 50) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Title characters must be between 1 and 50.");
	if(strlen(location) < 1 || strlen(location) > 50) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Location characters must be between 1 and 50.");
	if(strlen(time) < 1 || strlen(time) > 50) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Time characters must be between 1 and 50.");
	if(strlen(description) < 1 || strlen(description) > 100) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Description characters must be between 1 and 50.");
	if(prize < 10000 || prize > 1000000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Prize must be between 1.000$ and 1.000.000$.");
	new string[1000],name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	requestingevent[playerid] = 1;
	strmid(requestingtitle[playerid], title, 0, strlen(title));
	strmid(requestinglocation[playerid], location, 0, strlen(location));
	strmid(requestingdescription[playerid], description, 0, strlen(description));
	requestingprize[playerid] = prize;
	strmid(requestingtime[playerid], time, 0, strlen(time));
	format(string, sizeof(string), "Event %d has been requested, details are below.", playerid);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	format(string, sizeof(string), "Event: Title: %s Prize: $%s Location: %s Time: %s",title,FormatNumber(prize), location, time);
   	SendClientMessage(playerid, COLOR_YELLOW, string);
   	format(string, sizeof(string), "Event: Organizer: %s Description: %s",name,description);
   	SendClientMessage(playerid, COLOR_YELLOW, string);
	SendClientMessage(playerid, COLOR_YELLOW, "Your event is pending approval from an admin, please wait.");
	format(string, sizeof(string), "Event %d has been requested, details are below.", playerid);
	ABroadCast(COLOR_YELLOW,string,1);
	format(string, sizeof(string), "Event %d: Title: %s Prize: $%s Location: %s Time: %s",playerid,title,FormatNumber(prize), location, time);
   	ABroadCast(COLOR_YELLOW,string,1);
	format(string, sizeof(string), "Event %d: Organizer: %s Description: %s",playerid,name,description);
	ABroadCast(COLOR_YELLOW,string,1);
	format(string, sizeof(string), "Use [/acceptevent %d] to accept this event.", playerid);
	ABroadCast(COLOR_YELLOW,string,1);
	return 1;
}
CMD:rejectevent(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new id, reason[100],string[300];
	if(sscanf(params, "us[100]", id, reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /rejectevent [event id] [reason]");
	if(requestingevent[id] == 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Invalid event ID.");
	new receivername[MAX_PLAYER_NAME],sendername[MAX_PLAYER_NAME];
	requestingevent[id] = 0;
	GetPlayerName(playerid, sendername, sizeof(sendername));
	GetPlayerName(id, receivername, sizeof(receivername));
	format(string, sizeof(string), "{FFFF00}Admin %s has rejected your event, reason: %s", sendername, reason);
	SendClientMessage(id, 0xFFFFFFFF, string);
	format(string, sizeof(string), "{FFFF00}You rejected %s's event, reason: %s", receivername, reason);
	SendClientMessage(playerid, 0xFFFFFFFF, string);
	return 1;
}
CMD:events(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
    new string[300],tmpstring[100], titlestring[100], count = 0, name[MAX_PLAYER_NAME];
	foreach(new i : Player)
	{
		if(requestingevent[i] == 1)
 		{
  			GetPlayerName(i, name, sizeof(name));
    		format(tmpstring, sizeof(tmpstring), "Name: %s | ID: %d | Title: %s", name, i, requestingtitle[i]);
     		strcat(string, tmpstring);
      		count ++;
       	}
   	}
   	if(count == 0) return ShowPlayerDialog(playerid, DIALOG_PENDEVENT, DIALOG_STYLE_MSGBOX, "Pending Requests: 0", "There are no pending requests.", "Done", "");
   	format(titlestring, sizeof(titlestring), "Pending Requests: %d", count);
   	ShowPlayerDialog(playerid, 5345, DIALOG_STYLE_LIST, titlestring, string, "Close", "");
   	SendClientMessage(playerid, 0xFFFFFFFF, "{FFFF00}Use the command /cevent to check the pending event information.");
   	return 1;
}
CMD:cevent(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new eventid,string[300];
	if(sscanf(params, "u", eventid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /checkevent [event id]");
	if(requestingevent[eventid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid event ID.");
	new name[MAX_PLAYER_NAME];
	GetPlayerName(eventid, name, sizeof(name));
	format(string, sizeof(string), "{FFFF00}Event %d: Title: %s Prize: $%s Location: %s Time: %s",eventid,requestingtitle[eventid],FormatNumber(requestingprize[eventid]), requestinglocation[eventid], requestingtime[eventid]);
   	SendClientMessage(playerid, 0xFFFFFFFF, string);
	format(string, sizeof(string), "{FFFF00}Event %d: Organizer: %s Description: %s",eventid,name,requestingdescription[eventid]);
	SendClientMessage(playerid, 0xFFFFFFFF, string);
	format(string, sizeof(string), "{FFFF00}Use [/acceptevent %d] to accept this event.", eventid);
    SendClientMessage(playerid, 0xFFFFFFFF, string);
   	return 1;
}
CMD:attack(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new hour,minn,sec,y,m,d;
	gettime(hour,minn,sec);
	hour+=SERVER_HOUR_FIX;
	if(hour == 24) hour = 0;
	getdate(y,m,d);
	if(!IsAMember(playerid)) return SendClientMessage(playerid,COLOR_ERROR,"(Error){FFFFFF} You are not a member of a mafia.");
	if(PlayerInfo[playerid][pRank] < 4) return SendClientMessage(playerid,COLOR_ERROR,"(Error){FFFFFF} You don't have rank 4.");
	if(m == 12 && d == 25 || m == 12 && d == 26) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi aceasta comanda pe 25 sau 26 decembrie.","(Error){FFFFFF} You can't use this command on 25 or 26 December.");
	if(m == 1 && d == 1 || m == 1 && d == 2) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi aceasta comanda pe 1 sau pe 2 ianuarie.","(Error){FFFFFF} You can't use this command on 1 or 2 January");
	if(GetWeekDay() == 1 || GetWeekDay() == 4 || GetWeekDay() == 6) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} War-ul este permis doar Luni, Miercuri, Vineri si Duminica.","(Error){FFFFFF} War is allowed only Mondey, Wednesday, Friday and Sunday.");
	if(hour == 20 || hour == 21)
	{
		new turf,faction,string[128],sendername[MAX_PLAYER_NAME];
		for(new i = 1; i <= sizeof(TurfInfo); i++)
		{
			if(IsPlayerInTurf(playerid, i) == 1)
			{
				turf = i;
				break;
			}
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(turf == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not on a turf.");
		if(DeelayWar[PlayerInfo[playerid][pMember]] > 0)
		{
			format(string,sizeof(string),"(Error){FFFFFF} Your mafia can attack another turf in %d seconds.",DeelayWar[PlayerInfo[playerid][pMember]]);
			SendClientMessage(playerid, COLOR_ERROR, string);
			return 1;
		}
		faction = PlayerInfo[playerid][pMember];
		if(TurfInfo[turf][zOwned] == faction) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't attack your own turf.");
		if(WarInfo[turf][wAttacker] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Turf is already attacked.");
		if(InWar[faction] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have an active war.");
		if(InWar[TurfInfo[turf][zOwned]] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This mafia have active war.");
		new memberss;
		foreach(new i : Player)
		{
    		if(IsPlayerConnected(i))
    		{
        		if(PlayerInfo[i][pMember] == TurfInfo[turf][zOwned])
				{
		    		memberss ++;
				}
			}
		}
		if(memberss < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This mafia don't have members online.");
		WarInfo[turf][wTime] = 1200;
		WarInfo[turf][wAttacker] = faction;
		WarInfo[turf][wFaction] = TurfInfo[turf][zOwned];
		format(string,sizeof(string),"[TURF] %s from your group attacked turf %d (owned by %s).",sendername,turf,NumeFactiune(TurfInfo[turf][zOwned]));
		SendFamilyMessage(faction,COLOR_GREEN,string);
		format(string,sizeof(string),"[TURF] %s from %s attacked turf %d owned by you.",sendername,NumeFactiune(WarInfo[turf][wAttacker]),turf);
		SendFamilyMessage(TurfInfo[turf][zOwned],COLOR_GREEN,string);
		new Cache: abs = mysql_query(SQL, "SELECT * FROM wars");
		new warid = cache_get_row_count() + 1;
		cache_delete(abs);
		format(string, sizeof(string),"[WAR] %s started a war with %s (war id: %d).",NumeFactiune(WarInfo[turf][wAttacker]),NumeFactiune(TurfInfo[turf][zOwned]),warid);
		ABroadCast(COLOR_ADMCOMMANDS,string,1);
		DynamicFactions[WarInfo[turf][wAttacker]][fWarTurf] = turf;
		DynamicFactions[TurfInfo[turf][zOwned]][fWarTurf] = turf;
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pMember] == TurfInfo[turf][zOwned] || PlayerInfo[i][pMember] == WarInfo[turf][wAttacker])
			{
				SetPlayerVirtualWorld(i, DynamicFactions[PlayerInfo[i][pMember]][fWarTurf]);
				SS(i, COLOR_YELLOW, "Ai fost teleportat intr-un virtual world unde sunt prezenti doar jucatorii ce participa la war.","You have been teleported in virtual wold where are present only players who play on war.");
			}
		}
		if(WarInfo[turf][wAttacker] == 4 || TurfInfo[turf][zOwned] == 4)
		{
			for(new x = 0; x < sizeof(VehicleInfo); x++)
			{
				if(VehicleInfo[x][vehGroup] == 4)
				{
					SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], turf);
				}
			}
		}
		if(WarInfo[turf][wAttacker] == 5 || TurfInfo[turf][zOwned] == 5)
		{
			for(new x = 0; x < sizeof(VehicleInfo); x++)
			{
				if(VehicleInfo[x][vehGroup] == 5)
				{
					SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], turf);
				}
			}
		}
		if(WarInfo[turf][wAttacker] == 6 || TurfInfo[turf][zOwned] == 6)
		{
			for(new x = 0; x < sizeof(VehicleInfo); x++)
			{
				if(VehicleInfo[x][vehGroup] == 6)
				{
					SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], turf);
				}
			}
		}
		if(WarInfo[turf][wAttacker] == 10 || TurfInfo[turf][zOwned] == 10)
		{
			for(new x = 0; x < sizeof(VehicleInfo); x++)
			{
				if(VehicleInfo[x][vehGroup] == 10)
				{
					SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], turf);
				}
			}
		}
		worstscoreat[turf] = 0;
		worstmemberat[turf] = 999;
		bestscoreat[turf] = 0;
		bestmemberat[turf] = 999;
		worstscoredf[turf] = 0;
		worstmemberdf[turf] = 999;
		bestscoredf[turf] = 0;
		bestmemberdf[turf] = 999;
		InWar[TurfInfo[turf][zOwned]] = 1;
		InWar[faction] = 1;
		waitwar[faction] = 60;
	}
	else return SendClientMessage(playerid,COLOR_ERROR,"(Error){FFFFFF} War must be between 20:00 and 22:00.");
	return 1;
}
CMD:turfs(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(TurfsDisp[playerid] == 0)
	{
		TurfsDisp[playerid] = 1;
		for(new i = 0; i < sizeof(Turfs); i++)
 		{
			if(TurfInfo[i][zOwned] == 4)
			{
				GangZoneShowForPlayerEx(playerid, Turfs[i], 0x18EBD6C8); //Los Aztecas
			}
			if(TurfInfo[i][zOwned] == 5)
			{
				GangZoneShowForPlayerEx(playerid, Turfs[i], 0x40863CAA); //Grove Street
			}
			if(TurfInfo[i][zOwned] == 6)
			{
				GangZoneShowForPlayerEx(playerid, Turfs[i], 0xFFAE00C8); //Los Vagos
			}
			if(TurfInfo[i][zOwned] == 10)
			{
				GangZoneShowForPlayerEx(playerid, Turfs[i], 0xBD1CDEC8); //Ballas
			}
			if(TurfInfo[i][zOwned] == 15)
			{
				GangZoneShowForPlayerEx(playerid, Turfs[i], 0x46210EFF); //Ballas
			}
		}
	}
	else
	{
		TurfsDisp[playerid] = 0;
		for(new i = 0; i < sizeof(Turfs); i++)
		{
			GangZoneHideForPlayerEx(playerid, Turfs[i]);
		}
	}
	return 1;
}
CMD:gdeposit(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new x = PlayerInfo[playerid][pMember], string[128], cashdeposit, item[30], name[30];
	if(x <= 0) return 1;
	if(sscanf(params, "s[30]d", item, cashdeposit))
	{
		SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gdeposit [money, materials or drugs] [amount]");
		format(string, sizeof(string), "Safe balance: $%d, %d materials, %d grams of drugs", DynamicFactions[x][fBank], DynamicFactions[x][fMats], DynamicFactions[x][fDrugs]);
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}
	GetPlayerName(playerid, name, sizeof(name));
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, DynamicFactions[x][fSafePos][0], DynamicFactions[x][fSafePos][1], DynamicFactions[x][fSafePos][2])) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You must be at your group safe to do this.");
	if(strcmp(item, "money", true) == 0)
	{
		if(GetPlayerCash(playerid) >= cashdeposit)
		{
			if(cashdeposit < 100 || cashdeposit > 1000000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Value must be between 100$ and 1.000.000$.");
			DynamicFactions[x][fBank] += cashdeposit;
			GivePlayerCash(playerid, -cashdeposit);
			format(string, sizeof(string), "You have deposited $%d in your group safe.", cashdeposit);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s deposits $%d in their group safe.", name, cashdeposit);
			ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			new str[184];
			mysql_format(SQL,str,sizeof(str),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'", DynamicFactions[x][fBank], x);
			mysql_tquery(SQL,str,"","");
			PlayerInfo[playerid][Raport6]+=cashdeposit;
			Update(playerid, Raport6x);
		 	return 1;
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have that amount of money.");
	}
	else if(strcmp(item, "materials", true) == 0)
	{
		if(cashdeposit <= PlayerInfo[playerid][pMats])
		{
			if(cashdeposit < 10 || cashdeposit > 100000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Value must be between 10 and 100.000.");
			PlayerInfo[playerid][pMats] = PlayerInfo[playerid][pMats]-cashdeposit;
			DynamicFactions[x][fMats] += cashdeposit;
            format(string, sizeof(string), "You have deposited %d materials in your group safe.", cashdeposit);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s deposits %d materials in their group safe.", name, cashdeposit);
			ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			new str[256];
			mysql_format(SQL,str,sizeof(str),"UPDATE `factions` SET `Mats`='%d' WHERE `ID`='%d'", DynamicFactions[x][fMats], x);
			mysql_tquery(SQL,str,"","");
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Materials`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pMats], PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
			return 1;
		}
 		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have that amount of materials.");
	}
	else if(strcmp(item, "drugs", true) == 0)
	{
		if(cashdeposit <= PlayerInfo[playerid][pDrugs])
		{
			if(cashdeposit < 10 || cashdeposit > 100) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Value must be between 10 and 100.");
			PlayerInfo[playerid][pDrugs] = PlayerInfo[playerid][pDrugs]-cashdeposit;
			DynamicFactions[x][fDrugs] += cashdeposit;
			format(string, sizeof(string), "You have deposited %d drugs in your group safe.", cashdeposit);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s deposits %d drugs in their group safe.", name, cashdeposit);
			ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			new str[184];
			mysql_format(SQL,str,sizeof(str),"UPDATE `factions` SET `Drugs`='%d' WHERE `ID`='%d'", DynamicFactions[x][fDrugs], x);
			mysql_tquery(SQL,str,"","");
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Drugs`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pDrugs], PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
		}
 		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have that amount of drugs.");
	}
	else return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gdeposit [money, materials or drugs] [amount]");
	return 1;
}
CMD:gwithdraw(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pMember] >= 1) SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Command removed. Use /givesalary, /givebonus and /clearsalaries.");
	return 1;
}
CMD:givesalary(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pMember] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in a group.");
	if(PlayerInfo[playerid][pRank] < 6) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have rank 6.");
	new id,string[128],sendername[30],giveplayer[30];
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /givesalary [name/playerid]");
	if(PlayerInfo[id][pMember] != PlayerInfo[playerid][pMember]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not your member.");
	if(PlayerInfo[id][pPaydayON] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player don't have an online payday.");
	if(IsPlayerConnected(id))
	{
		new suma = PlayerInfo[id][pPaydayON] * PlayerInfo[id][pLevel] * 1000;
		GivePlayerCash(id, suma);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerName(id, giveplayer, sizeof(giveplayer));
		format(string,sizeof(string),"Faction manager %s paid a salary of $%s to %s (%d paydays online).",sendername,FormatNumber(suma),giveplayer,PlayerInfo[id][pPaydayON]);
		SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);
		PlayerInfo[id][pPaydayON] = 0;
		Update(id, pPaydayONx);
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	return 1;
}
CMD:clearsalaries(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pMember] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in a group.");
	if(PlayerInfo[playerid][pRank] < 6) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have rank 6.");
	ShowPlayerDialog(playerid,DIALOG_CLEARSALARIES,DIALOG_STYLE_MSGBOX,"Esti sigur?","Esti sigur ca vrei sa stergi toate salariile si sa adaugi banii in seiful grupului?\nFoloseste aceasta actiune doar daca toti membrii si-au primit salariile.","Da","Nu");
	return 1;
}
CMD:givebonus(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pMember] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in a group.");
	if(PlayerInfo[playerid][pRank] < 6) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have rank 6.");
	new id,string[128],sendername[30],giveplayer[30],suma;
	if(sscanf(params, "ud", id, suma)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /givebonus [name/playerid] [money]");
	if(PlayerInfo[id][pMember] != PlayerInfo[playerid][pMember]) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} This player is not your member.");
	if(DynamicFactions[PlayerInfo[playerid][pMember]][fBank] >= suma)
	{
		if(IsPlayerConnected(id))
		{
			GivePlayerCash(id, suma);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			format(string,sizeof(string),"Faction manager %s paid a bonus of $%s to %s.",sendername,FormatNumber(suma),giveplayer);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, string);
			DynamicFactions[PlayerInfo[playerid][pMember]][fBank] -= suma;
			new str[184];
			mysql_format(SQL,str,sizeof(str),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'",DynamicFactions[PlayerInfo[playerid][pMember]][fBank],PlayerInfo[playerid][pMember]);
			mysql_tquery(SQL,str,"","");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Not enough money in faction safe.");
	return 1;
}
CMD:gov(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pMember] == 14)
	{
		if(PlayerInfo[playerid][pRank] < 6) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need rank 6 to use this command.");
		new string[300],textgov[128],sendername[MAX_PLAYER_NAME];
	    GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "s[128]", textgov)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gov [message]");
    	format(string, sizeof(string), "------ Government Announcement (%s) ------", DynamicFactions[PlayerInfo[playerid][pMember]][fName]);
        SendClientMessageToAll(COLOR_TEAL, string);
		if(PlayerInfo[playerid][pRank] == 6)
		{
	    	format(string, sizeof(string), "* %s %s: %s", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6], sendername, textgov);
		}
		else
		{
	    	format(string, sizeof(string), "* %s %s: %s", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7], sendername, textgov);
		}
    	SendClientMessageToAll(COLOR_BLUE, string);
	}
    else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a cop or a paramedic.");
	return 1;
}
CMD:order(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5 ||
	PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10)
    {
		if(PlayerInfo[playerid][pGunLic] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have gun license.");
		if(GetPlayerInterior(playerid) == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your faction HQ.");
		new fid = PlayerInfo[playerid][pMember];
	    if(IsPlayerInRangeOfPoint(playerid, 50.0, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]) && GetPlayerVirtualWorld(playerid) == DynamicFactions[fid][fVirtual])
        {
    	    new x_nr[50],
    	    	x = PlayerInfo[playerid][pMember];
	        if(sscanf(params, "s[50]",x_nr))
	        {
    	  	    SendClientMessage(playerid, COLOR_WHITE, "Usage: /order [1-7]");
	        	SendClientMessage(playerid, COLOR_WHITE, "(1) Deagle | (2) Shotgun | (3) M4 | (4) AK47");
	        	SendClientMessage(playerid, COLOR_WHITE, "(5) MP5 | (6) Rifle | (7) Katana");
	        	return 1;
        	}
            if(strcmp(x_nr,"1",true) == 0)
         	{
                if(DynamicFactions[x][fMats] <= 119) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Your gang doesn't have 120 materials.");
 	        	if(GetPlayerCash(playerid) <= 1199) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have $120.");
				GivePlayerWeaponEx(playerid, 24, 200);
				DynamicFactions[x][fMats] -= 120;
				DynamicFactions[x][fBank] += 120;
				GivePlayerCash(playerid, -120);
				new str2[184];
				mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],DynamicFactions[x][fMats],x);
				mysql_tquery(SQL,str2,"","");
				SendClientMessage(playerid, COLOR_WHITE,"You bought a Deagle for $120 (120 materials from gang seif).");
	           	return 1;
  	        }
            if(strcmp(x_nr,"2",true) == 0)
         	{
				if(DynamicFactions[x][fMats] <= 149) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Your gang doesn't have 150 materials.");
 	        	if(GetPlayerCash(playerid) <= 1499) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have $150.");
      	        GivePlayerWeaponEx(playerid, 25, 200);
				DynamicFactions[x][fMats] -= 150;
				DynamicFactions[x][fBank] += 150;
				GivePlayerCash(playerid, -150);
				new str2[184];
				mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],DynamicFactions[x][fMats],x);
				mysql_tquery(SQL,str2,"","");
				SendClientMessage(playerid, COLOR_WHITE,"You bought a Shotgun for $150 (150 materials from gang seif).");
     			return 1;
    		}
    		if(strcmp(x_nr,"3",true) == 0)
          	{
				if(DynamicFactions[x][fMats] <= 199) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Your gang doesn't have 200 materials.");
 	        	if(GetPlayerCash(playerid) <= 1999) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have $200.");
    			GivePlayerWeaponEx(playerid, 31, 200);
				DynamicFactions[x][fMats] -= 200;
				DynamicFactions[x][fBank] += 200;
				GivePlayerCash(playerid, -200);
				new str2[184];
				mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],DynamicFactions[x][fMats],x);
				mysql_tquery(SQL,str2,"","");
				SendClientMessage(playerid, COLOR_WHITE,"You bought a M4 for $200 (200 materials from gang seif).");
		        return 1;
	        }
        	if(strcmp(x_nr,"4",true) == 0)
         	{
				if(DynamicFactions[x][fMats] <= 199) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Your gang doesn't have 200 materials.");
 	        	if(GetPlayerCash(playerid) <= 1999) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have $200.");
          		GivePlayerWeaponEx(playerid, 30, 200);
				DynamicFactions[x][fMats] -= 200;
				DynamicFactions[x][fBank] += 200;
				GivePlayerCash(playerid, -200);
				new str2[184];
				mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],DynamicFactions[x][fMats],x);
				mysql_tquery(SQL,str2,"","");
				SendClientMessage(playerid, COLOR_WHITE,"You bought a Ak47 for $200 (200 materials from gang seif).");
	         	return 1;
	        }
     		if(strcmp(x_nr,"5",true) == 0)
          	{
				if(DynamicFactions[x][fMats] <= 149) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Your gang doesn't have 150 materials.");
 	        	if(GetPlayerCash(playerid) <= 1499) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have $150.");
                GivePlayerWeaponEx(playerid, 29, 200);
				DynamicFactions[x][fMats] -= 150;
				DynamicFactions[x][fBank] += 150;
				GivePlayerCash(playerid, -150);
				new str2[184];
				mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],DynamicFactions[x][fMats],x);
				mysql_tquery(SQL,str2,"","");
				SendClientMessage(playerid, COLOR_WHITE,"You bought a MP5 for $150 (150 materials from gang seif).");
	         	return 1;
	        }
	        if(strcmp(x_nr,"6",true) == 0)
          	{
				if(DynamicFactions[x][fMats] <= 149) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Your gang doesn't have 150 materials.");
 	        	if(GetPlayerCash(playerid) <= 1499) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have $150.");
                GivePlayerWeaponEx(playerid, 33, 200);
				DynamicFactions[x][fMats] -= 150;
				DynamicFactions[x][fBank] += 150;
				GivePlayerCash(playerid, -150);
				new str2[184];
				mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],DynamicFactions[x][fMats],x);
				mysql_tquery(SQL,str2,"","");
				SendClientMessage(playerid, COLOR_WHITE,"You bought a Rifle for $150 (150 materials from gang seif).");
	         	return 1;
	        }
	        if(strcmp(x_nr,"7",true) == 0)
          	{
				if(DynamicFactions[x][fMats] <= 99) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Your gang doesn't have 100 materials.");
 	        	if(GetPlayerCash(playerid) <= 999) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have $100.");
                GivePlayerWeaponEx(playerid, 8, 1);
				DynamicFactions[x][fMats] -= 100;
				DynamicFactions[x][fBank] += 100;
				GivePlayerCash(playerid, -100);
				new str2[184];
				mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],DynamicFactions[x][fMats],x);
				mysql_tquery(SQL,str2,"","");
				SendClientMessage(playerid, COLOR_WHITE,"You bought a Katana for $100 (100 materials from gang seif).");
	         	return 1;
	        }
        }
        else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your faction HQ.");
    }
    else if(PlayerInfo[playerid][pMember] == 11)
    {
        if(PlayerInfo[playerid][pGunLic] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have gun license.");
		if(GetPlayerInterior(playerid) == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your faction HQ.");
	    if(IsPlayerInRangeOfPoint(playerid, 50.0, DynamicFactions[11][fcX], DynamicFactions[11][fcY], DynamicFactions[11][fcZ]) && GetPlayerVirtualWorld(playerid) == DynamicFactions[11][fVirtual])
        {
            new x_nr[50],
    	    	x = PlayerInfo[playerid][pMember];
	        if(sscanf(params, "s[50]",x_nr))
	        {
    	  	    SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /order [item]");
	        	SendClientMessage(playerid, COLOR_WHITE, "1 - sniper, 2 - rifle. price: $1000");
	        	return 1;
        	}
        	if(strcmp(x_nr,"1",true) == 0)
         	{
                if(GetPlayerMoney(playerid) >= 100)
                {
                    GivePlayerWeaponEx(playerid, 4, 1);
 	        		GivePlayerWeaponEx(playerid, 23, 50);
 	        		GivePlayerWeaponEx(playerid, 34, 50);
 	        		GivePlayerCash(playerid, -100);
					DynamicFactions[x][fBank] += 100;
					new str2[184];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],x);
					mysql_tquery(SQL,str2,"","");
	        	}
        		else
        		{
	        		SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have $100.");
                }
	           	return 1;
  	        }
  	        if(strcmp(x_nr,"2",true) == 0)
         	{
                if(GetPlayerMoney(playerid) >= 100)
                {
                    GivePlayerWeaponEx(playerid, 4, 1);
 	        		GivePlayerWeaponEx(playerid, 23, 50);
 	        		GivePlayerWeaponEx(playerid, 33, 50);
 	        		GivePlayerCash(playerid, -100);
					DynamicFactions[x][fBank] += 100;
					new str2[184];
					mysql_format(SQL,str2,sizeof(str2),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'",DynamicFactions[x][fBank],x);
					mysql_tquery(SQL,str2,"","");
	        	}
        		else
        		{
	        		SendClientMessage(playerid, COLOR_WHITE,"Nu ai $100.");
                }
	           	return 1;
  	        }
		}
		else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You are not in your faction HQ.");
	}
    return 1;
}
CMD:megaphone(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new tmpcar = GetPlayerVehicleID(playerid),textmeg[250],sendername[MAX_PLAYER_NAME],string[200];
	GetPlayerName(playerid, sendername, sizeof(sendername));
	if(PlayerInfo[playerid][pMuted] == 1)
    {
		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
		else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
		SendClientMessage(playerid, COLOR_DARKPINK, string);
		return 1;
	}
	if(sscanf(params, "s[250]", textmeg)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /m [message]");
	if(IsACop(playerid))
	{
		if(!Copcar2(tmpcar)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in a police car.");
		if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
		{
			format(string, sizeof(string), "(megaphone) Politist %s: %s", sendername, textmeg);
			ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		}
		else if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2)
		{
			format(string, sizeof(string), "(megaphone) Agent %s: %s", sendername, textmeg);
			ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		}
		else if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3)
		{
			format(string, sizeof(string), "(megaphone) Soldat %s: %s", sendername, textmeg);
			ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		}
		else if(PlayerInfo[playerid][pMember] == 8||PlayerInfo[playerid][pLeader] == 8)
		{
			format(string, sizeof(string), "(megaphone) Politist %s: %s", sendername, textmeg);
			ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		}
		new var100[300],resulttt[300],strr[300];
		format(strr, sizeof(strr),"(megaphone) %s: %s", sendername, textmeg);
		mysql_real_escape_string(strr, resulttt);
		mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','m')", PlayerInfo[playerid][pSQLID], resulttt);
		mysql_tquery(SQL,var100,"","");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a cop.");
	return 1;
}
CMD:m(playerid, params[]) return cmd_megaphone(playerid, params);
CMD:radio(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new radiomsj[250],sendername[MAX_PLAYER_NAME],string[256],member = PlayerInfo[playerid][pMember],leader = PlayerInfo[playerid][pLeader];
    if(PlayerInfo[playerid][pMuted] == 1)
    {
		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
		else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
		SendClientMessage(playerid, COLOR_DARKPINK, string);
		return 1;
	}
	GetPlayerName(playerid, sendername, sizeof(sendername));
	if(sscanf(params, "s[250]", radiomsj)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /r [message]");
	if(member == 1 || leader == 1 || member == 2 || leader == 2 || member == 3 || leader == 3 || member == 8 || leader == 8 || member == 14 || leader == 14)
	{
		if(gFam[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have disabled radio chat, use /togf to enable.");
		if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "*** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7], sendername, radiomsj); }
		else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6], sendername, radiomsj); }
		else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5], sendername, radiomsj); }
		else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4], sendername, radiomsj); }
		else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3], sendername, radiomsj); }
		else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2], sendername, radiomsj); }
		else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, radiomsj); }
		else
		{
			format(string, sizeof(string), "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, radiomsj);
		}
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pMember] == member && !gFam[i]) SendSplitMessage(i, COLOR_RADIOCHAT, string);
			if(FactionSpec[i] == member && PlayerInfo[i][pAdmin] >= 1) SendSplitMessage(i, COLOR_RADIOCHAT, string);
		}
		format(string, sizeof(string), "(radio) ''%s''",params);
		SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
		new var100[300],resulttt[300],strr[300];
		format(strr, sizeof(strr),"(radio) %s: %s", sendername, radiomsj);
		mysql_real_escape_string(strr, resulttt);
		mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','r')", PlayerInfo[playerid][pSQLID], resulttt);
		mysql_tquery(SQL,var100,"","");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Your group data is invalid.");
	return 1;
}
CMD:r(playerid, params[]) return cmd_radio(playerid, params);
CMD:duty(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
   	if(PlayerInfo[playerid][pMember] == 0 || PlayerInfo[playerid][pMember] == 7) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use this command.");
	new string[200],sendername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, sendername, sizeof(sendername));
	if(IsACop(playerid))
	{ 
		if(PlayerInfo[playerid][pGunLic] == 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You don't have gun license.");
		if(InHouse[playerid] > 0 || IsPlayerInRangeOfPoint(playerid, 100.0, DynamicFactions[1][fcX], DynamicFactions[1][fcY], DynamicFactions[1][fcZ]) || IsPlayerInRangeOfPoint(playerid, 100.0, DynamicFactions[2][fcX], DynamicFactions[2][fcY], DynamicFactions[2][fcZ]) || IsPlayerInRangeOfPoint(playerid, 100.0, DynamicFactions[3][fcX], DynamicFactions[3][fcY], DynamicFactions[3][fcZ])
		|| IsPlayerInRangeOfPoint(playerid, 100.0, DynamicFactions[8][fcX], DynamicFactions[8][fcY], DynamicFactions[8][fcZ]))
		{
			if(OnDuty[playerid] == 0)
	        {
           		if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
             	{
		      		format(string, sizeof(string), "* Officer %s took a Badge and a Gun from his locker.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerWeaponEx(playerid, 24, 500);
					GivePlayerWeaponEx(playerid, 3, 1);
					GivePlayerWeaponEx(playerid, 41, 500);
					GivePlayerWeaponEx(playerid, 29, 1000);
					GivePlayerWeaponEx(playerid, 31, 1000);
					SetPlayerArmourEx(playerid, 100);
					SetPlayerHealthEx(playerid, 100);
					OnDuty[playerid] = 1;
				}
				if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
            	{
		      		format(string, sizeof(string), "* Officer %s took a Badge and a Gun from his locker.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerWeaponEx(playerid, 24, 500);
					GivePlayerWeaponEx(playerid, 3, 1);
					GivePlayerWeaponEx(playerid, 41, 500);
					GivePlayerWeaponEx(playerid, 29, 1000);
					GivePlayerWeaponEx(playerid, 31, 1000);
					SetPlayerArmourEx(playerid, 100);
					SetPlayerHealthEx(playerid, 100);
					OnDuty[playerid] = 1;
				}
				if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
            	{
		      		format(string, sizeof(string), "* Officer %s took a Badge and a Gun from his locker.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerWeaponEx(playerid, 24, 500);
					GivePlayerWeaponEx(playerid, 41, 500);
					GivePlayerWeaponEx(playerid, 29, 1000);
					GivePlayerWeaponEx(playerid, 31, 1000);
					SetPlayerArmourEx(playerid, 100);
					SetPlayerHealthEx(playerid, 100);
					OnDuty[playerid] = 1;
				}
				if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
            	{
		      		format(string, sizeof(string), "* Officer %s took a Badge and a Gun from his locker.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerWeaponEx(playerid, 24, 500);
					GivePlayerWeaponEx(playerid, 3, 1);
					GivePlayerWeaponEx(playerid, 41, 500);
					GivePlayerWeaponEx(playerid, 29, 1000);
					GivePlayerWeaponEx(playerid, 31, 1000);
					SetPlayerArmourEx(playerid, 100);
					SetPlayerHealthEx(playerid, 100);
					OnDuty[playerid] = 1;
				}
				SetPlayerSkinEx(playerid);
				SetPlayerToTeamColor(playerid);
			}
			else if(OnDuty[playerid] == 1)
			{
				format(string, sizeof(string), "* Officer %s places his Badge and Gun in his locker.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				OnDuty[playerid] = 0;
				SetPlayerArmourEx(playerid, 0);
				ResetPlayerWeaponsEx(playerid);
				ResetPlayerWeapons(playerid);
				SetPlayerSkinEx(playerid);
				SetPlayerToTeamColor(playerid);
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in a locker room or a house.");
	}
	else if(PlayerInfo[playerid][pMember] != 0 && PlayerInfo[playerid][pMember] != 7)
	{
		if(InHouse[playerid] > 0 || InHQ[playerid] > 0)
		{
			if(OnDuty[playerid] == 0)
	        {
	        	OnDuty[playerid] = 1;
	        	SetPlayerSkinEx(playerid);
	        	SendClientMessage(playerid, COLOR_YELLOW, "You are now on duty!");
	        }
	        else
	        {
	        	OnDuty[playerid] = 0;
	        	SetPlayerSkinEx(playerid);
	        	SendClientMessage(playerid, COLOR_YELLOW, "You are now off duty!");
	        }
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in a locker room or a house.");
	}
	return 1;
}
CMD:departments(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string[256],sendername[MAX_PLAYER_NAME],depmsj[250],member = PlayerInfo[playerid][pMember],leader = PlayerInfo[playerid][pLeader];
    if(PlayerInfo[playerid][pMuted] == 1)
    {
		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
		else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
		SendClientMessage(playerid, COLOR_DARKPINK, string);
		return 1;
	}
	GetPlayerName(playerid, sendername, sizeof(sendername));
	if(sscanf(params, "s[250]", depmsj)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /d [message]");
	if(member == 2 || leader == 2 || member == 3 || leader == 3)
	{
		if(gFam[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have disabled radio chat, use /togf to enable.");
		if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "*** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7], sendername, depmsj); }
  		else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6], sendername, depmsj); }
		else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5], sendername, depmsj); }
		else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4], sendername, depmsj); }
		else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3], sendername, depmsj); }
		else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2], sendername, depmsj); }
		else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj); }
		else
		{
			format(string, sizeof(string), "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj);
		}
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pMember] == 3 || PlayerInfo[i][pMember] == 8)
			{
				if(!gFam[i]) SendSplitMessage(i, COLOR_ALLDEPT, string);
			}
		}
		format(string, sizeof(string), "(radio) ''%s''",params);
		SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
		new var100[300],resulttt[300],strr[300];
		format(strr, sizeof(strr),"(radio) %s: %s", sendername, depmsj);
		mysql_real_escape_string(strr, resulttt);
		mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','d')", PlayerInfo[playerid][pSQLID], resulttt);
		mysql_tquery(SQL,var100,"","");
		return 1;
	}
	if(member == 1 || leader == 1)
	{
		if(gFam[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have disabled radio chat, use /togf to enable.");
		if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "*** LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7], sendername, depmsj); }
  		else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6], sendername, depmsj); }
		else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5], sendername, depmsj); }
		else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4], sendername, depmsj); }
		else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3], sendername, depmsj); }
		else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2], sendername, depmsj); }
		else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj); }
		else
		{
			format(string, sizeof(string), "* LS %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj);
		}
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pMember] == 3 || PlayerInfo[i][pMember] == 8)
			{
				if(!gFam[i]) SendSplitMessage(i, COLOR_ALLDEPT, string);
			}
		}
		format(string, sizeof(string), "(radio) ''%s''",params);
		SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
		new var100[300],resulttt[300],strr[300];
		format(strr, sizeof(strr),"(radio) %s: %s", sendername, depmsj);
		mysql_real_escape_string(strr, resulttt);
		mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','d')", PlayerInfo[playerid][pSQLID], resulttt);
		mysql_tquery(SQL,var100,"","");
		return 1;
	}
	if(member == 8 || leader == 8)
	{
		if(gFam[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have disabled radio chat, use /togf to enable.");
		if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "*** LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7], sendername, depmsj); }
  		else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6], sendername, depmsj); }
		else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5], sendername, depmsj); }
		else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4], sendername, depmsj); }
		else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3], sendername, depmsj); }
		else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "* LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2], sendername, depmsj); }
		else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "* LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj); }
		else
		{
			format(string, sizeof(string), "* LV %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sendername, depmsj);
		}
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pMember] == 3 || PlayerInfo[i][pMember] == 8)
			{
				if(!gFam[i]) SendSplitMessage(i, COLOR_ALLDEPT, string);
			}
		}
		format(string, sizeof(string), "(radio) ''%s''",params);
		SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
		new var100[300],resulttt[300],strr[300];
		format(strr, sizeof(strr),"(radio) %s: %s", sendername, depmsj);
		mysql_real_escape_string(strr, resulttt);
		mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','d')", PlayerInfo[playerid][pSQLID], resulttt);
		mysql_tquery(SQL,var100,"","");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This group does not have an official radio frequency.");
	return 1;
}
CMD:d(playerid, params[]) return cmd_departments(playerid, params);
CMD:confiscate(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsACop(playerid))
    {
        if(OnDuty[playerid] != 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not on duty.");
        new x_nr[15],giveplayerid,string[256],giveplayer[25],sendername[25];
		if(sscanf(params, "us[15]",giveplayerid,x_nr))
		{
			SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /confiscate [name/playerid] [item]");
	  		SendClientMessage(playerid, COLOR_WHITE, "Items: Licence, Drugs,  Weapons.");
			return 1;
		}
		if(playerid == giveplayerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use this command on you.");
		GetPlayerName(playerid,sendername,sizeof(sendername));
		GetPlayerName(giveplayerid,giveplayer,sizeof(giveplayer));
	    if(strcmp(x_nr,"licence",true) == 0)
		{
			if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in LSPD or LVPD.");
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, giveplayerid))
					{
						if(PlayerInfo[giveplayerid][pCarLic] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player don't have a driving licence.");
						if(PlayerHandsup[giveplayerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This isn't with hands up.");
						format(string, sizeof(string), "* %s has confiscated %s's driving license.", sendername, giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SendTeamMessage(8, COLOR_LIGHTBLUE, string);
						SendTeamMessage(3, COLOR_LIGHTBLUE, string);
						SendTeamMessage(2, COLOR_LIGHTBLUE, string);
						SendTeamMessage(1, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "You have confiscated %s's driving license.", giveplayer);
				        SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "%s has confiscated your driving license.", sendername);
				        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						PlayerInfo[giveplayerid][pCarLicSuspend] = 2;
				        PlayerInfo[giveplayerid][pCarLic] = 0;
				        PlayerInfo[giveplayerid][pCarLicT] = 0;
						Update(giveplayerid, pCarLicSuspendx);
						Update(giveplayerid, pCarLicx);
						PlayerInfo[playerid][Raport4]++;
						Update(playerid, Raport4x);
					}
					else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
			    }
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
		}
		else if(strcmp(x_nr,"weapons",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, giveplayerid))
					{
						format(string, sizeof(string), "* %s has confiscated %s's weapons.", sendername, giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SendTeamMessage(8, COLOR_LIGHTBLUE, string);
						SendTeamMessage(3, COLOR_LIGHTBLUE, string);
						SendTeamMessage(2, COLOR_LIGHTBLUE, string);
						SendTeamMessage(1, COLOR_LIGHTBLUE, string);
				        format(string, sizeof(string), "You have confiscated %s's weapons.", giveplayer);
				        SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "%s has confiscated your weapons.", sendername);
				        SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        ResetPlayerWeaponsEx(giveplayerid);
				        ResetPlayerWeapons(giveplayerid);
					}
					else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
			    }
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
		}
		else if(strcmp(x_nr,"drugs",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, giveplayerid))
					{
						if(PlayerInfo[giveplayerid][pDrugs] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player don't have drugs.");
					    format(string, sizeof(string), "* %s has confiscated %s's drugs.", sendername, giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SendTeamMessage(8, COLOR_LIGHTBLUE, string);
						SendTeamMessage(3, COLOR_LIGHTBLUE, string);
						SendTeamMessage(2, COLOR_LIGHTBLUE, string);
						SendTeamMessage(1, COLOR_LIGHTBLUE, string);
				        format(string, sizeof(string), "You have confiscated %s's drugs.", giveplayer);
				        SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "%s has confiscated your drugs.", sendername);
				        SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        PlayerInfo[giveplayerid][pDrugs] = 0;
						new str[128];
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Drugs`='0' WHERE `name`='%s'",PlayerInfo[giveplayerid][pNormalName]);
						mysql_tquery(SQL,str,"","");
						PlayerInfo[playerid][Raport5]++;
						Update(playerid, Raport5x);
					}
					else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
			    }
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Unknown take name.");
    }
    else return SendClientMessage(playerid,  COLOR_ERROR, "(Error){FFFFFF} You are not a cop.");
    return 1;
}
CMD:mdc(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsACop(playerid) || PlayerInfo[playerid][pAdmin] >= 1)
	{
		new id,string[256],sendername[MAX_PLAYER_NAME];
		if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /mdc [name/playerid]");
		{
			if(IsPlayerConnected(id))
			{
				GetPlayerName(id, sendername, sizeof(sendername));
				if(PlayerInfo[id][pWantedLevel] > 0)
				{
					format(string, sizeof(string), "-- MDC [ID %d - %s][{FFFF00}W:%d{FFFFFF}][Chased by %d cops][Wanted expires in %d mins]",id, sendername, PlayerInfo[id][pWantedLevel], cased[id], wantedlost[id]/60+1);
				}
				else if(PlayerInfo[id][pWantedLevel] < 1)
				{
					format(string, sizeof(string), "-- MDC [ID %d - %s][not wanted]",id, sendername);
				}
				SendClientMessage(playerid, COLOR_WHITE,string);
				if(strcmp(PlayerInfo[id][pCrime1],  "Fara Crima", false) == 0 || strcmp(PlayerInfo[id][pCrime1],  "Fara", false) == 0) { }
				else
				{
					format(string, sizeof(string), "%s", PlayerInfo[id][pCrime1]);
					SendClientMessage(playerid,COLOR_WHITE,string);
				}
				if(strcmp(PlayerInfo[id][pCrime2],  "Fara Crima", false) == 0 || strcmp(PlayerInfo[id][pCrime1],  "Fara", false) == 0) { }
				else
				{
					format(string, sizeof(string), "%s", PlayerInfo[id][pCrime2]);
					SendClientMessage(playerid, COLOR_WHITE,string);
				}
				if(strcmp(PlayerInfo[id][pCrime3], "Fara Crima", false) == 0 || strcmp(PlayerInfo[id][pCrime1],  "Fara", false) == 0) { }
				else
				{
					format(string, sizeof(string), "%s", PlayerInfo[id][pCrime3]);
					SendClientMessage(playerid, COLOR_WHITE,string);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
				return 1;
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a cop.");
	return 1;
}
CMD:su(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new id,level,reason[64],reason2[64],giveplayer[30],sendername[25],string[256],ini,escape[256];
	if(IsACop(playerid))
	{
		if(sscanf(params, "uis[64]", id,level,reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /su [name/playerid] [level] [reason]");
		mysql_real_escape_string(reason, reason2);
		GetPlayerName(id, giveplayer, sizeof(giveplayer));
  		GetPlayerName(playerid, sendername, sizeof(sendername));
		{
			if(id != INVALID_PLAYER_ID)
			{
				if(level < 7 && level > 0)
				{
					if(OnDuty[playerid] != 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not on duty.");
					if(IsACop(id)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't suspect a cop.");
					ini = PlayerInfo[id][pWantedLevel];
					if(PlayerInfo[id][pJailTime] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't suspect an arrested player.");
					if(level + PlayerInfo[id][pWantedLevel] > 6)
					{
						PlayerInfo[id][pWantedLevel] = 6;
					}
					else
					{
						PlayerInfo[id][pWantedLevel] = level+PlayerInfo[id][pWantedLevel];
					}
					format(string, sizeof(string), "Unknown");
					strmid(PlayerInfo[id][pVictim], string, 0, strlen(string), 255);
					Update(id,pVictimx);
					strmid(PlayerInfo[id][pAccused], PlayerInfo[playerid][pNormalName], 0, 25, 255);
					Update(id,pAccusedx);
					new y,m,d,h,mi,s;
					getdate(y,m,d);
					gettime(h,mi,s);
					h+=SERVER_HOUR_FIX;
					if(h == 24) h = 0;
					if(strcmp(PlayerInfo[id][pCrime1], "Fara Crima", true) == 0)
					{
		    			format(string,sizeof(string),"%s",reason2);
						strmid(PlayerInfo[id][pCrime1], string, 0, strlen(string), 255);
						Update(id,pCrime1x);
					}
					else if(strcmp(PlayerInfo[id][pCrime2], "Fara Crima", true) == 0)
					{
		    			format(string,sizeof(string),"%s",reason2);
						strmid(PlayerInfo[id][pCrime2], string, 0, strlen(string), 255);
						Update(id,pCrime2x);
					}
					else if(strcmp(PlayerInfo[id][pCrime3], "Fara Crima", true) == 0)
					{
		    			format(string,sizeof(string),"%s",reason2);
					    strmid(PlayerInfo[id][pCrime3], string, 0, strlen(string), 255);
						Update(id,pCrime3x);
					}
					else if(strcmp(PlayerInfo[id][pCrime1],  "Fara Crima", true) == 0 && strcmp(PlayerInfo[id][pCrime2], "Fara Crima", true) == 0 && strcmp(PlayerInfo[id][pCrime3], "Fara Crima", true) == 0) { }
					else
					{
						format(string,sizeof(string),"%s",reason2);
					    strmid(PlayerInfo[id][pCrime1], string, 0, strlen(string), 255);
						Update(id,pCrime1x);
						format(string, sizeof(string), "Fara Crima");
						strmid(PlayerInfo[id][pCrime2], string, 0, strlen(string), 255);
						strmid(PlayerInfo[id][pCrime3], string, 0, strlen(string), 255);
						Update(id,pCrime2x);
						Update(id,pCrime3x);
					}
					SetPlayerWantedLevel(id,PlayerInfo[id][pWantedLevel]);
					ini = PlayerInfo[id][pWantedLevel]-ini;
					if(PlayerInfo[id][pLanguage] == 2) format(string, sizeof(string), "Ai comis o infractiune: %s, raportat de: %s. W: +%d. Nivel de urmarire nou: %d.",reason2,sendername,level,PlayerInfo[id][pWantedLevel]);
					else format(string, sizeof(string), "You committed a crime: %s, reported by: %s. W: +%d. New wanted level: %d.",reason2,sendername,level,PlayerInfo[id][pWantedLevel]);
					SendClientMessage(id, COLOR_RED2, string);
					format(string, sizeof(string), "Dispatch: %s [%d] has committed a crime: %s. Reporter: %s. W: +%d. New wanted level: %d.",giveplayer,id,reason2,sendername,level,PlayerInfo[id][pWantedLevel]);
                    SendTeamMessage(8, COLOR_DBLUE, string);
					SendTeamMessage(3, COLOR_DBLUE, string);
					SendTeamMessage(2, COLOR_DBLUE, string);
					SendTeamMessage(1, COLOR_DBLUE, string);
					wantedlost[id] = 900;
					Update(id,pWantedLevelx);
					WantedPoints[id] = PlayerInfo[id][pWantedLevel]*2;
					PlayerTextDrawShow(id, WantedText[id]);
					new var100[256],string2[256];
					format(string2,sizeof(string2),"[%02d-%02d-%d %02d:%02d:%02d] %s[user:%d] gave %d wanted points to %s[user:%d], reason: %s.",d,m,y,h,mi,s,sendername,PlayerInfo[playerid][pSQLID],level,giveplayer,PlayerInfo[id][pSQLID],reason2);
					mysql_real_escape_string(string2, escape);
	    			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO su_logs (`playerid`,`giverid`,`reason`,`sumessage`,`time`) VALUES ('%d','%d','%s','%s','%02d-%02d-%d %02d:%02d:%02d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],reason2,escape,d,m,y,h,mi,s);
					mysql_tquery(SQL,var100,"","");
					if(IsPlayerAFK[id] > 0)
					{
						format(string, sizeof(string), "Cop %s granted you wanted %d, reason: %s.",sendername,ini,reason2);
						mysql_real_escape_string(string, escape);
						mysql_format(SQL, var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[id][pSQLID],escape);
						mysql_tquery(SQL,var100,"","");
					}
					new str1[256];
        			if(PlayerInfo[id][pLanguage] == 2) format(str1,sizeof(str1),"WANTED SCADE IN: ~r~%d MINUTE",wantedlost[id]/60+1);
					else format(str1,sizeof(str1),"WANTED DECREASES IN: ~r~%d MINUTES",wantedlost[id]/60+1);
					PlayerTextDrawSetString(id, WantedText[id], str1);
					foreach(new i : Player)
					{
						if(IsACop(i))
						{
							SetPlayerMarkerForPlayer( i, id, ( 0xFF2B5D72 & 0xFFFFFF00 ) );
						}
					}
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid wanted level (1-6).");
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a cop.");
	return 1;
}
CMD:members(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pMember] >= 1 && PlayerInfo[playerid][pRank] >= 6)
	{
		new aim[5000],
			query[300],
			test[300],
			test1[300],
			test2[300],
			test3[300],
			test4,
			aimtotal[5000],
			result[300],
			idd,
			mid=0;
		format(query, sizeof(query), "SELECT * FROM `users` WHERE `users`.`Member` = '%d' ORDER BY `users`.`Rank` DESC LIMIT 50", PlayerInfo[playerid][pMember]);
		new Cache: membresult = mysql_query(SQL, query);
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
			cache_get_field_content(i, "name", result); format(test, 300, result);
			cache_get_field_content(i, "Rank", result); format(test1, 300, result);
			cache_get_field_content(i, "lastOn", result); format(test2, 300, result);
			cache_get_field_content(i, "FWarn", result); format(test3, 300, result);
			test4 = cache_get_field_content_int(i, "FactionJoin");
			idd = cache_get_field_content_int(i, "id");
			Selected[playerid][mid] = idd;
			new id = GetPlayerID(test);
			if(id != INVALID_PLAYER_ID)
			{
				format(aim, sizeof(aim), "%s%s - %s\tonline right now\t%s/3 fw\t%d days\n", aim, test1, test, test3, GetDaysFromTimestamp(test4));
			}
			else
			{
				format(aim, sizeof(aim), "%s%s - %s\t%s\t%s/3 fw\t%d days\n", aim, test1, test, test2, test3, GetDaysFromTimestamp(test4));
			}
			mid++;
		}
		cache_delete(membresult);
		format(aimtotal, sizeof(aimtotal), "Rank - Name\tLast Login\t\tFW\tDays\n%s",aim);
		if(PlayerInfo[playerid][pRank] >= 6)
		{
			ShowPlayerDialog(playerid,DIALOG_MEMBERS,DIALOG_STYLE_TABLIST_HEADERS,"Faction members",aimtotal,"Select","Exit");
		}
		else
		{
			ShowPlayerDialog(playerid,DIALOG_MEMBERS,DIALOG_STYLE_TABLIST_HEADERS,"Faction members",aimtotal,"Exit","");
		}
	}
	return 1;
}
CMD:fmembers(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
	    new idd;
	    if(sscanf(params, "i", idd)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /fmembers [faction id]");
		new aim[5000],
			query[300],
			test[300],
			test1[300],
			test2[300],
			test3[300],
			test4,
			aimtotal[5000],
			result[300];
		format(query, sizeof(query), "SELECT * FROM `users` WHERE `users`.`Member` = '%d' ORDER BY `users`.`Rank` DESC LIMIT 50", idd);
		new Cache: membresult = mysql_query(SQL, query);
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
			cache_get_field_content(i, "name", result); format(test, 300, result);
			cache_get_field_content(i, "Rank", result); format(test1, 300, result);
			cache_get_field_content(i, "lastOn", result); format(test2, 300, result);
			cache_get_field_content(i, "FWarn", result); format(test3, 300, result);
			test4 = cache_get_field_content_int(i, "FactionJoin");
			new id = GetPlayerID(test);
			if(id != INVALID_PLAYER_ID)
			{
				format(aim, sizeof(aim), "%s%s - %s\tonline right now\t%s/3 fw\t%d days\n", aim, test1, test, test3, GetDaysFromTimestamp(test4));
			}
			else
			{
				format(aim, sizeof(aim), "%s%s - %s\t%s\t%s/3 fw\t%d days\n", aim, test1, test, test2, test3, GetDaysFromTimestamp(test4));
			}
		}
		cache_delete(membresult);
		format(aimtotal, sizeof(aimtotal), "Rank - Name\tLast Login\t\tFW\tDays\n%s",aim);
		ShowPlayerDialog(playerid,DIALOG_MEMBERS3,DIALOG_STYLE_TABLIST_HEADERS,"Faction members",aimtotal,"Exit","");
	}
	return 1;
}
CMD:wanted(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsACop(playerid) || PlayerInfo[playerid][pAdmin] >= 1)
	{
		new iString[512], sendername[MAX_PLAYER_NAME],count,online[50], string[128];
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pWantedLevel] >= 1)
			{
				GetPlayerName(i, sendername, sizeof(sendername));
				string[0] = 0;
				Selectat[count][playerid] = i;
				if(PlayerInfo[i][pSleeping] > 0)
				{
					format(string, sizeof(string), "[W:%d] [%d] [%d] %s (AFK)\n",PlayerInfo[i][pWantedLevel],wantedlost[i]/60,cased[i],sendername);
					count++;
				}
				else if(PlayerInfo[i][pSleeping] == 0)
				{
					format(string, sizeof(string), "[W:%d] [%d] [%d] %s\n",PlayerInfo[i][pWantedLevel],wantedlost[i]/60,cased[i],sendername);
					count++;
				}
				strcat(iString, string);
			}
		}
		format(online, sizeof(online),"Wanted online: %d",count);
		if(count == 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "There are no wanted criminals!");
		ShowPlayerDialog(playerid, DIALOG_WANTEDON, DIALOG_STYLE_LIST, online, iString , "Select", "Close");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a cop.");
	return 1;
}
CMD:mechanics(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string[200],sendername[30];
	SendClientMessage(playerid, COLOR_WHITE, "---- Mechanics online ----");
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pJob] == 8)
		{
			GetPlayerName(i, sendername, sizeof(sendername));
			format(string, sizeof(string), "(%d) %s - phone number: %d",i,sendername,PlayerInfo[i][pPnumber]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	SendClientMessage(playerid, COLOR_WHITE, "---------------------");
	return 1;
}/*
CMD:instructors(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string[200],sendername[30];
	SendClientMessage(playerid, COLOR_WHITE, "---- Instructors online ----");
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pMember] == 12)
		{
			GetPlayerName(i, sendername, sizeof(sendername));
			format(string, sizeof(string), "(%d) %s - phone number: %d",i,sendername,PlayerInfo[i][pPnumber]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	SendClientMessage(playerid, COLOR_WHITE, "---------------------");
	return 1;
}*/
CMD:reporters(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string[200],sendername[30];
	SendClientMessage(playerid, COLOR_WHITE, "---- Reporters online ----");
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pMember] == 9)
		{
			GetPlayerName(i, sendername, sizeof(sendername));
			format(string, sizeof(string), "(%d) %s - phone number: %d",i,sendername,PlayerInfo[i][pPnumber]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	SendClientMessage(playerid, COLOR_WHITE, "---------------------");
	return 1;
}
CMD:collecttrash(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pJob] != 10) return SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} You are not a garbage man.");
	if(CP[playerid] > 0 || UsedFind[playerid] != 0)
	{
	    ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel checkpoint", "You are sure to cancel the current checkpoint?", "Yes", "No");
	    return 1;
	}
	new find,string[128],Float:distance,Float:x,Float:y,Float:z;
	if(IsAGarbageTruck(GetPlayerVehicleID(playerid)))
		{
		if(TrashID[playerid] == -1)
		{
			for(new t; t < 1000; t++)
			{
				new rand = random(sizeof(CHKGarbage));
				if(!IsPlayerInRangeOfPoint(playerid,1000.0, CHKGarbage[rand][0], CHKGarbage[rand][1], CHKGarbage[rand][2])) find = 1;
				if(find == 1)
				{
					GetPlayerPos(playerid, x, y, z);
					distance = GetDistanceBetweenPoints(x, y, z, CHKGarbage[rand][0], CHKGarbage[rand][1], CHKGarbage[rand][2]);
					format(string,sizeof(string),"(Job){FFFFFF} Go to the checkpoint to collect the trash. Distance: %.0fm.",distance);
					if(floatround(distance, floatround_round) >= 1000 && floatround(distance, floatround_round) <= 1500) GarbageCollected[playerid] = 5 + random(5);
					else if(floatround(distance, floatround_round) >= 1501 && floatround(distance, floatround_round) <= 2000) GarbageCollected[playerid] = 7 + random(5);
					else if(floatround(distance, floatround_round) >= 2001 && floatround(distance, floatround_round) <= 2500) GarbageCollected[playerid] = 9 + random(5);
					else if(floatround(distance, floatround_round) >= 2501 && floatround(distance, floatround_round) <= 3000) GarbageCollected[playerid] = 11 + random(5);
					else if(floatround(distance, floatround_round) >= 3001) GarbageCollected[playerid] = 14 + random(5);
					SendClientMessage(playerid, COLOR_JOB, string);
					SetPlayerCheckpoint(playerid, CHKGarbage[rand][0],CHKGarbage[rand][1],CHKGarbage[rand][2], 2.0);
					CP[playerid] = 10972;
					TrashID[playerid] = rand;
					break;
				}
			}
		}
		else
		{
			new r = TrashID[playerid];
			GetPlayerPos(playerid, x, y, z);
			distance = GetDistanceBetweenPoints(x, y, z, CHKGarbage[r][0], CHKGarbage[r][1], CHKGarbage[r][2]);
			format(string,sizeof(string),"(Job){FFFFFF} Go to the checkpoint to collect the trash. Distance: %.0fm.",distance);
			SendClientMessage(playerid, COLOR_JOB, string);
			SetPlayerCheckpoint(playerid, CHKGarbage[r][0],CHKGarbage[r][1],CHKGarbage[r][2], 2.0);
			CP[playerid] = 10972;
		}
	}
	else return SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} You need to be in a garbage truck for use command.");
	return 1;
}
CMD:unloadtrash(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pJob] != 10) return SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} You are not a garbage man.");
	if(CP[playerid] > 0 || UsedFind[playerid] != 0)
	{
	    ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel checkpoint", "You are sure to cancel the current checkpoint?", "Yes", "No");
	    return 1;
	}
	if(IsAGarbageTruck(GetPlayerVehicleID(playerid)))
		ShowPlayerDialog(playerid, DIALOG_UNLOADTRASH, DIALOG_STYLE_LIST, "Unload trash", "Los Santos Point\nLas Venturas Point\nSan Fierro Point", "Select", "Exit");
	else SS(playerid, COLOR_JOB, "(Job){FFFFFF} Nu esti intr-o masina de gunoi.", "(Job){FFFFFF} You are not in a garbage truck.");
	return 1;
}
CMD:bid(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsABid == 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nicio proprietate nu este pusa la licitatie acum.", "(Error){FFFFFF} No property is available for bid at this time.");
	new suma, string[256], pid=-1, name[30], suma2, strr[256], time, count;
	if(sscanf(params, "d", suma))
	{
		if(IsABid == 1)
		{
			if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Licitatie activa: casa (house) %d", IsAtBid);
			else format(string, sizeof(string), "Active bid: casa (house) %d", IsAtBid);
		}
		else if(IsABid == 2)
		{
			if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Licitatie activa: BIZ %d", IsAtBid);
			else format(string, sizeof(string), "Active bid: BIZ %d", IsAtBid);
		}
		SendClientMessage(playerid, COLOR_LIGHTGREEN3, string);
		if(TopBidder != -1)
		{
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pSQLID] == TopBidder) strmid(name, PlayerInfo[i][pNormalName], 0, 30, 255);
			}
			if(pid == -1)
			{
				format(string, sizeof(string), "SELECT * FROM `users` WHERE `id`='%d'", TopBidder);
				new Cache: test = mysql_query(SQL, string);
				cache_get_field_content(0, "name", name);
				cache_delete(test);
			}
		}
		else strmid(name, "No one", 0, 30, 255);
		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Playerul ce a licitat cel mai mult: %s | Suma licitata: $%s", name, FormatNumber(BidAmount));
		else format(string, sizeof(string), "Top bidder: %s | Bid: $%s", name, FormatNumber(BidAmount));
		SendClientMessage(playerid, COLOR_LIGHTGREEN3, string);
		SS(playerid, COLOR_LIGHTGREEN3, "Licitatia se va termina in 3 minute daca nimeni nu liciteaza mai mult.", "The bid will be over in 3 minutes if no one places a higher bid.");
		SS(playerid, COLOR_LIGHTGREEN3, "De cate ori liciteaza cineva, timpul pana la sfarsitul licitatiei este setat la 3 minute.", "When someone bids, the bid becomes active for 3 more minutes.");
		SS(playerid, COLOR_LIGHTGREEN3, "Foloseste /bid <suma in milioane> pentru a licita. Pentru a activa/dezactiva chatul poti folosi /togbid.", "Use [/bid <millions>] to place a bid. Use /togbid to enable/disable the bid chat.");
	}
	if(IsABid == 1 && PlayerInfo[playerid][pPhousekey] != 999) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already own a house, type /sellhouse if you want to buy this one.");
	if(IsABid == 2 && PlayerInfo[playerid][pPbiskey] != 255) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already own a business, type /sellbiztostate if you want to buy this one.");
	if(suma <= 0) return 1;
	if(IsABid == 1 && HouseInfo[IsAtBid][hLevel] > PlayerInfo[playerid][pLevel])
	{
		format(string, sizeof(string), "You don't have level %d.", HouseInfo[IsAtBid][hLevel]);
		SendClientMessage(playerid, COLOR_LIGHTGREEN3, string);
		return 1;
	}
	if(IsABid == 2 && BizzInfo[IsAtBid][bLevelNeeded] > PlayerInfo[playerid][pLevel])
	{
		format(string, sizeof(string), "You don't have level %d.", BizzInfo[IsAtBid][bLevelNeeded]);
		SendClientMessage(playerid, COLOR_LIGHTGREEN3, string);
		return 1;
	}
	format(strr, sizeof(strr), "SELECT * FROM `timeplayed` WHERE `pid`='%d'", PlayerInfo[playerid][pSQLID]);
	new Cache: salut = mysql_query(SQL, strr);
	for(new i, j = cache_get_row_count (); i != j; ++i)
	{
		if(count < 30)
		{
			time += cache_get_field_content_int(i, "time");
			count++;
		}
	}
	cache_delete(salut);
	if(time < 36000) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Trebuie sa ai 10 ore jucate in ultimele 30 de zile (fara AFK/sleep) pentru a putea cumpara o proprietate.", "(Error){FFFFFF} You need 10 played hours in last 30 days (without AFK/sleep) to buy a property.");
	if(PlayerInfo[playerid][pSQLID] == TopBidder) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Trebuie sa astepti sa liciteze altcineva.", "(Error){FFFFFF} You need to wait for another player to bid.");
	format(string, sizeof(string), "%d000000", suma);
	suma2 = strval(string);
	if(suma2 <= BidAmount)
	{
		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Trebuie sa licitezi minim %d milioane.", (BidAmount2+1));
		else format(string, sizeof(string), "You need to bid a minimum of %d millions.", (BidAmount2+1));
		SendClientMessage(playerid, COLOR_LIGHTGREEN3, string);
		return 1;
	}
	if(PlayerInfo[playerid][pAccount] >= suma2)
	{
		WantToBid[playerid] = suma2;
		WantToBid2[playerid] = suma;
		if(PlayerInfo[playerid][pLanguage] == 2)
		{
			if(IsABid == 1)
			{
				format(string, sizeof(string), "Esti sigur ca vrei sa licitezi $%s pentru casa (house) %d?", FormatNumber(suma2), IsAtBid);
				ShowPlayerDialog(playerid, DIALOG_BID, DIALOG_STYLE_MSGBOX, "Esti sigur?", string, "Da", "Nu");
			}
			else if(IsABid == 2)
			{
				format(string, sizeof(string), "Esti sigur ca vrei sa licitezi $%s pentru BIZ %d?", FormatNumber(suma2), IsAtBid);
				ShowPlayerDialog(playerid, DIALOG_BID, DIALOG_STYLE_MSGBOX, "Esti sigur?", string, "Da", "Nu");
			}
		}
		else
		{
			if(IsABid == 1)
			{
				format(string, sizeof(string), "Are you sure you want to bid $%s for casa (house) %d?", FormatNumber(suma2), IsAtBid);
				ShowPlayerDialog(playerid, DIALOG_BID, DIALOG_STYLE_MSGBOX, "Are you sure?", string, "Yes", "No");
			}
			else if(IsABid == 2)
			{
				format(string, sizeof(string), "Are you sure you want to bid $%s for BIZ %d?", FormatNumber(suma2), IsAtBid);
				ShowPlayerDialog(playerid, DIALOG_BID, DIALOG_STYLE_MSGBOX, "Are you sure?", string, "Yes", "No");
			}
		}
	}
	else SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu ai suficienti bani in banca pentru a licita.", "(Error){FFFFFF} You don't have enough money in bank to bid.");
 	return 1;
}
CMD:togbid(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(TogBid[playerid] == 0)
	{
		TogBid[playerid] = 1;
		SS(playerid, COLOR_DARKPINK, "Chat /bid activat.", "Bid chat enabled.");
	}
	else
	{
		TogBid[playerid] = 0;
		SS(playerid, COLOR_DARKPINK, "Chat /bid dezactivat.", "Bid chat disabled.");
	}
 	return 1;
}
CMD:buybusiness(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new Float:oldposx, Float:oldposy, Float:oldposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	new string[128],sendername[25],stringcasa[128],strr[256],time,count;
	if(PlayerInfo[playerid][pPbiskey] != 255) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already own a business, type /sellbiztostate if you want to buy this one.");
	for(new b = 1; b < sizeof(BizzInfo); b++)
	{
		if(PlayerToPoint(2.0, playerid, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]))
		{
			if(PlayerInfo[playerid][pLevel] < BizzInfo[b][bLevelNeeded])
			{
				format(string, sizeof(string), "You must be level %d to purchase this business.",BizzInfo[b][bLevelNeeded]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
			}
			format(strr, sizeof(strr), "SELECT * FROM `timeplayed` WHERE `pid`='%d'", PlayerInfo[playerid][pSQLID]);
			new Cache: salut = mysql_query(SQL, strr);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				if(count < 30)
				{
					time += cache_get_field_content_int(i, "time");
					count++;
				}
			}
			cache_delete(salut);
			if(time < 36000) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Trebuie sa ai 10 ore jucate in ultimele 30 de zile (fara AFK/sleep) pentru a putea cumpara o proprietate.", "(Error){FFFFFF} You need 10 played hours in last 30 days (without AFK/sleep) to buy a property.");
			if(BizzInfo[b][bOwned] == 0)
			{
				if(GetPlayerCash(playerid) >= BizzInfo[b][bBuyPrice])
				{
					PlayerInfo[playerid][pPbiskey] = b;
					BizzInfo[b][bOwned] = 1;
					GetPlayerName(playerid, sendername, sizeof(sendername));
					strmid(BizzInfo[b][bOwner], PlayerInfo[playerid][pNormalName], 0, 25, 255);
					GivePlayerCash(playerid,-BizzInfo[b][bBuyPrice]);
					if(BizzInfo[b][bSbiz] == 0)
					{
						PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior];
						PlayerInfo[playerid][pLocal] = b ;
						InBussines[playerid] = b;
						SetPlayerInterior(playerid,BizzInfo[b][bInterior]);
						SetPlayerVirtualWorld(playerid, BizzInfo[b][bVirtual]);
						PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior];
						SetPlayerPosEx(playerid,BizzInfo[b][bExitX],BizzInfo[b][bExitY],BizzInfo[b][bExitZ]);
					}
					SendClientMessage(playerid, COLOR_WHITE, "Congratulations on your purchase!");
					format(stringcasa, sizeof(stringcasa), "%s [user:%d] a cumparat bizz-ul [bizz:%d] de la Stat pentru $%s.",sendername,PlayerInfo[playerid][pSQLID],b,FormatNumber(BizzInfo[b][bBuyPrice]));
                    ABroadCast(COLOR_YELLOW, stringcasa, 1);
                    new var100[256],string2[256];
 					mysql_real_escape_string(stringcasa, string2);
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','0','%s')", PlayerInfo[playerid][pSQLID],string2);
					mysql_tquery(SQL,var100,"","");
					new str1[256];
					mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET `Money`='%d',`Bizz`='%d' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pPbiskey],PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str1,"","");
					mysql_format(SQL,str1,sizeof(str1),"UPDATE `bizz` SET `Owned`='1',`Owner`='%s' WHERE `ID`='%d'",BizzInfo[b][bOwner],b);
					mysql_tquery(SQL,str1,"","");
					OnPropTextdrawUpdate(2,b);
					return 1;
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
			}
			else if(BizzInfo[b][bOwned] == 1 && BizzInfo[b][bPrice] > 0)
			{
				if(GetPlayerCash(playerid) < BizzInfo[b][bPrice]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
				new ownerid, query[256];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				PlayerInfo[playerid][pPbiskey] = b;
				BizzInfo[b][bOwned] = 1;
				format(query, sizeof(query), "SELECT * FROM `users` WHERE `name`='%s'", BizzInfo[b][bOwner]);
				new Cache: result = mysql_query(SQL, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					ownerid = cache_get_field_content_int(i, "id");
				}
				cache_delete(result);
				format(stringcasa, sizeof(stringcasa), "%s [user:%d] a cumparat bizz-ul [bizz:%d] de la %s [user:%d] pentru $%s.",sendername,PlayerInfo[playerid][pSQLID],b,BizzInfo[b][bOwner],ownerid,FormatNumber(BizzInfo[b][bPrice]));
                ABroadCast(COLOR_YELLOW, stringcasa, 1);
                strmid(BizzInfo[b][bOwner], PlayerInfo[playerid][pNormalName], 0, 25, 255);
				GivePlayerCash(playerid,-BizzInfo[b][bPrice]);
				if(BizzInfo[b][bSbiz] == 0)
				{
					PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior];
					PlayerInfo[playerid][pLocal] = b ;
					InBussines[playerid] = b;
					SetPlayerInterior(playerid,BizzInfo[b][bInterior]);
					SetPlayerVirtualWorld(playerid, BizzInfo[b][bVirtual]);
					PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior];
					SetPlayerPosEx(playerid,BizzInfo[b][bExitX],BizzInfo[b][bExitY],BizzInfo[b][bExitZ]);
				}
				SendClientMessage(playerid, COLOR_WHITE, "Congratulations on your purchase!");
				new var100[256],string2[256];
				mysql_real_escape_string(stringcasa, string2);
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[playerid][pSQLID], ownerid, string2);
				mysql_tquery(SQL,var100,"","");
				new str1[256];
				mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET `Money`='%d',`Bizz`='%d' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pPbiskey],PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str1,"","");
				mysql_format(SQL,str1,sizeof(str1),"UPDATE `bizz` SET `Owned`='1',`Owner`='%s',`Prices`='0' WHERE `ID`='%d'", BizzInfo[b][bOwner], b);
				mysql_tquery(SQL,str1,"","");
				mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET Bizz=255, Money=Money+%d WHERE id=%d", BizzInfo[b][bPrice], ownerid);
				mysql_tquery(SQL,str1,"","");
				foreach(new i : Player)
				{
					if(PlayerInfo[i][pSQLID] == ownerid)
					{
						PlayerInfo[i][pPbiskey] = 255;
						GivePlayerCash(i, BizzInfo[b][bPrice]);
					}
				}
				new name[30];
				GetPlayerName(playerid, name, sizeof(name));
				format(string2, sizeof(string2), "%s has bought your business for $%s.", name, FormatNumber(BizzInfo[b][bPrice]));
				mysql_real_escape_string(string2, var100);
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')", ownerid, var100);
				mysql_tquery(SQL,var100,"","");
				BizzInfo[b][bPrice] = 0;
				OnPropTextdrawUpdate(2,b);
			}
		}
	}
	return 1;
}
CMD:buyhouse(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new Float:oldposx, Float:oldposy, Float:oldposz,string[100],playername[MAX_PLAYER_NAME],stringcasa[128],time,count,strr[256];
	GetPlayerName(playerid, playername, sizeof(playername));
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	for(new h = 1; h < sizeof(HouseInfo); h++)
	{
		if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]))
		{
			if(PlayerInfo[playerid][pLevel] < HouseInfo[h][hLevel])
			{
				format(string, sizeof(string), "You must be level %d to purchase this.", HouseInfo[h][hLevel]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
			}
			format(strr, sizeof(strr), "SELECT * FROM `timeplayed` WHERE `pid`='%d'", PlayerInfo[playerid][pSQLID]);
			new Cache: salut = mysql_query(SQL, strr);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				if(count < 30)
				{
					time += cache_get_field_content_int(i, "time");
					count++;
				}
			}
			cache_delete(salut);
			if(time < 36000) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Trebuie sa ai 10 ore jucate in ultimele 30 de zile (fara AFK/sleep) pentru a putea cumpara o proprietate.", "(Error){FFFFFF} You need 10 played hours in last 30 days (without AFK/sleep) to buy a property.");
			if(PlayerInfo[playerid][pPhousekey] != 999) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already own a house, type /sellhouse if you want to buy this one.");
			if(HouseInfo[h][hOwned] == 0)
			{
				if(GetPlayerCash(playerid) < HouseInfo[h][hValue]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
                InHouse[playerid] = h;
				PlayerInfo[playerid][pPhousekey] = h;
 				PlayerInfo[playerid][pRented] = -1;
 				Update(playerid, pRentedx);
				HouseInfo[h][hOwned] = 1;
				strmid(HouseInfo[h][hOwner], PlayerInfo[playerid][pNormalName], 0, 25, 255);
				GivePlayerCash(playerid,-HouseInfo[h][hValue]);
				SetPlayerInterior(playerid,HouseInfo[h][hInterior]);
				SetPlayerPosEx(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
				SetPlayerVirtualWorld(playerid,HouseInfo[h][hVirtual]);
				PlayerInfo[playerid][pInt] = HouseInfo[h][hInterior];
				PlayerInfo[playerid][pLocal] = h;
				SendClientMessage(playerid, COLOR_WHITE, "Congratulations on your purchase!");
				format(stringcasa, sizeof(stringcasa), "%s [user:%d] a cumparat casa [house:%d] de la Stat pentru $%s.",playername,PlayerInfo[playerid][pSQLID],h,FormatNumber(HouseInfo[h][hValue]));
                ABroadCast(COLOR_YELLOW, stringcasa, 1);
                new var100[256],string2[256];
				mysql_real_escape_string(stringcasa, string2);
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','0','%s')", PlayerInfo[playerid][pSQLID],string2);
				mysql_tquery(SQL,var100,"","");
				Update(playerid,pPhousekeyx);
				new str2[256];
				mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Owned`='1',`Owner`='%s',`Prices`='0' WHERE `ID`='%d'",PlayerInfo[playerid][pNormalName],HouseInfo[h][hID]);
				mysql_tquery(SQL,str2,"","");
				OnPropTextdrawUpdate(1,h);
				if(strlen(housestring[InHouse[playerid]]) > 0)
				{
				    StopAudioStreamForPlayer(playerid);
					PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
				}
				HouseInfo[h][hPrice] = 0;
				return 1;
			}
			else if(HouseInfo[h][hOwned] == 1 && HouseInfo[h][hPrice] > 0)
			{
				if(GetPlayerCash(playerid) < HouseInfo[h][hPrice]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
				new query[256],ownerid;
				InHouse[playerid] = h;
				PlayerInfo[playerid][pPhousekey] = h;
 				PlayerInfo[playerid][pRented] = -1;
 				Update(playerid, pRentedx);
				HouseInfo[h][hOwned] = 1;
				format(query, sizeof(query), "SELECT * FROM `users` WHERE `name`='%s'", HouseInfo[h][hOwner]);
				new Cache: result = mysql_query(SQL, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					ownerid = cache_get_field_content_int(i, "id");
				}
				cache_delete(result);
				format(stringcasa, sizeof(stringcasa), "%s [user:%d] a cumparat casa [house:%d] de la %s [user:%d] pentru $%s.",playername,PlayerInfo[playerid][pSQLID],h,HouseInfo[h][hOwner],ownerid,FormatNumber(HouseInfo[h][hPrice]));
				strmid(HouseInfo[h][hOwner], PlayerInfo[playerid][pNormalName], 0, 25, 255);
				GivePlayerCash(playerid,-HouseInfo[h][hPrice]);
				SetPlayerInterior(playerid,HouseInfo[h][hInterior]);
				SetPlayerPosEx(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
				SetPlayerVirtualWorld(playerid,HouseInfo[h][hVirtual]);
				PlayerInfo[playerid][pInt] = HouseInfo[h][hInterior];
				PlayerInfo[playerid][pLocal] = h;
				SendClientMessage(playerid, COLOR_WHITE, "Congratulations on your purchase!");
                ABroadCast(COLOR_YELLOW, stringcasa, 1);
                new var100[256],string2[256];
				mysql_real_escape_string(stringcasa, string2);
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[playerid][pSQLID],ownerid,string2);
				mysql_tquery(SQL,var100,"","");
				Update(playerid,pPhousekeyx);
				new str2[256];
				mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Owned`='1',`Owner`='%s',`Prices`='0' WHERE `ID`='%d'",PlayerInfo[playerid][pNormalName],HouseInfo[h][hID]);
				mysql_tquery(SQL,str2,"","");
				if(strlen(housestring[InHouse[playerid]]) > 0)
				{
				    StopAudioStreamForPlayer(playerid);
					PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
				}
				new name[30];
				GetPlayerName(playerid, name, sizeof(name));
				foreach(new i : Player)
				{
					if(PlayerInfo[i][pSQLID] == ownerid)
					{
						GivePlayerCash(i, HouseInfo[h][hPrice]);
						PlayerInfo[i][pPhousekey] = 999;
						PlayerInfo[i][pRented] = -1;
						PlayerInfo[i][pSpawnChange] = 0;
						Update(i, pSpawnChangex);
						Update(i, pPhousekeyx);
						Update(i, pRentedx);
						if(PlayerInfo[i][pLocal] == h)
						{
							SetPlayerInterior(i,0);
							SetPlayerPosEx(i,HouseInfo[h][hEntrancex],HouseInfo[h][hEntrancey],HouseInfo[h][hEntrancez]);
							PlayerInfo[i][pInt] = 0;
						}
					}
				}
				mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET House = 999, SpawnChange = 0, Money = Money+%d WHERE `id`='%d'",HouseInfo[h][hPrice],ownerid);
				mysql_tquery(SQL,str2,"","");
				format(string2, sizeof(string2), "%s has bought your house for $%s.",name,FormatNumber(HouseInfo[h][hPrice]));
				mysql_real_escape_string(string2, var100);
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')",ownerid,var100);
				mysql_tquery(SQL,var100,"","");
				HouseInfo[h][hPrice] = 0;
				OnPropTextdrawUpdate(1,h);
				return 1;
			}
		}
	}
	return 1;
}
CMD:tenants(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pPhousekey] == 999) return SendClientMessage(playerid,COLOR_ERROR,"(Error){FFFFFF} You don't have house.");
	new playername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME],string[200];
	GetPlayerName(playerid, playername, sizeof(playername));
	new h = PlayerInfo[playerid][pPhousekey];
	if(PlayerInfo[playerid][pPhousekey] == h)
	{
		SendClientMessage(playerid, COLOR_WHITE, "---- Tenants online: ----");
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pRented] == h)
		    {
	        	GetPlayerName(i,giveplayer,sizeof(giveplayer));
				format(string,sizeof(string),"(%d) %s", i, giveplayer);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
	}
	return 1;
}
CMD:rentroom(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new Float:oldposx, Float:oldposy, Float:oldposz,playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	for(new h = 1; h < sizeof(HouseInfo); h++)
	{
		if(IsPlayerInRangeOfPoint(playerid,2.0, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 1)
		{
			if(HouseInfo[h][hRent] == 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} The owner of this house does not allow renters.");
			if(PlayerInfo[playerid][pPhousekey] != 999) return SendClientMessage(playerid, COLOR_WHITE, "You already own a house.");
			if(PlayerInfo[playerid][pRented] != -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already have rented a house.");
			if(GetPlayerCash(playerid) > HouseInfo[h][hRent])
			{
				PlayerInfo[playerid][pRented] = h;
				InHouse[playerid] = h;
    			GivePlayerCash(playerid,-HouseInfo[h][hRent]);
				HouseInfo[h][hTakings] = HouseInfo[h][hTakings]+HouseInfo[h][hRent];
				SetPlayerInterior(playerid,HouseInfo[h][hInterior]);
				SetPlayerPosEx(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
				SetPlayerVirtualWorld(playerid,HouseInfo[h][hVirtual]);
				GameTextForPlayer(playerid, "~g~house rented!", 5000, 1);
				PlayerInfo[playerid][pInt] = HouseInfo[h][hInterior];
				PlayerInfo[playerid][pLocal] = h;
				new str[128];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Rented`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pRented],PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
				SetTimerEx("OnPropTextdrawUpdate", 1000, false, "dd", 1, h);
				if(strlen(housestring[InHouse[playerid]]) > 0)
				{
				    StopAudioStreamForPlayer(playerid);
					PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
				}
			 	return 1;
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
		}
	}
	return 1;
}
CMD:housename(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new bouse = PlayerInfo[playerid][pPhousekey],housename[30],string[100];
	if(PlayerInfo[playerid][pPhousekey] != 999)
	{
		if(sscanf(params, "s[30]", housename)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /housename [message]");
		new maxc = strlen(housename);
		if(maxc > 30) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Your house name can have maximum 30 characters.");
		new housename2[30];
		mysql_real_escape_string(housename, housename2);
		strmid(HouseInfo[bouse][hDiscription], housename, 0, 64, 255);
		format(string, sizeof(string), "House name set to:{B8DBFF} %s",HouseInfo[bouse][hDiscription]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		new str[256];
		mysql_format(SQL,str,sizeof(str),"UPDATE houses SET Discription='%s' WHERE ID='%d'", housename2, PlayerInfo[playerid][pPhousekey]);
		mysql_tquery(SQL,str,"","");
		OnPropTextdrawUpdate(1, bouse);
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own a house.");
	return 1;
}

function GetAdmins() {
	new x;
	foreach(Player, i) {
		if(IsPlayerConnected(i) && PlayerInfo[i][pAdmin] >= 1) x++;
	}
	return x;
}

function BizInteriorID(type) {
	new x;
	switch(type) {
		case 1: x = 0;
		case 2: x = 7;
		case 3: x = 1;
		case 4: x = 3;
		case 5: x = 10;
		case 6: x = 18;
		case 7: x = 10;
		case 8: x = 5;
		case 9: x = 5;
		case 11: x = 15;
		case 12..13: x = 0;
		case 15..16: x = 0;
		case 14: x = 9;
	}
	return x;
}

CMD:createhouse(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		new house[64],Float:pX,Float:pY,Float:pZ,string[128],PropertyString[256],query[500];
		if(sscanf(params, "s[64]", house)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /createhouse [exterior/interior/complete]");
	    if(strcmp(house,"exterior",true) == 0)
		{
		    GetPlayerPos(playerid, pX, pY, pZ);
			SetPVarFloat(playerid, "pHeX", pX);
        	SetPVarFloat(playerid, "pHeY", pY);
        	SetPVarFloat(playerid, "pHeZ", pZ);
			SetPVarInt(playerid, "hExt", 1);
			SendClientMessage(playerid, COLOR_YELLOW, "House exterior position configured.");
		}
		if(strcmp(house,"interior",true) == 0)
		{
		    GetPlayerPos(playerid, pX, pY, pZ);
			SetPVarFloat(playerid, "pHiX", pX);
        	SetPVarFloat(playerid, "pHiY", pY);
        	SetPVarFloat(playerid, "pHiZ", pZ);
			SetPVarInt(playerid, "pHiID", GetPlayerInterior(playerid));
			SetPVarInt(playerid, "pHiVW", housess+1);
        	SetPVarInt(playerid, "hInt", 1);
			SendClientMessage(playerid, COLOR_YELLOW, "House interior position configured.");
		}
		if(strcmp(house,"complete",true) == 0)
		{
		    if(GetPVarInt(playerid, "hExt") != 1 || GetPVarInt(playerid, "hInt") != 1)
				return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You haven't configured either the house exterior or interior. Creation attempt failed.");

			new i = housess+1;
			mysql_format(SQL, query, sizeof(query), "INSERT INTO houses (Owner, Lockk, Hel, Arm, Level, Rentabil, Rent, Owned, Discription, Value, Takings) VALUES('AdmBot', '0', '0', '0', '10', '1', '5', '1', 'House', '1000000', '0')");
			mysql_tquery(SQL, query, "", "");

			HouseInfo[i][hID]                           = i;
	    	HouseInfo[i][hEntrancex]                    = GetPVarFloat(playerid, "pHeX");
			HouseInfo[i][hEntrancey]                    = GetPVarFloat(playerid, "pHeY");
		 	HouseInfo[i][hEntrancez]                    = GetPVarFloat(playerid, "pHeZ");
    		HouseInfo[i][hExitx]                        = GetPVarFloat(playerid, "pHiX");
    		HouseInfo[i][hExity]                        = GetPVarFloat(playerid, "pHiY");
    		HouseInfo[i][hExitz]                        = GetPVarFloat(playerid, "pHiZ");
    		format(HouseInfo[i][hOwner], 64, "AdmBot");
    		format(HouseInfo[i][hDiscription], 64, "House");
    		HouseInfo[i][hValue]						= 1000000;
    		HouseInfo[i][hHel]                          = 0;
    		HouseInfo[i][hMusic]						= 0;
    		HouseInfo[i][hInterior]                     = GetPVarInt(playerid, "pHiID");
    		HouseInfo[i][hLock]                         = 0;
    		HouseInfo[i][hOwned]                        = 1;
    		HouseInfo[i][hRent]                         = 5;
    		HouseInfo[i][hRentabil]                     = 1;
    		HouseInfo[i][hTakings]                      = 0;
    		HouseInfo[i][hLevel]                        = 10;
    		HouseInfo[i][hVirtual]                      = GetPVarInt(playerid, "pHiVW");

    		mysql_format(SQL, query, sizeof(query), "UPDATE `houses` SET `Entrancex`='%f',`Entrancey`='%f',`Entrancez`='%f',`Exitx`='%f',`Exity`='%f',`Exitz`='%f',`Interior`='%d',`Virtual`='%d' WHERE `ID`='%d'", HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez], HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz], HouseInfo[i][hInterior], HouseInfo[i][hVirtual], i);
    		mysql_tquery(SQL, query, "", "");
    		mysql_format(SQL, query, sizeof(query), "UPDATE `users` SET `House`='%d' WHERE `name`='AdmBot'", i);
    		mysql_tquery(SQL, query, "", "");

    		DeletePVar(playerid, "pHeX");
		    DeletePVar(playerid, "pHeY");
		    DeletePVar(playerid, "pHeZ");
		    DeletePVar(playerid, "pHiX");
		    DeletePVar(playerid, "pHeY");
		    DeletePVar(playerid, "pHeZ");
		    DeletePVar(playerid, "pHiID");
		    DeletePVar(playerid, "pHiVW");
		    DeletePVar(playerid, "pExt");
		    DeletePVar(playerid, "pInt");

    		DestroyDynamic3DTextLabel(HouseLabel[i]);
			format(PropertyString, sizeof(PropertyString),"{FFFFFF}House {B40404}%d \n{B40404}This house is for sale(/buyhouse) ! \n{FFFFFF}Description: {B40404}%s \n{FFFFFF}Price: {B40404}$%s \n{FFFFFF}Level: {B40404}%d",i,HouseInfo[i][hDiscription],FormatNumber(HouseInfo[i][hValue]),HouseInfo[i][hLevel]);
			HouseLabel[i] = CreateDynamic3DTextLabel(PropertyString, 0x9C0000F7, HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			DestroyDynamicPickup(HousePickup[i]);
			HousePickup[i] = CreateDynamicPickup(1273, 23, HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]);

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]);
			housess++;
			format(string,sizeof(string),"House %d created!",i);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:movehouse(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] >= 7)
	{
	    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can move house only in virtual/interior 0.");
	    new house,Float:pX,Float:pY,Float:pZ,query[256];
	    if(sscanf(params, "d", house)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /movehouse [house id]");
	    GetPlayerPos(playerid, pX, pY, pZ);
	    HouseInfo[house][hEntrancex] = pX;
	    HouseInfo[house][hEntrancey] = pY;
	    HouseInfo[house][hEntrancez] = pZ;
	    new i = house;
	    mysql_format(SQL, query, sizeof(query), "UPDATE `houses` SET `Entrancex`='%f',`Entrancey`='%f',`Entrancez`='%f' WHERE `ID`='%d'",HouseInfo[house][hEntrancex],HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez],house);
		mysql_tquery(SQL,query,"","");
		format(query,sizeof(query),"You moved house %d to X:%f,Y:%f,Z:%f.",house,pX,pY,pZ);
		SendClientMessage(playerid, COLOR_WHITE, query);
		OnPropTextdrawUpdate(1, i);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:houseinterior(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] >= 7)
	{
	    new house,Float:pX,Float:pY,Float:pZ,query[256];
	    if(sscanf(params, "d", house)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /houseinterior [house id]");
	    GetPlayerPos(playerid, pX, pY, pZ);
	    HouseInfo[house][hExitx] = pX;
	    HouseInfo[house][hExity] = pY;
	    HouseInfo[house][hExitz] = pZ;
	    HouseInfo[house][hInterior] = GetPlayerInterior(playerid);
	    HouseInfo[house][hVirtual] = GetPlayerVirtualWorld(playerid);
	    mysql_format(SQL, query, sizeof(query), "UPDATE `houses` SET `Exitx`='%f',`Exity`='%f',`Exitz`='%f',`Interior`='%d',`Virtual`='%d' WHERE `ID`='%d'",HouseInfo[house][hExitx],HouseInfo[house][hExity],HouseInfo[house][hExitz],HouseInfo[house][hInterior],HouseInfo[house][hVirtual],house);
		mysql_tquery(SQL,query,"","");
		format(query,sizeof(query),"You changed house %d interior.",house);
		SendClientMessage(playerid, COLOR_YELLOW, query);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:hinterior(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		new house,interior,query[256];
		if(sscanf(params, "dd", house, interior)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /hinterior [house id] [0-small, 1-medium, 2-big]");
		if(interior < 0 || interior > 2) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Interior ID must be between 0 and 2.");
		HouseInfo[house][hInteriorType] = interior;
		mysql_format(SQL, query, sizeof(query), "UPDATE `houses` SET `InteriorType`='%d' WHERE `ID`='%d'",HouseInfo[house][hInteriorType],house);
		mysql_tquery(SQL,query,"","");
		format(query,sizeof(query),"You changed house %d interior type.",house);
		SendClientMessage(playerid, COLOR_YELLOW, query);
		OnPropTextdrawUpdate(1, house);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:housewithdraw(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new bouse = PlayerInfo[playerid][pPhousekey],moneyhouse,string[100];
	if(PlayerInfo[playerid][pPhousekey] != 999)
	{
		if(sscanf(params, "d",moneyhouse)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /housewithdraw [amount]");
		if(moneyhouse < 1) return 1;
		if(moneyhouse > HouseInfo[bouse][hTakings]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have that amount of money.");
		if(!PlayerToPoint(100, playerid,HouseInfo[bouse][hExitx],HouseInfo[bouse][hExity],HouseInfo[bouse][hExitz])) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be near your house.");
		else
		{
			GivePlayerCash(playerid,moneyhouse);
			HouseInfo[bouse][hTakings] = HouseInfo[bouse][hTakings]-moneyhouse;
			format(string, sizeof(string), "You have withdrawn $%d from your house vault.", moneyhouse);
			new str2[184];
			mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Takings`='%d' WHERE `ID`='%d'",HouseInfo[bouse][hTakings],HouseInfo[bouse][hID]);
			mysql_tquery(SQL,str2,"","");
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own a house.");
	return 1;
}
CMD:hwithdraw(playerid, params[]) return cmd_housewithdraw(playerid, params);
CMD:hbalance(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new bouse = PlayerInfo[playerid][pPhousekey],string[100];
	if(PlayerInfo[playerid][pPhousekey] != 999)
	{
		format(string, sizeof(string), "House Vault Balance: $%d", HouseInfo[bouse][hTakings]);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own a house.");
	return 1;
}
CMD:evict(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new bouse = PlayerInfo[playerid][pPhousekey],target;
	if(bouse != 999)
	{
		if(sscanf(params, "u",target)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /evict [name/playerid]");
		if(target == playerid) return SendClientMessage(target, COLOR_ERROR, "(Error){FFFFFF} You can't evict yourself.");
		if(IsPlayerConnected(target))
		{
		    if(target != INVALID_PLAYER_ID)
		    {
				if(PlayerInfo[target][pRented] == PlayerInfo[playerid][pPhousekey])
				{
					SendClientMessage(target, COLOR_WHITE, "You have been evicted.");
					SendClientMessage(playerid, COLOR_WHITE, "Player has been evicted.");
					PlayerInfo[target][pRented] = -1;
					new str[100];
					mysql_format(SQL,str,100,"UPDATE users SET `Rented`='-1' WHERE `name`='%s'",PlayerInfo[target][pNormalName]);
					mysql_tquery(SQL,str,"","");
					SetTimerEx("OnPropTextdrawUpdate", 1000, false, "dd", 1, PlayerInfo[playerid][pPhousekey]);
					return 1;
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player doesn't have rent at your house.");
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own a house.");
	return 1;
}
CMD:evictall(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new bouse = PlayerInfo[playerid][pPhousekey];
	if(bouse != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
	{
		new str[100];
		mysql_format(SQL,str,100,"UPDATE users SET `Rented`='-1' WHERE `Rented`='%d'",PlayerInfo[playerid][pPhousekey]);
		mysql_tquery(SQL,str,"","");
		foreach(new i : Player)
		{
			if(i != playerid)
			{
				if(PlayerInfo[i][pRented] == PlayerInfo[playerid][pPhousekey])
				{
					SendClientMessage(i, COLOR_WHITE, "You have been evicted from your house.");
					PlayerInfo[i][pRented] = -1;
					return 1;
				}
			}
		}
		SendClientMessage(playerid, COLOR_WHITE, "Everyone have been evicted.");
		SetTimerEx("OnPropTextdrawUpdate", 1000, false, "dd", 1, PlayerInfo[playerid][pPhousekey]);
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own a house.");
	return 1;
}
CMD:sellhousetostate(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	if(PlayerInfo[playerid][pPhousekey] != 999)
	{
		SellHouseID[playerid] = PlayerInfo[playerid][pPhousekey];
		if(PlayerInfo[playerid][pLanguage] == 2) ShowPlayerDialog(playerid, DIALOG_SELLHOUSETOSTATE, DIALOG_STYLE_MSGBOX, "Esti sigur?", "Esti sigur ca vrei sa-ti vinzi casa pentru $4.000.000?", "Da", "Nu");
		else ShowPlayerDialog(playerid, DIALOG_SELLHOUSETOSTATE, DIALOG_STYLE_MSGBOX, "Are you sure?", "Are you sure you want to sell your house for $4.000.000?", "Yes", "No");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own a house.");
	return 1;
}
CMD:sellhouseto(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	new id22 = PlayerInfo[playerid][pPhousekey],money,giveplayerid,sendername[25],giveplayer[25],string[150],playername[25],other[128];
	GetPlayerName(playerid, playername, sizeof(playername));
	if(PlayerInfo[playerid][pPhousekey] != 999)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 4,HouseInfo[id22][hEntrancex],HouseInfo[id22][hEntrancey],HouseInfo[id22][hEntrancez])) return SendClientMessage(playerid,COLOR_ERROR,"(Error){FFFFFF} You are not near your house.");
		if(sscanf(params, "uiS(NULL)[128]",giveplayerid,money,other)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sellhouseto [name/playerid] [price]");
		if(strcmp(other, "NULL", true)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu folosi spatii in pret.", "(Error){FFFFFF} Don't use spaces in the price.");
		if(money < 10000 || money > 200000000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Price must be between $10.000 and 200,000,000.");
		if(IsPlayerConnected(giveplayerid))
		{
		    if(giveplayerid != INVALID_PLAYER_ID)
		    {
		        if(PlayerInfo[giveplayerid][pPhousekey] != 999) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player already own a house.");
				if(PlayerInfo[giveplayerid][pLevel] < HouseInfo[PlayerInfo[playerid][pPhousekey]][hLevel]) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} This player don't have needed level.");
		        if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
				    if(giveplayerid == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't sell a house to yourself.");
					if(GetPlayerCash(giveplayerid) < money) return SendClientMessage(playerid,COLOR_ERROR,"(Error){FFFFFF} This player don't have money needed.");
				    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
				    format(string, sizeof(string), "You offered to %s to buy your house for $%s.", giveplayer, FormatNumber(money));
					SendClientMessage(playerid, COLOR_DARKPINK, string);
					format(string, sizeof(string), "%s wants to sell his house to you for $%s, type /accept house %d to accept.", sendername, FormatNumber(money),playerid);
					SendClientMessage(giveplayerid, COLOR_DARKPINK, string);
					HouseID[giveplayerid] = PlayerInfo[playerid][pPhousekey];
					HouseOffer[giveplayerid] = playerid;
					HousePrice[giveplayerid] = money;
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own a house.");
	return 1;
}
CMD:sellhouse(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	new id22 = PlayerInfo[playerid][pPhousekey],money,other[128];
	if(id22 != 999)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 4,HouseInfo[id22][hEntrancex],HouseInfo[id22][hEntrancey],HouseInfo[id22][hEntrancez])) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You are not near your house.");
		if(sscanf(params, "iS(NULL)[128]",money,other)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sellhouse [price]");
		if(strcmp(other, "NULL", true)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu folosi spatii in pret.", "Don't use spaces in the price.");
		if(money < 0 || money > 200000000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Price maximum $200,000,000 (0 = stop selling).");
		HouseInfo[id22][hPrice] = money;
		new str2[256];
		mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Prices`='%d' WHERE `ID`='%d'",money,id22);
		mysql_tquery(SQL,str2,"","");
		format(str2, sizeof(str2),"You have set your house sell price at $%s.",FormatNumber(money));
		SendClientMessage(playerid, COLOR_YELLOW, str2);
		OnPropTextdrawUpdate(1,id22);
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own a house.");
	return 1;
}
CMD:sellbusiness(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	new biz = PlayerInfo[playerid][pPbiskey],money,other[128];
	if(biz == 255) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a business.");
	if(!IsPlayerInRangeOfPoint(playerid, 4,BizzInfo[biz][bEntranceX], BizzInfo[biz][bEntranceY], BizzInfo[biz][bEntranceZ])) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You are not near your business.");
	if(sscanf(params, "iS(NULL)[128]",money,other)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sellbusiness [price]");
	if(money < 0 || money > 200000000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Price maximum $200,000,000 (0 = stop selling).");
	BizzInfo[biz][bPrice] = money;
	new str2[256];
	mysql_format(SQL,str2,sizeof(str2),"UPDATE `bizz` SET `Prices`='%d' WHERE `ID`='%d'", money, biz);
	mysql_tquery(SQL,str2,"","");
	format(str2, sizeof(str2),"You have set your business sell price at $%s.", FormatNumber(money));
	SendClientMessage(playerid, COLOR_YELLOW, str2);
	OnPropTextdrawUpdate(2,biz);
    return 1;
}
CMD:setrent(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new bouse = PlayerInfo[playerid][pPhousekey],string[25],fee;
	if(bouse != 999)
	{
		if(sscanf(params, "d",fee)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /setrent [money]");
		if(fee < 0 || fee > 5000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Minimum rent is $1, maximum rent is $5000. To disable rent use /setrent 0.");
		HouseInfo[bouse][hRent] = fee;
		if(fee == 0) HouseInfo[bouse][hRentabil] = 0;
		else HouseInfo[bouse][hRentabil] = 1;
		new str2[64];
		mysql_format(SQL,str2,64,"UPDATE `houses` SET `Rent`='%d' WHERE `ID`='%d'",fee,bouse);
		mysql_tquery(SQL,str2,"","");
		mysql_format(SQL,str2,64,"UPDATE `houses` SET `Rentabil`='%d' WHERE `ID`='%d'", HouseInfo[bouse][hRentabil], bouse);
		mysql_tquery(SQL,str2,"","");
		format(string, sizeof(string), "House rent set to $%d.", HouseInfo[bouse][hRent]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		OnPropTextdrawUpdate(1,PlayerInfo[playerid][pPhousekey]);
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own a house.");
	return 1;
}
CMD:houserent(playerid, params[]) return cmd_setrent(playerid, params);
CMD:hupgrade(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pPhousekey] != 999)
		ShowPlayerDialog(playerid, DIALOG_HUPGRADE, DIALOG_STYLE_LIST, "House upgrades", "Food upgrade  - $5,000\nMusic upgrade  - {FFFF00}15 premium points", "Select", "Exit");
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own a house.");
	return 1;
}
CMD:auninvite(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new id,string[256],giveplayer[30],sendername[MAX_PLAYER_NAME],reason[64],fpunish,fhid;
		if(sscanf(params, "uds[64]", id, fpunish, reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /auninvite [name/playerid] [fp] [reason]");
 		GetPlayerName(id, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(IsPlayerConnected(id))
		{
			if(id != INVALID_PLAYER_ID)
    		{
				if(PlayerInfo[id][pMember] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not in a group.");
    		    new string2[500],query[500],escape[256],string1[256];
				format(query, sizeof(query), "SELECT * FROM `faction_logs` WHERE `player`='%d' ORDER BY `id` DESC LIMIT 1", PlayerInfo[id][pSQLID]);
				new Cache: ab = mysql_query(SQL, query);
				fhid = cache_get_field_content_int(0, "id");
				cache_delete(ab);
				new str2[356];
				mysql_format(SQL,str2,356,"UPDATE factions SET `Name7`='0' WHERE `ID`='%s'",PlayerInfo[id][pMember]);
				mysql_tquery(SQL,str2,"","");
    		    if(fpunish > 0)
    		    {
					format(string, sizeof(string), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, with %d FP. Reason: %s.",giveplayer,sendername,NumeFactiune(PlayerInfo[id][pMember]),PlayerInfo[id][pRank],GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]),fpunish,reason);
					ABroadCast(COLOR_RED2,string,1);
					SendFamilyMessage(PlayerInfo[id][pMember], COLOR_GENANNOUNCE, string);
					format(string2, sizeof(string2), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, with %d FP. Reason: %s.", PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],DynamicFactions[PlayerInfo[id][pMember]][fName],PlayerInfo[id][pRank],GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]),fpunish,reason);
					mysql_real_escape_string(string2, escape);
					Factionlog(PlayerInfo[id][pMember],PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],escape);
					mysql_format(SQL, query, sizeof(query), "DELETE FROM `faction_logs` WHERE `id`='%d'", fhid);
					mysql_tquery(SQL,query,"","");
					mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", escape, PlayerInfo[id][pSQLID], PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,query,"","");
					PlayerInfo[id][pFpunish] = fpunish;
					if(PlayerInfo[id][pLanguage] == 2)
					{
						format(string1, sizeof(string1), "Ai fost demis de Admin %s din factiunea din care faceai parte dupa %d zile, cu %d FP. Motiv: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]), fpunish, reason);
						ShowPlayerDialog(id, DIALOG_GETUNINVITE, DIALOG_STYLE_MSGBOX, "Uninvite", string1, "Inchide", "");
					}
					else
					{
						format(string1, sizeof(string1), "You were uninvited by Admin %s from your faction after %d days, with %d FP. Reason: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]), fpunish, reason);
						ShowPlayerDialog(id, DIALOG_GETUNINVITE, DIALOG_STYLE_MSGBOX, "Uninvite", string1, "Close", "");
					}
				}
				else if(fpunish < 1)
				{
					format(string, sizeof(string), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, without FP. Reason: %s.",giveplayer,sendername,NumeFactiune(PlayerInfo[id][pMember]),PlayerInfo[id][pRank],GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]),reason);
					ABroadCast(COLOR_RED2,string,1);
					SendFamilyMessage(PlayerInfo[id][pMember], COLOR_GENANNOUNCE, string);
					format(string2, sizeof(string2), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, without FP. Reason: %s.", PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],DynamicFactions[PlayerInfo[id][pMember]][fName],PlayerInfo[id][pRank],GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]),reason);
					mysql_real_escape_string(string2, escape);
					Factionlog(PlayerInfo[id][pMember],PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],escape);
					mysql_format(SQL, query, sizeof(query), "DELETE FROM `faction_logs` WHERE `id`='%d'", fhid);
					mysql_tquery(SQL,query,"","");
					mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", escape, PlayerInfo[id][pSQLID], PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,query,"","");
					PlayerInfo[id][pFpunish] = 0;
					if(PlayerInfo[id][pLanguage] == 2)
					{
						format(string1, sizeof(string1), "Ai fost demis de Admin %s din factiunea din care faceai parte dupa %d zile, fara FP. Motiv: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]), reason);
						ShowPlayerDialog(id, DIALOG_GETUNINVITE, DIALOG_STYLE_MSGBOX, "Uninvite", string1, "Inchide", "");
					}
					else
					{
						format(string1, sizeof(string1), "You were uninvited by Admin %s from your faction after %d days, without FP. Reason: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]), reason);
						ShowPlayerDialog(id, DIALOG_GETUNINVITE, DIALOG_STYLE_MSGBOX, "Uninvite", string1, "Close", "");
					}
				}
				mysql_format(SQL,query, sizeof(query), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')", PlayerInfo[id][pSQLID], string1);
				mysql_tquery(SQL,query,"","");
				if(InWar[PlayerInfo[id][pMember]] != 0) PlayerTextDrawHide(id, TimeLeftWar1[id]);
    			PlayerInfo[id][pMember] = 0;
                PlayerInfo[id][pLeader] = 0;
                PlayerInfo[id][pRank] = 0;
				PlayerInfo[id][pFACWarns] = 0;
				PlayerInfo[id][pFactionJoin] = 0;
				gTeam[id] = 3;
				PlayerInfo[id][pTeam] = 3;
				OnDuty[id] = 0;
				if(IsPlayerInAnyVehicle(id)) RemovePlayerFromVehicleEx(id);
				ResetPlayerWeaponsEx(id);
		    	ResetPlayerWeapons(id);
				tazer[id] = 0;
				if(Undercover[id] == 1)
				{
					Undercover[id] = 0;
					foreach(new i : Player)
		 			{
		  				ShowPlayerNameTagForPlayer(i, playerid, 1);
		       		}
				}
				SetPlayerArmourEx(id, 0);
    			SetPlayerSkinEx(id);
				SetPlayerToTeamColor(id);
				new str[256];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Member`='0',`Leader`='0',`Rank`='0',`FWarn`='0',`FPunish`='%d',`Team`='3', `FactionJoin`='0' WHERE `name`='%s'",PlayerInfo[id][pFpunish],PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,str,"","");
				return 1;
			}
		}
		else
 		{
             SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	}
	return 1;
}
CMD:auninviteoff(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new id[30], fp,string[MAX_STRING],reason[64],rank,ftime,faction,idd,query[500],string2[500],escape[30],escapee[256],fhid,language;
		if(sscanf(params, "s[30]is[64]", id, fp, reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /auninviteoff [name] [fp] [reason]");
		mysql_real_escape_string(id, escape);
		format(string, sizeof(string), "SELECT `Member` FROM `users` WHERE `name` = '%s'", escape);
		new Cache: r = mysql_query(SQL,string);
		if(cache_get_row_count())
		{
			new fostfactiune = cache_get_row_int ( 0, 0 );
			if(fostfactiune == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "This player is not in a faction.");
				return 1;
			}
			format(query, sizeof(query), "SELECT * FROM `users` WHERE `name`='%s'",escape);
			new Cache: membresult = mysql_query(SQL, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				idd = cache_get_field_content_int(i, "id");
				rank = cache_get_field_content_int(i, "Rank");
				ftime = cache_get_field_content_int(i, "FactionJoin");
				faction = cache_get_field_content_int(i, "Member");
				language = cache_get_field_content_int(i, "Language");
			}
			cache_delete(membresult);
			format(query, sizeof(query), "SELECT * FROM `faction_logs` WHERE `player`='%d' ORDER BY `id` DESC LIMIT 1", idd);
			new Cache: abx = mysql_query(SQL, query);
			fhid = cache_get_field_content_int(0, "id");
			cache_delete(abx);
			new str2[356];
			mysql_format(SQL,str2,356,"UPDATE factions SET `Name7`='0' WHERE `ID`='%s'",faction);
			mysql_tquery(SQL,str2,"","");
			if(fp == 0)
			{
				format(string, sizeof(string), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, without FP. Reason: %s.",id,PlayerInfo[playerid][pNormalName],DynamicFactions[faction][fName],rank,GetDaysFromTimestamp(ftime),reason);
				ABroadCast(COLOR_RED2,string,1);
				SendFamilyMessage(faction, COLOR_GENANNOUNCE, string);
				mysql_format(SQL,string,sizeof(string),"UPDATE users SET `Team`='3',`Member`='0',`Leader`='0',`Rank`='0',`FPunish`='0',`FWarn`='0',`FactionJoin`='0' WHERE `name`='%s'",escape);
				mysql_tquery(SQL,string,"","");
				format(string2, sizeof(string2), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, without FP. Reason: %s.",id,PlayerInfo[playerid][pNormalName],DynamicFactions[faction][fName],rank,GetDaysFromTimestamp(ftime),reason);
				mysql_real_escape_string(string2, escapee);
				Factionlog(faction,idd,PlayerInfo[playerid][pSQLID],escapee);
				mysql_format(SQL, query, sizeof(query), "DELETE FROM `faction_logs` WHERE `id`='%d'", fhid);
				mysql_tquery(SQL,query,"","");
				mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", escapee, idd, PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL,query,"","");
				if(language == 2) format(string, sizeof(string), "Ai fost demis de %s din factiunea din care faceai parte dupa %d zile, fara FP. Motiv: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
				else format(string, sizeof(string), "You were uninvited by %s from your faction after %d days, without FP. Reason: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
				mysql_format(SQL,query, sizeof(query), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')", idd, string);
				mysql_tquery(SQL,query,"","");
				cache_delete(r);
				return 1;
			}
			else if(fp >= 1)
			{
			    format(string, sizeof(string), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, with %d FP. Reason: %s.",id,PlayerInfo[playerid][pNormalName],DynamicFactions[faction][fName],rank,GetDaysFromTimestamp(ftime),fp,reason);
				ABroadCast(COLOR_RED2,string,1);
				SendFamilyMessage(faction, COLOR_GENANNOUNCE, string);
				mysql_format(SQL,string,sizeof(string),"UPDATE users SET `Team`='3',`Member`='0',`Leader`='0',`Rank`='0',`FPunish`='%d',`FWarn`='0',`FactionJoin`='0' WHERE `name`='%s'",fp,escape);
				mysql_tquery(SQL,string,"","");
				format(string2, sizeof(string2), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, with %d FP. Reason: %s.",id,PlayerInfo[playerid][pNormalName],DynamicFactions[faction][fName],rank,GetDaysFromTimestamp(ftime),fp,reason);
				mysql_real_escape_string(string2, escapee);
				Factionlog(faction,idd,PlayerInfo[playerid][pSQLID],escapee);
				mysql_format(SQL, query, sizeof(query), "DELETE FROM `faction_logs` WHERE `id`='%d'", fhid);
				mysql_tquery(SQL,query,"","");
				mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", escapee, idd, PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL,query,"","");
				if(language == 2) format(string, sizeof(string), "Ai fost demis de %s din factiunea din care faceai parte dupa %d zile, cu FP. Motiv: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
				else format(string, sizeof(string), "You were uninvited by %s from your faction after %d days, with FP. Reason: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
				mysql_format(SQL,query, sizeof(query), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')", idd, string);
				mysql_tquery(SQL,query,"","");
				cache_delete(r);
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "This player doesn't exist.");
			cache_delete(r);
			return 1;
		}
		cache_delete(r);
	}
	return 1;
}
CMD:last(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
	    new id,list[64],test[300],test2[300],result[300],string[2500],query[500],name[30],name2[30],reasonn,gunname[50],actionid,reason[300],actiontime,lines,distance,where[10];
	    if(sscanf(params, "s[64]U(-1)D(10)", list,id,lines))
		{
			SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /last [action] [playerid - optional] [lines - optional, default 10]");
			SendClientMessage(playerid, COLOR_WHITE, "Actions: reports, kills, chat, actions, punish(warns, bans, jails), kicks");
			return 1;
		}
		if(!IsPlayerConnected(id) && id != -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	    if(strcmp(list,"kills",true) == 0)
		{
			if(id != -1)
			{
				format(query, sizeof(query), "SELECT * FROM `kill_logs` WHERE `playerid`='%d' OR `killerid`='%d' ORDER BY `ID` DESC LIMIT %d", PlayerInfo[id][pSQLID], PlayerInfo[id][pSQLID], lines);
				new Cache: resultt = mysql_query(SQL, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					cache_get_field_content(i, "time", result); format(test, 300, result);
					reasonn						= cache_get_field_content_int(i, "reason");
					distance  					= cache_get_field_content_int(i, "distance");
					cache_get_field_content(i, "playername", result); format(name2, 30, result);
					cache_get_field_content(i, "killername", result); format(name, 30, result);
					GetWeaponNameEx(reasonn,gunname,sizeof(gunname));
					format(string,sizeof(string),"%s[%s] %s was killed by %s, reason: %s, distance: %d.\n",string,test,name2,name,gunname,distance);
				}
				cache_delete(resultt);
				ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"kills for player",string,"Close","");
			}
			else
			{
				format(query, sizeof(query), "SELECT * FROM `kill_logs` ORDER BY `ID` DESC LIMIT %d", lines);
				new Cache: resultt = mysql_query(SQL, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					cache_get_field_content(i, "time", result); format(test, 300, result);
					reasonn						= cache_get_field_content_int(i, "reason");
					distance  					= cache_get_field_content_int(i, "distance");
					cache_get_field_content(i, "playername", result); format(name2, 30, result);
					cache_get_field_content(i, "killername", result); format(name, 30, result);
					GetWeaponNameEx(reasonn,gunname,sizeof(gunname));
					format(string,sizeof(string),"%s[%s] %s was killed by %s, reason: %s, distance: %d.\n",string,test,name2,name,gunname,distance);
				}
				cache_delete(resultt);
				ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"kills",string,"Close","");
			}
		}
		if(strcmp(list,"reports",true) == 0)
		{
			new date[6],timex;
			if(id != -1)
			{
				format(query, sizeof(query), "SELECT * FROM `report_logs` WHERE `playerid`='%d' ORDER BY `id` DESC LIMIT %d", PlayerInfo[id][pSQLID], lines);
				new Cache: resultt = mysql_query(SQL, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					cache_get_field_content(i, "problem", result); format(test, 300, result);
					timex = cache_get_field_content_int(i, "time");
					TimestampToDate(timex,date[0],date[1],date[2],date[3],date[4],date[5],2);
					format(string,sizeof(string),"%s[%02d-%02d-%02d %02d:%02d:%02d] %s.\n",string,date[0],date[1],date[2],date[3],date[4],date[5],test);
				}
				cache_delete(resultt);
				ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"reports for player",string,"Close","");
			}
			else
			{
				format(query, sizeof(query), "SELECT * FROM `report_logs` ORDER BY `id` DESC LIMIT %d", lines);
				new Cache: resultt = mysql_query(SQL, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					cache_get_field_content(i, "problem", result); format(test, 300, result);
					timex = cache_get_field_content_int(i, "time");
					TimestampToDate(timex,date[0],date[1],date[2],date[3],date[4],date[5],2);
					format(string,sizeof(string),"%s[%02d-%02d-%02d %02d:%02d:%02d] %s.\n",string,date[0],date[1],date[2],date[3],date[4],date[5],test);
				}
				cache_delete(resultt);
				ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"reports",string,"Close","");
			}
		}
		if(strcmp(list,"chat",true) == 0)
		{
			if(id != -1)
			{
				format(query, sizeof(query), "SELECT * FROM `chat_logs` WHERE `playerid`='%d' ORDER BY `ID` DESC LIMIT %d", PlayerInfo[id][pSQLID], lines);
				new Cache: resultt = mysql_query(SQL, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					cache_get_field_content(i, "time", result); format(test, 300, result);
					cache_get_field_content(i, "text", result); format(test2, 300, result);
					cache_get_field_content(i, "where", where);
					for(new x, n = strlen(where); x <n; x++)
					{
						where[x] = toupper(where[x]);
					}
					GetPlayerName(id, name, sizeof(name));
					format(string,sizeof(string),"%s[%s] [%s] %s\n",string,test,where,test2);
				}
				cache_delete(resultt);
				ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"chat for player",string,"Close","");
			}
			else
			{
				format(query, sizeof(query), "SELECT * FROM `chat_logs` ORDER BY `ID` DESC LIMIT %d", lines);
				new Cache: resultt = mysql_query(SQL, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					cache_get_field_content(i, "time", result); format(test, 300, result);
					cache_get_field_content(i, "text", result); format(test2, 300, result);
					cache_get_field_content(i, "where", where);
					for(new x, n = strlen(where); x <n; x++)
					{
						where[x] = toupper(where[x]);
					}
					GetPlayerName(id, name, sizeof(name));
					format(string,sizeof(string),"%s[%s] [%s] %s\n",string,test,where,test2);
				}
				cache_delete(resultt);
				ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"chat",string,"Close","");
			}
		}
		if(strcmp(list,"actions",true) == 0)
		{
			if(id != -1)
			{
				format(query, sizeof(query), "SELECT * FROM `playerlogs` WHERE `playerid`='%d' OR `giverid`='%d' ORDER BY `ID` DESC LIMIT %d", PlayerInfo[id][pSQLID], PlayerInfo[id][pSQLID], lines);
				new Cache: resultt = mysql_query(SQL, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					cache_get_field_content(i, "action", result); format(test, 300, result);
					cache_get_field_content(i, "time", result); format(test2, 300, result);
					format(string,sizeof(string),"%s[%s] %s\n",string,test2,test);
				}
				cache_delete(resultt);
				ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"actions for player",string,"Close","");
			}
			else
			{
				format(query, sizeof(query), "SELECT * FROM `playerlogs` ORDER BY `ID` DESC LIMIT %d", lines);
				new Cache: resultt = mysql_query(SQL, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					cache_get_field_content(i, "action", result); format(test, 300, result);
					cache_get_field_content(i, "time", result); format(test2, 300, result);
					format(string,sizeof(string),"%s[%s] %s\n",string,test2,test);
				}
				cache_delete(resultt);
				ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"actions",string,"Close","");
			}
		}
		if(strcmp(list,"punish",true) == 0)
		{
			if(id != -1)
			{
				format(query, sizeof(query), "SELECT * FROM `punishlogs` WHERE `playerid`='%d' ORDER BY `ID` DESC LIMIT %d", PlayerInfo[id][pSQLID], lines);
				new Cache: resultt = mysql_query(SQL, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					cache_get_field_content(i, "time", result); format(test, 300, result);
					cache_get_field_content(i, "reason", result); format(reason, 300, result);
					actionid                    = cache_get_field_content_int(i, "actionid");
					actiontime                  = cache_get_field_content_int(i, "actiontime");
					cache_get_field_content(i, "playername", result); format(name, 30, result);
					cache_get_field_content(i, "givername", result); format(name2, 30, result);
					if(actionid == 1)
					{
						format(string,sizeof(string),"%s[%s] Ban: %s has been permanent banned by %s, reason: %s.\n",string,test,name,name2,reason);
					}
					else if(actionid == 2)
					{
						format(string,sizeof(string),"%s[%s] Ban: %s has been banned by %s for %d days, reason: %s.\n",string,test,name,name2,actiontime,reason);
					}
					else if(actionid == 3)
					{
						format(string,sizeof(string),"%s[%s] IP Ban: %s has been permanent banned by %s, reason: %s.\n",string,test,name,name2,reason);
					}
					else if(actionid == 4)
					{
						format(string,sizeof(string),"%s[%s] IP Ban: %s has been banned by %s for %d days, reason: %s.\n",string,test,name,name2,actiontime,reason);
					}
					else if(actionid == 5)
					{
						format(string,sizeof(string),"%s[%s] Warn: %s received a warn from admin %s, reason: %s.\n",string,test,name,name2,reason);
					}
					else if(actionid == 6)
					{
						format(string,sizeof(string),"%s[%s] Jail: %s was jailed by %s for %d minutes, reason: %s.\n",string,test,name,name2,actiontime,reason);
					}
					else if(actionid == 7)
					{
						format(string,sizeof(string),"%s[%s] Mute: %s has been muted by %s for %d minutes, reason: %s.\n",string,test,name,name2,actiontime,reason);
					}
					else if(actionid == 8)
					{
						format(string,sizeof(string),"%s[%s] %s was released from jail by admin %s, reason: %s.\n",string,test,name,name2,reason);
					}
				}
				cache_delete(resultt);
				ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"punish for player",string,"Close","");
			}
			else
			{
				format(query, sizeof(query), "SELECT * FROM `punishlogs` ORDER BY `ID` DESC LIMIT %d", lines);
				new Cache: resultt = mysql_query(SQL, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					cache_get_field_content(i, "time", result); format(test, 300, result);
					cache_get_field_content(i, "reason", result); format(reason, 300, result);
					actionid                    = cache_get_field_content_int(i, "actionid");
					actiontime                  = cache_get_field_content_int(i, "actiontime");
					cache_get_field_content(i, "playername", result); format(name, 30, result);
					cache_get_field_content(i, "givername", result); format(name2, 30, result);
					if(actionid == 1)
					{
						format(string,sizeof(string),"%s[%s] Ban: %s has been permanent banned by %s, reason: %s.\n",string,test,name,name2,reason);
					}
					else if(actionid == 2)
					{
						format(string,sizeof(string),"%s[%s] Ban: %s has been banned by %s for %d days, reason: %s.\n",string,test,name,name2,actiontime,reason);
					}
					else if(actionid == 3)
					{
						format(string,sizeof(string),"%s[%s] IP Ban: %s has been permanent banned by %s, reason: %s.\n",string,test,name,name2,reason);
					}
					else if(actionid == 4)
					{
						format(string,sizeof(string),"%s[%s] IP Ban: %s has been banned by %s for %d days, reason: %s.\n",string,test,name,name2,actiontime,reason);
					}
					else if(actionid == 5)
					{
						format(string,sizeof(string),"%s[%s] Warn: %s received a warn from admin %s, reason: %s.\n",string,test,name,name2,reason);
					}
					else if(actionid == 6)
					{
						format(string,sizeof(string),"%s[%s] Jail: %s was jailed by %s for %d minutes, reason: %s.\n",string,test,name,name2,actiontime,reason);
					}
					else if(actionid == 7)
					{
						format(string,sizeof(string),"%s[%s] Mute: %s has been muted by %s for %d minutes, reason: %s.\n",string,test,name,name2,actiontime,reason);
					}
					else if(actionid == 8)
					{
						format(string,sizeof(string),"%s[%s] %s was released from jail by admin %s, reason: %s.\n",string,test,name,name2,reason);
					}
				}
				cache_delete(resultt);
				ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"punish",string,"Close","");

			}
		}
		if(strcmp(list,"kicks",true) == 0)
		{
			if(id != -1)
			{
				format(query, sizeof(query), "SELECT * FROM `kicklogs` WHERE `playerid`='%d' ORDER BY `ID` DESC LIMIT %d", PlayerInfo[id][pSQLID], lines);
				new Cache: resultt = mysql_query(SQL, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					cache_get_field_content(i, "time", result); format(test, 300, result);
					cache_get_field_content(i, "playername", result); format(name, 30, result);
					cache_get_field_content(i, "givername", result); format(name2, 30, result);
					cache_get_field_content(i, "reason", result); format(reason, 300, result);
					format(string,sizeof(string),"%s[%s] Kick: %s has been kicked by %s, reason: %s.\n",string,test,name,name2,reason);
				}
				cache_delete(resultt);
				ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"kicks for player",string,"Close","");
			}
			else
			{
				format(query, sizeof(query), "SELECT * FROM `kicklogs` ORDER BY `ID` DESC LIMIT %d", lines);
				new Cache: resultt = mysql_query(SQL, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					cache_get_field_content(i, "time", result); format(test, 300, result);
					cache_get_field_content(i, "playername", result); format(name, 30, result);
					cache_get_field_content(i, "givername", result); format(name2, 30, result);
					cache_get_field_content(i, "reason", result); format(reason, 300, result);
					format(string,sizeof(string),"%s[%s] Kick: %s has been kicked by %s, reason: %s.\n",string,test,name,name2,reason);
				}
				cache_delete(resultt);
				ShowPlayerDialog(playerid,DIALOG_LASTS,DIALOG_STYLE_MSGBOX,"kicks",string,"Close","");
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:playersearch(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new id, string[128], query[256], ip[16], pid[100], name[30], used[100], level, email[30], count=1, no;
		if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /playersearch [name/playerid]");
		if(IsPlayerConnected(id))
		{
			SendClientMessage(playerid, COLOR_WHITE, "--- Admin Player Search ---");
			GetPlayerIp(id, ip, sizeof(ip));
			format(query, sizeof(query), "SELECT * FROM `playerconnections` WHERE `ip`='%s' LIMIT 99", ip);
			new Cache: ab = mysql_query(SQL, query);
			for(new i, j = cache_get_row_count(); i != j; i++)
			{
				pid[i] = cache_get_field_content_int(i, "playerid");
			}
			cache_delete(ab);
			for(new x; x < 100; x++)
			{
				no = 0;
				if(pid[x] == 0) break;
				for(new a; a < 100; a++)
				{
					if(pid[x] == used[a]) no = 1;
				}
				if(no == 0)
				{
					format(query, sizeof(query), "SELECT * FROM `users` WHERE `id`='%d'", pid[x]);
					new Cache: ac = mysql_query(SQL, query);
					cache_get_field_content(0, "name", name);
					cache_get_field_content(0, "Email", email);
					level = cache_get_field_content_int(0, "Level");
					if(strfind(email, "email@yahoo.com", true) != -1) email = "none";
					format(string, sizeof(string), "(%d) %s | lvl: %d | email: %s", pid[x], name, level, email);
					if(count % 2 == 0) SendClientMessage(playerid, COLOR_WHITE, string);
					else SendClientMessage(playerid, COLOR_CYAN, string);
					count++;
					cache_delete(ac);
					used[x] = pid[x];
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not an admin.");
	return 1;
}
CMD:ip(playerid, params[]) return cmd_playersearch(playerid, params);
CMD:dmg(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(ShowDMG[playerid] == 1)
		{
			ShowDMG[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Now you will see spectate player DMG.");
		}
		else
		{
			ShowDMG[playerid] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "Now you will not see spectate player DMG.");
		}
	}
	return 1;
}
CMD:addword(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new word[30],stringx[256],escape[128],x;
		if(sscanf(params, "s[30]", word)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /addword [word]");
		mysql_real_escape_string(word, escape);
		format(stringx, sizeof(stringx), "SELECT * FROM adv WHERE word = '%s'", escape);
		new Cache: xd = mysql_query(SQL, stringx);
		if(cache_get_row_count() == 0) x++;
		cache_delete(xd);
		if(x == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This word is already forbidden.");
		mysql_format(SQL, stringx, sizeof(stringx), "INSERT INTO adv (`word`) VALUES ('%s')", escape);
		mysql_tquery(SQL, stringx, "", "");
		SendClientMessage(playerid, COLOR_WHITE, "Forbidden word added!");
	}
	return 1;
}
CMD:removeword(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new word[30],stringx[256],escape[128],x;
		if(sscanf(params, "s[30]", word)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /removeword [word]");
		mysql_real_escape_string(word, escape);
		format(stringx, sizeof(stringx), "SELECT * FROM adv WHERE word = '%s'", escape);
		new Cache: xd = mysql_query(SQL, stringx);
		if(cache_get_row_count() == 0) x++;
		cache_delete(xd);
		if(x > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Word not found.");
		mysql_format(SQL, stringx, sizeof(stringx), "DELETE FROM adv WHERE word = '%s'", escape);
		mysql_tquery(SQL, stringx, "", "");
		SendClientMessage(playerid, COLOR_WHITE, "Forbidden word removed!");
	}
	return 1;
}
CMD:ban(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new id,reason[128],reasone[128],string[200],giveplayer[30],sendername[30],days,str[1400],playerip[16],year,month,day,hour,minute,second,time;
		if(sscanf(params, "uds[128]", id,days,reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /ban [name/playerid] [days/0=permanent] [reason]");
		if(days < 0) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /ban [name/playerid] [days/0=permanent] [reason]");
		mysql_real_escape_string(reason, reasone);
		if(IsPlayerConnected(id))
		{
		    if(id != INVALID_PLAYER_ID)
		    {
		        getdate(year, month, day);
		        gettime(hour, minute, second);
		        hour+=SERVER_HOUR_FIX;
		        if(hour == 24) hour = 0;
   				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerIp(id, playerip, sizeof(playerip));
				if(PlayerInfo[id][pAdmin] >= PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't ban a higher (or equal) level administrator.");
				if(days == 0)
				{
				    if(strfind(reason, "silent", true) != -1)
					{
						format(string,sizeof(string),"Silent ban: %s has been permanent banned by %s, reason: %s.",giveplayer,sendername,reasone);
						ABroadCast(COLOR_LIGHTRED, string, 1);
					}
					else
					{
						format(string,sizeof(string),"Ban: %s has been permanent banned by %s, reason: %s.",giveplayer,sendername,reasone);
						SendClientMessageToAll(COLOR_LIGHTRED, string);
					}
					if(gPlayerLogged[id] == 0)
					{
						mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', 0, 0, 1, 1, 0)",
						giveplayer,PlayerInfo[playerid][pNormalName],reasone,playerip);
					}
					else
					{
				   	 	mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', 0, 0, 1, 1, 0)",
						PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],reasone,playerip);
					}
					mysql_tquery(SQL,str,"","");
					new var100[256];
    				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','1','0','%s','%s','%s','%d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],reasone,giveplayer,sendername,gettime());
					mysql_tquery(SQL,var100,"","");
					KickEx(id);
				}
				if(days > 0)
				{
					time = gettime() + (days*86400);
				    if(strfind(reason, "silent", true) != -1)
					{
						format(string,sizeof(string),"Silent ban: %s has been banned by %s for %d days, reason: %s.",giveplayer,sendername,days,reasone);
						ABroadCast(COLOR_LIGHTRED, string, 1);
					}
					else
					{
						format(string,sizeof(string),"Ban: %s has been banned by %s for %d days, reason: %s.",giveplayer,sendername,days,reasone);
						SendClientMessageToAll(COLOR_LIGHTRED, string);
					}
					if(gPlayerLogged[id] == 0)
					{
						mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', %d, 0, 0, 1, %d)",
						giveplayer,PlayerInfo[playerid][pNormalName],reasone,playerip,days,time);
					}
					else
					{
				   		mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', %d, 0, 0, 1, %d)",
						PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],reasone,playerip,days,time);
					}

					mysql_tquery(SQL,str,"","");
					new var100[256];
    				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','2','%d','%s','%s','%s','%d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],days,reasone,giveplayer,sendername,gettime());
					mysql_tquery(SQL,var100,"","");
					KickEx(id);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:banoff(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new id[30],reason[128],reasone[128],string[200],sendername[30],days,str[1400],year,month,day,hour,minute,second,time,cont,qstr[500],playeridd,escape[30],admlevel;
		if(sscanf(params, "s[30]ds[128]", id,days,reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /banoff [name] [days/0=permanent] [reason]");
		if(days < 0) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /banoff [name] [days/0=permanent] [reason]");
        cont = MySQLCheckAccount(id);
    	if(cont == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid player.");
		mysql_real_escape_string(reason, reasone);
        getdate(year, month, day);
        gettime(hour, minute, second);
        hour+=SERVER_HOUR_FIX;
        if(hour == 24) hour = 0;
        GetPlayerName(playerid, sendername, sizeof(sendername));
		mysql_real_escape_string(id, escape);
        format(qstr,sizeof(qstr),"SELECT * FROM bans WHERE `PlayerName`='%s' AND `Active`='1'", escape);
		new Cache: banuri = mysql_query(SQL,qstr);
		if(cache_get_row_count() > 0)
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "This player is already banned.");
		}
		else
		{
			format(qstr, sizeof(qstr), "SELECT `id` FROM users WHERE `name` = '%s'", escape);
			new Cache: abs = mysql_query(SQL,qstr);
			if(cache_get_row_count() > 0)
			{
				playeridd = cache_get_field_content_int(0, "id");
				admlevel = cache_get_field_content_int(0, "Admin");
			}
			cache_delete(abs);
			if(admlevel >= PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't ban a higher (or equal) level administrator.");
			if(days == 0)
			{
				if(strfind(reason, "silent", true) != -1) 
				{
					format(string,sizeof(string),"(Offline) Silent ban: %s has been permanent banned by %s, reason: %s.", id, sendername, reasone);
					ABroadCast(COLOR_LIGHTRED, string, 1);
				}
				else 
				{
					format(string,sizeof(string),"(Offline) Ban: %s has been permanent banned by %s, reason: %s.", id, sendername, reasone);
					SendClientMessageToAll(COLOR_LIGHTRED, string);
				}
				mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '0', 0, 0, 1, 1, 0)",
				escape,PlayerInfo[playerid][pNormalName],reasone);
				mysql_tquery(SQL,str,"","");
				new var100[256];
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','1','0','%s','%s','%s','%d')", playeridd,PlayerInfo[playerid][pSQLID],reasone,escape,sendername,gettime());
				mysql_tquery(SQL,var100,"","");
			}
			if(days > 0)
			{
				time = gettime() + (days*86400);
				if(strfind(reason, "silent", true) != -1) 
				{
					format(string,sizeof(string),"(Offline) Silent ban: %s has been banned by %s for %d days, reason: %s.",id,sendername,days,reasone);
					ABroadCast(COLOR_LIGHTRED, string, 1);
				}
				else 
				{
					format(string,sizeof(string),"(Offline) Ban: %s has been banned by %s for %d days, reason: %s.",id,sendername,days,reasone);
					SendClientMessageToAll(COLOR_LIGHTRED, string);
				}
				mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '0', %d, 0, 0, 1, %d)",
				id,PlayerInfo[playerid][pNormalName],reasone,days,time);
				mysql_tquery(SQL,str,"","");
				new var100[256];
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','2','%d','%s','%s','%s','%d')", playeridd,PlayerInfo[playerid][pSQLID],days,reasone,escape,sendername,gettime());
				mysql_tquery(SQL,var100,"","");
			}
		}
		cache_delete(banuri);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}

CMD:banip(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new id,reason[128],reasone[128],string[200],giveplayer[30],sendername[30],days,str[1400],playerip[16],year,month,day,hour,minute,second,time;
		if(sscanf(params, "uds[128]", id,days,reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /banip [name/playerid] [days/0=permanent] [reason]");
		if(days < 0) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /banip [name/playerid] [days/0=permanent] [reason]");
		if(IsPlayerConnected(id))
		{
		    if(id != INVALID_PLAYER_ID)
		    {
				mysql_real_escape_string(reason, reasone);
		        getdate(year, month, day);
		        gettime(hour, minute, second);
		        hour+=SERVER_HOUR_FIX;
		        if(hour == 24) hour = 0;
   				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerIp(id, playerip, sizeof(playerip));
				if(PlayerInfo[id][pAdmin] >= PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't ban a higher (or equal) level administrator.");
				if(days == 0)
				{
				    if(strfind(reason, "silent", true) != -1)
					{
						format(string,sizeof(string),"Silent IP Ban: %s has been permanent banned by %s, reason: %s.",giveplayer,sendername,reasone);
						ABroadCast(COLOR_LIGHTRED, string, 1);
					}
					else
					{
						format(string,sizeof(string),"IP Ban: %s has been permanent banned by %s, reason: %s.",giveplayer,sendername,reasone);
						SendClientMessageToAll(COLOR_LIGHTRED, string);
					}
					if(gPlayerLogged[id] == 0)
					{
						mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', 0, 1, 1, 1, 0)",
						giveplayer,PlayerInfo[playerid][pNormalName],reasone,playerip);
					}
					else
					{
				   	 	mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', 0, 1, 1, 1, 0)",
						PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],reasone,playerip);
					}
					mysql_tquery(SQL,str,"","");
					new var100[256];
    				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','3','0','%s','%s','%d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],giveplayer,sendername,gettime());
					mysql_tquery(SQL,var100,"","");
					KickEx(id);
				}
				if(days > 0)
				{
				    time = gettime() + (days*86400);
				    if(strfind(reason, "silent", true) != -1)
					{
						format(string,sizeof(string),"Silent IP Ban: %s has been banned by %s for %d days, reason: %s.",giveplayer,sendername,days,reasone);
						ABroadCast(COLOR_LIGHTRED, string, 1);
					}
					else
					{
						format(string,sizeof(string),"IP Ban: %s has been banned by %s for %d days, reason: %s.",giveplayer,sendername,days,reasone);
						SendClientMessageToAll(COLOR_LIGHTRED, string);
					}
					if(gPlayerLogged[id] == 0)
					{
						mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', %d, 1, 0, 1, %d)",
						giveplayer,PlayerInfo[playerid][pNormalName],reasone,playerip,days,time);
					}
					else
					{
						mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', '%s', %d, 1, 0, 1, %d)",
						PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],reasone,playerip,days,time);
					}
					mysql_tquery(SQL,str,"","");
					new var100[256];
    				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','4','%d','%s','%s','%d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],days,giveplayer,sendername,gettime());
					mysql_tquery(SQL,var100,"","");
					KickEx(id);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:banipp(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new ip[16],escape[16],reason[128],reasone[128],string[200],sendername[30],str[1400],year,month,day,hour,minute,second,playerip[16],qstr[500];
		if(sscanf(params, "s[16]s[128]", ip, reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /banipp [ip] [reason]");
		getdate(year, month, day);
  		gettime(hour, minute, second);
  		hour+=SERVER_HOUR_FIX;
  		if(hour == 24) hour = 0;
		mysql_real_escape_string(reason, reasone);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		mysql_real_escape_string(ip, escape);
		format(qstr,sizeof(qstr),"SELECT * FROM bans WHERE `IP`='%s' AND `Active`='1'",escape);
		new Cache: banuri = mysql_query(SQL,qstr);
		if(cache_get_row_count() > 0)
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "This IP is already banned.");
		}
		else
		{
			format(string,sizeof(string),"IP Ban: %s has banned IP %s, reason: %s.",sendername,escape,reasone);
			ABroadCast(COLOR_LIGHTRED, string, 1);
		    mysql_format(SQL,str,sizeof(str),"INSERT INTO bans (AdminName, Reason, IP, Year, Month, Day, Hour, Minute, Second, Days, IPBan, Permanent, Active, Time) VALUES('%s', '%s', '%s', %d, %d, %d, %d, %d, %d, 0, 1, 1, 1, 0)",
			PlayerInfo[playerid][pNormalName],reasone,escape,year,month,day,hour,minute,second);
			mysql_tquery(SQL,str,"","");
			foreach(new i : Player)
			{
			    GetPlayerIp(i, playerip, sizeof(playerip));
 				if(!strcmp(ip, playerip, true))
 				{
					KickEx(i);
				}
			}
		}
		cache_delete(banuri);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:unban(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
	    new id[30],escape[30],str1[256],string[128],sendername[30],qstr[256];
		if(sscanf(params, "s[30]", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /unban [name]");
		mysql_real_escape_string(id, escape);
        format(qstr,sizeof(qstr),"SELECT * FROM bans WHERE `PlayerName`='%s' AND `Active`='1'",escape);
		new Cache: banuri = mysql_query(SQL,qstr);
		if(cache_get_row_count() > 0)
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
		    format(string,sizeof(string),"(AdmCmd){FFFFFF} %s has unbanned user %s.",sendername,escape);
		    ABroadCast(COLOR_RED2, string, 5);
		    mysql_format(SQL,str1,sizeof(str1),"UPDATE bans SET `Active`='0' WHERE `PlayerName`='%s'",escape);
			mysql_tquery(SQL,str1,"","");
			Log(playerid, string, "unban");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Invalid player.");
		}
		cache_delete(banuri);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:unbanip(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
	    new ip[16],escape[16],str1[256],string[256],sendername[30],qstr[256];
		if(sscanf(params, "s[16]", ip)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /unbanip [ip]");
		mysql_real_escape_string(ip, escape);
        format(qstr,sizeof(qstr),"SELECT * FROM bans WHERE `IP`='%s' AND `Active`='1'",escape);
		new Cache: banuri = mysql_query(SQL,qstr);
		if(cache_get_row_count() > 0)
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
		    format(string,sizeof(string),"(AdmCmd){FFFFFF} %s has unbanned IP %s.",sendername,escape);
		    ABroadCast(COLOR_RED2, string,5);
		    mysql_format(SQL,str1,sizeof(str1),"UPDATE bans SET `Active`='0' WHERE `IP`='%s'",escape);
			mysql_tquery(SQL,str1,"","");
			Log(playerid, string, "unban");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "This IP is not banned.");
		}
		cache_delete(banuri);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:getip(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new id,playersip[256],giveplayer[30],string[256];
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /getip [name/playerid]");
		{
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			if(id != INVALID_PLAYER_ID)
	        {
				GetPlayerIp(id,playersip,sizeof(playersip));
				format(string, sizeof(string), "Player: %s (%d) IP: %s",giveplayer,id,playersip);
				SendClientMessage(playerid,COLOR_GRAD2,string);
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:spec(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
	{
		new id,giveplayer[25],string[256],sendername[25],string2[256];
		if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /spec [name/playerid]");
		if(IsPlayerConnected(id))
		{
		    if(id != INVALID_PLAYER_ID)
		    {
				if(CanSpectate[id] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have permission to use /spec on this admin.");
				if(Spectate[id] != -1) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} That player is on spectating someone else.");
				if(TutTime[id] >= 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is currently in the tutorial.");
				if(Spectate[playerid] == -1)
				{
					BeforeSpectate[playerid][pState] = GetPlayerState(playerid);
					BeforeSpectate[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
					BeforeSpectate[playerid][pInt] = GetPlayerInterior(playerid);
					BeforeSpectate[playerid][pSpectating] = true;
					new Float: x, Float: y, Float: z;
					GetPlayerPos(playerid, x, y, z);

					if(!IsPlayerInAnyVehicle(playerid))
					{
						BeforeSpectate[playerid][pOldPos][0] = x;
						BeforeSpectate[playerid][pOldPos][1] = y;
						BeforeSpectate[playerid][pOldPos][2] = z;
					}
					else
						BeforeSpectate[playerid][pInVehicle] = GetPlayerVehicleID(playerid);
				}
		        Spectate[playerid] = id;
		        togfind[playerid] = 1;
				new Float:health,country[64],city[64];
				GetPlayerHealth(Spectate[playerid], health);
				GetPlayerName(Spectate[playerid], giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(PlayerInfo[playerid][pAdmin] >= 1)
				{
					new test[128];
					if(reportreason[id] == 1)
					{
						format(string, sizeof(string), "Admin %s is now spectating %s (reported for being stuck).",sendername,giveplayer);
						ABroadCast(COLOR_YELLOW,string,1);
						mysql_real_escape_string(reporttext[id], test);
						mysql_format(SQL, string2, sizeof(string2),"INSERT INTO report_logs (`playerid`,`adminid`,`problem`,`answer`,`time`) VALUES ('%d','%d','%s','/spec','%d')",PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],test,gettime());
						mysql_tquery(SQL, string2, "", "");
						PlayerInfo[playerid][pHelpedplayers]++;
        				Update(playerid,pHelpedplayersx);
					}
					else if(reportreason[id] == 2)
					{
						format(string, sizeof(string), "Admin %s is now spectating %s (reported for DM).",sendername,giveplayer);
						ABroadCast(COLOR_YELLOW,string,1);
						mysql_real_escape_string(reporttext[id], test);
						mysql_format(SQL, string2, sizeof(string2),"INSERT INTO report_logs (`playerid`,`adminid`,`problem`,`answer`,`time`) VALUES ('%d','%d','%s','/spec','%d')",PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],test,gettime());
						mysql_tquery(SQL, string2, "", "");
						new weap, am, are = 0,str33[128],wName[50];
						format(string, sizeof(string),"%s's guns:",giveplayer);
						for(new is; is < 13; is++)
						{
							GetPlayerWeaponData(id, is, weap, am);
							if(weap >= 16 && am >= 1)
							{
								are = 1;
								GetWeaponNameEx(weap, wName, sizeof(wName));
								format(str33, sizeof(str33)," [%s-%d]",wName,am);
								strcat(string, str33);
							}
						}
						if(are == 1)
						{
							SendClientMessage(playerid, COLOR_GREY, string);
						}
						PlayerInfo[playerid][pHelpedplayers]++;
        				Update(playerid,pHelpedplayersx);
					}
					else if(reportcheater[id] != -1)
					{
						format(string, sizeof(string), "Admin %s is now spectating %s (reported for cheats).",sendername,giveplayer);
						ABroadCast(COLOR_YELLOW,string,1);
						mysql_real_escape_string(reporttext[id], test);
						mysql_format(SQL, string2, sizeof(string2),"INSERT INTO report_logs (`playerid`,`adminid`,`problem`,`answer`,`time`) VALUES ('%d','%d','%s','/spec','%d')",PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],test,gettime());
						mysql_tquery(SQL, string2, "", "");
						PlayerInfo[playerid][pHelpedplayers]++;
        				Update(playerid,pHelpedplayersx);
					}
					ReportTime[id] = 0;
					format(reporttext[id], 30, "NULL");
					reportcheater[id] = -1;
					reportreason[id] = 0;
					if(playerreported[id] != -1)
					{
						reportreason[playerreported[id]] = 0;
					}
					playerreported[id] = -1;
					KillTimer(timerreport[id]);
				}
				GetPlayerCountry(id, country, sizeof(country));
				GetPlayerCity(id, city, sizeof(city));
				format(string, sizeof(string), "(%d) %s | Level: %d | Health: %.0f | AFK: %d | Duty: %d | Country: %s (%s) | Ping: %d",Spectate[playerid],giveplayer,PlayerInfo[Spectate[playerid]][pLevel],health,IsPlayerAFK[Spectate[playerid]],OnDuty[Spectate[playerid]],country,city,GetPlayerPing(Spectate[playerid]));
				SendClientMessage(playerid, COLOR_DARKPINK, string);
				TogglePlayerSpectating(playerid, 1);
				if(IsPlayerInAnyVehicle(Spectate[playerid]))
				{
				    new carid = GetPlayerVehicleID(Spectate[playerid]);
				    PlayerSpectateVehicle(playerid, carid);
					SpectateState[id] = 2;
				}
				else
				{
				    PlayerSpectatePlayer(playerid, Spectate[playerid]);
					SpectateState[id] = 1;
				}
				PlayerTextDrawSetString(playerid, TextDrawSpec[playerid][1], "LOADING...");
				PlayerTextDrawShow(playerid, TextDrawSpec[playerid][1]);
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:forcenamechange(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new id, string[256], reason[128], sendername[30], giveplayer[30];
		if(sscanf(params, "us[128]",id,reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /forcenamechange [name/playerid] [reason]");
		if(IsPlayerConnected(id))
		{
			if(!strcmp(WantName[id], "NULL", true))
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string),"Admin %s forced %s (%d) - level %d to change his nickname. reason: %s", sendername, giveplayer, id, PlayerInfo[id][pLevel], reason);
				ABroadCast(COLOR_ADMCOMMANDS, string, 3);
				Log(PlayerInfo[playerid][pSQLID], string, "fnc");
				format(string, sizeof(string),"Admin %s forced you to change your nickname. reason: %s", sendername, reason);
				SendClientMessage(id, COLOR_ADMCOMMANDS, string);
				format(string, sizeof(string),"%s\n\nPlease enter your desired name below:",string);
				ShowPlayerDialog(id, DIALOG_CHANGENAME2, DIALOG_STYLE_INPUT, "Change name:", string, "Ok", "Cancel");
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player already requested to change his name.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:fnc(playerid, params[]) return cmd_forcenamechange(playerid, params);
CMD:fvr(playerid, params[]) return cmd_fvrespawn(playerid, params);
CMD:cancelbillboard(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1 || PlayerInfo[playerid][pLeader] == 7)
	{
		new id,string[128];
		if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /cancelbillboard [name/playerid]");
		if(IsPlayerConnected(id))
		{
			if(strcmp(WantBillName[id], "bluffs.ga", true))
			{
				format(string, sizeof(string),"(Billboards){FFFFFF} %s rejected your text change request.",PlayerInfo[playerid][pNormalName]);
				SendClientMessage(id, COLOR_JOB, string);
				format(string, sizeof(string),"(Billboards){FFFFFF} %s rejected %s's request for billboard text.",PlayerInfo[playerid][pNormalName], PlayerInfo[id][pNormalName]);
				ABroadCast(COLOR_COOLRED, string, 1);
				HLChat(COLOR_COOLRED,string);
				SendFamilyMessage(7, COLOR_COOLRED, string);
				Log(PlayerInfo[playerid][pSQLID], string, "cb");
				format(WantBillName[id], 128, "bluffs.ga");
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player didn't request to change billboard text.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not authorised to use this command.");
	return 1;
}
CMD:cb(playerid, params[]) return cmd_cancelbillboard(playerid, params);
CMD:acceptbillboard(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1 || PlayerInfo[playerid][pLeader] == 7)
	{
		new id,string[256];
		if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /acceptbillboard [name/playerid]");
		if(IsPlayerConnected(id))
		{
			if(strcmp(WantBillName[id], "bluffs.ga", true))
			{
				format(string, sizeof(string),"(Billboards){FFFFFF} %s changed %s's billboard text to %s",PlayerInfo[playerid][pNormalName], PlayerInfo[id][pNormalName], WantBillName[id]);
				ABroadCast(COLOR_COOLRED, string, 1);
				HLChat(COLOR_COOLRED,string);
				SendFamilyMessage(7, COLOR_COOLRED, string);
				format(string, sizeof(string),"(Billboards){FFFFFF} %s accepted your text change request.",PlayerInfo[playerid][pNormalName]);
				SendClientMessage(id, COLOR_JOB, string);
				Log(PlayerInfo[playerid][pSQLID], string, "ab");
				strmid(bBill[PlayerInfo[id][pBillboard]][bBillText], WantBillName[id], 0, 128, 255);
				format(WantBillName[id], 128, "bluffs.ga");
				DestroyBillBoard(PlayerInfo[id][pBillboard]);
				new var100[256];
				mysql_format(SQL,var100, sizeof(var100), "UPDATE `billboards` SET `BillText`='%s' WHERE `ID`='%d'", bBill[PlayerInfo[id][pBillboard]][bBillText], PlayerInfo[id][pBillboard]);
				mysql_tquery(SQL,var100,"","");
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player didn't request to change billboard text.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not authorised to use this command.");
	return 1;
}
CMD:ab(playerid, params[]) return cmd_acceptbillboard(playerid, params);
CMD:cancelname(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new id,string[128];
		if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /cancelname [name/playerid]");
		if(IsPlayerConnected(id))
		{
			if(strcmp(WantName[id], "NULL", true))
			{
				format(string, sizeof(string),"Admin %s rejected your change name request.",PlayerInfo[playerid][pNormalName]);
				SendClientMessage(id, COLOR_DARKPINK, string);
				format(string, sizeof(string),"Admin %s rejected %s's change name request.",PlayerInfo[playerid][pNormalName], PlayerInfo[id][pNormalName]);
				ABroadCast(COLOR_COOLRED, string, 1);
				Log(PlayerInfo[playerid][pSQLID], string, "cn");
				format(WantName[id], 30, "NULL");
				TypeName[id] = 0;
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player didn't request to change his name.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:cn(playerid, params[]) return cmd_cancelname(playerid, params);
CMD:acceptname(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new id,string[256],str[256],stringss[256],stringname[128];
		if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /acceptname [name/playerid]");
		if(IsPlayerConnected(id))
		{
			if(strcmp(WantName[id], "NULL", true))
			{
				new newname = MySQLCheckAccount(WantName[id]);
				if(newname != 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} This name already exist.");
				if(PlayerInfo[id][pPremiumPoints] <= 14 && TypeName[id] == 2)
				{
					SendClientMessage(id, COLOR_GREY, "Your change name request was rejected because you don't have necesary premium points.");
					SendClientMessage(playerid, COLOR_GREY, "This player don't have necesary premium points and his change name request was rejected.");
					TypeName[id] = 0;
					format(WantName[id], 30, "NULL");
					return 1;
				}
				if(PlayerInfo[id][pPhousekey] != 999)
				{
					mysql_format(SQL, string, sizeof(string),"UPDATE `houses` SET `Owner` = '%s' WHERE `Owner` = '%s'",WantName[id],PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL, string, "", "");
					strmid(HouseInfo[PlayerInfo[id][pPhousekey]][hOwner], WantName[id], 0, 30, 255);
				}
				if(PlayerInfo[id][pPbiskey] != 255)
				{
					mysql_format(SQL, string, sizeof(string),"UPDATE `bizz` SET `Owner` = '%s' WHERE `Owner` = '%s'",WantName[id],PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL, string, "", "");
					strmid(BizzInfo[PlayerInfo[id][pPbiskey]][bOwner], WantName[id], 0, 30, 255);
				}
				for(new v; v < MAX_PERSONAL_VEHICLES; v++)
				{
					if(PlayerInfo[id][pCar][v] != -1)
					{
						mysql_format(SQL, string, sizeof(string),"UPDATE `cars` SET `Owner` = '%s' WHERE `ID` = '%d'",WantName[id],PlayerInfo[id][pCar][v]);
						mysql_tquery(SQL, string, "", "");
						strmid(CarOwner[id][v], WantName[id], 0, 30, 255);
					}
				}
				if(TypeName[id] == 2)
				{
					PlayerInfo[id][pPremiumPoints] -= 15;
					Update(id, pPremiumPointsx);
					format(string, sizeof(string),"%s[user:%d] has paid 15 premium points to change his name to %s.", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], WantName[id]);
					mysql_real_escape_string(string, stringss);
					mysql_format(SQL,str,sizeof(str), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[id][pSQLID],stringss);
					mysql_tquery(SQL,str,"","");
				}
				mysql_format(SQL, string, sizeof(string),"UPDATE `users` SET `name` = '%s' WHERE `name` = '%s'",WantName[id],PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL, string, "", "");
				format(string, sizeof(string),"Admin %s changed %s's name to %s",PlayerInfo[playerid][pNormalName], PlayerInfo[id][pNormalName], WantName[id]);
				ABroadCast(COLOR_COOLRED, string, 1);
				Log(PlayerInfo[playerid][pSQLID], string, "an");
				new var100[256],string2[256],string3[256];
				format(string2,sizeof(string2),"%s[user:%d] si-a schimbat nick-ul in %s. (( Admin %s[admin:%d] ))",PlayerInfo[id][pNormalName],PlayerInfo[id][pSQLID],WantName[id], PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
				mysql_real_escape_string(string2, string3);
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],string3);
				mysql_tquery(SQL,var100,"","");
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO namechanges (userid, oldname, newname, adminid) VALUES (%d, '%s', '%s', %d)", PlayerInfo[id][pSQLID], PlayerInfo[id][pNormalName], WantName[id], PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL, var100, "", "");
				strmid(PlayerInfo[id][pNormalName], WantName[id], 0, 30, 255);
				SetPlayerName(id, WantName[id]);
				format(WantName[id], 30, "NULL");
				TypeName[id] = 0;
				PlayerInfo[id][pClanTag] = 0;
				format(stringname,sizeof(stringname),"%s / %s", PlayerInfo[playerid][pNormalName], SERVER_NAME);
				PlayerTextDrawSetString(id, TextLogo[id], stringname);
				PlayerTextDrawShow(id, TextLogo[id]);
				SendClientMessage(playerid, COLOR_DARKPINK, "Player nickname changed.");
				SendClientMessage(id, COLOR_DARKPINK, "Your nickname request was accepted.");
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player didn't request to change his name.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:an(playerid, params[]) return cmd_acceptname(playerid, params);
CMD:namechanges(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
		new id, query[256], sqlid, time[20], newname[30], oldname[30], count, string[1024];
		if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /namechanges [name/playerid]");
		if(IsPlayerConnected(id))
		{
			format(string, sizeof(string), "Name changes:\n");
			format(query, sizeof(query), "SELECT * FROM namechanges WHERE userid = %d ORDER BY namechangeid ASC", PlayerInfo[id][pSQLID]);
			new Cache: xd = mysql_query(SQL, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				sqlid = cache_get_field_content_int(i, "userid");
				cache_get_field_content(i, "time", time);
				cache_get_field_content(i, "oldname", oldname);
				cache_get_field_content(i, "newname", newname);
				format(string, sizeof(string), "%s\n- (%d) Name: %s (changed from %s, %s)", string, sqlid, newname, oldname, time);
				count++;
			}
			cache_delete(xd);
			if(count == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} There are no recorded name changes for this player.");
			ShowPlayerDialog(playerid, DIALOG_NAMECHANGES, DIALOG_STYLE_MSGBOX, "SERVER: Name changes", string, "OK", "");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	return 1;
}/*
CMD:testt(playerid, params[]) {
	new nr1, nr2;
	if(sscanf(params, "ii",nr1,nr2)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /testt [nr1] [nr2]");
	new stringg[256];
	format(stringg, sizeof stringg, "%s", add(nr1,nr2));
	return 1;
}*/
CMD:giveallmoney(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new moneyall,sendername[MAX_PLAYER_NAME],string[100];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "i",moneyall)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /giveallmoney [money]");
		if(moneyall > 1000000) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You can give maximum $1,000,000.");
		else
		{
			format(string, sizeof(string),"Admin %s has given $%s to all players online.", sendername, FormatNumber(moneyall));
			SendClientMessageToAll(COLOR_YELLOW,string);
			foreach(new i : Player)
			{
				GivePlayerCash(i, moneyall);
			}
			Log(PlayerInfo[playerid][pSQLID], string, "giveallmoney");
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:giveallcases(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new moneyall,sendername[MAX_PLAYER_NAME],string[100];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "i",moneyall)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /giveallcases [cases]");
		if(moneyall > 3) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can give maximum 3 cases.");
		else
		{
			format(string, sizeof(string),"Admin %s has given %d cases to all players online.", sendername, moneyall);
			SendClientMessageToAll(COLOR_YELLOW,string);
			foreach(new i : Player)
			{
				PlayerInfo[i][pCases]+=moneyall;
				Update(i, pCasesx);
			}
			Log(PlayerInfo[playerid][pSQLID], string, "giveallcases");
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:areafreeze(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new range,sendername[MAX_PLAYER_NAME],string[256];
		if(sscanf(params, "i",range)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /areafreeze [range]");
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "(AdmCmd){FFFFFF} %s has frozen all players on range of %d.", sendername, range);
			ABroadCast(COLOR_RED2,string,1);
			for(new i = 0; i < MAX_PLAYERS; i ++)
			{
				if(ProxDetectorS(range, playerid, i) && i != playerid)
				{
					TogglePlayerControllable(i, 0);
					Freezed[i] = 1;
				}
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:areaunfreeze(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new range,sendername[MAX_PLAYER_NAME],string[256];
		if(sscanf(params, "i",range)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /areaunfreeze [range]");
		GetPlayerName(playerid, sendername, sizeof(sendername));
        format(string, sizeof(string), "(AdmCmd){FFFFFF} %s has unfrozen all players on range of %d.", sendername, range);
        ABroadCast(COLOR_RED2,string,1);
		for(new i = 0; i < MAX_PLAYERS; i ++)
		{
			if(ProxDetectorS(range, playerid, i))
			{
				TogglePlayerControllable(i, 1);
				Freezed[i] = 0;
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:areadisarm(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new range,string[256],sendername[MAX_PLAYER_NAME];
		if(sscanf(params, "i",range)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /areadisarm [range]");
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
            format(string, sizeof(string), "(AdmCmd){FFFFFF} %s has disarmed all players on range of %d.", sendername, range);
	        ABroadCast(COLOR_RED2,string,1);
			for(new i = 0; i < MAX_PLAYERS; i ++)
			{
				if(ProxDetectorS(range, playerid, i))
				{
					ResetPlayerWeaponsEx(i);
		    		ResetPlayerWeapons(i);
			 	}
	  	  	}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:areagun(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new range,gun,ammo,string[256],sendername[25],count=0;
		if(sscanf(params, "iii", range, gun, ammo)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /areagun [range] [gun id] [ammo]");
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
		    if(gun < 1||gun > 46||gun==19||gun==20||gun==21||gun==45) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Invalid weapond ID.");
		    if(ammo <1||ammo > 1000) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Invalid ammo (1-1000).");
		    format(string, sizeof(string), "(AdmCmd){FFFFFF} %s has given gun %d with %d bullets to all players on range %d.", sendername,gun,ammo,range);
			ABroadCast(COLOR_RED2,string,1);
			foreach(new i : Player)
			{
				if(IsPlayerConnected(i))
				{
					if(ProxDetectorS(range, playerid, i))
					{
						if(PlayerInfo[i][pGunLic] != 0) GivePlayerWeaponEx(i, gun, ammo);
						if(GetPlayerState(i) == PLAYER_STATE_PASSENGER)
						{
				        	new gun2,tmp;
				        	GetPlayerWeaponData(i,5,gun2,tmp);
				        	#pragma unused tmp
				        	if(gun2)SetPlayerArmedWeapon(i,gun2);
				        	else SetPlayerArmedWeapon(i,0);
				        	count++;
						}
					}
				}
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:areaarmour(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new range,armor,string[256],sendername[MAX_PLAYER_NAME];
		if(sscanf(params, "ii", range, armor)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /areaarmour [range] [armour]");
		{
			if(armor < 10 || armor > 300) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Value must be between 10-300.");
		    GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, 256, "(AdmCmd){FFFFFF} %s has set to all players on range %d armour to %d.", sendername, range, armor);
			ABroadCast(COLOR_RED2,string,1);
	  		for(new i = 0; i < MAX_PLAYERS; i ++)
			{
				if(ProxDetectorS(range, playerid, i))
				{
					SetPlayerArmourEx(i, armor);
	    			format(string, sizeof(string), "* Admin %s ti-a setat armura.", sendername);
					SendClientMessage(i, COLOR_DARKPINK, string);
				}
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:areaheal(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new range,hp,string[256],sendername[MAX_PLAYER_NAME];
		if(sscanf(params, "ii", range, hp)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /areaheal [range] [amount]");
		{
			if(hp < 10 || hp > 300) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Value must be between 10-300.");
			new nr=0;
		    GetPlayerName(playerid, sendername, sizeof(sendername));
	  		for(new i = 0; i < MAX_PLAYERS; i ++)
			{
				if(ProxDetectorS(range, playerid, i))
				{
					nr++;
					SetPlayerHealthEx(i, hp);
	    			format(string, sizeof(string), "* Admin %s ti-a setat viata.", sendername);
					SendClientMessage(i, COLOR_DARKPINK, string);
				}
			}
			format(string, 256, "(AdmCmd){FFFFFF} %s has set health in range %d to %d and healed %d players.", sendername, range, hp, nr);
			ABroadCast(COLOR_RED2,string,1);
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:giveallpp(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new rpall,sendername[MAX_PLAYER_NAME],string[100];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "i",rpall)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /giveallpp [level]");
		if(rpall >= 6) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Too much premium points(1-5).");
		else if(rpall < 6)
		{
			format(string, sizeof(string),"Admin %s give %d premium points to all players online.",sendername,rpall);
			SendClientMessageToAll(COLOR_YELLOW,string);
			foreach(new i : Player)
			{
				PlayerInfo[i][pPremiumPoints] += rpall;
				Update(i, pPremiumPointsx);
			}
			Log(PlayerInfo[playerid][pSQLID], string, "giveallpp");
		}
	}
	return 1;
}
CMD:giveallrp(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new rpall,sendername[MAX_PLAYER_NAME],string[100];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "i",rpall)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /giveallrp [amount]");
		if(rpall > 10) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Too much respect points(1-10).");
		else if(rpall <= 10)
		{
			format(string, sizeof(string),"Admin %s give %d respect points to all players online.",sendername,rpall);
			SendClientMessageToAll(COLOR_YELLOW,string);
			foreach(new i : Player)
			{
				PlayerInfo[i][pExp] += rpall;
				Update(i, pExpx);
			}
			Log(PlayerInfo[playerid][pSQLID], string, "giveallrp");
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:hh(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pHelper] >= 1)
	{
		SendClientMessage(playerid, COLOR_CYAN, "-------------------------------------------------------------------");		
		SendClientMessage(playerid, COLOR_WHITE, " /getprice /ndelete, /nqueue, /nreport, /nskip, /nnext, /deletead, /toge, /e, /respawn, /spawnhere, /re, /nmute, /hduty, /pm, /slap, /ab, /cb");
	}
	if(PlayerInfo[playerid][pHelper] >= 2)
	{
		SendClientMessage(playerid, COLOR_CYAN, "/kick, /mute, /cc");		
	}
	if(PlayerInfo[playerid][pHelper] >= 1)
	{
		SendClientMessage(playerid, COLOR_CYAN, "-------------------------------------------------------------------");		
	}
	return 1;
}
CMD:ah(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessage(playerid, COLOR_CYAN, "-------------------------------------------------------------------");
		SendClientMessage(playerid, COLOR_WHITE, "Level 1: /ban, /banip, /banipp, /banoff, /kick, /check, /checkv, /checkwarns, /mute, /fmembers, /aduty");
		SendClientMessage(playerid, COLOR_WHITE, "Level 1: /gethere, /goto, /gotocar, /getcar, /spec, /slap, /up, /down, /respawn, /cc, /vre, /nqueue, /go");
		SendClientMessage(playerid, COLOR_WHITE, "Level 1: /last, /managearea, /placegotoevent, /count, /bmusic, /namechanges, /kill, /closestcar, /ab, /cb");
		SendClientMessage(playerid, COLOR_WHITE, "Level 1: /freeze, /unfreeze, /anno2, /anno, /disarm, /jail, /jailoff, /nmute, /deletead, /toge, /acolor");
		SendClientMessage(playerid, COLOR_WHITE, "Level 1: /flip, /angle, /stopevent, /acceptevent, /rejectevent, /mdc, /wanted, /ip, /dmg, /va, /spawnhere");
		SendClientMessage(playerid, COLOR_WHITE, "Level 1: /warn, /dr, /cr, /re, /rmute, /nmute, /vehname, /gunname, /goback, /pm, /flymode, /fly, /healme");
		SendClientMessage(playerid, COLOR_WHITE, "Level 1: /spawncar, /removespawncarid, /removeallspawncar, /checkspawncar, /slapcar, /gotohouse, /gotobiz");
		SendClientMessage(playerid, COLOR_WHITE, "Level 1: /gotohq, /mutedplayers, /jaillist, /skydive, /fspec, /fspecid, /fchat, /oplace, /clearoplace, /muteo");
		SendClientMessage(playerid, COLOR_WHITE, "Level 1: /dm, /dmp, /lg, /alicenses, /destroycarspawn, /lockhq, /unmute, /lockbusiness, /destroycar, /getprice");		
	}
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Level 2: /areafreeze, /areaunfreeze, /areadisarm, /areagun, /areaarmour, /areaheal, /mark, /gotomark, /entercar");
		SendClientMessage(playerid, COLOR_WHITE, "Level 2: /putplayerinvehicle, /relase");
	}
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Level 3: /auninvite, /auninviteoff, /fnc, /cancelname(/cn), /acceptname(/an), /spawnweapon, /healall, /set");
		SendClientMessage(playerid, COLOR_WHITE, "Level 3: /aclear, /makeleader, /rac, /tod, /setweather");
	}
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Level 4: /specme /fuelcars, /fv, /fillveh, /carcolortemp /bigears");
	}
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Level 5: /unban, /unbanip, /sethelper, /gotoxyz, /jetpack, /addnos, /agl, /howner, /bowner, /vowner, /vremove");
		SendClientMessage(playerid, COLOR_WHITE, "Level 5: /rrx, /hprice, /bprice, /hlevel, /blevel");
	}
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Level 6: /serverpass, /servername, /addword, /o, /giftbox, /dsprice, /togkickafk, /setsvar, /svar, /togfind");
		SendClientMessage(playerid, COLOR_WHITE, "Level 6: /removeword, /getip, /giveallmoney, /giveallpp, /giveallrp, /aplay, /gmx, /paydaygmx /setadmin, /speed");
		SendClientMessage(playerid, COLOR_WHITE, "Level 6: /maxmembers, /resetgift, /vcreate, /resetobjects,/resetquests, /insertobject, /accs(in accs menu)");
		SendClientMessage(playerid, COLOR_WHITE, "Level 6: /giveallcases, /resethelped");
	}
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Level 7: /gsafepos, /createhouse, /movehouse, /houseinterior, /hinterior, /dsprice, /setsvar, /svar");
		SendClientMessage(playerid, COLOR_WHITE, "Level 7: /vcreate, /savevehicle, /deletevehicle, /vcolor, /vmove, /vmodel, /vgroup, /vjob, /vrank /edit");
		SendClientMessage(playerid, COLOR_WHITE, "Level 7: /addresetdays /setserver, /troll, /resetevent, /crash /edithouse /editbizz");
	}
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Teleports: /gotols, /gotolv, /gotosf, /gotospawn, /gotods, /gotom, /gotoa, /aaa2, /aaa3, /gotojail");
		SendClientMessage(playerid, COLOR_WHITE, "Teleports: /gotoeventarena");
		SendClientMessage(playerid, COLOR_CYAN, "-------------------------------------------------------------------");
	}
	return 1;
}
CMD:aplay(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new link[128];
		if(sscanf(params, "s[128]", link)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /aplay [link]");
	    {
			new string[128],sendername[30];
			foreach(new i : Player)
			{
				StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, link);
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string),"(AdmCmd){FFFFFF} %s used command /aplay.",sendername);
			ABroadCast(COLOR_RED2, string, 1);
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:specme(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(CanSpectate[playerid] == 0)
		{
			CanSpectate[playerid] = 1;
			SS(playerid, COLOR_RED, "Adminii pot da acum spectate si /goto la tine.","Admins can spectate you an teleport.");
		}
		else
		{
			CanSpectate[playerid] = 0;
			SS(playerid, COLOR_RED, "Adminii nu mai pot da acum spectate si /goto la tine.","Admins can't teleport an specate you.");
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:crash(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		new id,giveplayer[MAX_PLAYER_NAME];
		if (sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /crash [name/playerid]");
        {
		    if(IsPlayerConnected(id))
		    {
		    	if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use command /crash on a higher level administrator.");
		        if(id == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use this command on yourself.");
		        if(id != INVALID_PLAYER_ID)
		        {
			        new Float:X, Float:Y, Float:Z;
			        GetPlayerName(id, giveplayer, sizeof(giveplayer));
			        GetPlayerPos(id,X,Y,Z);
			        new objectcrash = CreatePlayerObject(id,11111111,X,Y,Z,0,0,0);
			        DestroyObject(objectcrash);
					GameTextForPlayer(id, "•¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 1000, 0);
					GameTextForPlayer(id, "•¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 2000, 1);
					GameTextForPlayer(id, "•¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 3000, 2);
					GameTextForPlayer(id, "•¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 4000, 3);
					GameTextForPlayer(id, "•¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 5000, 4);
					GameTextForPlayer(id, "•¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 6000, 5);
					GameTextForPlayer(id, "•¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 7000, 6);
					new string[128];
					format(string, sizeof(string), "%s used command /crash on %s.",PlayerInfo[playerid][pNormalName],giveplayer);
					Adminlog(PlayerInfo[playerid][pSQLID], string, "/crash");
					return 1;
				}
			}
		}
	}
	return 1;
}
CMD:kick(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new id, reason[128], reasone[128], string[256], sendername[25], giveplayer[25];
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2)
	{
	    if(sscanf(params, "us[128]", id, reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /kick [name/playerid] [reason]");
	    {
	        if(id != INVALID_PLAYER_ID)
	        {
				if(PlayerInfo[id][pAdmin] >= PlayerInfo[playerid][pAdmin] && PlayerInfo[playerid][pAdmin] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't kick a higher (or equal) level administrator.");
				mysql_real_escape_string(reason, reasone);
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strfind(reason, "silent", true) != -1)
				{
					format(string, sizeof(string), "Silent kick: %s has been kicked by %s, reason: %s.", giveplayer, sendername, reasone);
					ABroadCast(COLOR_LIGHTRED, string, 1);
				}
				else
				{
					format(string, sizeof(string), "Kick: %s has been kicked by %s, reason: %s.", giveplayer, sendername, reasone);
					SendClientMessageToAll(COLOR_LIGHTRED, string);
				}
				new var100[300];
	    		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO kicklogs (`playerid`,`giverid`,`playername`,`givername`,`reason`) VALUES ('%d','%d','%s','%s','%s')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],giveplayer,sendername,reasone);
				mysql_tquery(SQL,var100,"","");
				KickEx(id);
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:kill(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
		SetPlayerHealthEx(playerid, 0.0);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:closestcar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			if(GetPlayerAnimationIndex(playerid) != 1189) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosii aceasta comanda cand esti in miscare.","(Error){FFFFFF} You can't use this animation when you moving.");
			new VehicleID = GetClosestVehicle(playerid), string[128];

			if(doesVehicleExist(VehicleID))
			{
				PutPlayerInVehicle(playerid, VehicleID, 0);
				format(string, sizeof(string), "You have teleported into a %s (vehicle ID %d).", aVehicleNames[GetVehicleModel(VehicleID) - 400], VehicleID);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} No vehicles are in range.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can only use this command while on foot.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:vre(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
		new string[128],sendername[30];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(IsPlayerInAnyVehicle(playerid))
		{
			new car = GetPlayerVehicleID(playerid), count;
			for(new x; x < MAX_VEHICLES; x++)
			{
				if(Carspawn[x] == car)
				{
					DestroyVehicle(x);
					Carspawn[x] = 0;
					count++;
					format(string,sizeof(string),"(AdmCmd){FFFFFF} Admin %s respawned vehicle %d.",sendername,x);
					ABroadCast(COLOR_RED2,string,1);
					break;
				}
			}
			if(count == 0)
			{
				SetVehicleToRespawnEx(car);
				format(string,sizeof(string),"(AdmCmd){FFFFFF} Admin %s respawned vehicle %d.",sendername,car);
				ABroadCast(COLOR_RED2,string,1);
			}
		}
		else
		{
			new car, count;
			if(sscanf(params, "d",car)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /vre [car id]");
			new bool:unwanted[MAX_VEHICLES];
		    for(new player=0; player<MAX_PLAYERS; player++)
	     	{
	             if(IsPlayerInAnyVehicle(player))
				 {
				 	unwanted[GetPlayerVehicleID(player)]=true;
				 }
	     	}
	     	if(!unwanted[car])
			{
				for(new x; x < MAX_VEHICLES; x++)
				{
					if(Carspawn[x] == car)
					{
						if(!unwanted[car])
						{
							DestroyVehicle(x);
							Carspawn[x] = 0;
							count++;
							format(string,sizeof(string),"(AdmCmd){FFFFFF} Admin %s respawned vehicle %d.",sendername,x);
							ABroadCast(COLOR_RED2,string,1);
							break;
						}
					}
				}
				if(count == 0)
				{
					if(!unwanted[car])
					{
						SetVehicleToRespawnEx(car);
						format(string,sizeof(string),"(AdmCmd){FFFFFF} Admin %s respawned vehicle %d.",sendername,car);
						ABroadCast(COLOR_RED2,string,1);
					}
				}
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:rac(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new string[256], sendername[30];
	SetTimer("RACtime", 10000, 0);
	GetPlayerName(playerid, sendername, sizeof(sendername));
	format(string,sizeof(string),"{FFFFFF}All unused cars will be respawned in {009999}10 {FFFFFF}seconds by %s!", sendername);
	SendClientMessageToAll(COLOR_WHITE,string);
	return 1;
}
CMD:va(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new range,Distance2,string[128];
		new Float: Distance, Float: posX, Float: posY, Float: posZ;
		if(sscanf(params, "d", range)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /va [range]");
		{
			if(range <= 0 || range >= 201) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Range must be between 1 and 200.");
			GetPlayerPos(playerid, posX, posY, posZ);
			for(new x = 1; x < MAX_VEHICLES; x++)
			{
				if(!IsVehicleOccupied(x))
				{
					Distance = GetVehicleDistanceFromPoint(x, posX, posY, posZ);
					Distance2 = floatround(Distance, floatround_round);
					if(Distance2 <= range)
					{
						SetVehicleToRespawn(x);
					}
				}
			}
			format(string, sizeof(string), "You respawned cars on range %d game units.",range);
			SendClientMessage(playerid, COLOR_DARKPINK, string);
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:respawn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
	{
		new id,sendername[30],giveplayer[30],string[256];
		if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /respawn [name/playerid]");
		if(IsPlayerConnected(id))
		{
		    if(id != INVALID_PLAYER_ID)
			{
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				SpawnPlayer(id);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "You have been spawned by %s.", sendername);
				SendClientMessage(id, COLOR_DARKPINK, string);
				format(string, sizeof(string), "Done: You have /spawn-ed %s.", giveplayer);
				SendClientMessage(playerid, COLOR_DARKPINK, string);
				format(string, sizeof(string), "(AdmCmd){FFFFFF} %s has /spawn-ed %s.",sendername, giveplayer);
				ABroadCast(COLOR_RED2,string,1);
				return 1;
			}
		}
        else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin/helper.");
	return 1;
}
CMD:spawn(playerid, params[]) return cmd_respawn(playerid, params);
CMD:spawnhere(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
	{
		new id,sendername[30],giveplayer[30],string[256],Float:x,Float:y,Float:z;
		if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /spawnhere [name/playerid]");
		if(IsPlayerConnected(id))
		{
		    if(id != INVALID_PLAYER_ID)
			{
				GetPlayerPos(id, x, y, z);
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				SpawnPlayer(id);
				SetTimerEx("SetPlayerPosExx", 1000, false, "ufffdd", id, x, y, z, GetPlayerInterior(id), GetPlayerVirtualWorld(id));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "You have been spawned by %s.", sendername);
				SendClientMessage(id, COLOR_DARKPINK, string);
				format(string, sizeof(string), "Done: You have /spawn-ed %s.", giveplayer);
				SendClientMessage(playerid, COLOR_DARKPINK, string);
				format(string, sizeof(string), "(AdmCmd){FFFFFF} %s has /spawn-ed %s and restored his position.",sendername, giveplayer);
				ABroadCast(COLOR_RED2,string,1);
				return 1;
			}
		}
        else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin/helper.");
	return 1;
}
CMD:togarrests(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(togarrests[playerid] == 0)
	{
		togarrests[playerid] = 1;
		SendClientMessage(playerid, COLOR_DARKPINK, "Arrest disabled. You will not messages with players being arrested in the chat.");
	}
	else
	{
		togarrests[playerid] = 0;
		SendClientMessage(playerid, COLOR_DARKPINK, "You will now see arrests in the chat.");
	}
	return 1;
}
CMD:togsurf(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(togsurf[playerid] == 1)
	{
	    togsurf[playerid] = 0;
	    SendClientMessage(playerid, -1,"Tog surf has turned off.");
	}
	else if(togsurf[playerid] == 0)
	{
	    togsurf[playerid] = 1;
	    SendClientMessage(playerid, -1,"Tog surf has turned on.");
	}
	return 1;
}
CMD:togl(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pLeader] < 1 && PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You are not a leader/admin.");
	new string[128], name[30];
	GetPlayerName(playerid, name, sizeof(name));
	if(toglc[playerid] == 0)
	{
	    toglc[playerid] = 1;
	    format(string, sizeof(string), "[x] %s disabled leader chat.", name);
	    LeaderChat(COLOR_TEAL, string);
	}
	else if(toglc[playerid] == 1)
	{
	    toglc[playerid] = 0;
	    format(string, sizeof(string), "[v] %s enabled leader chat.", name);
	    LeaderChat(COLOR_TEAL, string);
	}
	return 1;
}
CMD:togapps(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pLeader] < 1) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You are not a leader.");
	if(PlayerInfo[playerid][pMember] == 7) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use this command.");
	new string[128],app,query[256],drank[20];
	if(DynamicFactions[PlayerInfo[playerid][pMember]][fApplication] == 0) app = 1;
	else app = 0;
	DynamicFactions[PlayerInfo[playerid][pMember]][fApplication] = app;
	mysql_format(SQL, query, sizeof(query), "UPDATE `factions` SET `Application`='%d' WHERE `ID`='%d'", app, PlayerInfo[playerid][pMember]);
	mysql_tquery(SQL, query, "", "");
	if(app == 0) { drank = "offline"; }
	else if(app == 1) { drank = "online"; }
	format(string, sizeof(string), "Your faction applications status was set to %s.", drank);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}
CMD:l(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pLeader] >= 1 || PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(toglc[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have disabled leader chat, use /togl to enable.");
		new sendername[30],mesajelc[250],string[250];
       	GetPlayerName(playerid, sendername, sizeof(sendername));
    	if(sscanf(params, "s[250]",mesajelc)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /l [message]");
    	{
			if(PlayerInfo[playerid][pAdmin] >= 1)
			{
				format(string, sizeof(string), "(/l) Admin %s: %s",sendername, mesajelc);
			}
			else
			{
				if(PlayerInfo[playerid][pLeader] == 1)
				{
					format(string, sizeof(string), "(/l) L.S.P.D Leader %s: %s",sendername, mesajelc);
				}
				else if(PlayerInfo[playerid][pLeader] == 2)
				{
					format(string, sizeof(string), "(/l) F.B.I Leader %s: %s",sendername, mesajelc);
				}
				else if(PlayerInfo[playerid][pLeader] == 3)
				{
					format(string, sizeof(string), "(/l) N.G Leader %s: %s",sendername, mesajelc);
				}
				else if(PlayerInfo[playerid][pLeader] == 4)
				{
					format(string, sizeof(string), "(/l) Los Aztecas Leader %s: %s",sendername, mesajelc);
				}
				else if(PlayerInfo[playerid][pLeader] == 5)
				{
					format(string, sizeof(string), "(/l) Grove Street Leader %s: %s",sendername, mesajelc);
				}
				else if(PlayerInfo[playerid][pLeader] == 6)
				{
					format(string, sizeof(string), "(/l) Los Vagos Leader %s: %s",sendername, mesajelc);
				}
				else if(PlayerInfo[playerid][pLeader] == 7)
				{
					format(string, sizeof(string), "(/l) Mayor %s: %s",sendername, mesajelc);
				}
				else if(PlayerInfo[playerid][pLeader] == 8)
				{
					format(string, sizeof(string), "(/l) L.V.P.D Leader %s: %s",sendername, mesajelc);
				}
				else if(PlayerInfo[playerid][pLeader] == 9)
				{
					format(string, sizeof(string), "(/l) N.R Leader %s: %s",sendername, mesajelc);
				}
				else if(PlayerInfo[playerid][pLeader] == 10)
				{
					format(string, sizeof(string), "(/l) Ballas Leader %s: %s",sendername, mesajelc);
				}
				else if(PlayerInfo[playerid][pLeader] == 11)
				{
					format(string, sizeof(string), "(/l) H.A Leader %s: %s",sendername, mesajelc);
				}
				else if(PlayerInfo[playerid][pLeader] == 12)
				{
					format(string, sizeof(string), "(/l) S.I LV Leader %s: %s",sendername, mesajelc);
				}
				else if(PlayerInfo[playerid][pLeader] == 13)
				{
					format(string, sizeof(string), "(/l) Taxi Leader %s: %s",sendername, mesajelc);
				}
				else if(PlayerInfo[playerid][pLeader] == 14)
				{
					format(string, sizeof(string), "(/l) Paramedic Leader %s: %s",sendername, mesajelc);
				}
			}
	    	if(PlayerInfo[playerid][pLeader] >= 1 || PlayerInfo[playerid][pAdmin] >= 1)
	    	{
	     		LeaderChat(COLOR_TEAL, string);
				new var100[300],resulttt[300],strr[300];
				format(strr, sizeof(strr),"%s: %s", sendername, mesajelc);
				mysql_real_escape_string(strr, resulttt);
				mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','l')", PlayerInfo[playerid][pSQLID], resulttt);
				mysql_tquery(SQL,var100,"","");
	    	}
        }
    }
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:fvrespawn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
  	if(PlayerInfo[playerid][pLeader] >= 1 || PlayerInfo[playerid][pRank] >= 5)
  	{
		new str[128],sendername[30];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		SendClientMessage(playerid, COLOR_WHITE, "Faction vehicles respawned!");
  		if(PlayerInfo[playerid][pMember] == 1 && PlayerInfo[playerid][pRank] >=5)//PD
  		{
			new bool:unwanted[MAX_VEHICLES];
			for(new player=0; player<MAX_PLAYERS; player++)
  			{
        		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
  			}
			for(new x = 0; x < sizeof(VehicleInfo); x++)
			{
				if(VehicleInfo[x][vehGroup] == 1)
				{
					if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
					Gas[VehicleInfo[x][vehCarID]] = 100;
				}
			}
			format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
  		}
  		if(PlayerInfo[playerid][pMember] == 2 && PlayerInfo[playerid][pRank] >=5)//FBI
  		{
			new bool:unwanted[MAX_VEHICLES];
			for(new player=0; player<MAX_PLAYERS; player++)
  			{
            	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
      		}
			for(new x = 0; x < sizeof(VehicleInfo); x++)
			{
				if(VehicleInfo[x][vehGroup] == 2)
				{
					if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
					Gas[VehicleInfo[x][vehCarID]] = 100;
				}
			}
			format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
  		}
  		if(PlayerInfo[playerid][pMember] == 3 && PlayerInfo[playerid][pRank] >=5)// NG
  		{
			new bool:unwanted[MAX_VEHICLES];
			for(new player=0; player<MAX_PLAYERS; player++)
  			{
        		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
  			}
			for(new x = 0; x < sizeof(VehicleInfo); x++)
			{
				if(VehicleInfo[x][vehGroup] == 3)
				{
					if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
					Gas[VehicleInfo[x][vehCarID]] = 100;
				}
			}
			format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
  		}
  		if(PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >=5)//Los Aztecas
  		{
			new bool:unwanted[MAX_VEHICLES];
			for(new player=0; player<MAX_PLAYERS; player++)
  			{
       		 	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
  			}
			for(new x = 0; x < sizeof(VehicleInfo); x++)
			{
				if(VehicleInfo[x][vehGroup] == 4)
				{
					if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
					Gas[VehicleInfo[x][vehCarID]] = 100;
				}
			}
			if(InWar[4] == 1)
			{
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 4)
					{
						SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], DynamicFactions[4][fWarTurf]);
					}
				}
			}
			format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
  		}
  		if(PlayerInfo[playerid][pMember] == 5 && PlayerInfo[playerid][pRank] >= 5)//GP
  		{
			new bool:unwanted[MAX_VEHICLES];
			for(new player=0; player<MAX_PLAYERS; player++)
  			{
        		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
  			}
			for(new x = 0; x < sizeof(VehicleInfo); x++)
			{
				if(VehicleInfo[x][vehGroup] == 5)
				{
					if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
					Gas[VehicleInfo[x][vehCarID]] = 100;
				}
			}
			if(InWar[5] == 1)
			{
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 5)
					{
						SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], DynamicFactions[5][fWarTurf]);
					}
				}
			}
			format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
  		}
  		if(PlayerInfo[playerid][pMember] == 6 && PlayerInfo[playerid][pRank] >= 5)//LSC
  		{
			new bool:unwanted[MAX_VEHICLES];
			for(new player=0; player<MAX_PLAYERS; player++)
  			{
      	 	 	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
  			}
			for(new x = 0; x < sizeof(VehicleInfo); x++)
			{
				if(VehicleInfo[x][vehGroup] == 6)
				{
					if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
					Gas[VehicleInfo[x][vehCarID]] = 100;
				}
			}
			if(InWar[6] == 1)
			{
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 6)
					{
						SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], DynamicFactions[6][fWarTurf]);
					}
				}
			}
			format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
  		}
  		if(PlayerInfo[playerid][pMember] == 7 && PlayerInfo[playerid][pRank] >= 5)// HITMAN
  		{
			new bool:unwanted[MAX_VEHICLES];
			for(new player=0; player<MAX_PLAYERS; player++)
  			{
        		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
  			}
			for(new x = 0; x < sizeof(VehicleInfo); x++)
			{
				if(VehicleInfo[x][vehGroup] == 7)
				{
					if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
					Gas[VehicleInfo[x][vehCarID]] = 100;
				}
			}
			format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
  		}
  		if(PlayerInfo[playerid][pMember] == 8 && PlayerInfo[playerid][pRank] >= 5)//LVPD
  		{
			new bool:unwanted[MAX_VEHICLES];
			for(new player=0; player<MAX_PLAYERS; player++)
  			{
        		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
  			}
			for(new x = 0; x < sizeof(VehicleInfo); x++)
			{
				if(VehicleInfo[x][vehGroup] == 8)
				{
					if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
					Gas[VehicleInfo[x][vehCarID]] = 100;
				}
			}
			format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
  		}
  		if(PlayerInfo[playerid][pMember] == 9 && PlayerInfo[playerid][pRank] >=5)// NR
  		{
			new bool:unwanted[MAX_VEHICLES];
			for(new player=0; player<MAX_PLAYERS; player++)
  			{
        		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
  			}
			for(new x = 0; x < sizeof(VehicleInfo); x++)
			{
				if(VehicleInfo[x][vehGroup] == 9)
				{
					if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
					Gas[VehicleInfo[x][vehCarID]] = 100;
				}
			}
			format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
  		}
  		if(PlayerInfo[playerid][pMember] == 10 && PlayerInfo[playerid][pRank] >=5)// Ballas
 	 	{
			new bool:unwanted[MAX_VEHICLES];
			for(new player=0; player<MAX_PLAYERS; player++)
  			{
     	 	  	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
  			}
			for(new x = 0; x < sizeof(VehicleInfo); x++)
			{
				if(VehicleInfo[x][vehGroup] == 10)
				{
					if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
					Gas[VehicleInfo[x][vehCarID]] = 100;
				}
			}
			if(InWar[10] == 1)
			{
				for(new x = 0; x < sizeof(VehicleInfo); x++)
				{
					if(VehicleInfo[x][vehGroup] == 10)
					{
						SetVehicleVirtualWorld(VehicleInfo[x][vehCarID], DynamicFactions[10][fWarTurf]);
					}
				}
			}
			format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
  		}
  		if(PlayerInfo[playerid][pMember] == 11 && PlayerInfo[playerid][pRank] >=5)// HITMAN
  		{
			new bool:unwanted[MAX_VEHICLES];
			for(new player=0; player<MAX_PLAYERS; player++)
  			{
        		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
  			}
			for(new x = 0; x < sizeof(VehicleInfo); x++)
			{
				if(VehicleInfo[x][vehGroup] == 11)
				{
					if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
					Gas[VehicleInfo[x][vehCarID]] = 100;
				}
			}
			format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
  		}
    /*if(PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pRank] >=5)// SI
  		{
			new bool:unwanted[MAX_VEHICLES];
			for(new player=0; player<MAX_PLAYERS; player++)
  			{
        		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
  			}
			for(new x = 0; x < sizeof(VehicleInfo); x++)
			{
				if(VehicleInfo[x][vehGroup] == 12)
				{
					if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
					Gas[VehicleInfo[x][vehCarID]] = 100;
				}
			}
			format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
  		}*/
  		if(PlayerInfo[playerid][pMember] == 13 && PlayerInfo[playerid][pRank] >=5)//taxi
  		{
			new bool:unwanted[MAX_VEHICLES];
			for(new player=0; player<MAX_PLAYERS; player++)
  			{
        		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
  			}
			for(new x = 0; x < sizeof(VehicleInfo); x++)
			{
				if(VehicleInfo[x][vehGroup] == 13)
				{
					if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
					Gas[VehicleInfo[x][vehCarID]] = 100;
				}
			}
			format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
  		}
  		if(PlayerInfo[playerid][pMember] == 14 && PlayerInfo[playerid][pRank] >=5)//paramedic
  		{
			new bool:unwanted[MAX_VEHICLES];
			for(new player=0; player<MAX_PLAYERS; player++)
  			{
        		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
  			}
			for(new x = 0; x < sizeof(VehicleInfo); x++)
			{
				if(VehicleInfo[x][vehGroup] == 14)
				{
					if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
					Gas[VehicleInfo[x][vehCarID]] = 100;
				}
			}
			format(str,sizeof(str),"Your faction's vehicles were respawned by %s (rank %d).",sendername,PlayerInfo[playerid][pRank]);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
		}
  	}
  	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
    return 1;
}
CMD:quitgroup(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pLeader] > 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You can't use this command because you are a leader.");
    if(PlayerInfo[playerid][pMember] < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a member of a group.");
    if(Undercover[playerid] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use this command while you are undercover.");
    else if(PlayerInfo[playerid][pMember] >= 1 && PlayerInfo[playerid][pLeader] == 0)
	{
		new query[256];
	    format(query, 256, "SELECT * FROM `users` WHERE `Member` = '%d' AND `Rank` = '7'", PlayerInfo[playerid][pMember]);
	    new Cache: masta = mysql_query(SQL, query);
		if(cache_get_row_count() >= 1)
			ShowPlayerDialog(playerid,DIALOG_QUITGROUP,DIALOG_STYLE_MSGBOX,"Your are sure?","You want to left the current faction?\nYou receive 20 FP because faction have a leader.","Yes","No");
		else
			ShowPlayerDialog(playerid,DIALOG_QUITGROUP,DIALOG_STYLE_MSGBOX,"Your are sure?","You want to left the current faction?\nYou not receive FP because faction doesn't have a leader.","Yes","No");
		cache_delete(masta);
	}
	return 1;
}
CMD:warn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new name[50],reason[64],reasone[64],string[256],sendername[30],id,warns;
		if(sscanf(params, "s[50]s[64]", name, reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /warn [full name] [reason]");
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "SELECT * FROM `users` WHERE `name`='%s'", name);
		new Cache: ab = mysql_query(SQL, string);
		if(cache_get_row_count() == 1)
		{
			id = cache_get_field_content_int(0, "id");
			warns = cache_get_field_content_int(0, "Warnings");
		}
		else
		{
			cache_delete(ab);
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Invalid player.");
			return 1;
		}
		cache_delete(ab);
		mysql_real_escape_string(reason, reasone);
		if(warns == 0)
		{
			mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `Warnings` = '1', `WarnReason1` = '%s' WHERE `id` = '%d'", reasone, id);
			mysql_tquery(SQL, string, "", "");
		}
		else if(warns == 1)
		{
			mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `Warnings` = '2', `WarnReason2` = '%s' WHERE `id` = '%d'", reasone, id);
			mysql_tquery(SQL, string, "", "");
		}
		else if(warns == 2)
		{
			mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET `Warnings` = '0', `WarnReason1` = '(null)', `WarnReason2` = '(null)' WHERE `id` = '%d'", id);
			mysql_tquery(SQL, string, "", "");
		}
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pSQLID] == id)
			{
				if(PlayerInfo[i][pLanguage] == 2) format(string, sizeof(string), "Ai primit un warn de la adminul %s, motiv: %s", sendername, reason);
				else format(string, sizeof(string), "You have received an warn from admin %s, reason: %s", sendername, reason);
				SendClientMessage(i, COLOR_RED2, string);
				KickEx(i);
			}
		}
		format(string, sizeof(string), "%s has been warned by %s, rason: %s", name, sendername, reason);
		SendClientMessageToAll(COLOR_LIGHTRED, string);
		new var100[256];
		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','5','%s','%s','%s','%d')", id, PlayerInfo[playerid][pSQLID], reasone, name, sendername, gettime());
		mysql_tquery(SQL, var100, "", "");
		if(warns == 2)
		{
			new time = gettime() + (3*86400);
            mysql_format(SQL,string,sizeof(string),"INSERT INTO bans (PlayerName, AdminName, Reason, IP, Days, IPBan, Permanent, Active, Time) VALUES('%s', 'AdmBot', '3/3 warns', '0', 3, 0, 0, 1, %d)", name, time);
			mysql_tquery(SQL,string,"","");
			format(string, sizeof(string), "%s has been banned by AdmBot for 3 days, reason: 3/3 warns.", name);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','0','2','%s','%s','%s','%d')", id, reasone, name, sendername, gettime());
			mysql_tquery(SQL, var100, "", "");
		}
		SendClientMessage(playerid, COLOR_DARKPINK, "WarnOff: Player warned!");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:mywarns(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string[128],query[256],warn1[64],warn2[64];
	format(string, sizeof(string), "Warning status [%s, ID:%d]:", PlayerInfo[playerid][pNormalName], playerid);
	SendClientMessage(playerid, COLOR_GREY, string);
	if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Ai %d/3 warn-uri. La 3/3 warns vei fi banat pentru 3 zile.", PlayerInfo[playerid][pWarns]);
	else format(string, sizeof(string), "You have %d/3 warns. At 3/3 warns you will be banned for 3 days.", PlayerInfo[playerid][pWarns]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(query, sizeof(query), "SELECT * FROM `users` WHERE `id`='%d'", PlayerInfo[playerid][pSQLID]);
	new Cache: ab = mysql_query(SQL, query);
	cache_get_field_content(0, "WarnReason1", warn1);
	cache_get_field_content(0, "WarnReason2", warn2);
	cache_delete(ab);
	SendClientMessage(playerid, COLOR_WHITE, warn1);
	SendClientMessage(playerid, COLOR_WHITE, warn2);
	SendClientMessage(playerid, COLOR_WHITE, "");
 	return 1;
}
CMD:addresetdays(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pLeader] >= 1 || PlayerInfo[playerid][pAdmin] >= 7)
 	{
		new para1,level,string[256],giveplayer[30],sendername[30];
		if(sscanf(params, "ui", para1,level)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /addresetdays [name/playerid] [days]");
		if(level > 7) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Minimum days are 1 and maximum is 7.");
		if(PlayerInfo[para1][pMember] != PlayerInfo[playerid][pLeader] && PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} This member is not in your faction.");
		if(PlayerInfo[para1][pLeader] > 0  && PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is a leader.");
		if(IsPlayerConnected(para1))
		{
			if(para1 != INVALID_PLAYER_ID)
			{
				GetPlayerName(para1, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new date2[6];
				TimestampToDate(PlayerInfo[para1][pFactionTime],date2[0],date2[1],date2[2],date2[3],date2[4],date2[5],2);
				PlayerInfo[para1][pFactionTime] = gettime() + (level*86400);
				new date[6];
				TimestampToDate(PlayerInfo[para1][pFactionTime],date[0],date[1],date[2],date[3],date[4],date[5],2);
				format(string,sizeof(string),"%s added %d days for reset/rank up to %s. New reset/rank up date: %02d/%02d/%02d around %02d:%02d. Old reset/rank up date: %02d/%02d/%02d.",sendername,level,giveplayer,date[2],date[1],date[0],date[3],date[4],date2[2],date2[1],date2[0]);
				Factionlog(PlayerInfo[para1][pMember],PlayerInfo[para1][pSQLID],PlayerInfo[playerid][pSQLID],string);
				
				format(string, sizeof(string), "%s has added %d days for your reset/rank up. New reset/rank up date: %02d/%02d/%02d around %02d:%02d.", sendername,level,date[2],date[1],date[0],date[3],date[4]);
				SendClientMessage(para1, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You have added %d days to %s. New reset/rank up date: %02d/%02d/%02d around %02d:%02d.", level,giveplayer,date[2],date[1],date[0],date[3],date[4]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_LIGHTRED, "Abuse of this command brings sanctions including ban.");
	    		new str[256];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `FactionTime`='%d' WHERE `name`='%s'",PlayerInfo[para1][pFactionTime],PlayerInfo[para1][pNormalName]);
				mysql_tquery(SQL,str,"","");
			}
	     	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	    }
	    else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a faction leader.");
	return 1;
}
CMD:raport(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pMember] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in a faction.");
	if(PlayerInfo[playerid][pRank] >= 6) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are rank 6+ member, you don't have a raport to complete.");
	if(SvarInfo[3][svValue] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} The faction raport is setted to be optional.");
	new string[128];
	if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 8)
	{
		SendClientMessage(playerid, COLOR_GREY, "------ {79AFD4}Faction Raport{CECECE} ------");
		format(string,sizeof(string), "Arrests/Runners: %d/%d",PlayerInfo[playerid][Raport2]+PlayerInfo[playerid][Raport3],11-PlayerInfo[playerid][pRank]);
		SendClientMessage(playerid, COLOR_GREY, string);
		format(string,sizeof(string), "Tickets accorded: %d/3",PlayerInfo[playerid][Raport1]);
		SendClientMessage(playerid, COLOR_GREY, string);
		if(PlayerInfo[playerid][pRank] != 1) {
			format(string,sizeof(string), "Licences confiscated: %d/2",PlayerInfo[playerid][Raport4]);
			SendClientMessage(playerid, COLOR_GREY, string);
		}
	}
	if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3)
	{
		SendClientMessage(playerid, COLOR_GREY, "------ {79AFD4}Faction Raport{CECECE} ------");
		format(string,sizeof(string), "Arrests/Runners: %d/%d",PlayerInfo[playerid][Raport2]+PlayerInfo[playerid][Raport3],11-PlayerInfo[playerid][pRank]);
		SendClientMessage(playerid, COLOR_GREY, string);
	}
	if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pMember] == 10)
	{
		SendClientMessage(playerid, COLOR_GREY, "------{79AFD4} Faction Raport {CECECE}------");
		format(string,sizeof(string), "Kills/Deaths: %d/%d",PlayerInfo[playerid][Raport1]+PlayerInfo[playerid][Raport2],11-PlayerInfo[playerid][pRank]);
		SendClientMessage(playerid, COLOR_GREY, string);
	}
	if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pMember] == 14)
	{
		SendClientMessage(playerid, COLOR_GREY, "------ {79AFD4}Faction Raport {CECECE}------");
		format(string,sizeof(string), "Raport: %d/%d",PlayerInfo[playerid][Raport1],11-PlayerInfo[playerid][pRank]);
		SendClientMessage(playerid, COLOR_GREY, string);
	}
	if(PlayerInfo[playerid][pMember] == 9)
	{
		SendClientMessage(playerid, COLOR_GREY, "------ {79AFD4}Faction Raport {CECECE}------");
		format(string,sizeof(string), "News: %d/%d",PlayerInfo[playerid][Raport1],11-PlayerInfo[playerid][pRank]);
		SendClientMessage(playerid, COLOR_GREY, string);
		if(PlayerInfo[playerid][pRank] >= 2)
		{	
			format(string,sizeof(string), "Lives: %d/2",PlayerInfo[playerid][Raport4]);
			SendClientMessage(playerid, COLOR_GREY, string);
		}
	}
	new date[6];
	TimestampToDate(PlayerInfo[playerid][pFactionTime],date[0],date[1],date[2],date[3],date[4],date[5],2);
	format(string, sizeof(string), "Next rank up date %02d/%02d/%02d around %02d:%02d / Faction Warns: %d",date[2],date[1],date[0],date[3],date[4],PlayerInfo[playerid][pFACWarns]);
	SendClientMessage(playerid, COLOR_GREY, string);
	SendClientMessage(playerid, COLOR_GREY, "----------------------------");
	return 1;
}
CMD:checkwarns(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
 		new id,string[128],query[256],warn1[64],warn2[64];
 		if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /checkwarns [name/playerid]");
 		if(IsPlayerConnected(id))
 		{
	 		format(string, sizeof(string), "Warning status [%s, ID:%d]:", PlayerInfo[id][pNormalName], id);
	 		SendClientMessage(playerid, COLOR_GREY, string);
	 		format(string, sizeof(string), "This player have %d warns. At 3/3 warns will be banned for 3 days.", PlayerInfo[id][pWarns]);
	 		SendClientMessage(playerid, COLOR_WHITE, string);
	 		format(query, sizeof(query), "SELECT * FROM `users` WHERE `id`='%d'", PlayerInfo[id][pSQLID]);
	 		new Cache: ab = mysql_query(SQL, query);
	 		cache_get_field_content(0, "WarnReason1", warn1);
	 		cache_get_field_content(0, "WarnReason2", warn2);
	 		cache_delete(ab);
	 		SendClientMessage(playerid, COLOR_WHITE, warn1);
	 		SendClientMessage(playerid, COLOR_WHITE, warn2);
	 		SendClientMessage(playerid, COLOR_WHITE, "");
	 	}
	 	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
 	}
 	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
 	return 1;
}
CMD:muteo(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
    new id[30],escape[30],cont,msg[80],msge[80],time,playeridd;
    if(sscanf(params, "s[25]is[80]", id,time,msg)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /muteo [name] [minutes] [reason]");
	mysql_real_escape_string(id, escape);
	cont = MySQLCheckAccount(escape);
    if(cont == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid player.");
    if(time <= 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid mute time.");
	mysql_real_escape_string(msg, msge);
    new sendername[25],string[184];
    GetPlayerName(playerid,sendername,sizeof(sendername));
    format(string, sizeof(string), "Offline: %s was muted by %s for %d minutes, reason: %s", escape, sendername,time,msge);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	new timem = time*60,
		str1[168];
	mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET `Muted`='1',`MuteTime`='%d' WHERE `name`='%s'",timem,escape);
	mysql_tquery(SQL,str1,"","");
	format(str1, sizeof(str1), "SELECT `id` FROM users WHERE `name` = '%s'", escape);
	new Cache: ab = mysql_query(SQL,str1);
	if(cache_get_row_count() > 0)
	{
		playeridd = cache_get_field_content_int(0, "id");
	}
	cache_delete(ab);
	new var100[256];
	mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','7','%d','%s','%s','%s','%d')", playeridd,PlayerInfo[playerid][pSQLID],time,msge,escape,sendername,gettime());
	mysql_tquery(SQL,var100,"","");
	format(string, sizeof(string), "Ai primit mute de la adminul %s pentru %d minute, motiv: %s.", sendername,time,msge);
	mysql_format(SQL, var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')",playeridd,string);
	mysql_tquery(SQL,var100,"","");
	return 1;
}

CMD:gmx(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] >= 6)
		ShowPlayerDialog(playerid, DIALOG_GMX, DIALOG_STYLE_MSGBOX, "Server Restart", "Please confirm whether you are positive that you wish to initiate a server restart?", "Yes", "No");
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:paydaygmx(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] >= 6)
		ShowPlayerDialog(playerid, DIALOG_UPDATERR, DIALOG_STYLE_MSGBOX, "Update Server Restart", "Please confirm whether you are positive that you wish to initiate a server restart after payday?", "Yes", "No");
	return 1;
}
CMD:romana(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    PlayerInfo[playerid][pLanguage] = 2;
    new str[356];
	mysql_format(SQL,str,356,"UPDATE users SET `Language`='2' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
	mysql_tquery(SQL,str,"","");
    SendClientMessage(playerid, COLOR_WHITE, "Limba setata: romana.");
	SendClientMessage(playerid, COLOR_WHITE, "[EN] To set the language to English, use /en.");
    return 1;
}
CMD:english(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    PlayerInfo[playerid][pLanguage] = 1;
    new str[356];
	mysql_format(SQL,str,356,"UPDATE users SET `Language`='1' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
	mysql_tquery(SQL,str,"","");
    SendClientMessage(playerid, COLOR_WHITE, "Language set to english.");
	SendClientMessage(playerid, COLOR_WHITE, "[RO] Pentru a seta limba romana foloseste /ro.");
    return 1;
}
CMD:ro(playerid, params[]) return cmd_romana(playerid, params);
CMD:en(playerid, params[]) return cmd_english(playerid, params);
CMD:fuelcars(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 4)
    {
		new gasvehicle,sendername[30],string[256];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(sscanf(params, "i", gasvehicle)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /fuelcars [amount]");
		if(gasvehicle < 0 || gasvehicle > 100) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Value must be between 0 - 100.");
	   	for(new c=0;c<MAX_VEHICLES;c++)
		{
			Gas[c] = gasvehicle;
		}
		format(string, sizeof(string), "{FFFFCC}All cars filled with %d procent fuel.",gasvehicle);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "(AdmCmd){FFFFFF} %s has refuelled all vehicles with %d liters.",sendername,gasvehicle);
		ABroadCast(COLOR_RED2,string, 4);
    }
    else return SendClientMessage(playerid,COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:spawnweapon(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
   	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new id,gun,ammo,string[256],sendername[30],giveplayer[30],wname[30];
		if(sscanf(params, "uii",id,gun,ammo)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /spawnweapon [name/playerid] [gun id] [ammo]");
  	    if(gun < 1||gun > 46||gun==19||gun==20||gun==21||gun==45) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Invalid weapond ID.");
	    if(ammo <1||ammo > 1000) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Invalid ammo (1-1000).");
	    if(PlayerInfo[id][pGunLic] == 0)  return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} This player doesn't have gun licence.");
		if(IsPlayerConnected(id))
		{
		    if(id != INVALID_PLAYER_ID)
		    {
				GivePlayerWeaponEx(id, gun, ammo);
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetWeaponName(gun, wname, sizeof(wname));
				format(string, sizeof(string), "(AdmCmd){FFFFFF} Admin %s useed /spawnwapon to give %s a %s.", sendername, giveplayer, wname);
        		ABroadCast(COLOR_RED2,string,1);
				if(GetPlayerState(id) == PLAYER_STATE_PASSENGER)
				{
			        new gun2,tmp;
			        GetPlayerWeaponData(id,5,gun2,tmp);
			        #pragma unused tmp
			        if(gun2)SetPlayerArmedWeapon(id,gun2);
			        else SetPlayerArmedWeapon(id,0);
				}
			}
		}
	    else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid,COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:healall(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new sendername[25],string[256];
    GetPlayerName(playerid, sendername, sizeof(sendername));
    if(PlayerInfo[playerid][pAdmin] >= 3)
    {
		format(string, sizeof(string), "(AdmCmd){FFFFFF} %s has given to all players full hp.",sendername);
        ABroadCast(COLOR_RED2,string,3);
        foreach(new i : Player)
		{
			SetPlayerHealthEx(i, 100);
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:setsvar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new string[128],query[256],svar[32],value,id;
	if(sscanf(params, "s[32]d", svar, value)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /setsvar [sVar] [value]");
	format(query, sizeof(query), "SELECT * FROM `svars` WHERE `SvarName`='%s'", svar);
	new Cache: xd = mysql_query(SQL, query);
	if(cache_get_row_count() > 0)
	{
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
			id = cache_get_field_content_int(i, "id");
		}
		mysql_format(SQL, query, sizeof(query), "UPDATE `svars` SET `SvarValue`='%d' WHERE `id`='%d'", value, id);
		mysql_tquery(SQL, query, "", "");
		format(string, sizeof(string), "sVar %s updated to %d.", svar, value);
		ABroadCast(COLOR_ADMCOMMANDS, string, 6);
		format(string, sizeof(string), "sVar %s set.", svar);
		SvarInfo[id][svValue] = value;
		SendClientMessage(playerid, COLOR_DARKPINK, string);
		mysql_tquery(SQL, "SELECT * FROM `svars`", "LoadSVars", "");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Unknown sVar.");
	cache_delete(xd);
	return 1;
}
CMD:economy(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pLeader] != 7) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be the Mayor.");
	new string[128],query[256],svar[32],value,id;
	if(sscanf(params, "s[32]d", svar, value)) 
	{
		SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /economy [variable] [value]");
		SendClientMessage(playerid, COLOR_GREY, "arms_mats (1000-1050), truck_money(1000-1050), garbage_money(50-55), farm_money(1000-1050)");
		SendClientMessage(playerid, COLOR_GREY, "fish_money(1000-1050), pizza_money(650-700), bus_money(100-110), mechanic_money(1000-1050)");
		SendClientMessage(playerid, COLOR_GREY, "jacker_money(1000-1050), gas_price(100-110), police_ticket(5000-5100), miner_money(50-55)");
		SendClientMessage(playerid, COLOR_GREY, "air_money(500-600)");
		return 1;
	}
	format(query, sizeof(query), "SELECT * FROM `svars` WHERE `SvarName`='%s'", svar);
	new Cache: xd = mysql_query(SQL, query);
	if(cache_get_row_count() > 0)
	{
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
			id = cache_get_field_content_int(i, "id");
		}
		if(id == 4 || id == 5 || id == 7 || id == 8 || id == 11 || id == 12) if(value < 1000 || value > 1050) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Value must be between 1000-1050.");
		else if(id == 6 || id == 17) if(value < 50 || value > 55) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Value must be between 50-55.");
		else if(id == 9) if(value < 650 || value > 700) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Value must be between 650-700.");
		else if(id == 10 || id == 15) if(value < 100 || value > 110) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Value must be between 100-110.");
		else if(id == 18) if(value < 500 || value > 600) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Value must be between 500-600.");
		else if(id == 16) if(value < 5000 || value > 5100) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Value must be between 5000-5100.");
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error) Invalid variable.");
		format(string,sizeof(string),"You modified server variable %s to value %d.",svar, value);
		Adminlog(PlayerInfo[playerid][pSQLID], string, "economy");
		SendClientMessage(playerid, COLOR_LIGHTRED, string);
		mysql_format(SQL, query, sizeof(query), "UPDATE `svars` SET `SvarValue`='%d' WHERE `id`='%d'", value, id);
		mysql_tquery(SQL, query, "", "");
		SvarInfo[id][svValue] = value;
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Unknown sVar.");
	cache_delete(xd);
	return 1;
}
CMD:announce(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pLeader] != 7) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be the Mayor.");
	new text[256],string[300];
	if(sscanf(params, "s[256]",text)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /announce [message]");
	format(string, sizeof(string), "(( Mayor %s: %s ))", PlayerInfo[playerid][pNormalName], text);
	foreach(new x : Player)
	{
		SendSplitMessage(x, COLOR_GENANNOUNCE2, string);
	}
	Log(PlayerInfo[playerid][pSQLID], string, "announce");
	return 1;
}
CMD:svar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 7 && PlayerInfo[playerid][pLeader] != 7) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new string[128],svar[32],svarvalue;
	SendClientMessage(playerid, COLOR_WHITE, "sVars:");
	new Cache: xd = mysql_query(SQL, "SELECT * FROM `svars`");
	if(cache_get_row_count() > 0)
	{
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
			svarvalue = cache_get_field_content_int(i, "SvarValue");
			cache_get_field_content(i, "SvarName", svar);
			format(string, sizeof(string), "%s - value: %d", svar, svarvalue);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} No sVars active.");
	cache_delete(xd);
	return 1;
}
CMD:setserver(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		new item[20], amount, string[128];
		if(sscanf(params, "s[20]d", item, amount))
		{
			SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /setserver [item] [seconds]");
			SendClientMessage(playerid, COLOR_GREY, "Items: saveplayerdata,whatertimer,payday");
			return 1;
		}
		if(strcmp(item,"saveplayerdata",true) == 0)
		{
			SetTimer("SavePlayerData", amount*1000, 1);
			format(string, sizeof(string), "SavePlayerData timer was setted to %d seconds (( Admin %s[admin:%d] ))", amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
        	ABroadCast(COLOR_ADMCOMMANDS, string, 5);
        	Log(PlayerInfo[playerid][pSQLID], string, "settimer");
        	SendClientMessage(playerid, COLOR_ADMCOMMANDS, "If you don't set timer back to 600 seconds, him stay on your setted data.");
		}
		else if(strcmp(item,"whatertimer",true) == 0)
		{
			SetTimer("SendRandMsg",amount*1000,1); 
			format(string, sizeof(string), "WhaterTimer timer was setted to %d seconds (( Admin %s[admin:%d] ))", amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
        	ABroadCast(COLOR_ADMCOMMANDS, string, 5);
        	Log(PlayerInfo[playerid][pSQLID], string, "setserver");
        	SendClientMessage(playerid, COLOR_ADMCOMMANDS, "If you don't set timer back to 1800 seconds, him stay on your setted data.");
		}
		else if(strcmp(item,"payday",true) == 0)
		{
			format(string, sizeof(string), "Payday was started (( Admin %s[admin:%d] ))", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
        	ABroadCast(COLOR_ADMCOMMANDS, string, 5);
        	Log(PlayerInfo[playerid][pSQLID], string, "setserver");
        	SendClientMessage(playerid, COLOR_ADMCOMMANDS, "You can cause erros if you use this command exccesive.");
        	foreach(new x : Player)
			{
				PlayerInfo[x][pPayDaymin] = 0;
				PlayerInfo[x][pPayDaysec] = 30;
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
 	return 1;
}
CMD:set(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new id, item[20], amount, string[128], str[256];
		if(sscanf(params, "us[20]d", id, item, amount))
		{
			SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /set [playerid] [item] [amount]");
			SendClientMessage(playerid, COLOR_GREY, "Items: Health, Armour, Money, BankMoney, Skin, int, Job, RP, TemporarSkin, Level, giftpoints");
			SendClientMessage(playerid, COLOR_GREY, "Phone, Materials, Group, GroupRank, Age, Gender, Premium, FP, PremiumPoints, Drugs, Skin, RB, cases");
			SendClientMessage(playerid, COLOR_GREY, "neonred, neonblue, neongreen, neonyellow, neonpink, petpoints, hours, clanrank, cslots");
			return 1;
		}
		if(IsPlayerConnected(id))
		{
			if(id != INVALID_PLAYER_ID)
		    {
				if(strcmp(item,"health",true) == 0)
				{
					SetPlayerHealthEx(id, amount);
					format(string, sizeof(string), "%s[user:%d]'s health was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
	            	format(string, sizeof(string), "* Admin %s has set your health to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item, "clanrank", true) == 0) {
					mysql_format(SQL,str, sizeof(str), "UPDATE users SET `CRank`='%d' WHERE `name`='%s'", amount,PlayerInfo[id][pNormalName]);
	       			mysql_tquery(SQL,str,"","");
	       			PlayerInfo[id][pCRank] = amount;
	       			format(string, sizeof(string), "%s[user:%d]'s clan rank was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
				}
				else if(strcmp(item,"armour",true) == 0)
				{
					SetPlayerArmourEx(id, amount);
					format(string, sizeof(string), "%s[user:%d]'s armour was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
	            	format(string, sizeof(string), "* Admin %s has set your armour to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"cslots",true) == 0)
				{
					PlayerInfo[playerid][pCarSlots] = amount;
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `CarSlots`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarSlots],PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
	            	format(string, sizeof(string), "* Admin %s set %s's car slots to %d.", PlayerInfo[playerid][pNormalName], PlayerInfo[id][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"money",true) == 0)
				{
					if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
					ResetPlayerCash(id);
					GivePlayerCash(id, amount);
					format(string, sizeof(string), "%s[user:%d]'s money was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 5);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
	            	format(string, sizeof(string), "* Admin %s has set your money to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"bankmoney",true) == 0)
				{
					if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
					PlayerInfo[id][pAccount] = amount;
					Update(id, pBank);
					format(string, sizeof(string), "%s[user:%d]'s bank money was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 5);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
	            	format(string, sizeof(string), "* Admin %s has set your bank money to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"hours",true) == 0)
				{
					if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
					PlayerInfo[id][pConnectTime] = amount;
					Update(id, pConnectTimex);
					format(string, sizeof(string), "%s[user:%d]'s playing hours was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 5);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
	            	format(string, sizeof(string), "* Admin %s has set your playing hours to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"skin",true) == 0)
				{
					if(amount < 0 || amount > 311) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Skin id must between 0 and 311.");
					if(verifySkin(playerid, amount) == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} The player already own this skin.");
					PlayerInfo[id][pModel] = amount;
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Model`='%d' WHERE `name`='%s'", PlayerInfo[id][pModel], PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
					SetPlayerSkin(id, PlayerInfo[id][pModel]);
					addSkin(playerid, amount);
					format(string, sizeof(string), "%s[user:%d]'s skin was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 5);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
	            	format(string, sizeof(string), "* Admin %s has set your skin to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"temporarskin",true) == 0)
				{
					if(amount < 0 || amount > 311) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Skin id must between 0 and 311.");
					SetPlayerSkin(id, amount);
					format(string, sizeof(string), "%s[user:%d]'s temporar skin was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
	            	format(string, sizeof(string), "* Admin %s has set your temporar skin to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"int",true) == 0)
				{
					SetPlayerInterior(id, amount);
					PlayerInfo[id][pInt] = amount;
					format(string, sizeof(string), "%s[user:%d]'s interior was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
	            	format(string, sizeof(string), "* Admin %s has set your interior to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"job",true) == 0)
				{
					PlayerInfo[id][pJob] = amount;
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Job`='%d' WHERE `name`='%s'", PlayerInfo[id][pJob], PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
					format(string, sizeof(string), "%s[user:%d]'s job was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
	            	format(string, sizeof(string), "* Admin %s has set your job to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"phone",true) == 0)
				{
					if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
					format(str, sizeof(str), "SELECT * FROM `users` WHERE `PhoneNr` = '%d' ORDER BY `id` ASC", amount);
					new Cache: res = mysql_query(SQL, str);
					if(cache_get_row_count() != 0)
					{
						SendClientMessage(playerid, COLOR_GREY, "That phone number is used by another player.");
						cache_delete(res);
						return 1;
					}
					else
					{
						if(amount < 1000 || amount > 9999)
						{
							SendClientMessage(playerid, COLOR_GREY, "Phone number must be between 1000 and 9999.");
							cache_delete(res);
							return 1;
						}
						PlayerInfo[id][pPhone] = 1;
						PlayerInfo[id][pPnumber] = amount;
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Phone`='1',`PhoneNr`='%d' WHERE `name`='%s'", PlayerInfo[id][pPnumber], PlayerInfo[id][pNormalName]);
						mysql_tquery(SQL,str,"","");
					}
					cache_delete(res);
					format(string, sizeof(string), "%s[user:%d]'s phone number was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 5);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
	            	format(string, sizeof(string), "* Admin %s has set your phone number to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"materials",true) == 0)
				{
					if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 5+.");
					PlayerInfo[id][pMats] = amount;
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Materials`='%d' WHERE `name`='%s'", PlayerInfo[id][pMats], PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
					format(string, sizeof(string), "%s[user:%d]'s materials was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
	            	format(string, sizeof(string), "* Admin %s has set your materials to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"rb",true) == 0)
				{
					if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 5+.");
					PlayerInfo[id][pRob] = amount;
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Rob`='%d' WHERE `name`='%s'", PlayerInfo[id][pRob], PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
					format(string, sizeof(string), "%s[user:%d]'s Rob Point's was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
	            	format(string, sizeof(string), "* Admin %s has set your Rob point's to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"drugs",true) == 0)
				{
					if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 5+.");
					PlayerInfo[id][pDrugs] = amount;
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Drugs`='%d' WHERE `name`='%s'", PlayerInfo[id][pDrugs], PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
					format(string, sizeof(string), "%s[user:%d]'s Drugs was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
	            	format(string, sizeof(string), "* Admin %s has set your drugs to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"group",true) == 0)
				{
					if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 5+.");
					if(amount < 0 || amount > 14 || amount == 12) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Group id must be between 1 and 14.");
					if(amount == 7) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can add only a leader at this faction.");
					PlayerInfo[id][pMember] = amount;
					if(amount > 0) PlayerInfo[id][pRank] = 1;
					else PlayerInfo[id][pRank] = 0;
					if(amount == 0)
					{
					    gTeam[id] = 3;
				    	PlayerInfo[id][pTeam] = 3;
					}
					else if(amount == 1 || amount == 2 || amount == 3 || amount == 7 || amount == 8)
					{
					    gTeam[id] = 2;
				    	PlayerInfo[id][pTeam] = 2;
					}
					else if(amount == 4 || amount == 5 || amount== 6 || amount == 10)
					{
					    gTeam[id] = 5;
				    	PlayerInfo[id][pTeam] = 5;
					}
					else if(amount == 9 || amount == 12 || amount == 13 || amount == 14)
					{
					    gTeam[id] = 4;
				    	PlayerInfo[id][pTeam] = 4;
					}
					else if(amount == 11)
					{
					    gTeam[id] = 11;
				    	PlayerInfo[id][pTeam] = 11;
					}
					else if(amount == 7)
					{
					    gTeam[id] = 7;
				    	PlayerInfo[id][pTeam] = 7;
					}
					SetPlayerSkin(id, PlayerInfo[id][pModel]);
					if(amount > 0) {
						PlayerInfo[id][pFactionJoin] = gettime();
						PlayerInfo[id][pFactionTime] = gettime() + (7*86400);
					}
					else PlayerInfo[id][pFactionJoin] = 0;
					PlayerInfo[id][Raport1] = 0;
					PlayerInfo[id][Raport2] = 0;
					PlayerInfo[id][Raport3] = 0;
					PlayerInfo[id][Raport4] = 0;
					PlayerInfo[id][Raport5] = 0;
					PlayerInfo[id][Raport6] = 0;
					PlayerInfo[id][pPaydayON] = 0;
					Update(id,Raport1x);
					Update(id,Raport2x);
					Update(id,Raport3x);
					Update(id,Raport4x);
					Update(id,Raport5x);
					Update(id,Raport6x);
					Update(id,pPaydayONx);
					SetPlayerSkinEx(id);
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Team`='%d',`Member`='%d',`Rank`='%d',`Model`='%d',`FactionJoin`='%d',`FactionTime`='%d' WHERE `name`='%s'", PlayerInfo[id][pTeam], PlayerInfo[id][pMember], PlayerInfo[id][pRank], PlayerInfo[id][pModel], PlayerInfo[id][pFactionJoin], PlayerInfo[id][pFactionTime], PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
					format(string, sizeof(string), "%s[user:%d]'s group was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 5);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
	            	SetPlayerToTeamColor(id);
	            	format(string, sizeof(string), "* Admin %s has set your group to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"grouprank",true) == 0)
				{
					if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 5+.");
					if(PlayerInfo[id][pMember] < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not in a group.");
					if(amount < 1 || amount > 7) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Rank must be between 1 and 7.");
					if(PlayerInfo[id][pLeader] != 0 && amount < 7) PlayerInfo[id][pLeader] = 0;
					if(amount == 7) PlayerInfo[id][pLeader] = PlayerInfo[id][pMember];
					PlayerInfo[id][pRank] = amount;
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Rank`='%d',`Leader`='%d' WHERE `name`='%s'", PlayerInfo[id][pRank], PlayerInfo[id][pLeader], PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
					format(string, sizeof(string), "%s[user:%d]'s group rank was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 5);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
	            	format(string, sizeof(string), "* Admin %s has set your group rank to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
	            	SetPlayerSkinEx(id);
				}
				else if(strcmp(item,"age",true) == 0)
				{
					if(amount < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Age must be more than 0.");
					PlayerInfo[id][pAge] = amount;
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Age`='%d' WHERE `name`='%s'", PlayerInfo[id][pAge], PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
					format(string, sizeof(string), "%s[user:%d]'s age was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 5);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
	            	format(string, sizeof(string), "* Admin %s has set your age to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"gender",true) == 0)
				{
					if(amount < 1 || amount > 2) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Gender must be 1 (male) or 2 (female).");
					PlayerInfo[id][pSex] = amount;
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Sex`='%d' WHERE `name`='%s'", PlayerInfo[id][pSex], PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
					format(string, sizeof(string), "%s[user:%d]'s gender was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 5);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
	            	format(string, sizeof(string), "* Admin %s has set your gender to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"level",true) == 0)
				{
					if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
					if(amount < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Level must be more than 0.");
					PlayerInfo[id][pLevel] = amount;
					Update(id, pLevelx);
					SetPlayerScore(id, PlayerInfo[id][pLevel]);
					format(string, sizeof(string), "%s[user:%d]'s level was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 5);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
	            	format(string, sizeof(string), "* Admin %s has set your level to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"rp",true) == 0)
				{
					if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
					if(amount < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Respect points must be more than 0.");
					PlayerInfo[id][pExp] = amount;
					Update(id, pExpx);
					format(string, sizeof(string), "%s[user:%d]'s respect points were set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 5);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
	            	format(string, sizeof(string), "* Admin %s has set your respect points to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"premium",true) == 0)
				{
					if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
					if(amount < 0 || amount > 2) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Premium must be 0 (Normal), 1 (Premium) or 2 (VIP).");
					PlayerInfo[id][pPremiumAccount] = amount;
					if(amount > 0)
					{
						if(PlayerInfo[id][pCarSlots] <= 8)
						{
							PlayerInfo[id][pCarSlots] += 2;
						}
						if(PlayerInfo[id][pCarSlots] == 9)
						{
							PlayerInfo[id][pCarSlots] += 1;
						}
					}
					mysql_format(SQL, string, sizeof(string), "UPDATE users SET `Premium`='%d',`CarSlots`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pPremiumAccount], PlayerInfo[id][pCarSlots], PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,string,"","");
					format(string, sizeof(string), "%s[user:%d]'s premium was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 5);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
	            	format(string, sizeof(string), "* Admin %s has set your premium to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"fp",true) == 0)
				{
					if(amount < 0 || amount > 200) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Faction punish must be between 0 and 200.");
					PlayerInfo[id][pFpunish] = amount;
					Update(id, pFpunishx);
					format(string, sizeof(string), "%s[user:%d]'s faction punish was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 4);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
	            	format(string, sizeof(string), "* Admin %s has set your faction punish to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"premiumpoints",true) == 0)
				{
					if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
					if(amount < 0) return 1;
					PlayerInfo[id][pPremiumPoints] = amount;
					Update(id, pPremiumPointsx);
					format(string, sizeof(string), "%s[user:%d]'s premium points were set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 6);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
	            	mysql_format(SQL, string, sizeof(string), "UPDATE `users` SET TotalPP=TotalPP+%d WHERE `name` = '%s'", amount, PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,string,"","");
					format(string, sizeof(string), "* Admin %s has set your premium points to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"giftpoints",true) == 0)
				{
					if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
					if(amount < 0) return 1;
					PlayerInfo[id][pGiftTime] = amount;
					Update(id, pGiftTimex);
					format(string, sizeof(string), "%s[user:%d]'s gift points were set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 6);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
					format(string, sizeof(string), "* Admin %s has set your gift points to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"cases",true) == 0)
				{
					if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
					if(amount < 0) return 1;
					PlayerInfo[id][pCases] = amount;
					Update(id, pCasesx);
					format(string, sizeof(string), "%s[user:%d]'s cases were set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 6);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
					format(string, sizeof(string), "* Admin %s has set your cases to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"neonred",true) == 0)
				{
					if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
					if(amount < 0) return 1;
					PlayerInfo[id][pNeonR] = amount;
					Update(id, pNeonRx);
					format(string, sizeof(string), "%s[user:%d]'s red nenons were set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 6);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
					format(string, sizeof(string), "* Admin %s has set your red neons to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"neonyellow",true) == 0)
				{
					if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
					if(amount < 0) return 1;
					PlayerInfo[id][pNeonG] = amount;
					Update(id, pNeonGx);
					format(string, sizeof(string), "%s[user:%d]'s yellow nenons were set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 6);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
					format(string, sizeof(string), "* Admin %s has set your yellow neons to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"neonblue",true) == 0)
				{
					if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
					if(amount < 0) return 1;
					PlayerInfo[id][pNeonA] = amount;
					Update(id, pNeonAx);
					format(string, sizeof(string), "%s[user:%d]'s blue nenons were set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 6);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
					format(string, sizeof(string), "* Admin %s has set your blue neons to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"neonpink",true) == 0)
				{
					if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
					if(amount < 0) return 1;
					PlayerInfo[id][pNeonRZ] = amount;
					Update(id, pNeonRZx);
					format(string, sizeof(string), "%s[user:%d]'s pink nenons were set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 6);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
					format(string, sizeof(string), "* Admin %s has set your pink neons to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"neongreen",true) == 0)
				{
					if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
					if(amount < 0) return 1;
					PlayerInfo[id][pNeonV] = amount;
					Update(id, pNeonVx);
					format(string, sizeof(string), "%s[user:%d]'s green nenons were set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 6);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
					format(string, sizeof(string), "* Admin %s has set your green neons to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
				else if(strcmp(item,"petpoints",true) == 0)
				{
					if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+.");
					if(amount < 0) return 1;
					PlayerInfo[id][pPetPoints] = amount;
					Update(id, pPetPointsx);
					format(string, sizeof(string), "%s[user:%d]'s pet points were set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], amount, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
	            	ABroadCast(COLOR_ADMCOMMANDS, string, 6);
	            	Log(PlayerInfo[playerid][pSQLID], string, "set");
					format(string, sizeof(string), "* Admin %s has set your pet points to %d.", PlayerInfo[playerid][pNormalName], amount);
	            	SendClientMessage(id, COLOR_RED2, string);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
 	return 1;
}
CMD:stats(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pLevel] < 1) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Command currently inaccessible.");
	ShowStats(playerid,playerid);
	return 1;
}
CMD:colors(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string1[500], string2[500], string3[500], string4[500], string5[500], string6[500], string7[500], string8[500], string9[500], string10[500], string11[500], string12[500], string13[500], string14[500], string15[500], string16[500], string17[5000];
	format(string1, sizeof(string1), "{FFFFFF}Normal colors:");
	format(string2, sizeof(string2), "{000000}000 {F5F5F5}001 {2A77A1}002 {840410}003 {263739}004 {86446E}005 {D78E10}006 {4C75B7}007 {BDBEC6}008 {5E7072}009 {46597A}010 {656A79}011 {5D7E8D}012 {58595A}013 {D6DAD6}014 {9CA1A3}015 {335F3F}016 {730E1A}017 {7B0A2A}018 {9F9D94}019");
	format(string3, sizeof(string3), "{3B4E78}020 {732E3E}021 {691E3B}022 {96918C}023 {515459}024 {3F3E45}025 {A5A9A7}026 {635C5A}027 {3D4A68}028 {979592}029 {421F21}030 {5F272B}031 {8494AB}032 {767B7C}033 {646464}034 {5A5752}035 {252527}036 {2D3A35}037 {93A396}038 {6D7A88}039");
	format(string4, sizeof(string4), "{221918}040 {6F675F}041 {7C1C2A}042 {5F0A15}043 {193826}044 {5D1B20}045 {9D9872}046 {7A7560}047 {989586}048 {ADB0B0}049 {848988}050 {304F45}051 {4D6268}052 {162248}053 {272F4B}054 {7D6256}055 {9EA4AB}056 {9C8D71}057 {6D1822}058 {4E6881}059");
	format(string5, sizeof(string5), "{9C9C98}060 {917347}061 {661C26}062 {949D9F}063 {A4A7A5}064 {8E8C46}065 {341A1E}066 {6A7A8C}067 {AAAD8E}068 {AB988F}069 {851F2E}070 {6F8297}071 {585853}072 {9AA790}073 {601A23}074 {20202C}075 {A4A096}076 {AA9D84}077 {78222B}078 {0E316D}079");
	format(string6, sizeof(string6), "{722A3F}080 {7B715E}081 {741D28}082 {1E2E32}083 {4D322F}084 {7C1B44}085 {2E5B20}086 {395A83}087 {6D2837}088 {A7A28F}089 {AFB1B1}090 {364155}091 {6D6C6E}092 {0F6A89}093 {204B6B}094 {2B3E57}095 {9B9F9D}096 {6C8495}097 {4D8495}098 {AE9B7F}099");
	format(string7, sizeof(string7), "{406C8F}100 {1F253B}101 {AB9276}102 {134573}103 {96816C}104 {64686A}105 {105082}106 {A19983}107 {385694}108 {525661}109 {7F6956}110 {8C929A}111 {596E87}112 {473532}113 {44624F}114 {730A27}115 {223457}116 {640D1B}117 {A3ADC6}118 {695853}119");
	format(string8, sizeof(string8), "{9B8B80}120 {620B1C}121 {5B5D5E}122 {624428}123 {731827}124 {1B376D}125 {EC6AAE}126 {000000}127");
	format(string9, sizeof(string9), "{FFFFFF}Hidden colors:");
	format(string10, sizeof(string10), "{177517}128 {210606}129 {125478}130 {452A0D}131 {571E1E}132 {010701}133 {25225A}134 {2C89AA}135 {8A4DBD}136 {35963A}137 {B7B7B7}138 {464C8D}139 {84888C}140 {817867}141 {817A26}142 {6A506F}143 {583E6F}144 {8CB972}145 {824F78}146 {6D276A}147");
	format(string11, sizeof(string11), "{1E1D13}148 {1E1306}149 {1F2518}150 {2C4531}151 {1E4C99}152 {2E5F43}153 {1E9948}154 {1E9999}155 {999976}156 {7C8499}157 {992E1E}158 {2C1E08}159 {142407}160 {993E4D}161 {1E4C99}162 {198181}163 {1A292A}164 {16616F}165 {1B6687}166 {6C3F99}167");
	format(string12, sizeof(string12), "{481A0E}168 {7A7399}169 {746D99}170 {53387E}171 {222407}172 {3E190C}173 {46210E}174 {991E1E}175 {8D4C8D}176 {805B80}177 {7B3E7E}178 {3C1737}179 {733517}180 {781818}181 {83341A}182 {8E2F1C}183 {7E3E53}184 {7C6D7C}185 {020C02}186 {072407}187");
	format(string13, sizeof(string13), "{163012}188 {16301B}189 {642B4F}190 {368452}191 {999590}192 {818D96}193 {99991E}194 {7F994C}195 {839292}196 {788222}197 {2B3C99}198 {3A3A0B}199 {8A794E}200 {0E1F49}201 {15371C}202 {15273A}203 {375775}204 {060820}205 {071326}206 {20394B}207");
	format(string14, sizeof(string14), "{2C5089}208 {15426C}209 {103250}210 {241663}211 {692015}212 {8C8D94}213 {516013}214 {090F02}215 {8C573A}216 {52888E}217 {995C52}218 {99581E}219 {993A63}220 {998F4E}221 {99311E}222 {0D1842}223 {521E1E}224 {42420D}225 {4C991E}226 {082A1D}227");
	format(string15, sizeof(string15), "{96821D}228 {197F19}229 {3B141F}230 {745217}231 {893F8D}232 {7E1A6C}233 {0B370B}234 {27450D}235 {071F24}236 {784573}237 {8A653A}238 {732617}239 {319490}240 {56941D}241 {59163D}242 {1B8A2F}243 {38160B}244 {041804}245 {355D8E}246 {2E3F5B}247");
	format(string16, sizeof(string16), "{561A28}248 {4E0E27}249 {706C67}250 {3B3E42}251 {2E2D33}252 {7B7E7D}253 {4A4442}254 {28344E}255");
	format(string17, sizeof(string17), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s",string1,string2,string3,string4, string5, string6, string7, string8, string9, string10, string11, string12, string13, string14, string15, string16);
	ShowPlayerDialog(playerid, DIALOG_COLORID, DIALOG_STYLE_MSGBOX, "Vehicle Colors list - /carcolor", string17, "Close","");
	return 1;
}
CMD:n(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new question[128],string[256],sendername[30],giveplayer[30],count,mesajx[200],var100[256];
	if(sscanf(params, "s[128]", question)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /n [question]");
	if(HelperDuty[playerid] == 0 && PlayerInfo[playerid][pAdmin] >= 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are an admin.");
	if(PlayerInfo[playerid][pHelper] == 0 && PlayerInfo[playerid][pAdmin] == 0)
	{
		if(PlayerInfo[playerid][pNewbieTimeout] == 0)
		{
  			if(PlayerInfo[playerid][pNMuted] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(PlayerInfo[playerid][pNewbieEnabled] == 0)
				{
					PlayerInfo[playerid][pNewbieEnabled] = 1;
					SS(playerid, COLOR_DARKPINK, "Chat de ajutor activat.", "Help chat enabled.");
				}
				format(string, sizeof(string), "* Newbie %s: %s", sendername, question);
				SendClientMessage(playerid, COLOR_NEWBIE, string);
				mysql_real_escape_string(string, mesajx);
				foreach(new i : Player)
				{
					if(strcmp(PlayerInfo[i][pNewbieQuestion], "NULL", true)) count++;
				}
				if(count < 30)
				{
					format(PlayerInfo[playerid][pNewbieQuestion], 256, question);
					PlayerInfo[playerid][pNewbieTimeout] = 180;
					PlayerInfo[playerid][pFirstAnswer] = 1;
				 	mysql_format(SQL, var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','n')", PlayerInfo[playerid][pSQLID], mesajx);
					mysql_tquery(SQL, var100, "", "");
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Sunt prea multe intrebari ce asteapta raspuns de la helperii serverului. Nu poti pune o intrebare acum.");
					SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Incearca mai tarziu...");
					return 1;
				}
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are muted from the newbie chat.");
		}
		else
		{
		    format(string, sizeof(string), "(Error){FFFFFF} Poti folosi /n peste %d secunde.", PlayerInfo[playerid][pNewbieTimeout]);
            SendClientMessage(playerid, COLOR_ERROR, string);
		}
	}
	else
	{
		if(HaveNewbie[playerid] != -1)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerName(HaveNewbie[playerid], giveplayer, sizeof(giveplayer));
			format(string, sizeof(string),"Raspuns trimis: %s", question);
			SendSplitMessage(playerid, COLOR_YELLOW, string);
			format(string, sizeof(string),"* Helper %s: %s", sendername, question);
			SendSplitMessage(HaveNewbie[playerid], COLOR_YELLOW, string);
			if(PlayerInfo[HaveNewbie[playerid]][pFirstAnswer] == 1)
			{
				format(string, sizeof(string),"* Newbie %s: %s", giveplayer, PlayerInfo[HaveNewbie[playerid]][pNewbieQuestion]);
				foreach(new i : Player)
				{
					if(i != playerid && i != HaveNewbie[playerid])
					{
						if(PlayerInfo[i][pNewbieEnabled] == 1)
						{
							SendSplitMessage(i, COLOR_NEWBIE, string);
						}
					}
				}
				new escape[256],escape2[256];
				mysql_real_escape_string(question, escape);
				mysql_real_escape_string(PlayerInfo[HaveNewbie[playerid]][pNewbieQuestion], escape2);
				mysql_format(SQL, string, sizeof(string),"INSERT INTO newbie_logs (`playerid`,`adminid`,`question`,`answer`,`time`) VALUES ('%d','%d','%s','%s','%d')",PlayerInfo[HaveNewbie[playerid]][pSQLID],PlayerInfo[playerid][pSQLID],escape2,escape,gettime());
				mysql_tquery(SQL, string, "", "");
				format(PlayerInfo[HaveNewbie[playerid]][pNewbieQuestion], 256, "NULL");
				PlayerInfo[HaveNewbie[playerid]][pFirstAnswer] = 0;
			}
			format(string, sizeof(string),"* Helper %s: @%s, %s", sendername, giveplayer, question);
			mysql_real_escape_string(string, mesajx);
			foreach(new i : Player)
			{
				if(i != playerid && i != HaveNewbie[playerid])
				{
					if(PlayerInfo[i][pNewbieEnabled] == 1)
					{
						SendSplitMessage(i, COLOR_NEWBIE, string);
					}
				}
			}
			timernewbie[playerid] = 30;
			HelperTimer[playerid] = 0;
			PlayerInfo[playerid][pHelpedplayers]++;
	        Update(playerid,pHelpedplayersx);
			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','n')", PlayerInfo[playerid][pSQLID], mesajx);
			mysql_tquery(SQL, var100, "", "");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are an admin/helper.");
	}
	return 1;
}
CMD:newbie(playerid, params[]) return cmd_n(playerid, params);
CMD:ndelete(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new question[128],string[256],sendername[30],giveplayer[30];
	if(sscanf(params, "s[128]", question)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /ndelete [message]");
	if(PlayerInfo[playerid][pHelper] > 0 || (PlayerInfo[playerid][pAdmin] >= 1 && HelperDuty[playerid] == 1))
	{
		if(HaveNewbie[playerid] != -1)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerName(HaveNewbie[playerid], giveplayer, sizeof(giveplayer));
			format(string, sizeof(string),"(/ndelete) Raspuns trimis: %s", question);
			SendSplitMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string),"* Helper %s: %s", sendername, question);
			SendSplitMessage(HaveNewbie[playerid], COLOR_YELLOW, string);
			format(string, sizeof(string),"(/ndelete) * Helper %s: %s", sendername, question);
			if(PlayerInfo[HaveNewbie[playerid]][pFirstAnswer] == 1)
			{
				format(string, sizeof(string),"* Newbie %s: %s", giveplayer, PlayerInfo[HaveNewbie[playerid]][pNewbieQuestion]);
				foreach(new i : Player)
				{
					if(i != playerid && i != HaveNewbie[playerid])
					{
						if(PlayerInfo[i][pNewbieEnabled] == 1)
						{
							if(PlayerInfo[i][pAdmin] > 0 || PlayerInfo[i][pHelper] > 0)
							{
								SendSplitMessage(i, COLOR_NEWBIE, string);
							}
						}
					}
				}
				new escape[128],escape2[128];
				mysql_real_escape_string(question, escape);
				mysql_real_escape_string(PlayerInfo[HaveNewbie[playerid]][pNewbieQuestion], escape2);
				mysql_format(SQL, string, sizeof(string),"INSERT INTO newbie_logs (`playerid`,`adminid`,`question`,`answer`,`time`) VALUES ('%d','%d','%s','%s','%d')",PlayerInfo[HaveNewbie[playerid]][pSQLID],PlayerInfo[playerid][pSQLID],escape2,escape,gettime());
				mysql_tquery(SQL, string, "", "");
				format(PlayerInfo[HaveNewbie[playerid]][pNewbieQuestion], 256, "NULL");
				PlayerInfo[HaveNewbie[playerid]][pFirstAnswer] = 0;
			}
			format(string, sizeof(string),"(/ndelete) * Helper %s: @%s, %s", sendername, giveplayer, question);
			foreach(new i : Player)
			{
				if(i != playerid && i != HaveNewbie[playerid])
				{
					if(PlayerInfo[i][pNewbieEnabled] == 1)
					{
						if(PlayerInfo[i][pAdmin] > 0 || PlayerInfo[i][pHelper] > 0)
						{
							SendSplitMessage(i, COLOR_NEWBIE, string);
						}
					}
				}
			}
			timernewbie[playerid] = 30;
			HelperTimer[playerid] = 0;
			PlayerInfo[playerid][pHelpedplayers]++;
	        Update(playerid,pHelpedplayersx);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have an active question.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an helper.");
	return 1;
}
CMD:nd(playerid, params[]) return cmd_ndelete(playerid, params);
CMD:nqueue(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pHelper] > 0 || PlayerInfo[playerid][pAdmin] > 0)
	{
		new string[128],questions,helpers;
		foreach(new i : Player)
		{
			if(strcmp(PlayerInfo[i][pNewbieQuestion], "NULL", true)) questions++;
			if((PlayerInfo[i][pHelper] > 0 && HelperDuty[i] == 1) || (PlayerInfo[i][pAdmin] > 0 && HelperDuty[i] == 1)) helpers++;
		}
		format(string, sizeof(string),"Questions: %d / Helpers: %d",questions,helpers);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	return 1;
}
CMD:nreport(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pHelper] > 0 || (PlayerInfo[playerid][pAdmin] >= 1 && HelperDuty[playerid] == 1))
	{
		if(HaveNewbie[playerid] != -1)
		{
			if(PlayerInfo[HaveNewbie[playerid]][pFirstAnswer] == 1)
			{
				new string[256],sendername[30],giveplayer[30];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(HaveNewbie[playerid], giveplayer, sizeof(giveplayer));
				format(string, sizeof(string),"* Helper %s marked %s's[%d] question as a report: %s", sendername, giveplayer, HaveNewbie[playerid], PlayerInfo[HaveNewbie[playerid]][pNewbieQuestion]);
				HLChat(COLOR_GREY, string);
				ABroadCast(COLOR_GREY, string, 1);
				format(string, sizeof(string), "Report from %s [%d, level %d]: %s", giveplayer, HaveNewbie[playerid], PlayerInfo[HaveNewbie[playerid]][pLevel], PlayerInfo[HaveNewbie[playerid]][pNewbieQuestion]);
				format(reporttext[HaveNewbie[playerid]], 128, string);
				HLChat(COLOR_REPORT, string);
				ABroadCast(COLOR_REPORT, string, 1);
				ReportTime[HaveNewbie[playerid]] = 1;
				timerreport[HaveNewbie[playerid]] = SetTimerEx("Reportul", 60000, 0, "%d", HaveNewbie[playerid]);
				format(PlayerInfo[HaveNewbie[playerid]][pNewbieQuestion], 128, "NULL");
				HaveNewbie[playerid] = -1;
				HelperTimer[playerid] = 0;
				PlayerInfo[playerid][pHelpedplayers]++;
	        	Update(playerid,pHelpedplayersx);
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't /nreport an answered question.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a question.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not a helper.");
	return 1;
}
CMD:nskip(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pHelper] > 0 || (PlayerInfo[playerid][pAdmin] >= 1 && HelperDuty[playerid] == 1))
	{
		if(HaveNewbie[playerid] != -1)
		{
			if(PlayerInfo[HaveNewbie[playerid]][pFirstAnswer] == 1)
			{
				timernewbie[playerid] = 1;
				SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Question skipped. If there are not other question, you will receive the same question again.");
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't /nskip an answered question.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have an active question.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not a helper.");
	return 1;
}
CMD:nnext(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pHelper] > 0 || (PlayerInfo[playerid][pAdmin] >= 1 && HelperDuty[playerid] == 1))
	{
		if(HelperDuty[playerid] != 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not on duty.");
		new questions,helpers,id=-1,have,string[128],name[30];
		foreach(new i : Player)
		{
			if(strcmp(PlayerInfo[i][pNewbieQuestion], "NULL", true)) questions++;
			if(PlayerInfo[i][pHelper] > 0 && HelperDuty[i] == 1) helpers++;
		}
		if(questions > helpers)
		{
			if(HaveNewbie[playerid] != -1 && PlayerInfo[HaveNewbie[playerid]][pFirstAnswer] == 0 || HaveNewbie[playerid] == -1)
			{
				foreach(new i : Player)
				{
					if(strcmp(PlayerInfo[i][pNewbieQuestion], "NULL", true))
					{
						foreach(new x : Player)
						{
							if(HaveNewbie[x] == i) have = 1;
						}
						if(have == 0)
						{
							id = i;
							break;
						}
					}
				}
				if(id != -1)
				{
					HaveNewbie[playerid] = id;
					HelperTimer[playerid] = 120;
					GetPlayerName(id, name, sizeof(name));
					format(string, sizeof(string), "{FF6200}** {FFFF00}Question from %s (%d, level %d) {FF6200}**", name, id, PlayerInfo[id][pLevel]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					SendClientMessage(playerid, COLOR_YELLOW, PlayerInfo[id][pNewbieQuestion]);
				}
				else SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu sunt intrebari active pe /n.","(Error){FFFFFF} No questions active on /n.");
			}
			else SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Trebuie sa raspunzi la intrebarea actuala inainte de a lua alta intrebare.","(Error){FFFFFF} You need to answer current question before get another question.");
		}
		else SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Poti folosi /nnext doar daca sunt mai multe intrebari decat helperi.","(Error){FFFFFF} You can use /nnext only are more question than helper");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not a helper.");
	return 1;
}
CMD:report(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are an admin.");
	if(PlayerInfo[playerid][pReportMuted] > 0)
	{
		new string[128];
		format(string, sizeof(string),"You are muted on /report for %d minutes.", PlayerInfo[playerid][pReportMuted]);
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}
    ShowPlayerDialog(playerid, DIALOG_REPORT1, DIALOG_STYLE_LIST, "Report", "Contul meu este spart sau blocat\nRaporteaza DM\nRaporteaza un cheater\nIntrebari despre donatii\nSunt blocat/Cad prin mapa\nVreau sa fac o afacere si am nevoie de ajutor\nAlta problema", "OK", "Inchide");
	return 1;
}
CMD:reports(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string[128],cheaters;
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	SendClientMessage(playerid, COLOR_LIGHTGREEN3, "______REPORTS______");
	foreach(new i : Player)
	{
		if(strcmp(reporttext[i], "NULL", true) && reportcheater[i] == -1)
		{
			SendClientMessage(playerid, COLOR_DBLUE, reporttext[i]);
		}
		if(reportcheater[i] != -1)
		{
			cheaters++;
		}
	}
	format(string,sizeof(string),"cheaters: %d",cheaters);
	SendClientMessage(playerid, COLOR_LIGHTGREEN3, string);
	return 1;
}
CMD:cheaters(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	SendClientMessage(playerid, COLOR_LIGHTGREEN3, "> Cheaters:");
	foreach(new i : Player)
	{
		if(reportcheater[i] != -1)
		{
			SendClientMessage(playerid, COLOR_DBLUE, reporttext[i]);
		}
	}
	return 1;
}
CMD:setvw(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new id,vw,string[128];
		if(sscanf(params, "ud",id,vw)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /setvew [name/playerid [virtualworld]");
		if(IsPlayerConnected(id))
		{
			SetPlayerVirtualWorld(id, vw);
			format(string, sizeof(string), "%s[user:%d]'s virtual world was set to %d (( Admin %s[admin:%d] ))", PlayerInfo[id][pNormalName], PlayerInfo[id][pSQLID], vw, PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
        	ABroadCast(COLOR_ADMCOMMANDS, string, 1);
        	Log(PlayerInfo[playerid][pSQLID], string, "set");
        	format(string, sizeof(string), "* Admin %s has set your virtual world to %d.", PlayerInfo[playerid][pNormalName], vw);
        	SendClientMessage(id, COLOR_RED2, string);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3,"You are not an admin.");
	return 1;
}
CMD:dr(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new string[128],id,sendername[30],string2[256];
		if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /dr [name/playerid]");
		if(IsPlayerConnected(id))
		{
			if(!strcmp(reporttext[id], "NULL", true) && reportcheater[id] == -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player don't have an active report.");
			ReportTime[id] = 0;
			reportcheater[id] = -1;
			reportreason[id] = 0;
			if(playerreported[id] != -1)
			{
				reportreason[playerreported[id]] = 0;
			}
			playerreported[id] = -1;
			KillTimer(timerreport[id]);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string,sizeof(string),"%s deleted %s",sendername,reporttext[id]);
			ABroadCast(COLOR_GREY,string,1);
			new escape[128];
			mysql_real_escape_string(reporttext[id], escape);
			mysql_format(SQL, string2, sizeof(string2),"INSERT INTO report_logs (`playerid`,`adminid`,`problem`,`answer`,`time`) VALUES ('%d','%d','%s','Report deleted','%d')",PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],escape,gettime());
			mysql_tquery(SQL, string2, "", "");
			format(reporttext[id], 30, "NULL");
			PlayerInfo[playerid][pHelpedplayers]++;
	        Update(playerid,pHelpedplayersx);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3,"You are not an admin.");
	return 1;
}
CMD:cr(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new string[128],id,sendername[30],reason[128],reasone[128],giveplayer[30],string2[256];
		if(sscanf(params, "uS(NULL)[128]",id,reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /cr [name/playerid] [text(optional)]");
		if(IsPlayerConnected(id))
		{
			if(!strcmp(reporttext[id], "NULL", true) && reportcheater[id] == -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player don't have an active report.");
			mysql_real_escape_string(reason, reasone);
			ReportTime[id] = 0;
			reportcheater[id] = -1;
			reportreason[id] = 0;
			if(playerreported[id] != -1)
			{
				reportreason[playerreported[id]] = 0;
			}
			playerreported[id] = -1;
			KillTimer(timerreport[id]);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			format(string,sizeof(string),"%s closed %s",sendername,reporttext[id]);
			ABroadCast(COLOR_GREY,string,1);
			if(strcmp(reason, "NULL", true))
			{
				format(string,sizeof(string),"(/cr) %s->%s: %s",sendername,giveplayer,reasone);
				ABroadCast(COLOR_YELLOW,string,1);
				SendClientMessage(id, COLOR_YELLOW, string);
			}
			new escape[128];
			mysql_real_escape_string(reporttext[id], escape);
			mysql_format(SQL, string2, sizeof(string2),"INSERT INTO report_logs (`playerid`,`adminid`,`problem`,`answer`,`time`) VALUES ('%d','%d','%s','%s','%d')",PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],escape,reasone,gettime());
			mysql_tquery(SQL, string2, "", "");
			format(reporttext[id], 30, "NULL");
			PlayerInfo[playerid][pHelpedplayers]++;
	        Update(playerid,pHelpedplayersx);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3,"You are not an admin.");
	return 1;
}
CMD:re(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
	{
		new id,reason[128],giveplayer[30],sendername[30],string[256];
		if(sscanf(params, "us[128]",id,reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /re [name/playerid] [text]");
		if(IsPlayerConnected(id))
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			format(string, sizeof(string),"(/re) %s->%s: %s",sendername,giveplayer,reason);
			HLChat(COLOR_YELLOW,string);
			ABroadCast(COLOR_YELLOW,string,1);
			format(string, sizeof(string),"> PM from %s: %s", sendername, reason);
			SendClientMessage(id, COLOR_YELLOW, string);
			PlayerPlaySound(id, 1139, 0.0, 0.0, 0.0);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_GREY,"You are not an admin/helper.");
	return 1;
}
CMD:togn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pNewbieEnabled] == 1)
	{
	    PlayerInfo[playerid][pNewbieEnabled] = 0;
	    SS(playerid, COLOR_DARKPINK, "Chat de ajutor dezactivat.", "Help chat disabled.");
	}
	else
	{
	    PlayerInfo[playerid][pNewbieEnabled] = 1;
	    SS(playerid, COLOR_DARKPINK, "Chat de ajutor activat.", "Help chat enabled.");
	}
	return 1;
}
CMD:nmute(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pHelper] >= 1 || PlayerInfo[playerid][pAdmin] >= 1)
	{
        new id,time,sendername[30],giveplayer[30],string[256];
    	if(sscanf(params, "ud", id, time))
		{
			SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /nmute [name/playerid] [minutes]");
			return 1;
		}
		else
		{
		    if(IsPlayerConnected(id))
			{
		        GetPlayerName(playerid, sendername, sizeof(sendername));
		        GetPlayerName(id, giveplayer, sizeof(giveplayer));
		        PlayerInfo[id][pNMuted] = time * 60;
		        Update(id,pNMutedx);
		        format(string, sizeof(string), "%s has muted you on /n for %d minutes.", sendername, time);
		        SendClientMessage(id,COLOR_WHITE,string);
		        format(string, sizeof(string), "%s has been muted from /n by %s for %d minutes.", giveplayer, sendername, time);
                ABroadCast(COLOR_RED,string,1);
				HLChat(COLOR_RED,string);
				format(string, sizeof(string), "You have muted %s for %d minutes.", giveplayer, time);
		        SendClientMessage(playerid,COLOR_WHITE,string);
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} The specified player ID is either not connected or has not authenticated.");
		}
	}
	return 1;
}
CMD:rmute(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new id,time,string[128],sendername[30],giveplayer[30];
		if(sscanf(params, "ud", id, time)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /rmute [name/playerid] [minutes]");
		if(time < 1 || time > 120) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can mute a player minimum 1 minute and maximum 120 minutes.");
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerName(id, giveplayer, sizeof(giveplayer));
		format(string, sizeof(string),"%s has been kicked and muted from /report by %s for %d minutes.",giveplayer,sendername,time);
		ABroadCast(COLOR_RED, string, 1);
		PlayerInfo[id][pReportMuted] = time;
		Update(id, pReportMutedx);
		KickEx(id);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:cheat(playerid, params[])
{
    
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(ReportTime[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Dupa un minut poti folosi aceasta actiune.");
    if(PlayerInfo[playerid][pAdmin] >= 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are an admin.");
    new id,reason[300],sendername[30],giveplayer[30],string[128];
	if(sscanf(params, "us[300]", id, reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /cheat [id/name] [reason]");
	if(playerid == id) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't report yourself.");
    if(IsPlayerConnected(id))
	{
		if(PlayerInfo[id][pAdmin] >= 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} The player is an admin.");
        GetPlayerName(playerid, sendername, sizeof(sendername));
        GetPlayerName(id, giveplayer, sizeof(giveplayer));
		SendClientMessage(playerid, COLOR_YELLOW, "Report submitted.");
        format(string, sizeof(string), "%s [%d] was reported for cheating by %s: %s.",giveplayer,id,sendername,reason);
		format(reporttext[playerid], sizeof(string), string);
        reportcheater[playerid] = id;
		ABroadCast(COLOR_REPORT,string,1);
		ReportTime[playerid] = 1;
		timerreport[playerid] = SetTimerEx("Reportul", 60000, 0, "%d", playerid);
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} The specified player ID is either not connected or has not authenticated.");
	return 1;
}
CMD:cheats(playerid, params[]) return cmd_cheat(playerid, params);
CMD:email(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to login first.");
    new result[300],message[300],string[256],read,message2[40],finalmessage[40],query[500],emailid,idd=0;
    format(query, sizeof(query), "SELECT * FROM `emails` WHERE `playerid` = '%d' ORDER BY `ID` DESC LIMIT 10", PlayerInfo[playerid][pSQLID]);
	new Cache: emailresult = mysql_query(SQL, query);
	if(cache_get_row_count() > 0)
	{
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
	    	cache_get_field_content(i, "Message", result); format(message, sizeof(message), result);
	    	read                    = cache_get_field_content_int(i, "EmailRead");
	    	emailid                 = cache_get_field_content_int(i, "ID");
	    	EmailId[playerid][idd] = emailid;
	    	idd++;
	    	if(strlen(message) > 28)
	    	{
	    		strmid(message2, message, 0, 29, sizeof(message2));
  				format(finalmessage,sizeof(finalmessage), "%s...",message2);
			}
	   	 	if(read > 0)
	    	{
	    		format(string, sizeof(string), "%s[UNREAD]%s\n", string, finalmessage);
			}
			else
			{
		    	format(string, sizeof(string), "%s%s\n", string, finalmessage);
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a email!");
	cache_delete(emailresult);
    ShowPlayerDialog(playerid,DIALOG_EMAILS,DIALOG_STYLE_LIST,"Emails",string,"Read","Exit");
	return 1;
}
CMD:emails(playerid, params[]) return cmd_email(playerid, params);
CMD:admins(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    new string[128],sendername[30],specname[30];
    if(PlayerInfo[playerid][pAdmin] >= 5) SendClientMessage(playerid, COLOR_CYAN, "---- Admins Online (admin 5+ info) ----");
	else SendClientMessage(playerid, COLOR_CYAN, "-----Admins Online-----------------------------------------------");
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[playerid][pAdmin] >= 5)
			{
				if(PlayerInfo[i][pAdmin] >= 1 && PlayerInfo[i][pAdmin] <= 7)
			    {
					GetPlayerName(i, sendername, sizeof(sendername));
					if(Spectate[i] != -1)
					{
						GetPlayerName(Spectate[i], specname, sizeof(specname));
						format(string, sizeof(string), "(%d) %s - level %d - AFK: %d - spectating %s (%d)", i, sendername, PlayerInfo[i][pAdmin], IsPlayerAFK[i], specname, Spectate[i]);
					}
					else format(string, sizeof(string), "(%d) %s - level %d - AFK: %d", i, sendername, PlayerInfo[i][pAdmin], IsPlayerAFK[i]);
					SendClientMessage(playerid, COLOR_WHITE, string);
				}
			}
			else
			{
				if(PlayerInfo[i][pAdmin] >= 1 && PlayerInfo[i][pAdmin] <= 7)
			    {
					GetPlayerName(i, sendername, sizeof(sendername));
					format(string, sizeof(string), "(%d) %s - admin level %d", i, sendername, PlayerInfo[i][pAdmin]);
					SendClientMessage(playerid, COLOR_WHITE, string);
				}
			}
		}
    }
    SendClientMessage(playerid, COLOR_CYAN, "-----------------------------------------------------------------------");
	SS(playerid, COLOR_WHITE, "Daca ai vreo problema, poti folosi /report. Pentru intrebari legate de joc poti folosi /n.", "If you have any problems, please use /report. For game related questions, use /n.");
	SendClientMessage(playerid, COLOR_CYAN, "-----------------------------------------------------------------------");
	return 1;
}
CMD:helpers(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    new string[128],sendername[30],specname[30];
    if(PlayerInfo[playerid][pAdmin] >= 5) SendClientMessage(playerid, COLOR_CYAN, "---- Helpers Online (admin 5+ info) ----");
	else SendClientMessage(playerid, COLOR_CYAN, "----Helpers Online-----------------------------------------------");
	foreach(new i : Player)
	{
	    if(IsPlayerConnected(i))
		{
			if(PlayerInfo[playerid][pAdmin] >= 5)
			{
				if(PlayerInfo[i][pHelper] >= 1)
			    {
			    	GetPlayerName(i, sendername, sizeof(sendername));
			    	if(Spectate[i] != -1)
			    	{
			    		GetPlayerName(Spectate[i], specname, sizeof(specname));
			    		format(string, sizeof(string), "(%d) %s - level %d - AFK: %d - spectating %s (%d)", i, sendername, PlayerInfo[i][pHelper], IsPlayerAFK[i], specname, Spectate[i]);
			    	}
				    else format(string, sizeof(string), "(%d) %s - level %d - AFK: %d", i, sendername, PlayerInfo[i][pHelper], IsPlayerAFK[i]);
			        SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			}
			else
			{
				if(PlayerInfo[i][pHelper] >= 1)
			    {
			    	GetPlayerName(i, sendername, sizeof(sendername));
				    format(string, sizeof(string), "(%d) %s - helper level %d", i, sendername, PlayerInfo[i][pHelper]);
			        SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			}
		}
 	}
 	SendClientMessage(playerid, COLOR_CYAN, "-----------------------------------------------------------------------");
	SS(playerid, COLOR_WHITE, "Daca ai vreo intrebare legata de server, foloseste /n.", "For any game related questions, you can use /n.");
	SendClientMessage(playerid, COLOR_CYAN, "-----------------------------------------------------------------------");
	return 1;
}
CMD:leaders(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	SendClientMessage(playerid, COLOR_CYAN, "----Leaders Online-----------------------------------------------");
	new string[128],name[30],afktext[10];
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pLeader] > 0)
		{
			format(afktext, sizeof(afktext), "");
			if(IsPlayerAFK[i] > 39) format(afktext, sizeof(afktext), "- AFK");
			GetPlayerName(i, name, sizeof(name));
			format(string, sizeof(string), "Leader %s: %s [ID: %d] %s", DynamicFactions[PlayerInfo[i][pMember]][fName], name, i, afktext);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	SendClientMessage(playerid, COLOR_CYAN, "------------------------------------------------------------");
	return 1;
}
CMD:hduty(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pHelper] >= 1 || PlayerInfo[playerid][pAdmin] >= 1)
	{
	    if(HelperDuty[playerid] == 1)
	    {
  			HelperDuty[playerid] = 0;
           	SS(playerid, COLOR_LIGHTGREEN3, "Nu mai esti on duty ca helper.", "You are not on duty anymore.");
		}
		else
	    {
			HelperDuty[playerid] = 1;
			SS(playerid, COLOR_LIGHTGREEN3, "Acum esti on duty ca helper!", "You are now on duty!");
	    }
	}
	else
	{
		SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not a helper.");
	}
	return 1;
}
CMD:aduty(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] > 0)
    {
        if(AdminDuty[playerid] == 0)
        {
            new sendername[MAX_PLAYER_NAME], string[256];
            AdminDuty[playerid] = 1;
            GetPlayerName(playerid, sendername, sizeof(sendername));
            format(string, sizeof(string), "Notice: {FFFFFF}Admin %s is now on administrative duty (expire in 60 seconds).", sendername);
            ABroadCast(COLOR_RED2,string,1);
            adutytime[playerid] = 60;
            return 1;
        }
        else if(AdminDuty[playerid] == 1)
        {
            new sendername[MAX_PLAYER_NAME], string[256];
            AdminDuty[playerid] = 0;
            SetPlayerArmourEx(playerid, 0);
            SetPlayerHealthEx(playerid, 100);
            GetPlayerName(playerid, sendername, sizeof(sendername));
            format(string, sizeof(string), "Notice: {FFFFFF}Admin %s is now off administrative duty.", sendername);
            ABroadCast(COLOR_RED2,string,1);
            adutytime[playerid] = 0;
            return 1;
        }
    }
    else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
    return 1;
}
CMD:setadmin(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to login first.");
	if(PlayerInfo[playerid][pAdmin] >= 6 || AdminAcces(playerid))
	{
		new id,adminlevel,sendername[30],giveplayer[30],string[200],escape[200];
		if(sscanf(params, "ui",id,adminlevel)) return SendClientMessage(playerid, COLOR_WHITE, "Scrie: /setadmin <Name/Playerid> <Admin Level>");
		if(PlayerInfo[id][pAdmin] >= 6 && !AdminAcces(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti modifica admin level-ul unui admin 6+!.");
		if(adminlevel > 4 && !AdminAcces(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Only founders can make admin higher than 4.");
		if(IsPlayerConnected(id))
		{
		    if(id != INVALID_PLAYER_ID)
		    {
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				printf("(/setadmin) %s has promoted %s to a level %d admin.", sendername, giveplayer, adminlevel);
				format(string, sizeof(string), "You've been promoted to level %d admin, by %s.", adminlevel, sendername);
				SendClientMessage(id, COLOR_WHITE, string);
				format(string, sizeof(string), "You have promoted %s to a level %d admin.", giveplayer,adminlevel);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "* Admin %s set %s's admin level to %d.", sendername,giveplayer,adminlevel);
				ABroadCast(COLOR_ADMCHAT,string,1);
				HLChat(COLOR_ADMCHAT,string);
				mysql_real_escape_string(string, escape);
				PlayerInfo[id][pAdmin] = adminlevel;
				if(adminlevel == 0)
				{
					TextDrawHideForPlayer(id, AdminHUD);
					AdminDuty[id] = 0;
					PlayerInfo[id][pHUD3] = 1;
					Update(id, pHUD3x);
				}
				PlayerTextDrawHide(id, HUD[3][id]);
				new str[256];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Admin`='%d' WHERE `name`='%s'",PlayerInfo[id][pAdmin],PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,str,"","");
				mysql_format(SQL,str, sizeof(str), "INSERT INTO staff_logs (`text`) VALUES ('%s')", escape);
				mysql_tquery(SQL,str,"","");
			}
		}
		else
    	{
	    	SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	    }
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 6+ to use this.");
	return 1;
}
CMD:sethelper(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		new id,helperlevel,sendername[30],giveplayer[30],string[200],escape[200];
		if(sscanf(params, "ui",id,helperlevel)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sethelper [name/playerid] [level]");
		if(IsPlayerConnected(id))
		{
		    if(id != INVALID_PLAYER_ID)
		    {
		    	if(helperlevel < 0 || helperlevel > 2) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Level must bew between 0 - 2.");
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "You have made %s a level %d helper.", giveplayer,helperlevel);
				SendClientMessage(playerid, COLOR_WHITE, string);
				if(helperlevel == 0) format(string, sizeof(string), "Administrator %s has removed you from the helper team.", sendername);
				else if(PlayerInfo[id][pHelper] <= helperlevel) format(string, sizeof(string), "Administrator %s has promoted you to a level %d helper.", sendername,helperlevel);
				else if(PlayerInfo[id][pHelper] > helperlevel) format(string, sizeof(string), "Administrator %s has demoted you to a level %d helper.", sendername,helperlevel);
				SendClientMessage(id, COLOR_YELLOW, string);
				format(string, sizeof(string), "* Admin %s set %s's helper level to %d.", sendername,giveplayer,helperlevel);
				ABroadCast(COLOR_ADMIN,string,1);
				HLChat(COLOR_ADMIN,string);
				Log(PlayerInfo[playerid][pSQLID], string, "staff");
				mysql_real_escape_string(string, escape);
				PlayerInfo[id][pHelper] = helperlevel;
				new str[256];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Helper`='%d' WHERE `name`='%s'",PlayerInfo[id][pHelper],PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,str,"","");
				mysql_format(SQL,str, sizeof(str), "INSERT INTO staff_logs (`text`) VALUES ('%s')", escape);
				mysql_tquery(SQL,str,"","");
				mysql_format(SQL,str, sizeof(str), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[id][pSQLID], PlayerInfo[playerid][pSQLID], escape);
				mysql_tquery(SQL,str,"","");
				if(helperlevel == 0)
				{
					PlayerInfo[id][pColors] = 0;
					Update(id, pColorsx);
					PlayerInfo[id][pHelpedplayers] = 0;
					Update(id, pHelpedplayersx);
				}
			}
		}
		else
    	{
	    	SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
	    }
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 5+ to use this.");
	return 1;
}
CMD:vehname(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessage(playerid, COLOR_TEAL, "--------------------------------------------------------------------------------------------------------------------------------");
		SendClientMessage(playerid, COLOR_WHITE, "Vehicle Search:");
		new
			rcount,
			string[128];

		if(isnull(params)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} No keyword specified.");
		if(strlen(params) < 3) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Search keyword too short.");

		for(new v; v < sizeof(aVehicleNames); v++) {
			if(strfind(aVehicleNames[v], params, true) != -1) {

				if(rcount == 0) format(string, sizeof(string), "%s (ID %d)", aVehicleNames[v], v+400);
				else format(string, sizeof(string), "%s | %s (ID %d)", string, aVehicleNames[v], v+400);

				rcount++;
			}
		}

		if(rcount == 0) SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} No results found.");

		else if(strlen(string) >= 128) SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Too many results found.");

		else return SendClientMessage(playerid, COLOR_WHITE, string);

		SendClientMessage(playerid, COLOR_TEAL, "--------------------------------------------------------------------------------------------------------------------------------");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:gunname(playerid, params[]) 
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessage(playerid, COLOR_TEAL, "--------------------------------------------------------------------------------------------------------------------------------");
		SendClientMessage(playerid, COLOR_WHITE, "Weapon Search:");
		new
			rcount,
			string[128];

		if(isnull(params)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} No keyword specified.");
		if(strlen(params) < 3) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Search keyword too short.");

		for(new v; v < 47; v++) {
			if(strfind(GunNames[v], params, true) != -1) {

				if(rcount == 0) format(string, sizeof(string), "%s (ID %d)", GunNames[v], v);
				else format(string, sizeof(string), "%s | %s (ID %d)", string, GunNames[v], v);

				rcount++;
			}
		}

		if(rcount == 0) SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} No results found.");

		else if(strlen(string) >= 128) SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Too many results found.");

		else return SendClientMessage(playerid, COLOR_WHITE, string);

		SendClientMessage(playerid, COLOR_TEAL, "--------------------------------------------------------------------------------------------------------------------------------");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:quests(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new quest1[128],quest2[128],quest11[256],quest22[256];
	if(PlayerInfo[playerid][pLanguage] == 1)
	{
		if(PlayerInfo[playerid][pQuest1] == 1)  format(quest1,sizeof(quest1),"Go to the baseball stadium located in Las Venturas");
		else if(PlayerInfo[playerid][pQuest1] == 2)  format(quest1,sizeof(quest1),"Climb mount Chiliad");
		else if(PlayerInfo[playerid][pQuest1] == 3)  format(quest1,sizeof(quest1),"Travel %d KM with vehicle %s",PlayerInfo[playerid][pQuestNeed1],aVehicleNames[PlayerInfo[playerid][pQuestCar] - 400]);
		else if(PlayerInfo[playerid][pQuest1] == 4)  format(quest1,sizeof(quest1),"Rob a business");
		else if(PlayerInfo[playerid][pQuest1] == 5)  format(quest1,sizeof(quest1),"Collect %d materials",PlayerInfo[playerid][pQuestNeed1]);
		else if(PlayerInfo[playerid][pQuest1] == 6)  format(quest1,sizeof(quest1),"Catch and sell %d fish",PlayerInfo[playerid][pQuestNeed1]);
		else if(PlayerInfo[playerid][pQuest1] == 7)  format(quest1,sizeof(quest1),"Collect %d metals from the mine",PlayerInfo[playerid][pQuestNeed1]);
		else if(PlayerInfo[playerid][pQuest1] == 8)  format(quest1,sizeof(quest1),"Collect %d strawberrys",PlayerInfo[playerid][pQuestNeed1]);
		if(PlayerInfo[playerid][pQuest2] == 1)  format(quest2,sizeof(quest2),"Deliver %d pizza",PlayerInfo[playerid][pQuestNeed2]);
		else if(PlayerInfo[playerid][pQuest2] == 2)
		{
			if(!IsACop(playerid))
			{
				format(quest2,sizeof(quest2),"Kill %d cops",PlayerInfo[playerid][pQuestNeed2]);
			}
			else
			{
				format(quest2,sizeof(quest2),"Arrest %d suspects",PlayerInfo[playerid][pQuestNeed2]);
			}
		}
		else if(PlayerInfo[playerid][pQuest2] == 3)  format(quest2,sizeof(quest2),"Kill %d players at paintball",PlayerInfo[playerid][pQuestNeed2]);
		else if(PlayerInfo[playerid][pQuest2] == 4)  format(quest2,sizeof(quest2),"Collect and unload %d KG of garbage",PlayerInfo[playerid][pQuestNeed2]);
		else if(PlayerInfo[playerid][pQuest2] == 5)  format(quest2,sizeof(quest2),"Sell %d KG of flour",PlayerInfo[playerid][pQuestNeed2]);
		else if(PlayerInfo[playerid][pQuest2] == 6)  format(quest2,sizeof(quest2),"Buy drugs and use them");
		else if(PlayerInfo[playerid][pQuest2] == 7)  format(quest2,sizeof(quest2),"Go in a bar and get drunk");
		else if(PlayerInfo[playerid][pQuest2] == 8)  format(quest2,sizeof(quest2),"Deliver %d packages at Air Transporter",PlayerInfo[playerid][pQuestNeed2]);

		if(PlayerInfo[playerid][pQuestProgress1]<PlayerInfo[playerid][pQuestNeed1])
			format(quest11,sizeof(quest11),"Quest: %s | Progress: %d/%d",quest1,PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
		if(PlayerInfo[playerid][pQuestProgress2]<PlayerInfo[playerid][pQuestNeed2])
			format(quest22,sizeof(quest22),"Quest: %s | Progress: %d/%d",quest2,PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
	}
	else
	{
		if(PlayerInfo[playerid][pQuest1] == 1)  format(quest1,sizeof(quest1),"Mergi pe stadionul de baseball din Las Venturas");
		else if(PlayerInfo[playerid][pQuest1] == 2)  format(quest1,sizeof(quest1),"Urca pe muntele Chiliad");
		else if(PlayerInfo[playerid][pQuest1] == 3)  format(quest1,sizeof(quest1),"Parcurge distanta de %d KM cu un vehicul de tipul %s",PlayerInfo[playerid][pQuestNeed1],aVehicleNames[PlayerInfo[playerid][pQuestCar] - 400]);
		else if(PlayerInfo[playerid][pQuest1] == 4)  format(quest1,sizeof(quest1),"Jefuieste o afacere");
		else if(PlayerInfo[playerid][pQuest1] == 5)  format(quest1,sizeof(quest1),"Colecteaza %d materiale",PlayerInfo[playerid][pQuestNeed1]);
		else if(PlayerInfo[playerid][pQuest1] == 6)  format(quest1,sizeof(quest1),"Vinde %d pesti",PlayerInfo[playerid][pQuestNeed1]);
		else if(PlayerInfo[playerid][pQuest1] == 7)  format(quest1,sizeof(quest1),"Colecteaza %d metale din mina",PlayerInfo[playerid][pQuestNeed1]);
		else if(PlayerInfo[playerid][pQuest1] == 8)  format(quest1,sizeof(quest1),"Colecteaza %d capsuni",PlayerInfo[playerid][pQuestNeed1]);
		if(PlayerInfo[playerid][pQuest2] == 1)  format(quest2,sizeof(quest2),"Livreaza %d pizza",PlayerInfo[playerid][pQuestNeed2]);
		else if(PlayerInfo[playerid][pQuest2] == 2)
		{
			if(!IsACop(playerid))
			{
				format(quest2,sizeof(quest2),"Omoara %d politisti",PlayerInfo[playerid][pQuestNeed2]);
			}
			else
			{
				format(quest2,sizeof(quest2),"Aresteaza %d suspecti",PlayerInfo[playerid][pQuestNeed2]);
			}
		}
		else if(PlayerInfo[playerid][pQuest2] == 3)  format(quest2,sizeof(quest2),"Omoara %d playeri la Paintball",PlayerInfo[playerid][pQuestNeed2]);
		else if(PlayerInfo[playerid][pQuest2] == 4)  format(quest2,sizeof(quest2),"Colecteaza si descarca %d KG de gunoi",PlayerInfo[playerid][pQuestNeed2]);
		else if(PlayerInfo[playerid][pQuest2] == 5)  format(quest2,sizeof(quest2),"Vinde %d KG de faina",PlayerInfo[playerid][pQuestNeed2]);
		else if(PlayerInfo[playerid][pQuest2] == 6)  format(quest2,sizeof(quest2),"Cumpara droguri si foloseste-le");
		else if(PlayerInfo[playerid][pQuest2] == 7)  format(quest2,sizeof(quest2),"Du-te intr-un bar si imbata-te");
		else if(PlayerInfo[playerid][pQuest2] == 8)  format(quest2,sizeof(quest2),"Livreaza %d pachete la Air Transporter",PlayerInfo[playerid][pQuestNeed2]);

		if(PlayerInfo[playerid][pQuestProgress1]<PlayerInfo[playerid][pQuestNeed1])
			format(quest11,sizeof(quest11),"Misiune: %s | Progres: %d/%d",quest1,PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
		if(PlayerInfo[playerid][pQuestProgress2]<PlayerInfo[playerid][pQuestNeed2])
			format(quest22,sizeof(quest22),"Misiune: %s | Progres: %d/%d",quest2,PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
	}

	if(PlayerInfo[playerid][pQuestProgress1]<PlayerInfo[playerid][pQuestNeed1]) SendClientMessage(playerid, COLOR_YELLOW, quest11);
	if(PlayerInfo[playerid][pQuestProgress2]<PlayerInfo[playerid][pQuestNeed2]) SendClientMessage(playerid, COLOR_YELLOW, quest22);

	#if ACTIVE_QUEST == 1
		new questtext[128],questtext2[128],countobj;
		countobj = countSObjects(playerid);
		if(countobj == 50) return 1;
		SendClientMessage(playerid, COLOR_YELLOW, "");
		format(questtext, sizeof(questtext), "Misiune Speciala: Gaseste toate cadourile ascunse. Progres: %d/%d.", countobj, questobjectss);
		format(questtext2, sizeof(questtext2), "Special Quest: Find all the hidden gifts. Progress: %d/%d.", countobj, questobjectss);
		SS(playerid, COLOR_YELLOW, questtext, questtext2);
		SS(playerid, COLOR_YELLOW, "Premii: 4.000.000$-5.000.000$, 40-70 premium points, 10-20 RP, 10-20 rob points si 250-350 gift points.", "Rewards: 4.000.000$-5.000.000$, 40-70 premium points, 10-20 RP, 10-20 rob points si 250-350 gift points.");
	#endif
	return 1;
}
CMD:togfind(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid,COLOR_LIGHTGREEN3, AdminOnly);
    if(togfind[playerid] == 1)
    {
        togfind[playerid] = 0;
        SendClientMessage(playerid,COLOR_DARKPINK,"Tog find disabled.");
    }
    else
    {
    	togfind[playerid] = 1;
    	SendClientMessage(playerid,COLOR_DARKPINK,"Tog find enabled.");
    }
	return 1;
}

CMD:find(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(BusinessRob[playerid] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi aceasta comanda in timp ce jefuiesti o afacere.");
	if(PlayerInfo[playerid][pJob] != 1 && !IsACop(playerid) && PlayerInfo[playerid][pMember] != 11)	return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a detective.");
	if(CP[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1 && PlayerInfo[playerid][pJobVehicle] == 0 && BeeCar[playerid] == 0 && InMinerJob[playerid] == 0 && InStrawberryJob[playerid] == 0 && PizzaCP[playerid] != 1 && busc[playerid] != 1 && Trucker[playerid] ==0)
	{
		new id,giveplayer[30],string[100];
		if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /find [name/playerid]");
		if(IsPlayerConnected(id))
		{
			if(id != INVALID_PLAYER_ID)
			{
			    if(id == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't find yourself.");
				if(togfind[id] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use the command on this player right now, try it later.");
				if(PlayerInfo[id][pAdmin] > 0 && GetPlayerVirtualWorld(id) == 1337 || PlayerInfo[id][pAdmin] > 0 && Spectate[id] != -1 || PlayerInfo[id][pAdmin] > 0 && AdminDuty[id] == 1) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Checkpoint dezactivat. Acel admin este ocupat.", "(Error){FFFFFF} Checkpoint disabled. That admin is busy.");
				UsedFind[playerid] = 1;
    			GetPlayerName(id, giveplayer, sizeof(giveplayer));
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(id, X,Y,Z);
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, X,Y,Z, 3.5);
				targetfind[playerid] = id;
				foreach(new i : Player)
				{
				    if(IsACop(playerid))
				    {
				        if(caser[playerid] == i)
				        {
				            cased[i] --;
						}
					}
				}
				if(IsACop(playerid))
				{
				    cased[id] ++;
				    caser[playerid] = id;
				}
				format(string,sizeof(string),"Checkpoint-ul va afisa locatia playerului %s. Distanta pana la player: %.0f.",giveplayer,GetDistanceBetweenPlayers(playerid, id));
				SendClientMessage(playerid, COLOR_YELLOW, string);
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel checkpoint", "You are sure to cancel the current checkpoint?", "Yes", "No");
 	return 1;
}

CMD:gethere(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new plo,sendername[30],giveplayer[30],string[256];
		if(sscanf(params, "u",plo)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gethere [name/playerid]");
    	new Float:plocx,Float:plocy,Float:plocz;
	    if(IsPlayerConnected(plo))
	    {
	     	if(plo != INVALID_PLAYER_ID)
		    {
				if(CanSpectate[plo] == 0 && PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have permission to use /gethere on this admin.");
				GetPlayerPos(playerid, plocx, plocy, plocz);
				SetPlayerInterior(plo,GetPlayerInterior(playerid));
				PlayerInfo[plo][pInt] = PlayerInfo[playerid][pInt];
				PlayerInfo[plo][pLocal] = PlayerInfo[playerid][pLocal];
				if(GetPlayerState(plo) == 2)
				{
					TelePos[plo][0] = 0.0;
					TelePos[plo][1] = 0.0;
					new tmpcar = GetPlayerVehicleID(plo);
					SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
					GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
				}
				else
				{
					SetPlayerPosEx(plo,plocx,plocy+2, plocz);
				}
				if(InHouse[playerid] > 0)
				{
					InHouse[plo] = InHouse[playerid];
					if(strlen(housestring[InHouse[plo]]) > 0)
					{
				    	StopAudioStreamForPlayer(plo);
						PlayAudioStreamForPlayer(plo, housestring[InHouse[plo]]);
					}
				}
				if(InHQ[playerid] > 0)
				{
					InHQ[plo] = InHQ[playerid];
				}
				if(InBussines[playerid] > 0)
				{
					InBussines[plo] = InBussines[playerid];
				}
				SetPlayerVirtualWorld(plo, GetPlayerVirtualWorld(playerid));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(plo, giveplayer, sizeof(giveplayer));
				format(string,sizeof(string),"You have teleported %s to you.",giveplayer);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				format(string,sizeof(string),"You have been teleported by admin %s.",sendername);
				SendClientMessage(plo, COLOR_GRAD1, string);
				format(string,sizeof(string),"%s used /gethere on %s.",sendername,giveplayer);
				InHQ[plo] = -1;
				InHouse[plo] = -1;
				InBussines[plo] = -1;
				if(PlayerInfo[plo][pPaintBallG] > 0)
				{
					foreach(new i : Player)
					{
					    if(PlayerInfo[i][pPaintBallG] == PlayerInfo[plo][pPaintBallG] && i != plo)
					    {
					        format(string,sizeof(string),"(Paint){FFFFFF} %s has left the paintball arena.", giveplayer);
					        SendClientMessage(i, COLOR_ARENA, string);
						}
					}
					curatj[plo] = 0;
					for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(plo, 1001, 1001, 1001);
					PlayerTextDrawHide(plo, PaintBallText[plo]);
					SetPlayerSkin(plo, PlayerInfo[plo][pModel]);
					paintp[PlayerInfo[plo][pPaintBallG]]--;
			        PlayerInfo[plo][pPaintBallG] = 0;
			        PlayerInfo[plo][pPaintBallKills] = 0;
			        PlayerInfo[plo][pPaintBallVoted] = 0;
			        PlayerInfo[plo][pPaintBallVoted2] = 0;
			        ResetPlayerWeaponsEx(plo);
				    ResetPlayerWeapons(plo);
				    SetPlayerArmourEx(plo, 0);
				    SetPlayerToTeamColor(plo);
				    SetPlayerWorldBounds(plo, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
				}
			}
		}
		else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}

CMD:pet(playerid, params[]) 
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pPet] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a personal pet.");
	new petString[256];
	if(PlayerInfo[playerid][pPetStatus] == 0 && PlayerInfo[playerid][pPetLevel] < 20) format(petString, sizeof petString, "Status\t{ff0000}Sleeping\nPet name\t{26B309}%s\nBenefits\nUpgrade pet\t%d/%d pet points\nPet skin",PlayerInfo[playerid][pPetName],PlayerInfo[playerid][pPetPoints],PlayerInfo[playerid][pPetLevel]*100);
	else if(PlayerInfo[playerid][pPetLevel] < 20) format(petString, sizeof petString, "Status\t{1AAB07}Waked up\nPet name\t{26B309}%s\nBenefits\nUpgrade pet\t%d/%d pet points\nPet skin", PlayerInfo[playerid][pPetName], PlayerInfo[playerid][pPetPoints],PlayerInfo[playerid][pPetLevel]*100);
	else if(PlayerInfo[playerid][pPetStatus] == 0) format(petString, sizeof petString, "Status\t{ff0000}Sleeping\nPet name\t{26B309}%s\nBenefits\nUpgrade pet\t%d pet points\nPet skin",PlayerInfo[playerid][pPetName],PlayerInfo[playerid][pPetPoints]);
	else format(petString, sizeof petString, "Status\t{1AAB07}Waked up\nPet name\t{26B309}%s\nBenefits\nUpgrade pet\t%d pet points\nPet skin", PlayerInfo[playerid][pPetName], PlayerInfo[playerid][pPetPoints]);
	ShowPlayerDialog(playerid, DIALOG_PET, DIALOG_STYLE_TABLIST, "Pet Menu", petString, "Select","Exit");
	return 1;
}

function RemovePet(playerid) 
{
	//printf("%d pet destroy 3dtextid %s's",Pet[playerid],PlayerInfo[playerid][pNormalName]);
	PlayerInfo[playerid][pPetStatus] = 0;
	DestroyDynamic3DTextLabel(Pet[playerid]);
	RemovePlayerAttachedObject(playerid, 9);
	return 1;
}

function AttachPet(playerid)
{
	if(PlayerInfo[playerid][pPetStatus] == 1) RemovePet(playerid);
	PlayerInfo[playerid][pPetStatus] = 1;
	new str[128];
	if(PlayerInfo[playerid][pPetSkin] == 19079) SetPlayerAttachedObjectEx(playerid, 9, PlayerInfo[playerid][pPetSkin], 1, 0.330000, -0.100000, -0.129999, 0.000000, 0.000000, 0.000000, 0.800000, 1.000000, 1.000000);
	else if(PlayerInfo[playerid][pPetSkin] == 1607) SetPlayerAttachedObjectEx(playerid, 9, PlayerInfo[playerid][pPetSkin], 1, 0.349999, -0.061524, -0.140000, 0.000000, 100.000000, 0.000000, 0.090000, 0.050000, 0.050000);
	else if(PlayerInfo[playerid][pPetSkin] == 1609) SetPlayerAttachedObjectEx(playerid, 9, PlayerInfo[playerid][pPetSkin], 1, 0.360000, 0.000000, -0.129999, 0.000000, 100.000000, 0.000000, 0.100000, 0.100000, 0.100000);
	else if(PlayerInfo[playerid][pPetSkin] == 1608) SetPlayerAttachedObjectEx(playerid, 9, PlayerInfo[playerid][pPetSkin], 1, 0.360000, -0.061524, -0.140000, 0.000000, 100.000000, 0.000000, 0.050000, 0.029999, 0.050000);
	else if(PlayerInfo[playerid][pPetSkin] == 1371) SetPlayerAttachedObjectEx(playerid, 9, PlayerInfo[playerid][pPetSkin], 1, 0.400000, 0.000000, -0.140000, 0.000000, 100.000000, 160.000000, 0.150000, 0.150000, 0.150000);
    format(str, sizeof(str), "{D6A7F1}%s(lvl %d)", PlayerInfo[playerid][pPetName], PlayerInfo[playerid][pPetLevel]);
    Pet[playerid] = CreateDynamic3DTextLabel(str, COLOR_WHITE, 0, 0, -20, 20.0, playerid, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Pet[playerid], E_STREAMER_ATTACH_OFFSET_Z, 0);
	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Pet[playerid], E_STREAMER_ATTACH_OFFSET_X, 0);
	//printf("%d pet 3dtextid %s's",Pet[playerid],PlayerInfo[playerid][pNormalName]);
	return 1;
}

function ViewPet(playerid) {
	new string[128];
	if(PlayerInfo[playerid][pLanguage] == 2 && PlayerInfo[playerid][pPetLevel] < 20) format(string,sizeof(string),"(Pet){FFFFFF} Nivelul animalului tau de companie este: %d/20.\nPentru a-l avansa trebuie sa detii %d puncte pentru pet, tu ai: %d.",PlayerInfo[playerid][pPetLevel],PlayerInfo[playerid][pPetLevel]*100,PlayerInfo[playerid][pPetPoints]);
	else if(PlayerInfo[playerid][pPetLevel] < 20) format(string,sizeof(string),"(Pet){FFFFFF} You personal pet level is: %d/20.\nFor upgrade his level you need %d pet points, you have: %d.",PlayerInfo[playerid][pPetLevel],PlayerInfo[playerid][pPetLevel]*100,PlayerInfo[playerid][pPetPoints]);
	SendClientMessage(playerid,COLOR_PET,string);
	SendClientMessage(playerid, COLOR_PET, "Pet Benefities:");
	SendClientMessage(playerid, COLOR_PET, "{FFFFFF} - job bonus");
	SendClientMessage(playerid, COLOR_PET, "{FFFFFF} - payday money");
	return 1;
}

CMD:gotoobject(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		new id;
		if(sscanf(params, "i",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gotoobject [id] (1-50)");
		{
			id--;
			SetPlayerPosEx(playerid, ObjectInfo[id][objPosX], ObjectInfo[id][objPosY]+5, ObjectInfo[id][objPosZ]);
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
   			StopAudioStreamForPlayer(playerid);
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}

CMD:gotoxyz(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		new string[128],interior,vw;
		new Float:x, Float:y, Float:z;
		if(sscanf(params, "fffii", x,y,z,interior,vw)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gotoxyz [x] [y] [z] [interior] [virtual]");
		{
			SetPlayerPosEx(playerid, x, y, z);
			format(string,sizeof(string),"You've teleported to x = %f, y = %f, z = %f, interior %d.",x,y,z,interior);
			SendClientMessage(playerid,COLOR_WHITE, string);
			SetPlayerVirtualWorld(playerid, vw);
			SetPlayerInterior(playerid,interior);
			InHQ[playerid] = -1;
			InHouse[playerid] = -1;
			InBussines[playerid] = -1;
   			StopAudioStreamForPlayer(playerid);
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:gotolv(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string[64],sendername[25];
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
			GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			SetVehicleVirtualWorld(tmpcar, 0);
			LinkVehicleToInterior(tmpcar, 0);
			OnPlayerGoto(playerid, 0, 0);
		}
		else
		{
			SetPlayerPosEx(playerid, 1699.2,1435.1, 10.7);
		}
		SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
		SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "Warning: Admin %s Teleported to LV.", sendername);
		if(InHouse[playerid] > -1)
		{
		    StopAudioStreamForPlayer(playerid);
		}
		InHQ[playerid] = -1;
		InHouse[playerid] = -1;
		InBussines[playerid] = -1;
		SetPlayerVirtualWorld(playerid,0);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:gotosf(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string[64],sendername[25];
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, -1417.0,-295.8,14.1);
			GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			SetVehicleVirtualWorld(tmpcar, 0);
			LinkVehicleToInterior(tmpcar, 0);
			OnPlayerGoto(playerid, 0, 0);
		}
		else
		{
			SetPlayerPosEx(playerid, -1417.0,-295.8,14.1);
		}
		SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
		SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "AdmWarning: Admin %s Teleported to SF.", sendername);
		if(InHouse[playerid] > -1)
		{
				StopAudioStreamForPlayer(playerid);
		}
		InHQ[playerid] = -1;
		InHouse[playerid] = -1;
		InBussines[playerid] = -1;
		SetPlayerVirtualWorld(playerid,0);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:nos(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pMember] == 1)
    {
        if(timersoo[playerid] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to wait 5 seconds before use /so again.");
        {
            new id,string[256];
            if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /nos [name/playerid]");
            {
				if(IsACop(id) && OnDuty[id] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't somate a cop.");
                if(!ProxDetectorS(20.0, playerid, id)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Acel player este prea departe de tine.","(Error){FFFFFF} This player is too far.");
                if(id != INVALID_PLAYER_ID)
                {
                    new sendername[25],numelee[25];
                    GetPlayerName(id,numelee,sizeof(numelee));
                    GetPlayerName(playerid,sendername,sizeof(sendername));
					format(string, sizeof(string), "{FFFF00}(megaphone) Politist %s: {1560BD}%s{FFFF00}, ai fost surprins cu NOS!", sendername, numelee);
					ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					format(string, sizeof(string), "{FFFF00}(megaphone) Politist %s: Trage pe dreapta pentru a primi o amenda in valoare de %s sau vei primi wanted 3!", sendername, FormatNumber(SvarInfo[16][svValue]));
					ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					timersoo[playerid] = 5;
					somatee[playerid] = 0;
					somated[id] = playerid;
					format(somatename[id], 30, sendername);
					soexpire[id] = 180;
                }
                else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a member of lspd or lvpd.");
	return 1;
}
CMD:faruri(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pMember] == 1)
    {
        if(timersoo[playerid] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to wait 5 seconds before use /so again.");
        {
            new id,string[256];
            if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /faruri [name/playerid]");
            {
				if(IsACop(id) && OnDuty[id] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't somate a cop.");
                if(!ProxDetectorS(20.0, playerid, id)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Acel player este prea departe de tine.","(Error){FFFFFF} This player is too far.");
                if(id != INVALID_PLAYER_ID)
                {
                    new sendername[25],numelee[25];
                    GetPlayerName(id,numelee,sizeof(numelee));
                    GetPlayerName(playerid,sendername,sizeof(sendername));
					format(string, sizeof(string), "{FFFF00}(megaphone) Politist %s: {1560BD}%s{FFFF00}, ai fost surprins conducand fara farurile aprinse dupa ora 20:00!", sendername, numelee);
					ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					format(string, sizeof(string), "{FFFF00}(megaphone) Politist %s: Trage pe dreapta pentru a primi o amenda in valoare de %s sau vei primi wanted 3!", sendername, FormatNumber(SvarInfo[16][svValue]));
					ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					timersoo[playerid] = 5;
					somatee[playerid] = 0;
					somated[id] = playerid;
					format(somatename[id], 30, sendername);
					soexpire[id] = 180;
                }
                else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a member of lspd or lvpd.");
	return 1;
}
CMD:casca(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pMember] == 1)
    {
        if(timersoo[playerid] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to wait 5 seconds before use /so again.");
        {
            new id,string[256];
            if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /casca [name/playerid]");
            {
				if(IsACop(id) && OnDuty[id] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't somate a cop.");
                if(!ProxDetectorS(20.0, playerid, id)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Acel player este prea departe de tine.","(Error){FFFFFF} This player is too far.");
                if(id != INVALID_PLAYER_ID)
                {
                    new sendername[25],numelee[25];
                    GetPlayerName(id,numelee,sizeof(numelee));
                    GetPlayerName(playerid,sendername,sizeof(sendername));
					format(string, sizeof(string), "{FFFF00}(megaphone) Politist %s: {1560BD}%s{FFFF00}, ai fost surprins conducand fara casca!", sendername, numelee);
					ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					format(string, sizeof(string), "{FFFF00}(megaphone) Politist %s: Trage pe dreapta pentru a primi o amenda in valoare de %s sau vei primi wanted 3!", sendername, FormatNumber(SvarInfo[16][svValue]));
					ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					timersoo[playerid] = 5;
					somatee[playerid] = 0;
					somated[id] = playerid;
					format(somatename[id], 30, sendername);
					soexpire[id] = 180;
                }
                else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a member of lspd or lvpd.");
	return 1;
}
CMD:permis(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pMember] == 1)
    {
        if(timersoo[playerid] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to wait 5 seconds before use /so again.");
        {
            new id,string[256];
            if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /permis [name/playerid]");
            {
				if(IsACop(id) && OnDuty[id] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't somate a cop.");
                if(!ProxDetectorS(20.0, playerid, id)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Acel player este prea departe de tine.","(Error){FFFFFF} This player is too far.");
                if(id != INVALID_PLAYER_ID)
                {
                    new sendername[25],numelee[25];
                    GetPlayerName(id,numelee,sizeof(numelee));
                    GetPlayerName(playerid,sendername,sizeof(sendername));
					format(string, sizeof(string), "{FFFF00}(megaphone) Politist %s: {1560BD}%s{FFFF00}, ai fost surprins conducand neregulamentar!", sendername, numelee);
					ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					format(string, sizeof(string), "{FFFF00}(megaphone) Politist %s: Foloseste /handsup pentru a-ti fi confiscat permisul sau vei primi wanted 3!", sendername);
					ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					timersoo[playerid] = 5;
					somatee[playerid] = 0;
					somated[id] = playerid;
					format(somatename[id], 30, sendername);
					soexpire[id] = 180;
                }
                else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a member of lspd or lvpd.");
	return 1;
}
CMD:per(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsACop(playerid))
    {
        if(timersoo[playerid] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to wait 5 seconds before use /so again.");
        {
            new id,string[256];
            if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /per [name/playerid]");
            {
				if(IsACop(id) && OnDuty[id] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't somate a cop.");
                if(!ProxDetectorS(20.0, playerid, id)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Acel player este prea departe de tine.","(Error){FFFFFF} This player is too far.");
                if(id != INVALID_PLAYER_ID)
                {
                    new sendername[25],numelee[25];
                    GetPlayerName(id,numelee,sizeof(numelee));
                    GetPlayerName(playerid,sendername,sizeof(sendername));
					format(string, sizeof(string), "{FFFF00}(megaphone) Politist %s: {1560BD}%s{FFFF00}, esti suspect de detinerea unor iteme ilegale!", sendername, numelee);
					ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					format(string, sizeof(string), "{FFFF00}(megaphone) Politist %s: Foloseste /handsup fii verificat sau vei primi wanted 3!", sendername);
					ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					timersoo[playerid] = 5;
					somatee[playerid] = 0;
					somated[id] = playerid;
					format(somatename[id], 30, sendername);
					soexpire[id] = 180;
                }
                else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a cop.");
	return 1;
}
CMD:so(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsACop(playerid))
    {
        if(timersoo[playerid] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to wait 5 seconds before use /so again.");
        {
            new id,string[256];
            if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /so [name/playerid]");
            {
				if(IsACop(id) && OnDuty[id] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't somate a cop.");
                if(!ProxDetectorS(20.0, playerid, id)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Acel player este prea departe de tine.","(Error){FFFFFF} This player is too far.");
                if(id != INVALID_PLAYER_ID)
                {
                    new sendername[25],numelee[25];
                    GetPlayerName(id,numelee,sizeof(numelee));
                    GetPlayerName(playerid,sendername,sizeof(sendername));
                    if(GetPlayerState(id) == 2)
					{
					    new speed = Carspeed(id);
					    if(speed > 1)
					    {
							format(string, sizeof(string), "{FFFF00}(megaphone) Politist %s: {1560BD}%s{FFFF00}, esti urmarit de politie! Trage pe dreapta imediat!", sendername, numelee);
							ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
							timersoo[playerid] = 5;
							somatee[playerid] = 0;
							somated[id] = playerid;
							format(somatename[id], 30, sendername);
							soexpire[id] = 180;
						}
						else if(speed == 0)
						{
						    if(PlayerInfo[id][pWantedLevel] == 0)
						    {
						    	format(string, sizeof(string), "{FFFF00}(megaphone) Politist %s: {1560BD}%s{FFFF00}, esti urmarit de politie! Ramai pe loc!", sendername, numelee);
								ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
								timersoo[playerid] = 5;
								somatee[playerid] = 0;
								somated[id] = playerid;
								format(somatename[id], 30, sendername);
								soexpire[id] = 180;
							}
							else if(PlayerInfo[id][pWantedLevel] > 0)
							{
							    format(string, sizeof(string), "{FFFF00}(megaphone) Politist %s: {1560BD}%s{FFFF00}, esti urmarit de politie! Te predai?", sendername, numelee);
								ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
								timersoo[playerid] = 5;
								somatee[playerid] = 0;
								somated[id] = playerid;
								format(somatename[id], 30, sendername);
								soexpire[id] = 180;
							}
						}
					}
					else
					{
						if(PlayerInfo[id][pWantedLevel] > 0)
						{
						    format(string, sizeof(string), "{FFFF00}(megaphone) Politist %s: {1560BD}%s{FFFF00}, esti urmarit de politie! Te predai?", sendername, numelee);
							ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
							timersoo[playerid] = 5;
							somatee[playerid] = 0;
							somated[id] = playerid;
							format(somatename[id], 30, sendername);
							soexpire[id] = 180;
						}
						else if(PlayerInfo[id][pWantedLevel] == 0)
						{
						    format(string, sizeof(string), "{FFFF00}(megaphone) Politist %s: {1560BD}%s{FFFF00}, esti urmarit de politie! Opreste-te unde esti!", sendername, numelee);
							ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
							timersoo[playerid] = 5;
							somatee[playerid] = 0;
							somated[id] = playerid;
							format(somatename[id], 30, sendername);
							soexpire[id] = 180;
						}
					}
                }
                else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a cop.");
	return 1;
}
CMD:goto(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new id,string[256],sendername[30],giveplayer[30],countx;
		if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /goto [name/playerid]");
		{
			if(id != INVALID_PLAYER_ID)
	        {
				if(CanSpectate[id] == 0 && PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You don't have permission to use /goto on this admin.");
				new Float:ax,Float:ay,Float:az;
				GetPlayerPos(playerid,ax,ay,az);
				posxxx[playerid] = ax;
				posyyy[playerid] = ay;
				poszzz[playerid] = az;
				new Float:x, Float:y, Float:z;
				GetPlayerPos(id, x, y, z);
				new tmpcar = GetPlayerVehicleID(playerid), tmpcar2 = GetPlayerVehicleID(id);
				if(GetPlayerState(playerid) == 2)
				{
					SetVehiclePos(tmpcar, x, y+4, z);
					GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
					LinkVehicleToInterior(tmpcar, GetPlayerInterior(id));
					SetVehicleVirtualWorld(tmpcar, GetPlayerVirtualWorld(id));
					OnPlayerGoto(playerid, GetPlayerInterior(id), GetPlayerVirtualWorld(id));
				}
				else
				{
					if(GetPlayerState(id) == 2 || GetPlayerState(id) == 3)
					{
						new model = GetVehicleModel(GetPlayerVehicleID(id));
						if(MaxSeats[model - 400] > 0)
						{
							for(new xx; xx < MaxSeats[model - 400]; xx++)
							{
								if(!IsSeatTaken(tmpcar2, xx))
								{
									PutPlayerInVehicle(playerid, tmpcar2, xx);
									countx++;
									break;
								}
							}
						}
						else
						{
							SetPlayerPosEx(playerid,x,y+2, z);
						}
					}
					else
					{
						SetPlayerPosEx(playerid,x,y+2, z);
					}
					if(countx == 0) SetPlayerPosEx(playerid,x,y+2, z);
				}
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id));
				SetPlayerInterior(playerid, GetPlayerInterior(id));
				if(InHouse[id] > 0)
				{
					InHouse[playerid] = InHouse[id];
					if(strlen(housestring[InHouse[playerid]]) > 0)
					{
					    StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
					}
				}
				if(InHQ[id] > 0)
				{
					InHQ[playerid] = InHQ[id];
				}
				if(InBussines[id] > 0)
				{
					InBussines[playerid] = InBussines[id];
				}
				GetPlayerName(playerid,sendername,sizeof(sendername));
				GetPlayerName(id,giveplayer,sizeof(giveplayer));
				format(string,sizeof(string),"You have been teleported to %s.",giveplayer);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				format(string,sizeof(string),"Admin %s teleported to you.",sendername);
				SendClientMessage(id, COLOR_GRAD1, string);
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin.");
	return 1;
}
CMD:goback(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(posxxx[playerid] != 0 )
		{
			SetPlayerPosEx(playerid,posxxx[playerid],posyyy[playerid],poszzz[playerid]);
			SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You haven't go anywhere yet.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin.");
	return 1;
}

CMD:gotols(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
			GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			OnPlayerGoto(playerid, 0, 0);
		}
		else
		{
			SetPlayerPosEx(playerid, 1529.6,-1691.2,13.3);
		}
		SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
		SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
		if(InHouse[playerid] > -1)
		{
			StopAudioStreamForPlayer(playerid);
		}
		InHQ[playerid] = -1;
		InHouse[playerid] = -1;
		InBussines[playerid] = -1;
		SetPlayerVirtualWorld(playerid,0);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:go(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
		new string[128], name[30];
		ShowPlayerDialog(playerid, DIALOG_GO, DIALOG_STYLE_LIST, "SERVER: Important location", "City Location\nOther Locations", "Select", "Exit");
		GetPlayerName(playerid, name, sizeof(name));
		format(string, sizeof(string), "(AdmCmd){FFFFFF} {FFFFFF}Admin %s used command /go.", name);
		ABroadCast(COLOR_RED2, string, 1);
	}
	return 1;
}
CMD:gotospawn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1209.7803,-1728.4128,13.5707);
			GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			OnPlayerGoto(playerid, 0, 0);
		}
		else
		{
			SetPlayerPosEx(playerid, 1209.7803,-1728.4128,13.5707);
		}
		SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
		SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
		if(InHouse[playerid] > -1)
		{
			StopAudioStreamForPlayer(playerid);
		}
		InHQ[playerid] = -1;
		InHouse[playerid] = -1;
		InBussines[playerid] = -1;
		SetPlayerVirtualWorld(playerid,0);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:gotods(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, 367.0920,-1539.7961,33.0416);
		GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
		TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		LinkVehicleToInterior(tmpcar, 0);
		SetVehicleVirtualWorld(tmpcar, 0);
		OnPlayerGoto(playerid, 0, 0);
	}
	else
	{
		SetPlayerPosEx(playerid, 367.0920,-1539.7961,33.0416);
	}
	SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
	SetPlayerInterior(playerid,0);
	PlayerInfo[playerid][pInt] = 0;
	if(InHouse[playerid] > -1)
	{
			StopAudioStreamForPlayer(playerid);
	}
	InHQ[playerid] = -1;
	InHouse[playerid] = -1;
	InBussines[playerid] = -1;
	SetPlayerVirtualWorld(playerid,0);
	return 1;
}
CMD:gotojail(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, 227.6104,114.6985,1000.0156);
		GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
		TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		LinkVehicleToInterior(tmpcar, 10);
		SetVehicleVirtualWorld(tmpcar, 0);
		OnPlayerGoto(playerid, 10, 0);
	}
	else
	{
		SetPlayerPosEx(playerid, 227.6104,114.6985,1000.0156);
	}
	SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported to jail.");
	SetPlayerInterior(playerid,10);
	PlayerInfo[playerid][pInt] = 10;
	if(InHouse[playerid] > -1)
	{
		StopAudioStreamForPlayer(playerid);
	}
	InHQ[playerid] = -1;
	InHouse[playerid] = -1;
	InBussines[playerid] = -1;
	SetPlayerVirtualWorld(playerid,0);
	return 1;
}
CMD:mark(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new Float: xd,Float:yd,Float:zd;
	GetPlayerPos(playerid, xd, yd, zd);
	TeleportDest[playerid][0] = xd;
	TeleportDest[playerid][1] = yd;
	TeleportDest[playerid][2] = zd;
	SendClientMessage(playerid, COLOR_DARKPINK, "Mark set.");
	return 1;
}
CMD:gotom(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, -2317.8091,-1637.5575,483.7031);
		GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
		TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		LinkVehicleToInterior(tmpcar, 0);
		SetVehicleVirtualWorld(tmpcar, 0);
		OnPlayerGoto(playerid, 0, 0);
	}
	else
	{
		SetPlayerPosEx(playerid, -2317.8091,-1637.5575,483.7031);
	}
	SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
	SetPlayerInterior(playerid,0);
	PlayerInfo[playerid][pInt] = 0;
	if(InHouse[playerid] > -1)
	{
		StopAudioStreamForPlayer(playerid);
	}
	InHQ[playerid] = -1;
	InHouse[playerid] = -1;
	InBussines[playerid] = -1;
	SetPlayerVirtualWorld(playerid,0);
	return 1;
}

CMD:gotoeventarena(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, 8124.4839,-7558.7246,15.3666);
		GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
		TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		LinkVehicleToInterior(tmpcar, 0);
		SetVehicleVirtualWorld(tmpcar, 0);
		OnPlayerGoto(playerid, 0, 0);
	}
	else
	{
		SetPlayerPosEx(playerid, 8124.4839,-7558.7246,15.3666);
	}
	SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
	SetPlayerInterior(playerid,0);
	PlayerInfo[playerid][pInt] = 0;
	if(InHouse[playerid] > -1)
	{
	    StopAudioStreamForPlayer(playerid);
	}
	InHQ[playerid] = -1;
	InHouse[playerid] = -1;
	InBussines[playerid] = -1;
	SetPlayerVirtualWorld(playerid,0);
	return 1;
}
CMD:gotomark(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]+2);
		GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
		TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		LinkVehicleToInterior(tmpcar, 0);
		SetVehicleVirtualWorld(tmpcar, 0);
		OnPlayerGoto(playerid, 0, 0);
	}
	else SetPlayerPosEx(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]+2);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SendClientMessage(playerid, COLOR_GREY, "You have been teleported to the mark.");
	SetPlayerInterior(playerid,0);
	return 1;
}
CMD:gotocar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new testcar;
	if(sscanf(params, "d",testcar)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gotocar [car id]");
	new Float:cwx2,Float:cwy2,Float:cwz2;
	GetVehiclePos(testcar, cwx2, cwy2, cwz2);
	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, cwx2, cwy2, cwz2);
		GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
		TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		LinkVehicleToInterior(tmpcar, 0);
		SetVehicleVirtualWorld(tmpcar, 0);
		OnPlayerGoto(playerid, 0, 0);
	}
	else SetPlayerPosEx(playerid, cwx2, cwy2, cwz2);
	SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
	SetPlayerInterior(playerid,0);
	if(InHouse[playerid] > -1) StopAudioStreamForPlayer(playerid);
	InHQ[playerid] = -1;
	InHouse[playerid] = -1;
	InBussines[playerid] = -1;
	SetPlayerVirtualWorld(playerid,0);
	return 1;
}
CMD:check(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin/helper.");
	new id;
	if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /check [name/playerid]");
	if(IsPlayerConnected(id))
	{
		if(id != INVALID_PLAYER_ID)
		{
			ShowStats(playerid,id);
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	return 1;
}
CMD:pm(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin/helper.");
	new id,message[128], string[256], sendername[25], giveplayer[25];
	if(sscanf(params, "us[128]", id, message)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /pm [name/playerid] [message]");
	{
		if(id==playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't send a PM yourself.");
		if(id != INVALID_PLAYER_ID)
        {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			format(string, sizeof(string), "> PM from %s: %s", sendername, message);
			SendClientMessage(id, COLOR_YELLOW, string);
			PlayerPlaySound(id, 1139, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "(( PM sent to %s: %s ))", giveplayer , message);
			SendClientMessage(playerid,  COLOR_SMS, string);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	return 1;
}
CMD:id(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new id[30], giveplayer[150], sstring[256], name[30], find=0, idd, afktext[30],viptext[30], fps;
	if(sscanf(params, "s[30]", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /id [name/playerid]");
	{
		if(IsNumeric(id))
		{
			idd = strval(id);
			if(IsPlayerConnected(idd))
			{
				if(idd != INVALID_PLAYER_ID)
				{
					if(IsPlayerAFK[idd] > 0 && PlayerInfo[playerid][pAdmin] > 0) format(afktext, sizeof(afktext), "- AFK for %d seconds", IsPlayerAFK[idd]);
					else format(afktext, sizeof(afktext), "");
					if(PlayerInfo[idd][pPremiumAccount] == 2) format(viptext, sizeof(viptext), "{EFF91E}[VIP]{FFFFFF}");
					else format(viptext, sizeof(viptext), "");
					if(PlayerInfo[idd][pAdmin] > 0 && PlayerInfo[playerid][pAdmin] == 0 || PlayerInfo[idd][pHelper] > 0 && PlayerInfo[playerid][pAdmin] == 0) fps = 60;
					else fps = PlayerInfo[idd][pFPS];
					if(PlayerInfo[idd][pSleeping] == 1)
					{
						if(PlayerInfo[idd][pClanTag] == 0)
						{
							format(giveplayer, sizeof(giveplayer),"%s", PlayerInfo[idd][pNormalName]);
						}
						if(PlayerInfo[idd][pClanTag] == 1)
						{
							format(giveplayer, sizeof(giveplayer),"{FFFF00}%s{CECECE}%s", ClanInfo[PlayerInfo[idd][pClan]][cClanTag], PlayerInfo[idd][pNormalName]);
						}
						if(PlayerInfo[idd][pClanTag] == 2)
						{
							format(giveplayer, sizeof(giveplayer),"%s{FFFF00}%s{CECECE}", PlayerInfo[idd][pNormalName], ClanInfo[PlayerInfo[idd][pClan]][cClanTag]);
						}
						if(PlayerInfo[idd][pRank] > 0)
						{
							format(sstring, sizeof(sstring), "(%d) %s | Level: %d | Faction: %s (rank %d) | Ping: %d | FPS: %d %s %s",idd,giveplayer,PlayerInfo[idd][pLevel],NumeFactiune(PlayerInfo[idd][pMember]),PlayerInfo[idd][pRank],GetPlayerPing(idd),fps,viptext,afktext);
							SendClientMessage(playerid, COLOR_GREY, sstring);
						}
						else
						{
							format(sstring, sizeof(sstring), "(%d) %s | Level: %d | Faction: None | Ping: %d | FPS: %d %s %s",idd,giveplayer,PlayerInfo[idd][pLevel],GetPlayerPing(idd),fps,viptext,afktext);
							SendClientMessage(playerid, COLOR_GREY, sstring);
						}
					}
					else
					{
						if(PlayerInfo[idd][pClanTag] == 0)
						{
							format(giveplayer, sizeof(giveplayer),"%s", PlayerInfo[idd][pNormalName]);
						}
						if(PlayerInfo[idd][pClanTag] == 1)
						{
							format(giveplayer, sizeof(giveplayer),"{FFFF00}%s{FFFFFF}%s", ClanInfo[PlayerInfo[idd][pClan]][cClanTag], PlayerInfo[idd][pNormalName]);
						}
						if(PlayerInfo[idd][pClanTag] == 2)
						{
							format(giveplayer, sizeof(giveplayer),"%s{FFFF00}%s{FFFFFF}", PlayerInfo[idd][pNormalName], ClanInfo[PlayerInfo[idd][pClan]][cClanTag]);
						}
						if(PlayerInfo[idd][pRank] > 0)
						{
							format(sstring, sizeof(sstring), "(%d) %s | Level: %d | Faction: %s (rank %d) | Ping: %d | FPS: %d %s %s",idd,giveplayer,PlayerInfo[idd][pLevel],NumeFactiune(PlayerInfo[idd][pMember]),PlayerInfo[idd][pRank],GetPlayerPing(idd),fps,viptext,afktext);
							SendClientMessage(playerid, COLOR_WHITE, sstring);
						}
						else
						{
							format(sstring, sizeof(sstring), "(%d) %s | Level: %d | Faction: None | Ping: %d | FPS: %d %s %s",idd,giveplayer,PlayerInfo[idd][pLevel],GetPlayerPing(idd),fps,viptext,afktext);
							SendClientMessage(playerid, COLOR_WHITE, sstring);
						}
					}
				}
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
		}
		else
		{
			foreach(new i : Player)
			{
				if(IsPlayerConnected(i))
				{
					if(find < 10)
					{
						GetPlayerName(i, name, sizeof(name));
						if(IsPlayerAFK[i] > 0 && PlayerInfo[playerid][pAdmin] > 0) format(afktext, sizeof(afktext), "- AFK for %d seconds", IsPlayerAFK[i]);
						else format(afktext, sizeof(afktext), "");
						if(PlayerInfo[i][pPremiumAccount] == 2) format(viptext, sizeof(viptext), "{EFF91E}[VIP]{FFFFFF}");
						else format(viptext, sizeof(viptext), "");
						if(strfind(name, id, true) != -1)
						{
							if(PlayerInfo[i][pSleeping] == 1)
							{
								if(PlayerInfo[i][pClanTag] == 0)
								{
									format(giveplayer, sizeof(giveplayer),"%s", PlayerInfo[i][pNormalName]);
								}
								if(PlayerInfo[i][pClanTag] == 1)
								{
									format(giveplayer, sizeof(giveplayer),"{FFFF00}%s{CECECE}%s", ClanInfo[PlayerInfo[i][pClan]][cClanTag], PlayerInfo[i][pNormalName]);
								}
								if(PlayerInfo[i][pClanTag] == 2)
								{
									format(giveplayer, sizeof(giveplayer),"%s{FFFF00}%s{CECECE}", PlayerInfo[i][pNormalName], ClanInfo[PlayerInfo[i][pClan]][cClanTag]);
								}
								if(PlayerInfo[i][pRank] > 0)
								{
									format(sstring, sizeof(sstring), "(%d) %s | Level: %d | Faction: %s (rank %d) | Ping: %d | FPS: %d %s %s",i,giveplayer,PlayerInfo[i][pLevel],NumeFactiune(PlayerInfo[i][pMember]),PlayerInfo[i][pRank],GetPlayerPing(i),PlayerInfo[i][pFPS],viptext,afktext);
									SendClientMessage(playerid, COLOR_GREY, sstring);
								}
								else
								{
									format(sstring, sizeof(sstring), "(%d) %s | Level: %d | Faction: None | Ping: %d | FPS: %d %s %s",i,giveplayer,PlayerInfo[i][pLevel],GetPlayerPing(i),PlayerInfo[i][pFPS],viptext,afktext);
									SendClientMessage(playerid, COLOR_GREY, sstring);
								}
							}
							else
							{
								if(PlayerInfo[i][pClanTag] == 0)
								{
									format(giveplayer, sizeof(giveplayer),"%s", PlayerInfo[i][pNormalName]);
								}
								if(PlayerInfo[i][pClanTag] == 1)
								{
									format(giveplayer, sizeof(giveplayer),"{FFFF00}%s{FFFFFF}%s", ClanInfo[PlayerInfo[i][pClan]][cClanTag], PlayerInfo[i][pNormalName]);
								}
								if(PlayerInfo[i][pClanTag] == 2)
								{
									format(giveplayer, sizeof(giveplayer),"%s{FFFF00}%s{FFFFFF}", PlayerInfo[i][pNormalName], ClanInfo[PlayerInfo[i][pClan]][cClanTag]);
								}
								if(PlayerInfo[i][pRank] > 0)
								{
									format(sstring, sizeof(sstring), "(%d) %s | Level: %d | Faction: %s (rank %d) | Ping: %d | FPS: %d %s %s",i,giveplayer,PlayerInfo[i][pLevel],NumeFactiune(PlayerInfo[i][pMember]),PlayerInfo[i][pRank],GetPlayerPing(i),PlayerInfo[i][pFPS],viptext,afktext);
									SendClientMessage(playerid, COLOR_WHITE, sstring);
								}
								else
								{
									format(sstring, sizeof(sstring), "(%d) %s | Level: %d | Faction: None | Ping: %d | FPS: %d %s %s",i,giveplayer,PlayerInfo[i][pLevel],GetPlayerPing(i),PlayerInfo[i][pFPS],viptext,afktext);
									SendClientMessage(playerid, COLOR_WHITE, sstring);
								}
							}
							find ++;
						}
					}
				}
			}
			if(find == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
		}
	}
	return 1;
}
CMD:sleep(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(InHouse[playerid] > 0)
    {
    	if(PlayerInfo[playerid][pPhousekey] != InHouse[playerid] && PlayerInfo[playerid][pRented] != InHouse[playerid]) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Poti dormi doar in casa proprie sau in casa inchiriata (/rentroom).", "(Error){FFFFFF} You can only use /sleep only in your house.");
        if(PlayerInfo[playerid][pWantedLevel] == 0)
		{
            if(PlayerInfo[playerid][pSleeping] == 0)
			{
   				PlayerInfo[playerid][pSleeping] = 1;
   				PlayerHandsup[playerid] = 1;
				TogglePlayerControllable(playerid,0);
     			SS(playerid, COLOR_DARKPINK, "Acum poti ramane AFK fara a primi kick. Foloseste /sleep din nou cand vrei sa revi in joc.", "You can now leave your character AFK. Use /sleep again when you're back.");
				SS(playerid, COLOR_DARKPINK, "Minimizarea jocului (alt-tab) poate provoca unele buguri. Este recomandat sa apesi ESC inainte de a minimiza jocul.", "If alt-tabbing (minimising the game) is causing any bugs, it's recommended that you press escape before minimizing the game.");
                LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
				SetPlayerColor(playerid,COLOR_GRAD2);
			}
			else
			{
				PlayerInfo[playerid][pSleeping] = 0;
				PlayerHandsup[playerid] = 0;
				TogglePlayerControllable(playerid,1);
				ClearAnimations(playerid);
                SS(playerid, COLOR_DARKPINK, "Bine ai revenit!", "Welcome back!");
				SetPlayerToTeamColor(playerid);
		    }
        }
        else SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi /sleep cat timp ai wanted.", "(Error){FFFFFF} You're a wanted man. You can't go to sleep.");
    }
    else SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu esti intr-o casa. Poti dormi doar in case.", "(Error){FFFFFF} You're not in a house. You can only sleep inside a house.");
	return 1;
}
CMD:fillveh(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in a vehicle.");
    Gas[GetPlayerVehicleID(playerid)] = 100;
    SendClientMessage(playerid, COLOR_WHITE, "Car was refilled successfully.");
	return 1;
}
CMD:fixveh(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in a vehicle.");
    RepairVehicle(GetPlayerVehicleID(playerid));
    SendClientMessage(playerid, COLOR_WHITE, "Car was repaired successfully.");
	return 1;
}
CMD:fv(playerid, params[]) return cmd_fixveh(playerid, params);
CMD:jetpack(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
    SetPlayerSpecialAction(playerid, 2);
	return 1;
}
CMD:flymode(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new sendername[30],string[256];
	if(flymode[playerid] == 0)
	{
	    GetPlayerName(playerid, sendername, sizeof(sendername));
	    flymode[playerid] = 1;
		format(string,sizeof(string),"%s is now in flymode.", sendername);
		ABroadCast(COLOR_YELLOW,string,1);
		InitFly(playerid);
		StartFly(playerid);
		SetPlayerHealthEx(playerid, 1000);
	}
	else {
		flymode[playerid] = 0;
		SendClientMessage(playerid, COLOR_DARKPINK, "Fly mode off.");
		StopFly(playerid);
		SetPlayerHealthEx(playerid, 100);
	}
	return 1;
}
CMD:speed(playerid, params[]) 
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	if(EnableBoast[playerid] == 0) {
		EnableBoast[playerid] = 1;
		SendClientMessage(playerid, COLOR_DARKPINK, "Speed boost enabled.");
	}
	else 
	{
		EnableBoast[playerid] = 0;
		SendClientMessage(playerid, COLOR_DARKPINK, "Speed boost disabled.");
	}
	return 1;
}
forward RainbowCar(playerid);
public RainbowCar(playerid)
{
	if(PlayerInfo[playerid][pPremiumAccount] == 0 || RainbowOn[playerid] == 0) return 1;
	if(!IsPlayerInAnyVehicle(playerid)) 
	{
		ChangeVehicleColor(RainbowCarID[playerid],PlayerInfo[playerid][pCarColor1][RainbowCarIN[playerid]],PlayerInfo[playerid][pCarColor2][RainbowCarIN[playerid]]);
		RainbowOn[playerid] = 0;
		RainbowCarID[playerid] = -1;
		RainbowCarIN[playerid] = -1;
		SendClientMessage(playerid, COLOR_DARKPINK, "Rainbow mode disabled.");
		return 1;
	}
	new rcolor1, rcolor2;
	if(PlayerInfo[playerid][pPremiumAccount] == 1) rcolor1 = random(127), rcolor2 = random(127);
	if(PlayerInfo[playerid][pPremiumAccount] == 2) rcolor1 = 128 + random(128), rcolor2 = 128 + random(128);
	ChangeVehicleColor(RainbowCarID[playerid], rcolor1, rcolor2);
	SetTimerEx("RainbowCar", 1000, false, "i", playerid);
	return 1;	
}

CMD:rainbow(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pPremiumAccount] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a premium/vip account user.");
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in a vehicle.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not the driver of the car.");
    new idcar = -1,getcarid;
    getcarid = GetPlayerVehicleID(playerid);
    for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
	{
		if(getcarid == PlayerInfo[playerid][pCarID][vv])
		{
			idcar = vv;
		}
	}
	if(idcar == -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your personal car.");
	if(getcarid != PlayerInfo[playerid][pCarID][idcar]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be in your vehicle.");

	if(RainbowOn[playerid] == 0) {
		RainbowOn[playerid] = 1;
		RainbowCarID[playerid] = getcarid;
		RainbowCarIN[playerid] = idcar;
		SendClientMessage(playerid, COLOR_DARKPINK, "Rainbow mode enabled.");
		SetTimerEx("RainbowCar", 1000, false, "i", playerid);
	}
	else {
		ChangeVehicleColor(RainbowCarID[playerid],PlayerInfo[playerid][pCarColor1][RainbowCarIN[playerid]],PlayerInfo[playerid][pCarColor2][RainbowCarIN[playerid]]);
		RainbowOn[playerid] = 0;
		RainbowCarID[playerid] = -1;
		RainbowCarIN[playerid] = -1;
		SendClientMessage(playerid, COLOR_DARKPINK, "Rainbow mode disabled.");
	}
    return 1;
}
CMD:addnos(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in a vehicle.");
	AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
	SendClientMessage(playerid, COLOR_DARKPINK, "This vehicle was upgraded with nos now.");
	return 1;
}
CMD:service(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new x_nr[256],string[300],sendername[30],medics,taxidrivers;
	if(sscanf(params, "s[256]",x_nr))
	{
		SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /service [item]");
	  	SendClientMessage(playerid, COLOR_WHITE, "Available services: medic, taxi");
		return 1;
	}
	if(strcmp(x_nr,"taxi",true) == 0)
	{
		if(PlayerInfo[playerid][pMember] == 13) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You can't call a taxi because you're a taxi driver!");
		if(TaxiCall[playerid] == 1 || TaxiCall[playerid] == 2) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You already called for a taxi!");
		foreach(new i : Player)
		{
			if(TaxiFare[i] > 0) taxidrivers++;
		}
		if(taxidrivers == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} There are no taxi drivers on duty at the moment.");
		GetPlayerName(playerid, sendername, sizeof(sendername));
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pMember] == 13 && TaxiFare[i] > 0)
			{
				format(string, sizeof(string), "%s [%d] has called for a taxi. Distance: %.0fm.", sendername,playerid,GetDistanceBetweenPlayers(playerid, i));
				SendClientMessage(i, COLOR_CYAN, string);
			}
		}
	    SendClientMessage(playerid, COLOR_GREY, "You have called for a taxi. Please wait here!");
	    TaxiCall[playerid] = 1;
	    return 1;
	}
	else if(strcmp(x_nr,"medic",true) == 0)
	{
		if(PlayerInfo[playerid][pMember] == 14) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't call an ambulance because you're a medic!");
	    if(MedicCall[playerid] == 1 || MedicCall[playerid] == 2) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You already called for a medic!");
	    foreach(new i : Player)
	    {
	   		if(IsAnAmbulance(GetPlayerVehicleID(i)) && PlayerInfo[i][pMember] == 14) medics++;
	   	}
	   	if(medics == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} There are no ambulance drivers on duty at the moment.");
	    GetPlayerName(playerid, sendername, sizeof(sendername));
		foreach(new i : Player)
		{
			if(IsAnAmbulance(GetPlayerVehicleID(i)) && PlayerInfo[i][pMember] == 14)
			{
				format(string, sizeof(string), "%s [%d] has called for a medic. Distance: %.0fm.", sendername,playerid,GetDistanceBetweenPlayers(playerid, i));
				SendClientMessage(i, COLOR_CYAN, string);
			}
		}
	    SendClientMessage(playerid, COLOR_GREY, "You have called for an ambulance. Please wait here!");
	    MedicCall[playerid] = 1;
	    return 1;
	}
	return 1;
}
CMD:medic(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pMember] != 14) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} To call an ambulance, use /service medic.");
	new action[10], id, sendername[30], giveplayer[30], string[128], Float: X, Float: Y, Float: Z;
	if(sscanf(params, "s[10]u", action, id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /medic [action] [id]");
	if(strcmp(action,"accept",true) == 0)
	{
		if(!IsAnAmbulance(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't accept a call because you're not in an ambulance.");
		if(MedicCall[id] != 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player hasn't called for an ambulance, or someone else accepted the call.");
		if(IsPlayerConnected(id))
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
            GetPlayerName(id, giveplayer, sizeof(giveplayer));
            if(PlayerInfo[id][pLanguage] == 2) format(string, sizeof(string), "Medicul %s ti-a acceptat apelul. Asteapta ambulanta aici.", sendername);
            else format(string, sizeof(string), "Medic %s has accepted your call. Please wait here for the ambulance.", sendername);
			SendClientMessage(id, COLOR_YELLOW, string);
			SS(id, COLOR_WHITE, "Daca nu mai ai nevoie de un medic, foloseste /cancel medic.", "If you don't need a medic anymore, use /cancel medic.");
			format(string, sizeof(string), "Medic %s has accepted the call from %s. Distance: %.0fm.",sendername,giveplayer,GetDistanceBetweenPlayers(playerid, id));
			SendFamilyMessage(13, COLOR_CYAN, string);
			format(string, sizeof(string), "(Info){FFFFFF} Checkpoint set on %s [%d].", giveplayer, id);
			SendClientMessage(playerid, COLOR_ERROR, string);
			MedicAccepted[playerid] = id;
			MedicCall[id] = 2;
			GetPlayerPos(id, X, Y, Z);
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, X,Y,Z, 3.0);
			UsedFind[playerid] = 1;
			targetfind[playerid] = id;
			return 1;
		}
		else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else if(strcmp(action,"cancel",true) == 0)
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		SendClientMessage(playerid, COLOR_WHITE, "You have canceled the medic call!");
		format(string, sizeof(string), "Medic %s canceled your call.", sendername);
		SendClientMessage(MedicAccepted[playerid], COLOR_YELLOW, string);
		MedicCall[MedicAccepted[playerid]] = 0;
		MedicAccepted[playerid] = -1;
		DisablePlayerCheckpoint(playerid);
		UsedFind[playerid] = 0;
		targetfind[playerid] = -1;
		PlayerTextDrawHide(playerid, FindTXD[playerid][0]);
		PlayerTextDrawHide(playerid, FindTXD[playerid][1]);
	}
	return 1;
}
CMD:taxi(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pMember] != 13) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} To call a taxi, use /service taxi.");
	new action[10], id, sendername[30], giveplayer[30], string[128], Float: X, Float: Y, Float: Z;
	if(sscanf(params, "s[10]u", action, id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /taxi [action] [id]");
	if(strcmp(action,"accept",true) == 0)
	{
		if(TaxiFare[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't accept a call because you're not on duty.");
		if(TaxiCall[id] != 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player hasn't called for a taxi, or someone else accepted the call.");
		if(IsPlayerConnected(id))
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
            GetPlayerName(id, giveplayer, sizeof(giveplayer));
            if(PlayerInfo[id][pLanguage] == 2) format(string, sizeof(string), "Taximetristul %s ti-a acceptat apelul. Asteapta taxiul aici.", sendername);
            else format(string, sizeof(string), "Taxi driver %s has accepted your call. Please wait here for the taxi.", sendername);
			SendClientMessage(id, COLOR_YELLOW, string);
			SS(id, COLOR_WHITE, "Daca nu mai ai nevoie de un taxi, foloseste /cancel taxi.", "If you don't need a taxi anymore, use /cancel taxi.");
			format(string, sizeof(string), "Taxi driver %s has accepted the call from %s. Distance: %.0fm.",sendername,giveplayer,GetDistanceBetweenPlayers(playerid, id));
			SendFamilyMessage(13, COLOR_CYAN, string);
			format(string, sizeof(string), "(Info){FFFFFF} Checkpoint set on %s [%d].", giveplayer, id);
			SendClientMessage(playerid, COLOR_ERROR, string);
			TaxiAccepted[playerid] = id;
			TaxiCall[id] = 2;
			GetPlayerPos(id, X, Y, Z);
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, X,Y,Z, 3.0);
			UsedFind[playerid] = 1;
			targetfind[playerid] = id;
			return 1;
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else if(strcmp(action,"cancel",true) == 0)
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		SendClientMessage(playerid, COLOR_WHITE, "You have canceled the taxi call!");
		format(string, sizeof(string), "Taxi driver %s canceled your call.", sendername);
		SendClientMessage(TaxiAccepted[playerid], COLOR_YELLOW, string);
		TaxiCall[TaxiAccepted[playerid]] = 0;
		TaxiAccepted[playerid] = -1;
		DisablePlayerCheckpoint(playerid);
		UsedFind[playerid] = 0;
		targetfind[playerid] = -1;
		PlayerTextDrawHide(playerid, FindTXD[playerid][0]);
		PlayerTextDrawHide(playerid, FindTXD[playerid][1]);
	}
	return 1;
}
CMD:fare(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pMember] != 13) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a taxi driver.");
	new fare,string[128],name[30];
	if(sscanf(params, "d", fare)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /fare [amount]");
	if(fare < 15000 || fare > 20000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Fare must be between 15000 and 20000.");
	if(fare == 0)
	{
		TaxiFare[playerid] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "You are now off duty!");
		PlayerTextDrawHide(playerid, RentCarText[playerid]);
		TaxiMoneyEarned[playerid] = 0;
		foreach(new i : Player)
		{
			if(TaxiDriver[i] == playerid)
			{
				TaxiDriver[i] = -1;
				TaxiMoneySpent[i] = 0;
				TaxiTimer[i] = 0;
				PlayerTextDrawHide(i, RentCarText[i]);
			}
		}
	}
	else
	{
		if(!IsAnTaxi(GetPlayerVehicleID(playerid))) return 1;
		GetPlayerName(playerid, name, sizeof(name));
		TaxiFare[playerid] = fare;
		format(string, sizeof(string), "* Taxi driver %s is now on duty ($%d). [/service taxi]", name, fare);
		SendClientMessageToAll(COLOR_ADV, string);
		SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} To get off duty, use /fare 0!");
		PlayerTextDrawSetString(playerid, RentCarText[playerid], "~r~waiting for customers..");
		PlayerTextDrawShow(playerid, RentCarText[playerid]);
		foreach(new i : Player)
		{
			if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(i) && playerid != i)
			{
				TaxiDriver[i] = playerid;
				TaxiMoneySpent[i] += TaxiFare[playerid];
				TaxiMoneyEarned[playerid] += TaxiFare[playerid];
				GivePlayerCash(i, -TaxiFare[playerid]);
				GivePlayerCash(playerid, TaxiFare[playerid]);
				new timer = 30 + random(7);
				TaxiTimer[i] = timer;
				format(string, sizeof(string), "money earned: ~g~$%d", TaxiMoneyEarned[playerid]);
				PlayerTextDrawSetString(playerid, RentCarText[playerid], string);
				PlayerTextDrawShow(playerid, RentCarText[playerid]);
				format(string, sizeof(string), "money spent so far: ~g~$%d", TaxiMoneySpent[i]);
				PlayerTextDrawSetString(i, RentCarText[i], string);
				PlayerTextDrawShow(i, RentCarText[i]);
			}
		}
	}
	return 1;
}
CMD:free(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new id,moneyfree,giveplayer[30],sendername[30],string[200],string2[200];
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a cop.");
	if(sscanf(params, "ui", id,moneyfree)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /free [name/playerid] [amount]");
	if(PlayerInfo[id][pJailed] < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not in jail.");
	if(PlayerInfo[id][pJailed] == 2) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is in admin jail.");
	if(playerid == id) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't free yourself.");
	if(FreeExpire[playerid] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Ai oferit deja un free, te rugam sa astepti 30 secunde pentru a oferii un alt free.", "(Error){FFFFFF} You offered already a free, please wait 30 seconds before offer another free.");
	if(PlayerInfo[playerid][pRob] < 3) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Ai nevoie de minim 3 puncte free pentru a putea oferi free.", "(Error){FFFFFF} You need 3 free points to offer a free.");
	if(moneyfree < 1 || moneyfree > 100000) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Invalid amount of money($1-$100,000).");
	if(ProxDetectorS(10.0, playerid, id))
	{
        if(IsPlayerConnected(id))
        {
            if(id != INVALID_PLAYER_ID)
            {
 				FreeOffer[id] = playerid;
 				FreePlayer[playerid] = id;
				FreePrice[id] = moneyfree;
				FreeExpire[playerid] = 30;
 				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "I-ai trimis lui %s o oferta de a fi eliberat pentru $%s.",giveplayer,FormatNumber(moneyfree));
				format(string2, sizeof(string2), "You have send to %s an offer to be released from jail for $%s.",giveplayer,FormatNumber(moneyfree));
				SS(playerid, COLOR_DARKPINK, string, string2);
				format(string, sizeof(string), "> %s doreste sa iti ofere posibilitatea de a iesi din jail in schimbul sumei de $%s. Scrie /accept free %d pentru a accepta.",sendername,FormatNumber(moneyfree),playerid);
				format(string2, sizeof(string2), "> %s has offered you to be released from jail for $%s. Use /accept free %d to accept the offer.",sendername,FormatNumber(moneyfree),playerid);
				SS(id, COLOR_DBLUE, string, string2);
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
	return 1;
}
CMD:placegotoevent(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new Float:x, Float:y, Float:z, sendername[25], string[256];
 	GetPlayerName(playerid, sendername, sizeof(sendername));
	GetPlayerPos(playerid, x, y, z);
	if(!eventenabled)
    {
		pickup_event = CreatePickup(1314, 23, x, y, z, GetPlayerVirtualWorld(playerid));
		evex = x;
		evey = y;
		evez = z;
		eventenabled = 1;
		interiorevent = GetPlayerInterior(playerid);
	   	virtuallevent = GetPlayerVirtualWorld(playerid);
		dynamicevent3DText = CreateStreamed3DTextLabel("Event Teleport",COLOR_LIGHTRED, x, y, z+0.25,8.0,GetPlayerVirtualWorld(playerid));
		format(string, sizeof(string), "(( Info: Admin %s activated event teleport, type /gotoevent. ))", sendername);
		SendClientMessageToAll(COLOR_LIGHTRED,string);
		return 1;
	}
	else
	{
		DestroyPickup(pickup_event);
		evex = 0.0;
		evey = 0.0;
		evez = 0.0;
		eventenabled = 0;
		interiorevent = 0;
		virtuallevent = 0;
		DestroyDynamic3DTextLabel(dynamicevent3DText);
		format(string, sizeof(string), "(( Info: Admin %s deactivated event teleport. ))", sendername);
		SendClientMessageToAll(COLOR_LIGHTRED,string);
	}
	return 1;
}
CMD:gotoevent(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pPaintBallG] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use this command at Paintball.");
	if(!eventenabled) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} No event teleport activated.");
    SetPlayerInterior(playerid, interiorevent);
    SetPlayerVirtualWorld(playerid, virtuallevent);
	SetPlayerPosEx(playerid, evex, evey, evez);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have been teleported at event.");
	return 1;
}
CMD:fireworks(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Use /placefireworks");
	return 1;
}
CMD:placefireworks(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pFWorks] > 0)
	{
		if(FireworkTimer[playerid] != 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Poti folosi artificiile o data la 30 de secunde.", "(Error){FFFFFF} You can only place fireworks every 30 seconds.");
		new Float:x, Float:y, Float:z, string[128], name[30];
		GetPlayerName(playerid, name, sizeof(name));
		GetPlayerPos(playerid, x, y, z);
		CreateFirework(x, y, z);
		SendClientMessage(playerid, COLOR_DARKPINK, "Firework placed.");
		format(string, sizeof(string), "* %s takes some fireworks out of his pocket and places them on the ground.", name);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		PlayerInfo[playerid][pFWorks]--;
		Update(playerid, pFWorksx);
		FireworkTimer[playerid] = 30;
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have fireworks.");
	return 1;
}

CMD:killcp(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(InMinerJob[playerid] != 0) MinerCancel(playerid);
    if(InStrawberryJob[playerid] != 0) StrawberryCancel(playerid);
    if(BeeCar[playerid] != 0) BeeCancel(playerid);
    if(CP[playerid] != 0)
 	{
  		DisablePlayerCheckpoint(playerid);
  		SendClientMessage(playerid,COLOR_WHITE,"You have disabled the checkpoint.");
  		CP[playerid] = 0;
 	}
 	else if(PlayerInfo[playerid][pJobVehicle] != 0 && (PizzaCP[playerid] != 0 || AirCP[playerid] != 0 || Trucker[playerid] >= 1 || Trucker2[playerid] >= 1 || busc[playerid] == 1)) CancelJob(playerid);
    else if(UsedFind[playerid] == 1)
	{
		UsedFind[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
		foreach(new i : Player)
		{
			if(IsACop(playerid))
			{
   				if(caser[playerid] == i)
			    {
					cased[i] --;
					caser[playerid] = 1001;
				}
			}
		}
		MedicCall[targetfind[playerid]] = 0;
		TaxiCall[targetfind[playerid]] = 0;
		PlayerTextDrawHide(playerid, FindTXD[playerid][0]);
		PlayerTextDrawHide(playerid, FindTXD[playerid][1]);
	}
	else if(BusinessRob[playerid] > 0)
	{
		SendClientMessage(playerid,COLOR_WHITE,"You can't use this while robbing the bank.");
		return 1;
	}
 	return 1;
}
CMD:cancel(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new x_job[256],string[128],name[30];
	if(sscanf(params, "s[256]",x_job))
	{
		SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /cancel [service]");
		return 1;
	}
	if(strcmp(x_job,"requestevent",true) == 0)
	{
		if(requestingevent[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You haven't requested an event.");
		requestingevent[playerid] = 0;
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your event request has been cancelled.");
	}
	else if(strcmp(x_job,"free",true) == 0)
	{
		if(FreeOffer[playerid] == -1) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} No one offered you a free.");
		FreeOffer[playerid] = -1;
		FreePrice[playerid] = 0;
	}
	else if(strcmp(x_job,"drugs",true) == 0)
	{
		if(DrugOffer[playerid] == 999) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} No one offered you drugs.");
		DrugOffer[playerid] = 999;
		DrugPrice[playerid] = 0;
		DrugGram[playerid] = 0;
	}
	else if(strcmp(x_job,"repair",true) == 0)
	{
		if(RepairOffer[playerid] == 999) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} No one offered you repair.");
		RepairOffer[playerid] = 999;
		RepairPrice[playerid] = 0;
		RepairCar[playerid] = 0;
	}
	else if(strcmp(x_job,"materials",true) == 0)
	{
		if(MatsOffer[playerid] == -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} No one offered you materials.");
		MatsOffer[playerid] = -1;
		MatsPrice[playerid] = 0;
		MatsAmmo[playerid] = 0;
	}
	else if(strcmp(x_job,"gun",true) == 0)
	{
		if(SellgunOffer[playerid] == -1) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} No one offered you gun.");
		SellgunOffer[playerid] = -1;
		SellgunPrice[playerid] = 0;
		SellgunMats[playerid] = 0;
		SellgunAmmo[playerid] = 0;
		SellgunID[playerid] = 0;
	}
	else if(strcmp(x_job,"find",true) == 0)
	{
		if(UsedFind[playerid] == 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You don't have a find checkpoint.");
		if(UsedFind[playerid] == 1)
		{
			UsedFind[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			foreach(new i : Player)
			{
				if(IsACop(playerid))
				{
				    if(caser[playerid] == i)
				    {
						cased[i] --;
						caser[playerid] = 1001;
					}
				}
			}
			PlayerTextDrawHide(playerid, FindTXD[playerid][0]);
			PlayerTextDrawHide(playerid, FindTXD[playerid][1]);
		}
	}
	else if(strcmp(x_job,"live",true) == 0)
	{
		if(LiveOffer[playerid] == 999) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} No one offered you a live.");
		LiveOffer[playerid] = 999;
	}
	else if(strcmp(x_job,"refill",true) == 0)
	{
		if(RefillOffer[playerid] == 999) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} No one offered you refill.");
		RefillOffer[playerid] = 999;
		RefillPrice[playerid] = 0;
	}
	else if(strcmp(x_job,"ticket",true) == 0)
	{
		if(TicketOffer[playerid] == 999) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} No one offered you ticket.");
		TicketOffer[playerid] = 999;
		TicketMoney[playerid] = 0;
	}
	else if(strcmp(x_job,"medic",true) == 0)
	{
		if(MedicCall[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have not called for an ambulance.");
		foreach(new i : Player)
		{
			if(MedicAccepted[i] == playerid)
			{
				MedicAccepted[i] = -1;
				targetfind[i] = -1;
				UsedFind[i] = 0;
				DisablePlayerCheckpoint(i);
				PlayerTextDrawHide(i, FindTXD[i][0]);
				PlayerTextDrawHide(i, FindTXD[i][1]);
			}
		}
		MedicCall[playerid] = 0;
		SendClientMessage(playerid, COLOR_DARKPINK, "Medic call cancelled.");
		GetPlayerName(playerid, name, sizeof(name));
		format(string, sizeof(string), "%s [%d] has canceled the medic call.", name, playerid);
		SendFamilyMessage(14, COLOR_CYAN, string);
	}
	else if(strcmp(x_job,"House",true) == 0)
	{
		if(HouseOffer[playerid] == 999) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} No one offered you a house.");
		HouseID[playerid] = 0;
		HouseOffer[playerid] = 999;
		HousePrice[playerid] = 0;
	}
	else if(strcmp(x_job,"taxi",true) == 0)
	{
		if(TaxiCall[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have not called for a taxi.");
		foreach(new i : Player)
		{
			if(TaxiAccepted[i] == playerid)
			{
				TaxiAccepted[i] = -1;
				targetfind[i] = -1;
				UsedFind[i] = 0;
				DisablePlayerCheckpoint(i);
				PlayerTextDrawHide(i, FindTXD[i][0]);
				PlayerTextDrawHide(i, FindTXD[i][1]);
			}
		}
		TaxiCall[playerid] = 0;
		SendClientMessage(playerid, COLOR_DARKPINK, "Taxi call cancelled.");
		GetPlayerName(playerid, name, sizeof(name));
		format(string, sizeof(string), "%s [%d] has canceled the taxi call.", name, playerid);
		SendFamilyMessage(13, COLOR_CYAN, string);
	}
	return 1;
}
CMD:accept(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new x_job[256],
		id,
		sendername[25],
		giveplayer[25],
		string[300];
	if(sscanf(params, "s[256]u",x_job,id))
	{
		SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /accept [item]");
		SendClientMessage(playerid, COLOR_WHITE, "Items: Invite, Weapon, Car, Ticket, Dice, Trade");
		return 1;
	}
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	if(strcmp(x_job,"dice",true) == 0)
	{
		if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
		if(Diceid[playerid] == 999) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Niciun player nu te-a invitat sa joci barbut.", "(Error){FFFFFF} Nobody invited you to play dice.");
		if(Diceid[playerid] != id) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Acel player nu te-a invitat sa joci barbut cu el.", "(Error){FFFFFF} That player didn't invited you to play dice with him.");
		if(InBlackJackGame[playerid] == 1 || RouletteInGame[playerid] == 1 || joacapacanele[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are already playing a casino game!");
		if(GetPlayerCash(playerid) < Dicem[playerid]) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Tu sau adversarul tau nu aveti suficienti bani pentru a juca barbut.", "(Error){FFFFFF} You or your adversary doesn't have enough money to play dice.");
	    if(GetPlayerCash(id) < Dicem[playerid]) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Tu sau adversarul tau nu aveti suficienti bani pentru a juca barbut.", "(Error){FFFFFF} You or your adversary doesn't have enough money to play dice.");
		if(ProxDetectorS(10.0, playerid, Diceid[playerid]))
		{
		   	new dice1[MAX_PLAYERS],dice2[MAX_PLAYERS],total[MAX_PLAYERS];
		    dice1[playerid] = random(6) + 1;
			dice2[playerid] = random(6) + 1;
			total[playerid] = dice1[playerid] + dice2[playerid];
		    dice1[Diceid[playerid]] = random(6) + 1;
			dice2[Diceid[playerid]] = random(6) + 1;
			total[Diceid[playerid]] = dice1[Diceid[playerid]] + dice2[Diceid[playerid]];
		    GetPlayerName(playerid,sendername,sizeof(sendername));
		    GetPlayerName(Diceid[playerid],giveplayer,sizeof(giveplayer));
		    if(total[playerid] > total[Diceid[playerid]])
		    {
				format(string,sizeof(string),"%s rolls %d %d. %s rolls %d %d. %s won $%s.",sendername,dice1[playerid],dice2[playerid],giveplayer,dice1[Diceid[playerid]],dice2[Diceid[playerid]],sendername,FormatNumber(Dicem[playerid]));
				ProxDetector(10.0,playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				GivePlayerCash(playerid,Dicem[playerid]);
				GivePlayerCash(Diceid[playerid],-Dicem[playerid]);
				if(PlayerInfo[playerid][pLanguage] == 2)
				{
					format(string,sizeof(string),"(+) Ai castigat $%s!",FormatNumber(Dicem[playerid]));
					SendClientMessage(playerid, COLOR_GREEN, string);
					format(string,sizeof(string),"(-) Ai pierdut $%s!",FormatNumber(Dicem[playerid]));
					SendClientMessage(Diceid[playerid], COLOR_GREEN, string);
				}
				else
				{
					format(string,sizeof(string),"(+) You won $%s!",FormatNumber(Dicem[playerid]));
					SendClientMessage(playerid, COLOR_GREEN, string);
					format(string,sizeof(string),"(-) You lost $%s!",FormatNumber(Dicem[playerid]));
					SendClientMessage(Diceid[playerid], COLOR_GREEN, string);
				}
			}
			if(total[Diceid[playerid]] > total[playerid])
			{
				format(string,sizeof(string),"%s rolls %d %d. %s rolls %d %d. %s won $%s.",sendername,dice1[playerid],dice2[playerid],giveplayer,dice1[Diceid[playerid]],dice2[Diceid[playerid]],giveplayer,FormatNumber(Dicem[playerid]));
				ProxDetector(10.0,playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				GivePlayerCash(playerid,-Dicem[playerid]);
				GivePlayerCash(Diceid[playerid],Dicem[playerid]);
				if(PlayerInfo[Diceid[playerid]][pLanguage] == 2)
				{
					format(string,sizeof(string),"(+) Ai castigat $%s!",FormatNumber(Dicem[playerid]));
					SendClientMessage(Diceid[playerid], COLOR_GREEN, string);
					format(string,sizeof(string),"(-) Ai pierdut $%s!",FormatNumber(Dicem[playerid]));
					SendClientMessage(playerid, COLOR_GREEN, string);
				}
				else
				{
					format(string,sizeof(string),"(+) You won $%s!",FormatNumber(Dicem[playerid]));
					SendClientMessage(Diceid[playerid], COLOR_GREEN, string);
					format(string,sizeof(string),"(-) You lost $%s!",FormatNumber(Dicem[playerid]));
					SendClientMessage(playerid, COLOR_GREEN, string);
				}
			}
			if(total[Diceid[playerid]] == total[playerid])
			{
				format(string,sizeof(string),"%s rolls %d %d. %s rolls %d %d. No one won.",sendername,dice1[playerid],dice2[playerid],giveplayer,dice1[Diceid[playerid]],dice2[Diceid[playerid]]);
				ProxDetector(10.0,playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			Diceid[playerid] = 999;
			Dicem[playerid] = 0;
		}
		else return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu esti langa acel player.", "(Error){FFFFFF} You are not near that player.");
		return 1;
	}
	else if(strcmp(x_job,"invite",true) == 0)
	{
	    if(FactionOffer[playerid] != 999)
	    {
	        new str[256];
	        GetPlayerName(FactionOffer[playerid], sendername, sizeof(sendername));
	        GetPlayerName(playerid, giveplayer, sizeof(giveplayer));
			new para1 = playerid, ftext[30];
			if(PlayerInfo[FactionOffer[playerid]][pMember] == 1) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "LSPD"; }
			else if(PlayerInfo[FactionOffer[playerid]][pMember] == 2) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "FBI"; }
			else if(PlayerInfo[FactionOffer[playerid]][pMember] == 3) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "National Guard"; }
			else if(PlayerInfo[FactionOffer[playerid]][pMember] == 4) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Los Aztecas"; }
			else if(PlayerInfo[FactionOffer[playerid]][pMember] == 5) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Grove Street"; }
			else if(PlayerInfo[FactionOffer[playerid]][pMember] == 6) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Los Vagos"; }
			else if(PlayerInfo[FactionOffer[playerid]][pMember] == 8) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "LVPD"; }
			else if(PlayerInfo[FactionOffer[playerid]][pMember] == 9) { PlayerInfo[para1][pTeam] = 4; gTeam[para1] = 4; ftext = "News Reporter"; }
			else if(PlayerInfo[FactionOffer[playerid]][pMember] == 10) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Ballas"; }
			else if(PlayerInfo[FactionOffer[playerid]][pMember] == 11) { PlayerInfo[para1][pTeam] = 11; gTeam[para1] = 11; ftext = "Hitman Agency"; }
			//else if(PlayerInfo[FactionOffer[playerid]][pMember] == 12) { PlayerInfo[para1][pTeam] = 4; gTeam[para1] = 4; ftext = "School Instructors LV"; }
			else if(PlayerInfo[FactionOffer[playerid]][pMember] == 13) { PlayerInfo[para1][pTeam] = 4; gTeam[para1] = 4; ftext = "Taxi"; }
			else if(PlayerInfo[FactionOffer[playerid]][pMember] == 14) { PlayerInfo[para1][pTeam] = 4; gTeam[para1] = 4; ftext = "Las Venturas Paramedic"; }
			else return 1;
            PlayerInfo[para1][pMember] = PlayerInfo[FactionOffer[playerid]][pMember];
			PlayerInfo[para1][pRank] = 1;
			PlayerInfo[para1][pFactionJoin] = gettime();
			PlayerInfo[para1][pFactionTime] = gettime() + (7*86400);
			SetPlayerVirtualWorld(para1,0);
			SetSpawnInfo(playerid, PlayerInfo[para1][pTeam], PlayerInfo[para1][pModel],0.0,0.0,0.0,0,0,0,0,0,0,0);
	    	gTeam[para1] = PlayerInfo[para1][pTeam];
			SetPlayerToTeamColor(para1);
			SetPlayerSkinEx(para1);
			SpawnPlayer(para1);
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Team`='%d',`Member`='%d',`Rank`='1',`Model`='%d',`FactionJoin`='%d' WHERE `name`='%s'",PlayerInfo[para1][pTeam],PlayerInfo[para1][pMember],PlayerInfo[para1][pModel],PlayerInfo[para1][pFactionJoin],PlayerInfo[para1][pNormalName]);
			mysql_tquery(SQL,str,"","");
			new string2[256],query[256],string3[256];
			format(string,sizeof(string),"You are now a member of the %s.",ftext);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string,sizeof(string),"%s has joined the group (invited by %s).",giveplayer,sendername);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, string);
			format(string2, sizeof(string2), "%s has joined the group %s (invited by %s).", PlayerInfo[playerid][pNormalName], ftext, PlayerInfo[FactionOffer[playerid]][pNormalName]);
			mysql_real_escape_string(string2, string3);
			mysql_format(SQL, query, sizeof(query), "INSERT INTO faction_logs (`text`, `player`,`leader`) VALUES ('%s','%d','%d')", string3, PlayerInfo[para1][pSQLID],PlayerInfo[FactionOffer[playerid]][pSQLID]);
			mysql_tquery(SQL,query,"","");
			format(string2,sizeof(string2),"%s[user:%d] has joined the group %s (invited by %s[user:%d]).",giveplayer,PlayerInfo[para1][pSQLID],ftext,sendername,PlayerInfo[FactionOffer[playerid]][pSQLID]);
			mysql_real_escape_string(string2, string3);
			Factionlog(PlayerInfo[para1][pMember],PlayerInfo[para1][pSQLID],PlayerInfo[FactionOffer[playerid]][pSQLID],string3);
			PlayerInfo[para1][Raport1] = 0;
			PlayerInfo[para1][Raport2] = 0;
			PlayerInfo[para1][Raport3] = 0;
			PlayerInfo[para1][Raport4] = 0;
			PlayerInfo[para1][Raport5] = 0;
			PlayerInfo[para1][Raport6] = 0;
			PlayerInfo[para1][pPaydayON] = 0;
			PlayerInfo[para1][pAccepted] = 0;
			Update(para1, pAcceptedx);
			new varxx[256];
			mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport1 = 0, Raport2 = 0, Raport3 = 0, Raport4 = 0, Raport5 = 0, Raport6 = 0, PaydayON = 0, FactionTime = %d WHERE name = '%s'",PlayerInfo[playerid][pFactionTime],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,varxx,"","");
			mysql_format(SQL, varxx, sizeof(varxx), "UPDATE aplications SET `status` = '2' WHERE `name` = '%s' AND `status` = '1'",PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,varxx,"","");
		}
	}
 	else if(strcmp(x_job,"free",true) == 0)
	{
        if(FreeOffer[playerid] > -1)
		{
            if(FreeOffer[playerid] != id) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} This player has not offered you a free.");
		    if(GetPlayerCash(playerid) < FreePrice[playerid]) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
		    GetPlayerName(playerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(FreeOffer[playerid], sendername, sizeof(sendername));
			format(string, sizeof(string), "(+) %s a acceptat oferta de a fi eliberat iar tu ai primit $%s.", giveplayer, FormatNumber(FreePrice[playerid]));
			SendClientMessage(FreeOffer[playerid], COLOR_GREEN, string);
			PlayerInfo[FreeOffer[playerid]][pRob] -= 3;
			Update(FreeOffer[playerid],pRobx);
			format(string, sizeof(string), "Ai platit $%s pentru a fi eliberat din inchisoare.", FormatNumber(FreePrice[playerid]));
			SendClientMessage(playerid, COLOR_DARKPINK, string);
			PlayerInfo[playerid][pJailTime] = 1;
			GivePlayerCash(playerid, -FreePrice[playerid]);
			GivePlayerCash(FreeOffer[playerid],FreePrice[playerid]);
			PlayerInfo[playerid][pJailed] = 1;
			new str[356];
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `JailTime`='0',`Money`='%d',`Jailed`='0' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d' WHERE `name`='%s'",GetPlayerCash(FreeOffer[playerid]),PlayerInfo[FreeOffer[playerid]][pNormalName]);
			mysql_tquery(SQL,str,"","");
			//KillTimer(timerfree1[FreeOffer[playerid]]);
            FreeOffer[playerid] = -1;
            FreePlayer[playerid] = -1;
			FreePrice[playerid] = 0;
			format(string, sizeof(string), "Dispatch: %s was released by %s from jail.", giveplayer, sendername);
			SendTeamMessage(8, COLOR_DBLUE, string);
			SendTeamMessage(3, COLOR_DBLUE, string);
			SendTeamMessage(2, COLOR_DBLUE, string);
			SendTeamMessage(1, COLOR_DBLUE, string);
			return 1;
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Nobody offered you free.");
	}
	else if(strcmp(x_job,"cinvite",true) == 0)
	{
        if(GetPVarInt(playerid, "cinvID") >= 1)
		{
            new messageString[128],str33[184],iddd,name2[30],strings[128];
            PlayerInfo[playerid][pClan] = GetPVarInt(playerid, "cinvID");
			iddd = GetPVarInt(playerid, "cinvIDD");
			if(GetDistanceBetweenPlayers(playerid, iddd) > 10) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be near the player.");
			GetPlayerName(iddd,name2,sizeof(name2));
			PlayerInfo[playerid][pCRank] = 1;
			DeletePVar(playerid, "cinvID");
			DeletePVar(playerid, "cinvIDD");
			GetPlayerName(playerid,sendername,sizeof(sendername));
			format(messageString, sizeof(messageString), "{%s}[CLAN] %s joined the clan (invited by %s).",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],sendername,name2);
			SendToClan(PlayerInfo[playerid][pClan], COLOR_WHITE, messageString);
			mysql_format(SQL,str33,sizeof(str33),"UPDATE users SET `Clan`='%d',`CRank`='1',`ClanJoin`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pClan],gettime(),PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str33,"","");
			format(messageString, sizeof(messageString), "%s joined the clan (invited by %s).",sendername,name2);
			mysql_real_escape_string(messageString, strings);
			mysql_format(SQL,str33,sizeof(str33),"INSERT INTO clan_logs (`action`,`clanid`) VALUES ('%s','%d')",strings,PlayerInfo[playerid][pClan]);
			mysql_tquery(SQL,str33,"","");

        }
        else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have an active clan invite request.");
    }
	else if(strcmp(x_job,"materials",true) == 0)
	{
		if(MatsOffer[playerid] > -1)
		{
		    if(MatsOffer[playerid] != id) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} This player has not offered you materials.");
		    if(GetPlayerCash(playerid) < MatsPrice[playerid]) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
			PlayerInfo[playerid][pMats] += MatsAmmo[playerid];
			PlayerInfo[MatsOffer[playerid]][pMats] -= MatsAmmo[playerid];
		    GivePlayerCash(playerid, - MatsPrice[playerid]);
		    GivePlayerCash(MatsOffer[playerid], MatsPrice[playerid]);
		    GetPlayerName(MatsOffer[playerid],giveplayer,sizeof(giveplayer));
		    GetPlayerName(playerid,sendername,sizeof(sendername));
		    format(string,sizeof(string),"{B8FFDB}You buy %d materials for $%s from %s.",MatsAmmo[playerid],FormatNumber(MatsPrice[playerid]),giveplayer);
			SendClientMessage(playerid,COLOR_WHITE,string);
		    format(string,sizeof(string),"{B8FFDB}%s bought your materials for $%s.",sendername,FormatNumber(MatsPrice[playerid]));
			SendClientMessage(MatsOffer[playerid],COLOR_WHITE,string);
	        Update(playerid,pMatsx);
	        Update(MatsOffer[playerid],pMatsx);
			MatsOffer[playerid] = -1;
			MatsAmmo[playerid] = 0;
			MatsPrice[playerid] = 0;
			return 1;
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Nobody offered you materials.");
	}
	else if(strcmp(x_job,"gun",true) == 0)
	{
		if(SellgunOffer[playerid] > -1)
		{
		    if(SellgunOffer[playerid] != id) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} This player has not offered you gun.");
		    if(GetPlayerCash(playerid) < SellgunPrice[playerid]) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
		    new weaponid,ammo,price,mats,gunname[60],idoffer;
		    weaponid = SellgunID[playerid];
		    ammo = SellgunAmmo[playerid];
			price = SellgunPrice[playerid];
			mats = SellgunMats[playerid];
			idoffer = SellgunOffer[playerid];
		    GivePlayerWeaponEx(playerid,weaponid,ammo);
			PlayerInfo[idoffer][pMats] -= mats;
			GivePlayerCash(playerid, -price);
		    GivePlayerCash(idoffer, price);
			Update(idoffer,pMatsx);
			GetPlayerName(idoffer,giveplayer,sizeof(giveplayer));
		    GetPlayerName(playerid,sendername,sizeof(sendername));
			GetWeaponNameEx(weaponid,gunname,sizeof(gunname));
			format(string, sizeof(string), "You have given %s, a %s with %d ammo, for %d Materials.", sendername,gunname, ammo,mats);
			SendClientMessage(idoffer, COLOR_GRAD1, string);
			format(string, sizeof(string), "You have recieved a %s with %d ammo from %s.", gunname, ammo, giveplayer);
			SendClientMessage(playerid, COLOR_GRAD1, string);
			format(string, sizeof(string), "* %s created a Gun from Materials, and hands it to %s.", giveplayer ,sendername);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SellgunOffer[playerid] = -1;
			SellgunPrice[playerid] = 0;
			SellgunMats[playerid] = 0;
			SellgunAmmo[playerid] = 0;
			SellgunID[playerid] = 0;
			if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
			{
		        new gun2,tmp;
		        GetPlayerWeaponData(playerid,5,gun2,tmp);
		        #pragma unused tmp
		        if(gun2)SetPlayerArmedWeapon(playerid,gun2);
		        else SetPlayerArmedWeapon(playerid,0);
			}
			return 1;
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Nobody offered you materials.");
	}
	else if(strcmp(x_job,"biz",true) == 0)
	{
		if(bizoffer[playerid] < 999)
		{
			if(bizoffer[playerid] != id) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} This player has not offered you a bussines.");
			if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
			if(GetPlayerCash(playerid) >= bizprice[playerid])
			{
				if(IsPlayerConnected(bizoffer[playerid]))
				{
				    if(ProxDetectorS(5.0, playerid, bizoffer[playerid]))
				    {
				    	new time,count;
				    	format(string, sizeof(string), "SELECT * FROM `timeplayed` WHERE `pid`='%d'", PlayerInfo[playerid][pSQLID]);
						new Cache: salut = mysql_query(SQL, string);
						for(new i, j = cache_get_row_count (); i != j; ++i)
						{
							if(count < 30)
							{
								time += cache_get_field_content_int(i, "time");
								count++;
							}
						}
						cache_delete(salut);
						if(time < 36000) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Trebuie sa ai 10 ore jucate in ultimele 30 de zile (fara AFK/sleep) pentru a putea cumpara o proprietate.", "(Error){FFFFFF} You need 10 played hours in last 30 days (without AFK/sleep) to buy a property.");
				        GetPlayerName(bizoffer[playerid], giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "You accepted to buy business %d for $%s from %s.",bizid[playerid],FormatNumber(bizprice[playerid]),giveplayer);
						SendClientMessage(playerid, COLOR_GREEN, string);
						format(string, sizeof(string), "%s accepted to buy your business for $%s.",sendername,FormatNumber(bizprice[playerid]));
						SendClientMessage(bizoffer[playerid], COLOR_GREEN, string);
						format(string, sizeof(string), "%s [user:%d] a cumparat bizz-ul(/sellbizto) [bizz:%d] de la %s [user:%d] pentru $%s.",sendername,PlayerInfo[playerid][pSQLID],bizid[playerid],giveplayer,PlayerInfo[bizoffer[playerid]][pSQLID],FormatNumber(bizprice[playerid]));
                        ABroadCast(COLOR_YELLOW,string,1);
                        new var100[256],string2[256];
    					mysql_real_escape_string(string, string2);
						mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[playerid][pSQLID],PlayerInfo[HouseOffer[playerid]][pSQLID],string2);
						mysql_tquery(SQL,var100,"","");
						GivePlayerCash(playerid, -bizprice[playerid]);
					    GivePlayerCash(bizoffer[playerid], bizprice[playerid]);
					    new str[356];
						PlayerInfo[playerid][pPbiskey] = bizid[playerid];
						strmid(BizzInfo[bizid[playerid]][bOwner], PlayerInfo[playerid][pNormalName], 0, 25, 999);
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Bizz`='%d',`Money`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPbiskey],GetPlayerCash(playerid),PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,str,"","");
						mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Owner`='%s' WHERE `ID`='%d'",BizzInfo[bizid[playerid]][bOwner],bizid[playerid]);
						mysql_tquery(SQL,str,"","");
						OnPropTextdrawUpdate(2,bizid[playerid]);
						PlayerInfo[bizoffer[playerid]][pPbiskey] = 255;
						mysql_format(SQL,string,sizeof(string),"UPDATE users SET `Bizz`='255',`Money`='%d' WHERE `name`='%s'",GetPlayerCash(bizoffer[playerid]),PlayerInfo[bizoffer[playerid]][pNormalName]);
						mysql_tquery(SQL,string,"","");
						bizid[playerid] = 0;
						bizprice[playerid] = 0;
						bizoffer[playerid] = 999;
						return 1;
					}
					else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be near the seller.");
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Nobody offered you a bussines.");
	}
	else if(strcmp(x_job,"house",true) == 0)
	{
		if(HouseOffer[playerid] < 999)
		{
			if(HouseOffer[playerid] != id) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} This player has not offered you a house.");
			if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
			if(GetPlayerCash(playerid) >= HousePrice[playerid])
			{
				if(IsPlayerConnected(HouseOffer[playerid]))
				{
				    if(ProxDetectorS(3.0, playerid, HouseOffer[playerid]))
				    {
				    	if(PlayerInfo[id][pPhousekey] != HouseID[playerid]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player don't own the house offered.");
				    	new time,count;
				    	format(string, sizeof(string), "SELECT * FROM `timeplayed` WHERE `pid`='%d'", PlayerInfo[playerid][pSQLID]);
						new Cache: salut = mysql_query(SQL, string);
						for(new i, j = cache_get_row_count (); i != j; ++i)
						{
							if(count < 30)
							{
								time += cache_get_field_content_int(i, "time");
								count++;
							}
						}
						cache_delete(salut);
						if(time < 36000) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Trebuie sa ai 10 ore jucate in ultimele 30 de zile (fara AFK/sleep) pentru a putea cumpara o proprietate.", "(Error){FFFFFF} You need 10 played hours in last 30 days (without AFK/sleep) to buy a property.");
				    	GetPlayerName(HouseOffer[playerid], giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "You accepted to buy house %d for $%s from %s.",HouseID[playerid],FormatNumber(HousePrice[playerid]),giveplayer);
						SendClientMessage(playerid, COLOR_GREEN, string);
						format(string, sizeof(string), "%s accepted to buy your house for $%s.",sendername,FormatNumber(HousePrice[playerid]));
						SendClientMessage(HouseOffer[playerid], COLOR_GREEN, string);
						format(string, sizeof(string), "%s [user:%d] a cumparat casa(/sellhouseto) [house:%d] de la %s [user:%d] pentru $%s.",sendername,PlayerInfo[playerid][pSQLID],HouseID[playerid],giveplayer,PlayerInfo[HouseOffer[playerid]][pSQLID],FormatNumber(HousePrice[playerid]));
                        ABroadCast(COLOR_YELLOW,string,1);
                        new var100[256],string2[256];
    					mysql_real_escape_string(string, string2);
						mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[playerid][pSQLID],PlayerInfo[HouseOffer[playerid]][pSQLID],string2);
						mysql_tquery(SQL,var100,"","");
						PlayerInfo[playerid][pPhousekey] = HouseID[playerid];
						PlayerInfo[playerid][pRented] = -1;
						Update(playerid, pRentedx);
						PlayerInfo[HouseOffer[playerid]][pPhousekey] = 999;
	    				GivePlayerCash(playerid, -HousePrice[playerid]);
					    GivePlayerCash(HouseOffer[playerid], HousePrice[playerid]);
						strmid(HouseInfo[HouseID[playerid]][hOwner], PlayerInfo[playerid][pNormalName], 0, 25, 999);
						Update(playerid,pPhousekeyx);
						Update(HouseOffer[playerid],pPhousekeyx);
						new str2[256];
						mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Owner`='%s' WHERE `ID`='%d'",HouseInfo[HouseID[playerid]][hOwner],HouseID[playerid]);
						mysql_tquery(SQL,str2,"","");
						OnPropTextdrawUpdate(1,HouseID[playerid]);
						HouseOffer[playerid] = 999;
						HousePrice[playerid] = 0;
						HouseID[playerid] = 0;
						return 1;
					}
					else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be near the seller.");
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Nobody offered you a house.");
	}
	else if(strcmp(x_job,"ticket",true) == 0)
	{
		if(TicketOffer[playerid] < 999)
		{
			if(TicketOffer[playerid] != id) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} This player has not offered you ticket.");
		    if(IsPlayerConnected(TicketOffer[playerid]))
		    {
		        if(ProxDetectorS(5.0, playerid, TicketOffer[playerid]))
				{
			        GetPlayerName(TicketOffer[playerid], giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					if(GetPlayerCash(playerid) < TicketMoney[playerid]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
					format(string, sizeof(string), "* %s takes out $%d in cash, and hands it to %s.", sendername, TicketMoney[playerid], giveplayer);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					format(string, sizeof(string), "You have paid the $%d ticket %s issued you.", TicketMoney[playerid], giveplayer);
					SendClientMessage(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "%s has accepted the $%d ticket you issued them - you have received $%d.", sendername, TicketMoney[playerid], TicketMoney[playerid]);
					SendClientMessage(TicketOffer[playerid], COLOR_WHITE, string);
					GivePlayerCash(playerid, - TicketMoney[playerid]);
					GivePlayerCash(TicketOffer[playerid], TicketMoney[playerid]);
					PlayerInfo[TicketOffer[playerid]][Raport1]++;
					Update(TicketOffer[playerid], Raport1x);
					TicketOffer[playerid] = 999;
					TicketMoney[playerid] = 0;
					return 1;
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} The officer is not near you.");
		    }
		    else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Nobody offered you a ticket.");
	}
	else if(strcmp(x_job,"refill",true) == 0)
	{
		if(RefillOffer[playerid] < 999)
		{
			if(RefillOffer[playerid] != id) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} This player has not offered you a refill.");
			if(IsPlayerConnected(RefillOffer[playerid]))
		    {
		        if(GetPlayerCash(playerid) > RefillPrice[playerid])
		        {
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(RefillOffer[playerid], giveplayer, sizeof(giveplayer));
		            new car = gLastCar[playerid];
  					format(string, sizeof(string), "{B8FFDB}* You refilled your car for $%d by Car Mechanic %s.",RefillPrice[playerid],giveplayer);
					SendClientMessage(playerid,COLOR_WHITE, string);
					format(string, sizeof(string), "{B8FFDB}* You refilled %s's car and you received $%d.",sendername,RefillPrice[playerid]);
					SendClientMessage(RefillOffer[playerid], COLOR_WHITE, string);
					GivePlayerCash(RefillOffer[playerid],RefillPrice[playerid]);
					GivePlayerCash(playerid, -RefillPrice[playerid]);
					if(Gas[car] < 110) { Gas[car] = 100; }
		 	 		new str[256];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d' WHERE `name`='%s'",GetPlayerCash(RefillOffer[playerid]),PlayerInfo[RefillOffer[playerid]][pNormalName]);
					mysql_tquery(SQL,str,"","");
				    RefillOffer[playerid] = 999;
					RefillPrice[playerid] = 0;
					return 1;
		        }
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
		    }
		    else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
		}
		else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Nobody offered you a refill for your car.");
	}
	else if(strcmp(x_job,"live",true) == 0)
	{
		if(LiveOffer[playerid] < 999)
		{
			if(LiveOffer[playerid] != id) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} This player has not offered you live.");
		    if(IsPlayerConnected(LiveOffer[playerid]))
		    {
			    if(ProxDetectorS(5.0, playerid, LiveOffer[playerid]))
				{
					if(TalkingLive[LiveOffer[playerid]] == 0)
					{
						PlayerInfo[LiveOffer[playerid]][Raport4]++;
						Update(LiveOffer[playerid], Raport4x);
					}
					new strs[128],namee[30];
					GetPlayerName(playerid, namee, sizeof(namee));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now in a live interview! Respect the rules or you will get kicked!");
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Everything you say will be seen by everyone on the server!");
					SendClientMessage(playerid, COLOR_DARKPINK, "Ai primit freeze. Te vei putea misca dupa ce se va termina live-ul.");
					format(strs,sizeof(strs),"%s accepted live interview.", namee);
					SendClientMessage(LiveOffer[playerid], COLOR_LIGHTBLUE, strs);
					SendClientMessage(LiveOffer[playerid], COLOR_DARKPINK, "Ai primit freeze. Te vei putea misca dupa ce vei termina live-ul.");
					TogglePlayerControllable(playerid, 0);
					TogglePlayerControllable(LiveOffer[playerid], 0);
					TalkingLive[playerid] = 1;
					TalkingLive[LiveOffer[playerid]] = 1;
					LiveOffer[playerid] = 999;
					return 1;
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are to far away from the News Reporter.");
			}
            else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Nobody gave you a live conversation offer.");
	}
	else if(strcmp(x_job,"drugs",true) == 0)
	{
		if(DrugOffer[playerid] < 999)
		{
			if(DrugOffer[playerid] != id) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} This player has not offered you drugs.");
			if(GetPlayerCash(playerid) > DrugPrice[playerid])
			{
			    if(PlayerInfo[playerid][pDrugs] <= 50)
			    {
				    if(IsPlayerConnected(DrugOffer[playerid]))
				    {
				        GetPlayerName(DrugOffer[playerid], giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "{B8FFDB}* You bought %d gram for $%d from Drug Dealer %s.",DrugGram[playerid],DrugPrice[playerid],giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "{B8FFDB}* %s has bought your %d gram, the $%d was added to your PayCheck.",sendername,DrugGram[playerid],DrugPrice[playerid]);
						SendClientMessage(DrugOffer[playerid], COLOR_WHITE, string);
						GivePlayerCash(DrugOffer[playerid],DrugPrice[playerid]);
						GivePlayerCash(playerid, -DrugPrice[playerid]);
						PlayerInfo[playerid][pDrugs] += DrugGram[playerid];
						PlayerInfo[DrugOffer[playerid]][pDrugs] -= DrugGram[playerid];
						new str[456];
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d',`Drugs`='%d' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pDrugs],PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,str,"","");
						mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d',`Drugs`='%d' WHERE `name`='%s'",GetPlayerCash(DrugOffer[playerid]),PlayerInfo[DrugOffer[playerid]][pDrugs],PlayerInfo[DrugOffer[playerid]][pNormalName]);
						mysql_tquery(SQL,str,"","");
					    DrugOffer[playerid] = 999;
						DrugPrice[playerid] = 0;
						DrugGram[playerid] = 0;
						return 1;
					}
					else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are fully loaded with drugs, use them first.");
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Nobody offered you any drugs.");
	}
	else if(strcmp(x_job,"repair",true) == 0)
	{
		if(RepairOffer[playerid] < 999)
		{
			if(RepairOffer[playerid] != id) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} This player has not offered you repair.");
		    if(GetPlayerCash(playerid) > RepairPrice[playerid])
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
				    if(IsPlayerConnected(RepairOffer[playerid]))
				    {
					    GetPlayerName(RepairOffer[playerid], giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
   						RepairCar[playerid] = GetPlayerVehicleID(playerid);
					    SetVehicleHealth(RepairCar[playerid], 1000.0);
					    RepairVehicle(RepairCar[playerid]);
						format(string, sizeof(string), "{B8FFDB}* You repaired your car for $%d by Car Mechanic %s.",RepairPrice[playerid],giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "{B8FFDB}* You fixed %s's car, the $%d has been added to your PayCheck.",sendername,RepairPrice[playerid]);
						SendClientMessage(RepairOffer[playerid], COLOR_WHITE, string);
						GivePlayerCash(RepairOffer[playerid],RepairPrice[playerid]);
						GivePlayerCash(playerid, -RepairPrice[playerid]);
						RepairOffer[playerid] = 999;
						RepairPrice[playerid] = 0;
						return 1;
					}
					else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
				}
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Nobody offered you to repair your car.");
	}
	else if(strcmp(x_job,"hidden",true) == 0)
	{
	    if(IsPlayerConnected(hiddenoffer[playerid]))
	    {
	        if(hiddenoffer[playerid] != id) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player has not offered you a hidden color.");
	        if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	        if(PlayerInfo[hiddenoffer[playerid]][pPremiumPoints] <= 19) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} That player don't have 20 premium points.");
	        if(GetPlayerCash(playerid) >= hiddenprice[playerid])
	        {
	            new string23[128], string233[128];
	            PlayerInfo[hiddenoffer[playerid]][pPremiumPoints] -= 20;
	            PlayerInfo[playerid][pHiddenColor]++;
	            Update(hiddenoffer[playerid], pPremiumPointsx);
	            Update(playerid, pHiddenColorx);
	            GivePlayerCash(playerid, -hiddenprice[playerid]);
	            GivePlayerCash(hiddenoffer[playerid], hiddenprice[playerid]);
	            format(string23, sizeof(string23), "Ai cumparat o culoare hidden in schimbul sumei de $%s.", FormatNumber(hiddenprice[playerid]));
	            format(string233, sizeof(string233), "You have bought a hidden color for $%s.", FormatNumber(hiddenprice[playerid]));
	            SS(playerid, COLOR_DARKPINK, string23, string233);
				format(string23,sizeof(string23),"Ai primit $%s in schimbul unui hidden (20 puncte premium).", FormatNumber(hiddenprice[playerid]));
	            format(string233,sizeof(string233),"You have received $%s for a hidden color (20 premium points).", FormatNumber(hiddenprice[playerid]));
	            SS(hiddenoffer[playerid], COLOR_DARKPINK, string23, string233);
	            hiddenoffer[playerid] = 999;
	            hiddenprice[playerid] = 0;
	            SellTradeTimer[id] = 0;
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else if(strcmp(x_job,"tradehouseforhouse",true) == 0)
	{
	    if(IsPlayerConnected(tradeofferer[playerid]))
	    {
	        if(tradeofferer[playerid] != id) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player has not offered you a house trade.");
	        if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	        if(GetPlayerCash(tradeofferer[playerid]) >= tradediff[playerid])
	        {
	        	new tid = tradeofferer[playerid], sendername21[30], giveplayer21[30], string21[256];
	        	if(PlayerInfo[playerid][pPhousekey] == 999 || PlayerInfo[tid][pPhousekey] == 999) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Tu sau celalalt jucator nu mai detineti o casa.");
	        	if(tradecars[playerid] != PlayerInfo[tid][pPhousekey]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Acel jucator nu mai detine aceasta casa.");
	        	if(tradecars2[playerid] != PlayerInfo[playerid][pPhousekey]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Tu nu mai detii casa oferita.");

	        	GetPlayerName(tid, sendername21, sizeof(sendername21));
	            GetPlayerName(playerid, giveplayer21, sizeof(giveplayer21));
	        	GivePlayerCash(playerid, tradediff[playerid]);
	        	GivePlayerCash(tid, -tradediff[playerid]);
	        	PlayerInfo[playerid][pPhousekey] = tradecars[playerid];
	        	PlayerInfo[tid][pPhousekey] = tradecars2[playerid];
	        	strmid(HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], PlayerInfo[playerid][pNormalName], 0, 25, 999);
	        	strmid(HouseInfo[PlayerInfo[tid][pPhousekey]][hOwner], PlayerInfo[tid][pNormalName], 0, 25, 999);
				Update(playerid, pPhousekeyx);
				Update(tid, pPhousekeyx);
				new str2[256];
				mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Owner`='%s' WHERE `ID`='%d'", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pPhousekey]);
				mysql_tquery(SQL,str2,"","");
				mysql_format(SQL,str2,sizeof(str2),"UPDATE `houses` SET `Owner`='%s' WHERE `ID`='%d'", PlayerInfo[tid][pNormalName], PlayerInfo[tid][pPhousekey]);
				mysql_tquery(SQL,str2,"","");

				format(string21, sizeof(string21), "($) %s traded his house (%d) + $%s for %s's house (%d).", sendername21, PlayerInfo[playerid][pPhousekey], FormatNumber(tradediff[playerid]), giveplayer21, PlayerInfo[tid][pPhousekey]);
				SendClientMessage(playerid, COLOR_GREEN2, string21);
				SendClientMessage(tid, COLOR_GREEN2, string21);
				ProxDetector(30.0, playerid, string21, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				ABroadCast(COLOR_YELLOW, string21, 1);

				new var100[256],string2[256];
    			mysql_real_escape_string(string21, string2);
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[playerid][pSQLID], PlayerInfo[tid][pSQLID], string2);
				mysql_tquery(SQL,var100,"","");
				tradeofferer[playerid] = -1;
				tradediff[playerid] = 0;
				tradetype[playerid] = -1;
				tradetype2[playerid] = -1;
				tradecars[playerid] = -1;
				tradecars2[playerid] = -1;
				SellTradeTimer[id] = 0;
				OnPropTextdrawUpdate(1, PlayerInfo[playerid][pPhousekey]);
				OnPropTextdrawUpdate(1, PlayerInfo[tid][pPhousekey]);
	       	}
	       	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player don't have the difference.");
	    }
	    else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else if(strcmp(x_job,"tradehouseforcar",true) == 0)
	{
	    if(IsPlayerConnected(tradeofferer[playerid]))
	    {
	        if(tradeofferer[playerid] != id) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player has not offered you a house.");
	        if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	        if(PlayerInfo[playerid][pPhousekey] != 999) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already own a house.");
	        if(PlayerInfo[id][pPhousekey] == 999) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player don't own a house.");
	        if(GetPlayerCash(tradeofferer[playerid]) >= tradediff[playerid])
	        {
	        	new tid = tradeofferer[playerid], string21[256], sendername21[30], giveplayer21[30], idcar1, idcar2;
	            GetPlayerName(tid,sendername21,sizeof(sendername21));
	            GetPlayerName(playerid,giveplayer21,sizeof(giveplayer21));
	            for(new vv; vv < PlayerInfo[playerid][pCarSlots]; vv++)
				{
					if(PlayerInfo[playerid][pCar][vv] == tradetype2[playerid])
					{
						idcar1 = vv;
					}
				}
				if(tradetype2[playerid] != PlayerInfo[playerid][pCar][idcar1]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} The offered car isn't yours.");
				for(new vv; vv < PlayerInfo[tid][pCarSlots]; vv++)
				{
					if(PlayerInfo[tid][pCar][vv] == -1)
					{
						idcar2 = vv;
						break;
					}
				}
				if(idcar2 == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} That player don't have enough car slots.");
				PlayerInfo[tid][pCarID][idcar2] = tradetype[playerid];
				PlayerInfo[tid][pCar][idcar2] = tradetype2[playerid];
				PlayerInfo[playerid][pCarID][idcar1] = 0;
				PlayerInfo[playerid][pCar][idcar1] = -1;
				GivePlayerCash(tid, -tradediff[playerid]);
				GivePlayerCash(playerid, tradediff[playerid]);
				strmid(CarOwner[tid][idcar2], PlayerInfo[tid][pNormalName], 0, 50, 999);
    			cUpdate(tid, idcar2, cOwnerx);
				strmid(CarOwner[playerid][idcar1], PlayerInfo[playerid][pNormalName], 0, 50, 999);
    			cUpdate(playerid, idcar1, cOwnerx);
				LoadCar(playerid);
				LoadCar(tid);

				PlayerInfo[tid][pPhousekey] = 999;
	        	PlayerInfo[playerid][pPhousekey] = tradecars[playerid];
	        	strmid(HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], PlayerInfo[playerid][pNormalName], 0, 25, 999);
	        	Update(playerid, pPhousekeyx);
				Update(tid, pPhousekeyx);
				mysql_format(SQL, string21, sizeof(string21), "UPDATE `houses` SET `Owner`='%s' WHERE `ID`='%d'", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pPhousekey]);
				mysql_tquery(SQL, string21, "", "");

				format(string21, sizeof(string21), "($) %s traded his house (%d) + $%s for %s's car (%s).", sendername21, PlayerInfo[playerid][pPhousekey], FormatNumber(tradediff[playerid]), giveplayer21, aVehicleNames[PlayerInfo[tid][pCarModel][idcar2] - 400]);
				SendClientMessage(playerid, COLOR_GREEN2, string21);
				SendClientMessage(tid, COLOR_GREEN2, string21);
				ProxDetector(30.0, playerid, string21, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				ABroadCast(COLOR_YELLOW, string21, 1);

				new var100[256],string2[256];
    			mysql_real_escape_string(string21, string2);
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[playerid][pSQLID], PlayerInfo[tid][pSQLID], string2);
				mysql_tquery(SQL,var100,"","");
				tradeofferer[playerid] = -1;
				tradediff[playerid] = 0;
				tradetype[playerid] = -1;
				tradetype2[playerid] = -1;
				tradecars[playerid] = -1;
				tradecars2[playerid] = -1;
				SellTradeTimer[id] = 0;
				OnPropTextdrawUpdate(1, PlayerInfo[playerid][pPhousekey]);
				RemovePlayerFromVehicle(playerid);
	       	}
	       	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player don't have the difference.");
	    }
	    else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else if(strcmp(x_job,"tradecar",true) == 0)
	{
	    if(IsPlayerConnected(tradeofferer[playerid]))
	    {
	        if(tradeofferer[playerid] != id) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player has not offered you a car.");
	        if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	        if(GetPlayerCash(tradeofferer[playerid]) >= tradediff[playerid])
	        {
	            new tid = tradeofferer[playerid],string21[256],sendername21[30],giveplayer21[30],idcar1,idcar2;
	            GetPlayerName(tradeofferer[playerid],sendername21,sizeof(sendername21));
	            GetPlayerName(playerid,giveplayer21,sizeof(giveplayer21));
				for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
				{
					if(PlayerInfo[playerid][pCar][vv] == tradetype2[playerid])
					{
						idcar1 = vv;
					}
				}
				for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
				{
					if(PlayerInfo[tid][pCar][vv] == tradetype[playerid])
					{
						idcar2 = vv;
					}
				}
				if(tradetype2[playerid] != PlayerInfo[playerid][pCar][idcar1]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Masina oferita numai este detinuta de tine.");
				if(tradetype[playerid] != PlayerInfo[tid][pCar][idcar2]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Acel jucator numai detine aceasta masina.");

				if(tradecars2[playerid] == PlayerInfo[playerid][pCarID][idcar1])
				{
    				PlayerInfo[playerid][pCarID][idcar1] = tradecars[playerid];
				}

				if(tradecars[playerid] == PlayerInfo[tid][pCarID][idcar2])
				{
    				PlayerInfo[tid][pCarID][idcar2] = tradecars2[playerid];
				}

				if(tradetype2[playerid] == PlayerInfo[playerid][pCar][idcar1])
				{
				    PlayerInfo[playerid][pCar][idcar1] = tradetype[playerid];
				}

				if(tradetype[playerid] == PlayerInfo[tid][pCar][idcar2])
				{
				    PlayerInfo[tid][pCar][idcar2] = tradetype2[playerid];
				}

				GivePlayerCash(tradeofferer[playerid], -tradediff[playerid]);
				GivePlayerCash(playerid, tradediff[playerid]);

				strmid(CarOwner[playerid][idcar1], PlayerInfo[playerid][pNormalName], 0, 50, 999);
    			cUpdate(playerid, idcar1, cOwnerx);

    			strmid(CarOwner[tid][idcar2], PlayerInfo[tid][pNormalName], 0, 50, 999);
    			cUpdate(tid, idcar2, cOwnerx);

				format(string21, sizeof(string21), "($) %s traded his car (%s - %d) + $%s for %s's car (%s - %d).", sendername21, aVehicleNames[PlayerInfo[tid][pCarModel][idcar1] - 400], PlayerInfo[tid][pCar][idcar1], FormatNumber(tradediff[playerid]), giveplayer21, aVehicleNames[PlayerInfo[playerid][pCarModel][idcar2] - 400], PlayerInfo[playerid][pCar][idcar2]);
				SendClientMessage(playerid, COLOR_GREEN2, string21);
				SendClientMessage(tid, COLOR_GREEN2, string21);
				ProxDetector(30.0, playerid, string21, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				ABroadCast(COLOR_YELLOW, string21,1);
				new var100[256],string2[256];
    			mysql_real_escape_string(string21, string2);
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[playerid][pSQLID],PlayerInfo[tradeofferer[playerid]][pSQLID],string2);
				mysql_tquery(SQL,var100,"","");
				tradeofferer[playerid] = -1;
				tradediff[playerid] = 0;
				tradetype[playerid] = -1;
				tradetype2[playerid] = -1;
				tradecars[playerid] = -1;
				tradecars2[playerid] = -1;
				SellTradeTimer[id] = 0;
				LoadCar(playerid);
				LoadCar(tid);
				RemovePlayerFromVehicle(playerid);
				RemovePlayerFromVehicle(tid);
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player don't have the difference.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else if(strcmp(x_job,"car",true) == 0)
	{
	    if(IsPlayerConnected(ofercar[playerid]))
	    {
	        if(ofercar[playerid] != id) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} This player has not offered you a car.");
	        if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	        if(GetPlayerCash(playerid) >= carprice[playerid])
	        {
	            new vehh = GetPlayerVehicleID(id),total,idcar1,idcar2;
				if(vehh != primesccar[playerid]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Vehicle seller needs to be in his selling car.");
				//if(myvehh != primesccar[playerid]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be in the offered vehicle.");

				for(new v; v < MAX_PERSONAL_VEHICLES; v++)
				{
					if(PlayerInfo[playerid][pCar][v] != -1) total++;
				}
				if(total+1 > PlayerInfo[playerid][pCarSlots])
				{
					SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't buy any more cars. Sell one of your cars if you want to buy a new one. Normal players can own 2 cars. Premium players can own 4 cars.");
					return 1;
				}
				for(new v; v < PlayerInfo[playerid][pCarSlots]; v++)
				{
					if(PlayerInfo[playerid][pCar][v] == -1)
					{
						idcar1 = v;
						break;
					}
				}
				for(new v; v < PlayerInfo[id][pCarSlots]; v++)
				{
					if(PlayerInfo[id][pCar][v] == cartype[playerid])
					{
						idcar2 = v;
					}
				}
				if(cartype[playerid] != PlayerInfo[id][pCar][idcar2]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player isn't owned this car.");

				PlayerInfo[playerid][pCar][idcar1] = PlayerInfo[id][pCar][idcar2];
				PlayerInfo[playerid][pCarID][idcar1] = PlayerInfo[id][pCarID][idcar2];

				PlayerInfo[id][pCar][idcar2] = -1;
				PlayerInfo[id][pCarID][idcar2] = 0;
				SellTradeTimer[id] = 0;

				LoadCar(playerid);
				LoadCar(id);

				new sendernames[30],giveplayers[30],stringy[256];
				GetPlayerName(playerid,sendernames,sizeof(sendernames));
				GetPlayerName(ofercar[playerid],giveplayers,sizeof(giveplayers));
                format(stringy, sizeof(stringy), "* %s sold his %s [car:%d] to %s for $%s.",giveplayers,aVehicleNames[PlayerInfo[playerid][pCarModel][idcar1] - 400],PlayerInfo[playerid][pCar][idcar1],sendernames,FormatNumber(carprice[playerid]));
                ProxDetector(30.0, playerid, stringy, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, stringy);
				SendClientMessage(ofercar[playerid], COLOR_LIGHTBLUE, stringy);
				ABroadCast(COLOR_YELLOW, stringy,1);
				SendClientMessage(id, COLOR_WHITE, "The sell/trade car offer has expired.");
				new var100[256],string2[256];
				mysql_real_escape_string(stringy, string2);
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[playerid][pSQLID],PlayerInfo[ofercar[playerid]][pSQLID],string2);
				mysql_tquery(SQL,var100,"","");
				RemovePlayerFromVehicleEx(ofercar[playerid]);
				GivePlayerCash(playerid, - carprice[playerid]);
    			GivePlayerCash(ofercar[playerid], carprice[playerid]);

				strmid(CarOwner[playerid][idcar1], PlayerInfo[playerid][pNormalName], 0, 50, 999);
    			cUpdate(playerid, idcar1, cOwnerx);
    			strmid(CarOwner[id][idcar2], PlayerInfo[id][pNormalName], 0, 50, 999);
    			cUpdate(id, idcar2, cOwnerx);
				ofercar[playerid] = -1;
				carprice[playerid] = 0;
   				primesccar[playerid] = 0;
   				cartype[playerid] = 0;

   				LoadCar(playerid);
				LoadCar(id);
			}
			else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "Available names:{B8DBFF} Drugs, Repair, House");
		SendClientMessage(playerid, COLOR_WHITE, "Available names:{B8DBFF} Vehicle, Taxi, Medic, Live");
		SendClientMessage(playerid, COLOR_WHITE, "Available names:{B8DBFF} Mechanic, Ticket, Refill");
	}
	return 1;
}
CMD:leaderhelp(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pLeader] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a leader.");
	SendClientMessage(playerid, COLOR_WHITE,"Leader help: /togapps /members /fvrespawn /invite /lockhq /changerank /granknames /gmotd /l /addresetdays");
	return 1;
}
CMD:invite(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pRank] < 6) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need rank6+ to use this command.");
	new id,string[256],string2[256],giveplayer[30],sendername[30];
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /invite [name/playerid]");
	if(PlayerInfo[id][pFpunish] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can not invite this player because he have faction punish.");
	//if(PlayerInfo[id][pAccepted] != PlayerInfo[playerid][pMember]) return SendClientMessage(playerid,  COLOR_ERROR, "(Error){FFFFFF} This player is not accepted in this faction.");
    new membrii = GetFactionMembers(PlayerInfo[playerid][pMember]);
	if(membrii >= DynamicFactions[PlayerInfo[playerid][pMember]][fMaxMembers]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have reached maximum faction members.");
	if(IsPlayerConnected(id))
	{
	    if(id != INVALID_PLAYER_ID)
	    {
			if(PlayerInfo[id][pMember] == 0 && PlayerInfo[id][pLeader] == 0)
			{
				format(string, sizeof(string), "SELECT * FROM `aplications` WHERE `name` = '%s' AND `status`='1'", PlayerInfo[id][pNormalName]);
				new Cache: membresult = mysql_query(SQL, string);
				//if(cache_get_row_count() == 0) return SendClientMessage(playerid, COLOR_WHITE, "This player don't have an accepted application on panel.");
				cache_delete(membresult);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "%s has invited you to join group %s (to accept the invitation, type '/accept invite %d').", sendername, DynamicFactions[PlayerInfo[playerid][pMember]][fName], playerid);
				SendClientMessage(id, COLOR_LIGHTBLUE, string);
				SendClientMessage(playerid, COLOR_DARKPINK, "Processing invite...");
				format(string2, sizeof(string2), "You have invited %s to join your group.", giveplayer);
				SendClientMessage(playerid, COLOR_WHITE, string2);
				FactionOffer[id] = playerid;
            }
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is already in a group.");
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	return 1;
}
CMD:maxmembers(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
    new fid,maxmembers,string[MAX_STRING];
    if(sscanf(params, "dd",fid,maxmembers)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /maxmembers <FactionID> <Members>");
    if(maxmembers > 0 && maxmembers <= 50)
    {
        if(fid > 0 && fid <= 14)
        {
        	DynamicFactions[fid][fMaxMembers] = maxmembers;
        	mysql_format(SQL, string, sizeof(string), "UPDATE `factions` SET `MaxMembers`='%d' WHERE `ID`='%d'",DynamicFactions[fid][fMaxMembers], fid);
			mysql_tquery(SQL,string,"","");
			format(string, sizeof(string), "Now faction %s have maximum %d members.",DynamicFactions[fid][fName], DynamicFactions[fid][fMaxMembers]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} FactionID must be between 1 and 14.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Max members must be between 1 and 50.");
	return 1;
}
CMD:lockhq(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new fid;
    if(sscanf(params, "d",fid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /lockhq <hq id>");
	new string[128],str[256];
	switch(DynamicFactions[fid][fLocked])
	{
		case 1: {
		    SendClientMessage(playerid, COLOR_WHITE, "HQ unlocked.");
			DynamicFactions[fid][fLocked] = 0;
			format(string, sizeof(string), "%s's HQ", DynamicFactions[fid][fName]);
			mysql_format(SQL, str, sizeof(str), "UPDATE `factions` SET `Locked`='0' WHERE `ID`='%d'", fid);
			mysql_tquery(SQL, str, "", "");
		}
		case 0: {
		    SendClientMessage(playerid, COLOR_WHITE, "HQ locked.");
			DynamicFactions[fid][fLocked] = 1;
		    format(string, sizeof(string), "%s's HQ\n\n(locked)", DynamicFactions[fid][fName]);
		    mysql_format(SQL, str, sizeof(str), "UPDATE `factions` SET `Locked`='1' WHERE `ID`='%d'", fid);
		    mysql_tquery(SQL, str, "", "");
		}
	}
	UpdateDynamic3DTextLabelText(DynamicFactions[fid][fLabelID], COLOR_COOLBLUE, string);
	return 1;
}
CMD:lockbusiness(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new bid;
    if(sscanf(params, "d",bid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /lockbusiness <biz id>");
    new str[256];
	if(BizzInfo[bid][bLocked] == 0)
	{
		BizzInfo[bid][bLocked] = 1;
		SendClientMessage(playerid, COLOR_WHITE, "Business locked.");
	}
	else
	{
		BizzInfo[bid][bLocked] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "Business unlocked.");
	}
	mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Locked`='%d' WHERE `ID`='%d'", BizzInfo[bid][bLocked], bid);
	mysql_tquery(SQL,str,"","");
	OnPropTextdrawUpdate(2, bid);
   	return 1;
}
CMD:granknames(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pLeader] < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a leader.");
	new rankid, rankname[32],string[128], query[256], rankname2[32];
	if(sscanf(params, "ds[32]", rankid, rankname)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /granknames [rankid (1-7)] [rank title]");
	mysql_real_escape_string(rankname, rankname2);
	switch(rankid)
	{
		case 1: {
			format(DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], sizeof(rankname), rankname);
			mysql_format(SQL, query, sizeof(query), "UPDATE `factions` SET `Rank1`='%s' WHERE `ID`='%d'", rankname2, PlayerInfo[playerid][pMember]);
			mysql_tquery(SQL, query, "", "");

			format(string, sizeof(string), "You have changed the title of Rank 1 to '%s'.", rankname);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		case 2: {
			format(DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2], sizeof(rankname), rankname);
			mysql_format(SQL, query, sizeof(query), "UPDATE `factions` SET `Rank2`='%s' WHERE `ID`='%d'", rankname2, PlayerInfo[playerid][pMember]);
			mysql_tquery(SQL, query, "", "");

			format(string, sizeof(string), "You have changed the title of Rank 2 to '%s'.", rankname);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		case 3: {
			format(DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3], sizeof(rankname), rankname);
			mysql_format(SQL, query, sizeof(query), "UPDATE `factions` SET `Rank3`='%s' WHERE `ID`='%d'", rankname2, PlayerInfo[playerid][pMember]);
			mysql_tquery(SQL, query, "", "");

			format(string, sizeof(string), "You have changed the title of Rank 3 to '%s'.", rankname);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		case 4: {
			format(DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4], sizeof(rankname), rankname);
			mysql_format(SQL, query, sizeof(query), "UPDATE `factions` SET `Rank4`='%s' WHERE `ID`='%d'", rankname2, PlayerInfo[playerid][pMember]);
			mysql_tquery(SQL, query, "", "");

			format(string, sizeof(string), "You have changed the title of Rank 4 to '%s'.", rankname);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		case 5: {
			format(DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5], sizeof(rankname), rankname);
			mysql_format(SQL, query, sizeof(query), "UPDATE `factions` SET `Rank5`='%s' WHERE `ID`='%d'", rankname2, PlayerInfo[playerid][pMember]);
			mysql_tquery(SQL, query, "", "");

			format(string, sizeof(string), "You have changed the title of Rank 5 to '%s'.", rankname);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		case 6: {
			format(DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6], sizeof(rankname), rankname);
			mysql_format(SQL, query, sizeof(query), "UPDATE `factions` SET `Rank6`='%s' WHERE `ID`='%d'", rankname2, PlayerInfo[playerid][pMember]);
			mysql_tquery(SQL, query, "", "");

			format(string, sizeof(string), "You have changed the title of Rank 6 to '%s'.", rankname);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		case 7: {
			format(DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7], sizeof(rankname), rankname);
			mysql_format(SQL, query, sizeof(query), "UPDATE `factions` SET `Rank7`='%s' WHERE `ID`='%d'", rankname2, PlayerInfo[playerid][pMember]);
			mysql_tquery(SQL, query, "", "");

			format(string, sizeof(string), "You have changed the title of Rank 7 to '%s'.", rankname);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}
CMD:changerank(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pLeader] < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a leader.");
	new para1,level,string[256],giveplayer[30],sendername[30],rtext[64],reason[128];
	if(sscanf(params, "uis[128]", para1,level,reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /changerank [name/playerid] [1-6] [reason]");
	if(level > 6 || level < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Minimum rank is 1 and maximum is 6.");
	if(PlayerInfo[para1][pMember] != PlayerInfo[playerid][pLeader]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This member is not in your faction.");
	if(PlayerInfo[para1][pLeader] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is a leader.");
	if(para1 != INVALID_PLAYER_ID)
	{
		GetPlayerName(para1, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(level == 1) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1]);
		else if(level == 2) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2]);
		else if(level == 3) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3]);
		else if(level == 4) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4]);
		else if(level == 5) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5]);
		else if(level == 6) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6]);
		format(string,sizeof(string),"%s changed %s's faction rank from %d to %d. Reason :  %s.",sendername,giveplayer,PlayerInfo[para1][pRank],level,reason);
		Factionlog(PlayerInfo[para1][pMember],PlayerInfo[para1][pSQLID],PlayerInfo[playerid][pSQLID],string);
		SendFamilyMessage(PlayerInfo[para1][pMember], COLOR_GENANNOUNCE, string);
		PlayerInfo[para1][pRank] = level;
		format(string, sizeof(string), "%s has promoted you to the rank of %s (%d). Reason :  %s.", sendername,rtext,level,reason);
		SendClientMessage(para1, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You have promoted %s to the rank of %s (%d). Reason :  %s.", giveplayer,rtext,level,reason);
		SendClientMessage(playerid, COLOR_WHITE, string);
		new str[256];
		mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Rank`='%d' WHERE `name`='%s'",PlayerInfo[para1][pRank],PlayerInfo[para1][pNormalName]);
		mysql_tquery(SQL,str,"","");
	}
 	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	return 1;
}
CMD:atm(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	for(new x; x < MAX_ATMS; x++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, AtmInfo[x][fATMPos][0], AtmInfo[x][fATMPos][1], AtmInfo[x][fATMPos][2]))
			ShowPlayerDialog(playerid, DIALOG_ATM_MENU, DIALOG_STYLE_LIST, "SERVER: Automated Teller Machine", "Check Balance\nWithdraw", "OK", "Cancel");
	}
	return 1;
}
CMD:withdraw(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
 	if(IsAtBank(playerid))
	{
		new money,string[100];
		if(sscanf(params, "i", money))
		{
			SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /withdraw [amount]");
			format(string, sizeof(string), "You have $%s in your account.", FormatNumber(PlayerInfo[playerid][pAccount]));
			SendClientMessage(playerid, COLOR_YELLOW, string);
			return 1;
		}
		if(money < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid amount specified.");
		if(money > PlayerInfo[playerid][pAccount]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have that amount of money.");
	    ConsumingMoney[playerid] = 1;
		GivePlayerCash(playerid, money);
		PlayerInfo[playerid][pAccount] = PlayerInfo[playerid][pAccount] - money;
		format(string, sizeof(string), "You have withdrawn $%s from your bank account. Your account balance is now $%s.", FormatNumber(money), FormatNumber(PlayerInfo[playerid][pAccount]));
		SendClientMessage(playerid, COLOR_DCHAT, string);
		Update(playerid, pBank);
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not at the bank!");
	return 1;
}
CMD:deposit(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
 	if(IsAtBank(playerid))
	{
		new money,string[128];
		if(sscanf(params, "i", money)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /deposit [amount]");
		if(money < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid amount specified.");
		if(money > GetPlayerCash(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money for this transaction.");
		GivePlayerCash(playerid, -money);
		PlayerInfo[playerid][pAccount] = money + PlayerInfo[playerid][pAccount];
		format(string, sizeof(string), "You have deposited $%s into your bank account. Your account balance is now $%s.", FormatNumber(money), FormatNumber(PlayerInfo[playerid][pAccount]));
		SendClientMessage(playerid, COLOR_DCHAT, string);
		Update(playerid, pBank);
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not at the bank!");
	return 1;
}
CMD:balance(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsAtBank(playerid))
    {
		new string[100];
		format(string, sizeof(string), "Your current bank account balance is: $%s", FormatNumber(PlayerInfo[playerid][pAccount]));
		SendClientMessage(playerid, COLOR_DCHAT, string);
	}
	else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You are not at the bank!");
	return 1;
}
CMD:transfer(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	if(PlayerInfo[playerid][pLevel] < 5) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need level 5 use this command.");
	if(floatround(PlayerInfo[playerid][pConnectTime], floatround_round) < 2) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need 2 played hours to use this command.");
    if(IsAtBank(playerid))
    {
		new id,moneytransfer,string[200],giveplayer[30],sendername[30],playermoney;
		if(sscanf(params, "ui", id,moneytransfer)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /transfer [name/playerid] [amount]");
		if(playerid == id) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't transfer money to yourself.");
		if(IsPlayerConnected(id))
		{
            if(id != INVALID_PLAYER_ID)
		    {
		    	if(gPlayerLogged[id] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not logged in.");
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				playermoney = PlayerInfo[playerid][pAccount];
				if(moneytransfer > 0 && playermoney >= moneytransfer)
				{
					TransferOffer[playerid] = id;
					TransferMoney[playerid] = moneytransfer;
					if(PlayerInfo[playerid][pLanguage] == 2)
				    {
				    	format(string,sizeof(string),"Esti sigur ca vrei sa-i transferi %s$ lui %s?\n\nDaca imprumuti bani cuiva, o faci pe proprie raspundere. Adminii nu te vor ajuta sa ii recuperezi.", FormatNumber(moneytransfer), giveplayer);
						ShowPlayerDialog(playerid, DIALOG_TRANSFER, DIALOG_STYLE_MSGBOX, "Transfer money", string, "Da", "Nu");
					}
					else
					{
						format(string,sizeof(string),"Are you sure you want to transfer %s$ to %s?\n\nKeep in mind that if you loan money to other players, you have no guarantee that you'll receive them back.", FormatNumber(moneytransfer), giveplayer);
						ShowPlayerDialog(playerid, DIALOG_TRANSFER, DIALOG_STYLE_MSGBOX, "Transfer money", string, "Yes", "No");
					}
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid amount specified.");
			}
        }
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not at the bank!");
	return 1;
}
CMD:undercover(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
	{
	    if(Undercover[playerid] == 0 && GoChase[playerid] == 999) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a contract.");
		if(Undercover[playerid] == 0)
		{
	    	SendClientMessage(playerid, COLOR_YELLOW, "You are now undercover. No one can see your name.");
	    	Undercover[playerid] = 1;
	    	foreach(new i : Player)
 			{
  				ShowPlayerNameTagForPlayer(i, playerid, 0);
       		}
		}
		else
		{
	    	SendClientMessage(playerid, COLOR_YELLOW, "You are not undercover anymore. Anyone can see your name.");
	    	Undercover[playerid] = 0;
			foreach(new i : Player)
 			{
  				ShowPlayerNameTagForPlayer(i, playerid, 1);
       		}
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a hitman.");
	return 1;
}
CMD:gethit(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11) {} else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a hitman.");
	{
	    new searchhit = 0,cid[MAX_PLAYERS],sendername[30],giveplayer[30],string[128];
	    if(GoChase[playerid] != 999) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You have already a contract.");
	    if(PlayerInfo[playerid][pHitT] != 0) return SS(playerid,COLOR_ERROR, "(Error){FFFFFF} Trebuie sa astepti 5 minute dupa ce ai anulat/terminat un contract pentru a folosi /gethit.","(Error){FFFFFF} You need to wait 5 minutes after you completed/canceled a contract to use /gethit.");
		foreach(new i : Player)
		{
		    if(PlayerInfo[i][pHeadValue] > 0 && GotHit[i] == 0 && PlayerInfo[i][pMember] != 11 && gPlayerLogged[i] == 1)
		    {
		        searchhit = 1;
		        cid[playerid] = i;
		    }
	    }
		if(searchhit == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} No contracts available.");
		if(IsPlayerConnected(cid[playerid]))
	    {
	        GetPlayerName(playerid, sendername, sizeof(sendername));
	        GetPlayerName(cid[playerid], giveplayer, sizeof(giveplayer));
			format(string, sizeof(string), "%s received a contract. Target: %s.", sendername, giveplayer);
			SendFamilyMessage(11, COLOR_TEAL, string);
			SendClientMessage(playerid, COLOR_YELLOW, "You have a new contract(/mycontract).");
		    GoChase[playerid] = cid[playerid];
			GetChased[cid[playerid]] = playerid;
			GotHit[cid[playerid]] = 1;
			foreach(new i : Player)
            togfind[playerid] = 1;
            return 1;
		}
	}
	return 1;
}
CMD:mycontract(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
	{
	    if(GoChase[playerid] != 999)
	    {
	        new name[30],string[128];
	    	GetPlayerName(GoChase[playerid], name, sizeof(name));
	    	format(string, sizeof(string), "You have a contract on %s(%d)",name,GoChase[playerid]);
	    	SendClientMessage(playerid, COLOR_GREY, string);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a contract.");
	}
	return 1;
}
CMD:checkcontract(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
	{
	    new id;
	    if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /checkcontract [name/playerid]");
		if(PlayerInfo[id][pMember] != 11) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not a hitman.");
		if(GoChase[id] != 999)
	    {
	        new name[30],string[128],name2[30];
	    	GetPlayerName(GoChase[id], name, sizeof(name));
	    	GetPlayerName(id,name2,sizeof(name2));
	    	format(string, sizeof(string), "%s have a contract on %s(%d)",name2,name,GoChase[id]);
	    	SendClientMessage(playerid, COLOR_GREY, string);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This hitman don't have a contract.");
	}
	return 1;
}
CMD:cancelhit(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
	{
	    if(GoChase[playerid] != 999)
	    {
	        new name[30],string[256];
	        GotHit[GoChase[playerid]] = 0;
			GetChased[GoChase[playerid]] = 999;
			GoChase[playerid] = 999;
        	foreach(new i : Player)
        	togfind[playerid] = 0;
        	PlayerInfo[playerid][pHitT] = 0;
	 		mysql_format(SQL, string, sizeof(string), "UPDATE users SET `HitT`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pHitT], PlayerInfo[playerid][pNormalName]);
        	mysql_tquery(SQL,string,"","");
			GetPlayerName(playerid, name, sizeof(name));
	    	format(string, sizeof(string), "%s canceled his contract.",name);
	    	SendFamilyMessage(11, COLOR_TEAL, string);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a contract.");
	}
	return 1;
}
CMD:contracts(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
	{
	    new count1=0,count2=0,string[128];
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pHeadValue] != 0)
	        {
	            if(PlayerInfo[i][pSleeping] == 1)
	            {
	            	count1++;
				}
				count2++;
			}
		}
		SendClientMessage(playerid, COLOR_TEAL, "[Contracts]");
		format(string,sizeof(string),"Targets AFK/sleeping: %d",count1);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string,sizeof(string),"Total targets: %d",count2);
		SendClientMessage(playerid, COLOR_WHITE, string);
	    SendClientMessage(playerid, COLOR_TEAL, "-------------------");
	}
	return 1;
}
CMD:factions(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	ShowFactions(playerid);
	return 1;
}
CMD:hqs(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(CP[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1 && PlayerInfo[playerid][pJobVehicle] == 0 && BeeCar[playerid] == 0 && UsedFind[playerid] == 0 && InMinerJob[playerid] == 0 && InStrawberryJob[playerid] == 0 && PizzaCP[playerid] != 1 && busc[playerid] != 1 && Trucker[playerid] ==0)
		ShowPlayerDialog(playerid, DIALOG_HQS, DIALOG_STYLE_LIST, "SERVER: HQ Locations", "Los Santos Police Department\nNational Guard\nHitman Agency\nFBI\nNews Reporters\nGrove Street\nBallas\nLos Aztecas\nLas Venturas Paramedic Department\nLos Vagos\nTaxi LS\nLas Venturas Police Department\nMayor", "Checkpoint", "Back");
	else
		ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel checkpoint", "You are sure to cancel the current checkpoint?", "Yes", "No");
	return 1;
}
CMD:locations(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(CP[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1 && PizzaCP[playerid] != 1)
		ShowPlayerDialog(playerid, DIALOG_LOCATIONS, DIALOG_STYLE_LIST, "SERVER: Server Locations", "Driving School(DMV)\nLos Santos\nLas Venturas\nSan Fierro\nFaction HQS\nVehicle Mod Shops\nPaintball\nDealership\nRace Arena\nBeeHives product pick-up", "Select", "Close");
	else
		ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel checkpoint", "You are sure to cancel the current checkpoint?", "Yes", "No");
	return 1;
}
CMD:gps(playerid, params[]) return cmd_locations(playerid, params);
CMD:where(playerid, params[]) return cmd_locations(playerid, params);
CMD:heal(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new sendername[30],str[128],id,suma,Float:health;
	if(PlayerInfo[playerid][pMember] == 14 && IsAnAmbulance(GetPlayerVehicleID(playerid)) && GetPlayerVehicleSeat(playerid) == 0)
	{
		if(sscanf(params, "ud",id,suma)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /heal [playerid/name] [amount]");
		if(suma < 1 || suma > 2000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Amount must be between 1 and 2000.");
		if(GetPlayerVehicleID(playerid)!=GetPlayerVehicleID(id)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player isn't in ambulance with you.");
		GetPlayerHealth(id, health);
		if(health <= 95)
		{
			if(GetPlayerCash(id) >= suma)
			{
				GivePlayerCash(id, -suma);
				GivePlayerCash(playerid, suma);
				MedicCall[id] = 0;
				SetPlayerHealthEx(id, 100.0);
				format(str, sizeof(str), "~h~healed~n~~g~+%s", FormatNumber(suma));
				GameTextForPlayer(playerid, str, 5000, 1);
				new varxx[256],are;
				format(varxx, sizeof(varxx), "SELECT * FROM `antifraudaraport` WHERE `pid1`='%d' AND `pid2`='%d'", PlayerInfo[playerid][pSQLID], PlayerInfo[id][pSQLID]);
				new Cache: ab = mysql_query(SQL, varxx);
				if(cache_get_row_count() > 0) are = 1;
				cache_delete(ab);
				if(are == 0)
				{
					PlayerInfo[playerid][Raport1]++;
					Update(playerid, Raport1x);
					mysql_format(SQL, varxx, sizeof(varxx), "INSERT INTO `antifraudaraport` (`pid1`,`pid2`,`time`) VALUES ('%d','%d','%d')", PlayerInfo[playerid][pSQLID], PlayerInfo[id][pSQLID], (gettime() + 900));
					mysql_tquery(SQL,varxx,"","");
				}
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player don't have enough money.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player have more than 95 hp.");
	}
	else
	{
		if(HealTimer[playerid] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to wait 30 seconds before using /heal again.");
		if(InHouse[playerid] > 0)
		{
			if(HouseInfo[InHouse[playerid]][hHel] == 1)
			{
				SetPlayerHealthEx(playerid, 100.0);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(str, sizeof(str),"* %s ate some food.",sendername);
				ProxDetector(30.0, playerid, str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				HealTimer[playerid] = 30;
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This house don't have a food upgrade.");
		}
		if(PlayerInfo[playerid][pMember] != 0 && IsInHQ(playerid))
		{
			SetPlayerHealthEx(playerid, 100.0);
			SetPlayerHealthEx(playerid, 100.0);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(str, sizeof(str),"* %s ate some food.",sendername);
			ProxDetector(30.0, playerid, str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			HealTimer[playerid] = 30;
		}
	}
	return 1;
}
CMD:healme(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	if(PlayerInfo[playerid][pPaintBallG] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use this command in paintball arena.");
	SetPlayerHealthEx(playerid, 100.0);
	return 1;
}
CMD:block(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pPhone] == 1)
	{
		new id,string[128],string2[128],name[30];
		if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /block [name/playerid]");
		if(IsPlayerConnected(id))
		{
			PlayerInfo[playerid][pPhoneBlocked][id] = 1;
			GetPlayerName(id, name, sizeof(name));
			format(string, sizeof(string), "Userul %s a fost blocat. Nu te va putea contacta prin telefon pana la urmatorul relog.", name);
			format(string2, sizeof(string2), "User %s has been temporary blocked. He won't be able to call/sms you until you reconnect to the server.", name);
			SS(playerid, COLOR_DARKPINK, string, string2);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have an iPhone.");
	return 1;
}
CMD:unblock(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pPhone] == 1)
	{
		new id,string[128],string2[128],name[30];
		if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /unblock [name/playerid]");
		if(IsPlayerConnected(id))
		{
			if(PlayerInfo[playerid][pPhoneBlocked][id] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} That user is not blocked!");
			PlayerInfo[playerid][pPhoneBlocked][id] = 0;
			GetPlayerName(id, name, sizeof(name));
			format(string, sizeof(string), "Userul %s a fost deblocat.", name);
			format(string2, sizeof(string2), "User %s has been unblocked.", name);
			SS(playerid, COLOR_DARKPINK, string, string2);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have an iPhone.");
	return 1;
}
CMD:call(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new number,sendername[30],string[256],giveplayer[25];
	if(sscanf(params, "i",number)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /call [number]");
	if(PlayerInfo[playerid][pPnumber] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You dont't have a phone.");
	if(PhoneOnline[playerid] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Your phone is turned off.");
	if(PlayerInfo[playerid][pCredits] < 2) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough credits to call.");
	GetPlayerName(playerid, sendername, sizeof(sendername));
	if(number == 112)
	{
	    if(IsACop(playerid)) return SendClientMessage(playerid,COLOR_WHITE,"You are a cop.");
	    if(WantedReason[playerid] != 999)
	    {
	    	if(PlayerInfo[GetPlayerID(WantedName[playerid])][pJailTime] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is already in jail.");
	        new killerid = GetPlayerID(WantedName[playerid]);
			if(killerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
            if(PlayerInfo[killerid][pWantedLevel] >= 6) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player has got already maximum of wanted stars.");
			else WantedPoints[killerid] += 2;
            if(WantedPoints[killerid] > 13) WantedPoints[killerid] = 13;
			format(string,sizeof(string),"You reported %s for a crime.",GetName(killerid));
			SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
			if(WantedReason[playerid] != 49) SetPlayerCriminal(killerid,playerid, "first degree murder");
			else if(WantedReason[playerid] == 49) SetPlayerCriminal(killerid,playerid, "hit and run");
			ClearWanted(playerid);
			return 1;
	    }
		else
		{
			if(Mobile[playerid] == -1)
			{
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
				Mobile[playerid] = -2;
				SendClientMessage(playerid, COLOR_WHITE, "You've called Emergency services, please select the department you desire (i.e: LSPD, LSFMD).");
				if(PlayerInfo[playerid][pPhone] == 0) SetPlayerAttachedObject(playerid,9,330,6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				else if(PlayerInfo[playerid][pPhone] == 1) SetPlayerAttachedObject(playerid, 9, 18865, 6, 0.086043, 0.027719, 0.003817, 95.232246, 178.651031, 1.691840, 1.002077, 1.000000, 1.000000 ); // MobilePhone1 - phone1
			}
			return 1;
		}
	}
	if(number == PlayerInfo[playerid][pPnumber]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't call yourself.");
	if(Mobile[playerid] != -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are already on a call.");
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pPnumber] == number && number != 0)
			{
				new giveplayerid = i;
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if(PhoneOnline[giveplayerid] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} That player phone is offline.");
					if(PhoneOnlineCalls[giveplayerid] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} That player phone is offline for calls.");
					if(PlayerInfo[giveplayerid][pPhoneBlocked][playerid] == 1) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Playerul pe care incerci sa-l suni ti-a blocat numarul de telefon.", "(Error){FFFFFF} The player you are trying to call has blocked your number. You can't contact him/her.");
					if(Mobile[giveplayerid] == -1)
					{
						Mobile[playerid] = giveplayerid;
						format(string, sizeof(string), "* %s takes out their cellphone, and dials in a number.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
						PlayerPlaySound(giveplayerid, 20600, 0.0, 0.0, 0.0);
						format(string, sizeof(string), "%s is calling you. Use /p(ickup) to answer your phone.", sendername);
						SendClientMessage(giveplayerid, COLOR_YELLOW, string);
						GetPlayerName(giveplayerid,giveplayer,sizeof(giveplayer));
						if(PlayerInfo[playerid][pPhone] == 0)
							SetPlayerAttachedObject(playerid,9,330,6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
						else if(PlayerInfo[playerid][pPhone] == 1)
							SetPlayerAttachedObject( playerid, 9, 18865, 6, 0.086043, 0.027719, 0.003817, 95.232246, 178.651031, 1.691840, 1.002077, 1.000000, 1.000000 ); // MobilePhone1 - phone1
						if(PlayerInfo[giveplayerid][pPhone] == 0) format(string, sizeof(string), "* %s's cellphone starts to ring...", giveplayer);
						else if(PlayerInfo[giveplayerid][pPhone] == 1) format(string, sizeof(string), "* %s's iPhone starts to ring...", giveplayer);
						ProxDetector(20.0, giveplayerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						CellTime[playerid] = 1;
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
						return 1;
					}
				}
			}
		}
	}
	SendClientMessage(playerid, COLOR_GRAD2, "(cellphone) *busy tone*");
	return 1;
}
CMD:t(playerid, params[]) return cmd_sms(playerid, params);
CMD:sms(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new phonenumb,smstext[90],sendername[30],giveplayer[30],string[256],giveplayerid,string2[184];
    if(PlayerInfo[playerid][pMuted] == 1)
    {
		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
		else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
		SendClientMessage(playerid, COLOR_DARKPINK, string);
		return 1;
	}
	if(sscanf(params, "is[90]",phonenumb,smstext)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sms [number] [text]");
	if(PlayerInfo[playerid][pPnumber] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You dont't have a cellphone.");
	if(PhoneOnline[playerid] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Your phone turned is off.");
	if(PlayerInfo[playerid][pCredits] < 2) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have credits needed.");
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    giveplayerid = i;
				    if(PhoneOnline[giveplayerid] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player have his phone turned off.");
				    if(PlayerInfo[giveplayerid][pPhoneBlocked][playerid] == 1) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Playerul caruia incerci sa ii trimiti SMS ti-a blocat numarul de telefon.", "(Error){FFFFFF} The player you are trying to text has blocked your number. You can't contact him/her.");
				    GetPlayerName(playerid, sendername, sizeof(sendername));
					if(PlayerInfo[giveplayerid][pAdmin] < 1) format(string, sizeof(string), "SMS from %s (%d): %s", sendername, PlayerInfo[playerid][pPnumber], smstext);
					else format(string, sizeof(string), "SMS from %s (%d): %s", sendername, playerid, smstext);
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					format(string2, sizeof(string2), "SMS sent to %s (%d): %s", giveplayer, PlayerInfo[giveplayerid][pPnumber], smstext);
					SendClientMessage(giveplayerid,COLOR_YELLOW, string);
					SendClientMessage(playerid,COLOR_SMS, string2);
					new var100[300],resulttt[300],strr[300];
					format(strr, sizeof(strr),"[SMS] %s to %s: %s", sendername, giveplayer, smstext);
					mysql_real_escape_string(strr, resulttt);
					mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','sms')", PlayerInfo[playerid][pSQLID], resulttt);
					mysql_tquery(SQL,var100,"","");
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerPlaySound(giveplayerid, 1139, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pCredits] = PlayerInfo[playerid][pCredits] - 2;
					LastPlayer[i] = playerid;
					for(new adm = 0; adm<=MAX_PLAYERS;adm++)
 					{
 	    				if(IsPlayerConnected(adm))
						{
	    						if(PlayerInfo[adm][pAdmin] > 0 && BigEar[adm] == 1)
    	    				{
    	        				format(string, sizeof(string), "{63969C}SMS from %s (%d) to %s (%d): %s",sendername,playerid,giveplayer,giveplayerid,smstext);
								SendClientMessage(adm,  COLOR_WHITE, string);
	    					}
						}
  					}
				}
			}
		}
	}
	return 1;
}
CMD:reply(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pPhone] == 1)
	{
	    if(LastPlayer[playerid] != -1)
	    {
	        if(PlayerInfo[playerid][pCredits] >= 2)
	        {
	            new sendername[30],giveplayer[30],string[256],string2[256];
	            if(strlen(params) <= 0) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /reply [text]");
	    		if(PhoneOnline[LastPlayer[playerid]] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player have his phone turned off.");
	    		if(PlayerInfo[LastPlayer[playerid]][pPhoneBlocked][playerid] == 1) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Playerul caruia incerci sa ii trimiti SMS ti-a blocat numarul de telefon.", "(Error){FFFFFF} The player you are trying to text has blocked your number. You can't contact him/her.");
			    GetPlayerName(playerid, sendername, sizeof(sendername));
				if(PlayerInfo[LastPlayer[playerid]][pAdmin] < 1) format(string, sizeof(string), "SMS from %s (%d): %s", sendername, PlayerInfo[playerid][pPnumber], params);
				else format(string, sizeof(string), "SMS from %s (%d): %s", sendername, playerid, params);
				GetPlayerName(LastPlayer[playerid], giveplayer, sizeof(giveplayer));
				LastPlayer[LastPlayer[playerid]] = playerid;
				format(string2, sizeof(string2), "SMS sent to %s (%d): %s",giveplayer,PlayerInfo[LastPlayer[playerid]][pPnumber],params);
				SendClientMessage(LastPlayer[playerid],COLOR_YELLOW, string);
				SendClientMessage(playerid,COLOR_SMS, string2);
				new var100[300],resulttt[300],strr[300];
				format(strr, sizeof(strr),"[SMS] %s to %s: %s", sendername, giveplayer, params);
				mysql_real_escape_string(strr, resulttt);
				mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','sms')", PlayerInfo[playerid][pSQLID], resulttt);
				mysql_tquery(SQL,var100,"","");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				PlayerPlaySound(LastPlayer[playerid], 1139, 0.0, 0.0, 0.0);
				PlayerInfo[playerid][pCredits] = PlayerInfo[playerid][pCredits] - 2;
				for(new adm = 0; adm<=MAX_PLAYERS;adm++)
				{
					if(IsPlayerConnected(adm))
					{
						if(PlayerInfo[adm][pAdmin] > 0 && BigEar[adm] == 1)
  						{
    						format(string, sizeof(string), "{63969C}SMS from %s (%d) to %s (%d): %s",sendername,playerid,giveplayer,LastPlayer[playerid],params);
							SendClientMessage(adm,  COLOR_WHITE, string);
  						}
					}
				}
			}
			else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You don't have credits needed.");
		}
		else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Nobody has sent you an SMS!");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have an iPhone!");
	return 1;
}
CMD:speaker(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pPnumber] == 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You do not have a phone.");
	if(Mobile[playerid] == -1 || Mobile[playerid] == -2 || Mobile[playerid] == -3 || Mobile[playerid] == -4) return 1;
	if(PlayerInfo[playerid][pSpeaker] == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Speaker is on.");
		PlayerInfo[playerid][pSpeaker] = 1;
		return 1;
	}
	if(PlayerInfo[playerid][pSpeaker] == 1)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Speaker is off.");
		PlayerInfo[playerid][pSpeaker] = 0;
		return 1;
	}
	return 1;
}
CMD:turn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    new x_nr[50],sendername[30],string[128];
	if(sscanf(params, "s[50]",x_nr)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /turn [on/off/off calls]");
    if(strcmp(x_nr,"off calls",true) == 0)
 	{
		if(PlayerInfo[playerid][pPhone] != 1) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Doar cei ce au iPhone pot sa dezactiveze apelurile. Pentru a cumpara un iPhone foloseste /shop.", "(Error){FFFFFF} Only player with iPhone can deactivate their phone. If you want to buy an iPhone use /shop.");
        if(PhoneOnlineCalls[playerid] == 0)
        {
            PhoneOnlineCalls[playerid] = 1;
            GetPlayerName(playerid, sendername, sizeof(sendername));
            format(string, sizeof(string), "* %s turns his/her iPhone off for calls.", sendername);
    		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    		return 1;
		}
		else
		SendClientMessage(playerid, COLOR_WHITE, "Your phone is already turned off for calls.");
		return 1;
	}
	if(strcmp(x_nr,"off",true) == 0)
 	{
        if(PhoneOnline[playerid] == 0)
        {
            PhoneOnline[playerid] = 1;
            GetPlayerName(playerid, sendername, sizeof(sendername));
			if(PlayerInfo[playerid][pPhone] == 0)
			{
                format(string, sizeof(string), "* %s turns off his/her phone.", sendername);
			}
			else if(PlayerInfo[playerid][pPhone] == 1)
			{
                format(string, sizeof(string), "* %s turns off his/her iPhone.", sendername);
			}
    		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    		return 1;
		}
		else
		{
			if(PlayerInfo[playerid][pPhone] == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Your phone is already turned off.");
			}
			else if(PlayerInfo[playerid][pPhone] == 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Your iPhone is already turned off.");
			}
			return 1;
		}
	}
	if(strcmp(x_nr,"on",true) == 0)
 	{
        if(PhoneOnline[playerid] == 1)
        {
            PhoneOnline[playerid] = 0;
			PhoneOnlineCalls[playerid] = 0;
            GetPlayerName(playerid, sendername, sizeof(sendername));
			if(PlayerInfo[playerid][pPhone] == 0)
			{
				format(string, sizeof(string), "* %s turns on his/her phone.", sendername);
			}
			else if(PlayerInfo[playerid][pPhone] == 1)
			{
				format(string, sizeof(string), "* %s turns on his/her iPhone.", sendername);
			}
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
		else
		{
			if(PlayerInfo[playerid][pPhone] == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Your phone is already turned on.");
			}
			else if(PlayerInfo[playerid][pPhone] == 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Your iPhone is already turned on.");
			}
			return 1;
		}
	}
    return 1;
}
CMD:pickup(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(Mobile[playerid] != -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are already on a call...");
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(Mobile[i] == playerid)
			{
				Mobile[playerid] = i;
				SendClientMessage(i,COLOR_WHITE, "The other person has answered the call.");
                SendClientMessage(playerid,COLOR_WHITE, "You have answered your phone.");
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
				if(PlayerInfo[playerid][pPhone] == 0)
				{
					SetPlayerAttachedObject(playerid,9,330,6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				}
				else if(PlayerInfo[playerid][pPhone] == 1)
				{
					SetPlayerAttachedObject( playerid, 9, 18865, 6, 0.086043, 0.027719, 0.003817, 95.232246, 178.651031, 1.691840, 1.002077, 1.000000, 1.000000 ); // MobilePhone1 - phone1
				}
				return 1;
			}
		}
	}
	return 1;
}
CMD:p(playerid, params[]) return cmd_pickup(playerid, params);
CMD:hangup(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new caller = Mobile[playerid];
	if(Mobile[playerid] != -2 && Mobile[playerid] != -3 && Mobile[playerid] != -4)
	{
		if(IsPlayerConnected(caller))
		{
			if(caller != INVALID_PLAYER_ID)
			{
				if(caller != -1)
				{
					if(PhoneOnline[caller] == 0)
					{
						SendClientMessage(caller,COLOR_WHITE,"Your call has been terminated by the other party.");
					}
					CellTime[caller] = 0;
					CellTime[playerid] = 0;
					SendClientMessage(playerid,COLOR_WHITE,"You have terminated the current call.");
					Mobile[caller] = -1;
					SetPlayerSpecialAction(caller,SPECIAL_ACTION_STOPUSECELLPHONE);
					RemovePlayerAttachedObject(caller,9);
					RemovePlayerAttachedObject(playerid,9);
					if(PlayerInfo[playerid][pPet] != 0 && PlayerInfo[playerid][pPetStatus] != 0) AttachPet(playerid);
					if(PlayerInfo[caller][pPet] != 0 && PlayerInfo[caller][pPetStatus] != 0) AttachPet(caller);
					Mobile[playerid] = -1;
					CellTime[playerid] = 0;
					PlayerInfo[playerid][pSpeaker] = 0;
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
				}
			}
		}
	}
	else
	{
		SendClientMessage(playerid,COLOR_WHITE,"You have terminated the current call.");
		RemovePlayerAttachedObject(playerid, 9);
		if(PlayerInfo[playerid][pPet] != 0 && PlayerInfo[playerid][pPetStatus] != 0) AttachPet(playerid);
		Mobile[playerid] = -1;
		CellTime[playerid] = 0;
		PlayerInfo[playerid][pSpeaker] = 0;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	}
	return 1;
}
CMD:h(playerid, params[]) return cmd_hangup(playerid, params);
CMD:jailoff(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new id[30],escape[30],reason[128],reasone[128],string[128],sendername[30],minutes,cont,playeridd,qstr[256];
	GetPlayerName(playerid,sendername,sizeof(sendername));
	if(sscanf(params, "s[25]is[128]", id,minutes,reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /ajailo [name] [minutes] [reason]");
	mysql_real_escape_string(id, escape);
	mysql_real_escape_string(reason, reasone);
	cont = MySQLCheckAccount(escape);
	if(cont == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid player.");
	new timej = minutes*60;
	format(string, sizeof(string), "(Offline) %s was jailed by %s, reason: %s (%d minutes).", escape, sendername,reasone,minutes);
	ABroadCast(COLOR_LIGHTRED,string,1);
	format(qstr, sizeof(qstr), "SELECT `id` FROM users WHERE `name` = '%s'", escape);
	new Cache: ab = mysql_query(SQL,qstr);
	if(cache_get_row_count() > 0)
	{
		playeridd = cache_get_field_content_int(0, "id");
	}
	cache_delete(ab);
	new var100[256];
	mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','6','%s','%s','%s','%d')", playeridd,PlayerInfo[playerid][pSQLID],reasone,escape,sendername,gettime());
	mysql_tquery(SQL,var100,"","");
	format(string,sizeof(string),"Ai primit jail de la adminul %s pentru %d minute, motiv: %s.",sendername,minutes,reasone);
	mysql_format(SQL, var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')",playeridd,string);
	mysql_tquery(SQL,var100,"","");
	new str1[184];
	mysql_format(SQL,str1,sizeof(str1),"UPDATE users SET `Jailed`='2',`JailTime`='%d',`WantedLevel`='0' WHERE `name`='%s'",timej,escape);
	mysql_tquery(SQL,str1,"","");
	return 1;
}
CMD:jail(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new id,reason[128],reasone[128],string[128],giveplayer[30],sendername[30],minutes;
	if(sscanf(params, "uis[128]", id,minutes,reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /jail [name/playerid] [minutes] [reason]");
	{
		if(IsPlayerConnected(id))
		{
		    if(id != INVALID_PLAYER_ID)
		    {
		        if(PlayerInfo[id][pJailTime] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is already in jail.");
			    mysql_real_escape_string(reason, reasone);
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				ResetPlayerWeaponsEx(id);
				ResetPlayerWeapons(id);
				WantedPoints[id] = 0;
				PlayerInfo[id][pJailed] = 2;
				PlayerInfo[id][pJailTime] = minutes*60;
				SetPlayerInterior(id, 10);
                new rand;
				rand = random(sizeof(gRandomAJailSpawns));
				SetPlayerPosEx(id,gRandomAJailSpawns[rand][0],gRandomAJailSpawns[rand][1],gRandomAJailSpawns[rand][2]);
				format(string, sizeof(string), "AdmCmd: %s has been jailed by %s, reason: %s (%d minutes).", giveplayer, sendername,reasone,minutes);
				SendClientMessageToAll(COLOR_LIGHTRED, string);
				new var100[256];
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`,`actiontime`,`unixtime`) VALUES ('%d','%d','6','%s','%s','%s','%d','%d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],reasone,giveplayer,sendername,minutes,gettime());
				mysql_tquery(SQL,var100,"","");
				mysql_format(SQL,var100, sizeof(var100), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')", PlayerInfo[id][pSQLID], string);
				mysql_tquery(SQL,var100,"","");
	            Update(playerid,pJailedx);
				Update(playerid,pJailTimex);
				return 1;
			}
		}
		else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	return 1;
}
CMD:dm(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new id,string[128],giveplayer[30],sendername[30],query[256],dm=0,time,reason[30],unixtime;
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /dm [name/playerid]");
	if(IsPlayerConnected(id))
	{
	    if(id != INVALID_PLAYER_ID)
	    {
			if(PlayerInfo[id][pJailTime] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is already in jail.");
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			ResetPlayerWeaponsEx(id);
			ResetPlayerWeapons(id);
			WantedPoints[id] = 0;
			PlayerInfo[id][pJailed] = 2;
			Update(id, pJailedx);
			SetPlayerInterior(id, 10);
            new rand;
			rand = random(sizeof(gRandomAJailSpawns));
			SetPlayerPosEx(id,gRandomAJailSpawns[rand][0],gRandomAJailSpawns[rand][1],gRandomAJailSpawns[rand][2]);
			format(query, sizeof(query),"SELECT * FROM `punishlogs` WHERE `playerid`='%d' AND `actionid`='6'",PlayerInfo[id][pSQLID]);
			new Cache: resultt = mysql_query(SQL, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				unixtime = cache_get_field_content_int(i, "unixtime");
				cache_get_field_content(i, "reason", reason);
				if(strcmp(reason,"DM",true) == 0 && unixtime > gettime()-30*86400) dm++;
			}
			cache_delete(resultt);
			if(dm < 6)
			{
				time = dm*10 + 10;
				PlayerInfo[id][pGunLicSuspend] = dm + 1;
			}
			else
			{
				time = 60;
				PlayerInfo[id][pGunLicSuspend] = 6;
			}
			PlayerInfo[id][pGunLic] = 0;
			PlayerInfo[id][pGunLicT] = 0;
			PlayerInfo[id][pJailTime] = time*60;
			format(string,sizeof(string),"AdmCmd: %s has been jailed by %s, reason: DM (%d minutes).",giveplayer,sendername,time);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			mysql_format(SQL,query, sizeof(query), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')", PlayerInfo[id][pSQLID], string);
			mysql_tquery(SQL,query,"","");
			new var100[256];
			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`,`actiontime`,`unixtime`) VALUES ('%d','%d','6','DM','%s','%s','%d','%d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],time,gettime());
			mysql_tquery(SQL,var100,"","");
			Update(id, pJailTimex);
			Update(id, pGunLicSuspendx);
			return 1;
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	return 1;
}
CMD:dmp(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new id,string[128],giveplayer[30],sendername[30],time=10,query[300];
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /dmp [name/playerid]");
	if(IsPlayerConnected(id))
	{
	    if(id != INVALID_PLAYER_ID)
	    {
			if(PlayerInfo[id][pJailTime] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is already in jail.");
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			ResetPlayerWeaponsEx(id);
			ResetPlayerWeapons(id);
			WantedPoints[id] = 0;
			PlayerInfo[id][pJailed] = 2;
			Update(id, pJailedx);
			SetPlayerInterior(id, 10);
            new rand;
			rand = random(sizeof(gRandomAJailSpawns));
			SetPlayerPosEx(id,gRandomAJailSpawns[rand][0],gRandomAJailSpawns[rand][1],gRandomAJailSpawns[rand][2]);
			PlayerInfo[id][pJailTime] = time*60;
			format(string,sizeof(string),"AdmCmd: %s has been jailed by %s, reason: DM #2 (%d minutes).",giveplayer,sendername,time);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			mysql_format(SQL,query, sizeof(query), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')", PlayerInfo[id][pSQLID], string);
			mysql_tquery(SQL,query,"","");
			new var100[256];
			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`,`actiontime`,`unixtime`) VALUES ('%d','%d','6','DM #2','%s','%s','%d','%d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],time,gettime());
			mysql_tquery(SQL,var100,"","");
			Update(id, pJailTimex);
			return 1;
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	return 1;
}
CMD:lg(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new id,string[128],giveplayer[30],sendername[30],query[256],reason[30],time,unixtime,mute=0;
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /lg [name/playerid]");
	if(IsPlayerConnected(id))
	{
		if(id != INVALID_PLAYER_ID)
	    {
	    	GetPlayerName(id, giveplayer, sizeof(giveplayer));
	    	GetPlayerName(playerid, sendername, sizeof(sendername));
	    	format(query, sizeof(query),"SELECT * FROM `punishlogs` WHERE `playerid`='%d' AND `actionid`='7'",PlayerInfo[id][pSQLID]);
			new Cache: resultt = mysql_query(SQL, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				unixtime = cache_get_field_content_int(i, "unixtime");
				cache_get_field_content(i, "reason", reason);
				if(strfind(reason,"limbaj",true) != -1 && unixtime > gettime()-30*86400) { mute++; SendClientMessage(playerid, COLOR_WHITE, "Test"); }
			}
			cache_delete(resultt);
			time = mute*10 + 10;
			PlayerInfo[id][pMuted] = 1;
			PlayerInfo[id][pMuteTime] = time*60;
			format(string, sizeof(string), "* You were muted by Admin %s for %d minutes, reason: limbaj vulgar / offensive language.", sendername, time);
			SendClientMessage(id, COLOR_LIGHTRED, string);
	    	format(string, sizeof(string), "AdmCmd: %s has been muted by %s for %d minutes, reason: limbaj vulgar / offensive language.", giveplayer, sendername, time);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			mysql_format(SQL,query,sizeof(query),"UPDATE users SET `Muted`='1',`MuteTime`='%d' WHERE `name`='%s'", PlayerInfo[id][pMuteTime], PlayerInfo[id][pNormalName]);
			mysql_tquery(SQL,query,"","");
			new var100[256];
			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','7','%d','limbaj vulgar / offensive language','%s','%s','%d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],time,giveplayer,sendername,gettime());
			mysql_tquery(SQL,var100,"","");
	    }
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	return 1;
}
CMD:relase(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new id,string[128],giveplayer[30],sendername[30],reason[128],reasone[128];
	if(sscanf(params, "us[128]", id, reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /relase [name/playerid] [reason]");
	if(IsPlayerConnected(id))
	{
	    if(id != INVALID_PLAYER_ID)
	    {
			mysql_real_escape_string(reason, reasone);
		    GetPlayerName(id, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			ResetPlayerWeaponsEx(id);
			ResetPlayerWeapons(id);
			WantedPoints[id] = 0;
			PlayerInfo[id][pJailed] = 0;
			PlayerInfo[id][pJailTime] = 0;
			PlayerInfo[id][pWantedLevel] = 0;
			Update(id,pJailedx);
			Update(id,pJailTimex);
			Update(id,pWantedLevelx);
			SetPlayerInterior(id, 0);
			SetPlayerVirtualWorld(id, 0);
			SetPlayerPosEx(id, 1213.9047,-1747.8059,13.5947);
			format(string,sizeof(string),"(AdmCmd){FFFFFF} %s was released from jail by admin %s, reason: %s.",giveplayer,sendername,reason);
			ABroadCast(COLOR_RED2, string,1);
			SetPlayerSkin(id, PlayerInfo[id][pModel]);
			OnDuty[playerid] = 0;
			SetPlayerToTeamColor(playerid);
			ClearCrime(id);
			PlayerTextDrawHide(id, Jailtime[id]);
			new var100[256];
			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`,`actiontime`,`unixtime`) VALUES ('%d','%d','8','%s','%s','%s','0','%d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],reasone,giveplayer,sendername,gettime());
			mysql_tquery(SQL,var100,"","");
			return 1;
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	return 1;
}
CMD:resethelped(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
 	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new id,string[128],giveplayer[30],sendername[30];
		if(sscanf(params, "u", id)) return SendClientMessage(playerid,COLOR_GREY, "Syntax:{FFFFFF} /resethelped <Name/Playerid>");
		{
	    	if(IsPlayerConnected(id))
	    	{
	    		if(id != INVALID_PLAYER_ID)
	      		{
                    GetPlayerName(id, giveplayer, sizeof(giveplayer));
			    	GetPlayerName(playerid, sendername, sizeof(sendername));
		    		format(string, sizeof(string), "* You have reseted %s's helped players number.", giveplayer);
	     			SendClientMessage(playerid, COLOR_LIGHTRED, string);
			    	format(string, sizeof(string), "* Admin %s has reseted your helped player number.", sendername);
			    	SendClientMessage(id, COLOR_LIGHTRED, string);
       				PlayerInfo[id][pHelpedplayers] = 0;
					Update(id,pHelpedplayersx);
                }
			}
	    	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not connected.");
        }
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not admin 3+.");
	return 1;
}
CMD:aclear(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
 	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new id,string[128],giveplayer[30],sendername[30];
		if(sscanf(params, "u", id)) return SendClientMessage(playerid,COLOR_GREY, "Syntax:{FFFFFF} /aclear <Name/Playerid>");
		{
	    	if(IsPlayerConnected(id))
	    	{
	    		if(id != INVALID_PLAYER_ID)
	      		{
                    GetPlayerName(id, giveplayer, sizeof(giveplayer));
			    	GetPlayerName(playerid, sendername, sizeof(sendername));
		    		format(string, sizeof(string), "* You cleared the Records and Wanted Points of %s.", giveplayer);
	     			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			    	format(string, sizeof(string), "* Officer %s has cleared your Records and Wanted Points.", sendername);
			    	SendClientMessage(id, COLOR_LIGHTBLUE, string);
				    format(string, sizeof(string), "* %s has cleared %s's Records and Wanted Points.", sendername, giveplayer);
				    SendTeamMessage(20, COLOR_LIGHTBLUE, string);
                    SendTeamMessage(8, COLOR_LIGHTBLUE, string);
					SendTeamMessage(3, COLOR_LIGHTBLUE, string);
	     			SendTeamMessage(2, COLOR_LIGHTBLUE, string);
      				SendTeamMessage(1, COLOR_LIGHTBLUE, string);
      				SetPlayerToTeamColor(id);
			    	WantedPoints[id] = 0;
       				PlayerInfo[id][pWantedLevel] = 0;
				    SetPlayerWantedLevel(id, 0);
				    PlayerTextDrawHide(id, WantedText[id]);
			    	ClearCrime(id);
					Update(id,pWantedLevelx);
                }
			}
	    	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not connected.");
        }
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not admin 3+.");
	return 1;
}
CMD:clear(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
 	if(IsACop(playerid))
	{
		new tmpcar = GetPlayerVehicleID(playerid),fid = PlayerInfo[playerid][pMember];
		if(IsACopCar(tmpcar) || IsANgCar(tmpcar) || IsAFbiCar(tmpcar) || IsALVPDCar(tmpcar) || PlayerToPoint(50.0,playerid, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]))
		{
			new id,string[128],giveplayer[30],sendername[30];
			if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /clear [name/playerid]");
			{
		    	if(IsPlayerConnected(id))
		    	{
		    		if(id != INVALID_PLAYER_ID)
		      		{
                    	if(id == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You cannot clear yourself.");
				    	GetPlayerName(id, giveplayer, sizeof(giveplayer));
				    	GetPlayerName(playerid, sendername, sizeof(sendername));
				    	format(string, sizeof(string), "%s has cleared all your warrants!", sendername);
				    	SendClientMessage(id, COLOR_LIGHTRED, string);
					    format(string, sizeof(string), "Dispatch: %s has cleared all the warrants on %s.", sendername, giveplayer);
                        SendTeamMessage(8, COLOR_LIGHTBLUE, string);
						SendTeamMessage(3, COLOR_LIGHTBLUE, string);
		     			SendTeamMessage(2, COLOR_LIGHTBLUE, string);
          				SendTeamMessage(1, COLOR_LIGHTBLUE, string);
				    	WantedPoints[id] = 0;
	       				PlayerInfo[id][pWantedLevel] = 0;
					    SetPlayerWantedLevel(id, 0);
					    PlayerTextDrawHide(id, WantedText[id]);
					    SetPlayerToTeamColor(id);
				    	ClearCrime(id);
						Update(id,pWantedLevelx);
						foreach(new i : Player)
						{
							if(IsACop(i))
							{
								SetPlayerMarkerForPlayer( i, id, ( GetPlayerColor( id ) & 0xFFFFFF00 ) );
							}
						}
                    }
				}
		    	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	        }
 		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are to not in your HQ or a police vehicle.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a cop.");
	return 1;
}/*
CMD:givelicense(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pMember] == 12)
    {
        new x_nr[30],id,sendername[30],giveplayer[30],string[128];
		if(sscanf(params, "s[50]u",x_nr,id))
		{
		    SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /givelicense [license] [name/playerid]");
		    SendClientMessage(playerid, COLOR_WHITE, "Licenses: boat, gun, fly");
			return 1;
		}
		if(id == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't give a licence to yourself.");
		if(PlayerInfo[id][pLevel] < 3) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player does not have level 3.");
		if(strcmp(x_nr,"fly",true) == 0)
		{
			if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
					if(PlayerInfo[id][pFlyLicT] > 10) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player fly licence expire in more than 10 hours.");
			        GetPlayerName(playerid, sendername, sizeof(sendername));
			        GetPlayerName(id, giveplayer, sizeof(giveplayer));
		            format(string, sizeof(string), "I-ai dat lui %s licenta de fly.",giveplayer);
			        SendClientMessage(playerid, COLOR_DARKPINK, string);
			        format(string, sizeof(string), "%s ti-a dat licenta de fly.",sendername);
			        SendClientMessage(id, COLOR_DARKPINK, string);
			        format(string, sizeof(string), "(i) %s has given %s the fly licence.",sendername,giveplayer);
			        SendFamilyMessage(12, COLOR_MEMBER, string);
			        PlayerInfo[id][pFlyLic] = 1;
			        PlayerInfo[id][pFlyLicT] = 100;
					new str[256];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `FlyLic`='1',`FlyLicT`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
					PlayerInfo[playerid][Raport1]++;
					Update(playerid, Raport1x);
			        return 1;
				}
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
		}
		else if(strcmp(x_nr,"boat",true) == 0)
		{
			if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
					if(PlayerInfo[id][pBoatLicT] > 10) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player boat licence expire in more than 10 hours.");
			        GetPlayerName(playerid, sendername, sizeof(sendername));
			        GetPlayerName(id, giveplayer, sizeof(giveplayer));
		            format(string, sizeof(string), "I-ai dat lui %s licenta de boat.",giveplayer);
			        SendClientMessage(playerid, COLOR_DARKPINK, string);
			        format(string, sizeof(string), "%s ti-a dat licenta de boat.",sendername);
			        SendClientMessage(id, COLOR_DARKPINK, string);
			        format(string, sizeof(string), "(i) %s has given %s the boat licence.",sendername,giveplayer);
			        SendFamilyMessage(12, COLOR_MEMBER, string);
			        PlayerInfo[id][pBoatLic] = 1;
			        PlayerInfo[id][pBoatLicT] = 100;
					new str[256];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `BoatLic`='1',`BoatLicT`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
					PlayerInfo[playerid][Raport1]++;
					Update(playerid, Raport1x);
			        return 1;
				}
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
		}
		else if(strcmp(x_nr,"gun",true) == 0)
		{
			if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
					if(PlayerInfo[id][pGunLicT] > 10) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player gun licence expire in more than 10 hours.");
					if(PlayerInfo[id][pGunLicSuspend] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player have gun license suspended.");
					GetPlayerName(playerid, sendername, sizeof(sendername));
			        GetPlayerName(id, giveplayer, sizeof(giveplayer));
		            format(string, sizeof(string), "I-ai dat lui %s licenta de gun.",giveplayer);
			        SendClientMessage(playerid, COLOR_DARKPINK, string);
			        format(string, sizeof(string), "%s ti-a dat licenta de gun.",sendername);
			        SendClientMessage(id, COLOR_DARKPINK, string);
			        format(string, sizeof(string), "(i) %s has given %s the gun licence.",sendername,giveplayer);
			        SendFamilyMessage(12, COLOR_MEMBER, string);
			        PlayerInfo[id][pGunLic] = 1;
			        PlayerInfo[id][pGunLicT] = 100;
					new str[256];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `GunLic`='1',`GunLicT`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
					PlayerInfo[playerid][Raport1]++;
					Update(playerid, Raport1x);
			        return 1;
				}
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
		}
    }
    else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a school instructor.");
    return 1;
}
CMD:startlesson(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
    {
        new id,sendername[30],giveplayer[30],string[128];
		if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /startlesson [name/playerid]");
		{
			if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
					if(playerid == id) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use this command on yourself'.");
					if(PlayerInfo[id][pLevel] < 3) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player does not have level 3.");
				    GetPlayerName(playerid, sendername, sizeof(sendername));
			        GetPlayerName(id, giveplayer, sizeof(giveplayer));
			        format(string, sizeof(string), "* You've started %s's Lesson.",giveplayer);
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			        format(string, sizeof(string), "* Instructor %s has started your Lesson.",sendername);
			        SendClientMessage(id, COLOR_LIGHTBLUE, string);
			        format(string, sizeof(string), "* Instructor %s has started %s Lesson.",sendername,giveplayer);
			        SendFamilyMessage(12,COLOR_YELLOW,string);
			        TakingLesson[id] = 2;
			    }
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
        }
    }
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a school instructor.");
    return 1;
}
CMD:stoplesson(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
    {
        new id,sendername[30],giveplayer[30],string[128];
		if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /stoplesson [name/playerid]");
		{
			if(IsPlayerConnected(id))
			{
			    if(id != INVALID_PLAYER_ID)
			    {
					if(TakingLesson[id] != 2) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not taking a lesson.");
					if(playerid == id) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use this command on yourself.");
					if(PlayerInfo[id][pLevel] < 3) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player does not have level 3.");
			        GetPlayerName(playerid, sendername, sizeof(sendername));
			        GetPlayerName(id, giveplayer, sizeof(giveplayer));
			        format(string, sizeof(string), "* You've stopped %s's Lesson.",giveplayer);
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			        format(string, sizeof(string), "* Instructor %s has stopped your Lesson.",sendername);
			        SendClientMessage(id, COLOR_LIGHTBLUE, string);
			        TakingLesson[id] = 0;
			    }
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
        }
    }
    else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a school instructor.");
	return 1;
}*/
CMD:showlicenses(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new id;
    if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /showlicenses [name/playerid]");
    if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
    if(!ProxDetectorS(8.0, playerid, id)) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
	if(Spectate[id] != -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
	new text1[20],text2[20],text3[20],text4[20],string[128],sendername[30];
	if(PlayerInfo[playerid][pCarLic] == 1) text1 = "Passed";
	else text1 = "Not Passed";
	if(PlayerInfo[playerid][pFlyLic] == 1) text2 = "Passed"; 
	else text2 = "Not Passed"; 
	if(PlayerInfo[playerid][pBoatLic] == 1) text3 = "Passed";
	else text3 = "Not Passed";
    if(PlayerInfo[playerid][pGunLic] == 1) text4 = "Passed";
    else text4 = "Not Passed"; 
    GetPlayerName(playerid, sendername, sizeof(sendername));
    format(string, sizeof(string), "---- %s's licenses ----", sendername);
    SendClientMessage(id, COLOR_WHITE, string);
    if(PlayerInfo[playerid][pCarLicT] == 0)
    {
    	format(string, sizeof(string), "Drivers licence: %s", text1);
    	SendClientMessage(id, COLOR_WHITE, string);
    }
    else
    {
    	format(string, sizeof(string), "Drivers licence: %s (expires in %d hours)", text1,PlayerInfo[playerid][pCarLicT]);
    	SendClientMessage(id, COLOR_WHITE, string);
    }
    if(PlayerInfo[playerid][pFlyLicT] == 0)
    {
		format(string, sizeof(string), "Flying licence: %s", text2);
		SendClientMessage(id, COLOR_WHITE, string);
	}
	else
	{
		format(string, sizeof(string), "Flying licence: %s (expires in %d hours)", text2,PlayerInfo[playerid][pFlyLicT]);
		SendClientMessage(id, COLOR_WHITE, string);
	}
    if(PlayerInfo[playerid][pBoatLicT] == 0)
    {
		format(string, sizeof(string), "Boat licence: %s", text3);
		SendClientMessage(id, COLOR_WHITE, string);
	}
	else
	{
		format(string, sizeof(string), "Boat licence: %s (expires in %d hours)", text3,PlayerInfo[playerid][pBoatLicT]);
		SendClientMessage(id, COLOR_WHITE, string);
	}
	if(PlayerInfo[playerid][pGunLicT] == 0)
    {
		format(string, sizeof(string), "Weapon licence: %s", text4);
		SendClientMessage(id, COLOR_WHITE, string);
	}
	else
	{
		format(string, sizeof(string), "Weapon licence: %s (expires in %d hours)", text4,PlayerInfo[playerid][pGunLicT]);
		SendClientMessage(id, COLOR_WHITE, string);
	}
	SendClientMessage(id, COLOR_WHITE, "------------");
	new giveplayer[25];
	GetPlayerName(playerid,sendername,sizeof(sendername));
	GetPlayerName(id,giveplayer,sizeof(giveplayer));
	format(string, sizeof(string), "* %s has shown his/her Licenses to you.", sendername);
	SendClientMessage(id, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "* You have shown your Licenses to %s.", giveplayer);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    return 1;
}
CMD:alicenses(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid,COLOR_LIGHTGREEN3, AdminOnly);
	new id;
    if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /alicenses [name/playerid]");
    if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
    new text1[20],text2[20],text3[20],text4[20],string[128],giveplayer[30];
	if(PlayerInfo[id][pCarLic] == 1) text1 = "Passed";
	else text1 = "Not Passed";
	if(PlayerInfo[id][pFlyLic] == 1) text2 = "Passed"; 
	else text2 = "Not Passed"; 
	if(PlayerInfo[id][pBoatLic] == 1) text3 = "Passed";
	else text3 = "Not Passed";
    if(PlayerInfo[id][pGunLic] == 1)  text4 = "Passed";
    else text4 = "Not Passed"; 
    GetPlayerName(id, giveplayer, sizeof(giveplayer));
    format(string,sizeof(string),"---- %s's licenses ----", giveplayer);
    SendClientMessage(playerid, COLOR_WHITE, string);
    if(PlayerInfo[id][pCarLicT] == 0)
    {
    	if(PlayerInfo[id][pCarLicSuspend] == 0)
		{
			format(string, sizeof(string), "Drivers licence: %s", text1);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else if(PlayerInfo[id][pCarLicSuspend] > 0)
		{
			format(string, sizeof(string), "Drivers licence: Suspended (suspended for %d hours)", PlayerInfo[id][pCarLicSuspend]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
    }
    else
    {
    	format(string, sizeof(string), "Drivers licence: %s (expires in %d hours)", text1,PlayerInfo[id][pCarLicT]);
    	SendClientMessage(playerid, COLOR_WHITE, string);
    }
    if(PlayerInfo[id][pFlyLicT] == 0)
    {
		format(string, sizeof(string), "Flying licence: %s", text2);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else
	{
		format(string, sizeof(string), "Flying licence: %s (expires in %d hours)", text2,PlayerInfo[id][pFlyLicT]);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
    if(PlayerInfo[id][pBoatLicT] == 0)
    {
		format(string, sizeof(string), "Boat licence: %s", text3);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else
	{
		format(string, sizeof(string), "Boat licence: %s (expires in %d hours)", text3,PlayerInfo[id][pBoatLicT]);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	if(PlayerInfo[id][pGunLicT] == 0)
    {
		if(PlayerInfo[id][pGunLicSuspend] == 0)
		{
			format(string, sizeof(string), "Weapon licence: %s", text4);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else if(PlayerInfo[id][pGunLicSuspend] > 0)
		{
			format(string, sizeof(string), "Weapon licence: Suspended (suspended for %d hours)", PlayerInfo[id][pGunLicSuspend]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	else
	{
		format(string, sizeof(string), "Weapon licence: %s (expires in %d hours)", text4,PlayerInfo[id][pGunLicT]);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	SendClientMessage(playerid, COLOR_WHITE, "------------");
    return 1;
}
CMD:licences(playerid, params[]) return cmd_licenses(playerid, params);
CMD:alicences(playerid, params[]) return cmd_alicenses(playerid, params);
CMD:showlicences(playerid, params[]) return cmd_showlicenses(playerid, params);
CMD:licenses(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    new text1[20],text2[20],text3[20],text4[20],string[128],sendername[30];
	if(PlayerInfo[playerid][pCarLic] == 1) text1 = "Passed";
	else text1 = "Not Passed";
	if(PlayerInfo[playerid][pFlyLic] == 1) text2 = "Passed"; 
	else text2 = "Not Passed"; 
	if(PlayerInfo[playerid][pBoatLic] == 1) text3 = "Passed";
	else text3 = "Not Passed";
    if(PlayerInfo[playerid][pGunLic] == 1) text4 = "Passed";
    else text4 = "Not Passed"; 
    GetPlayerName(playerid, sendername, sizeof(sendername));
    format(string,sizeof(string),"---- %s's licenses ----", sendername);
    SendClientMessage(playerid, COLOR_WHITE, string);
    if(PlayerInfo[playerid][pCarLicT] == 0)
    {
		if(PlayerInfo[playerid][pCarLicSuspend] == 0)
		{
			format(string, sizeof(string), "Drivers licence: %s", text1);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else if(PlayerInfo[playerid][pCarLicSuspend] > 0)
		{
			format(string, sizeof(string), "Drivers licence: Suspended (suspended for %d hours)", PlayerInfo[playerid][pCarLicSuspend]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
    }
    else
    {
    	format(string, sizeof(string), "Drivers licence: %s (expiers in %d hours)", text1,PlayerInfo[playerid][pCarLicT]);
    	SendClientMessage(playerid, COLOR_WHITE, string);
    }
    if(PlayerInfo[playerid][pFlyLicT] == 0)
    {
		format(string, sizeof(string), "Flying licence: %s", text2);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else
	{
		format(string, sizeof(string), "Flying licence: %s (expires in %d hours)", text2,PlayerInfo[playerid][pFlyLicT]);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
    if(PlayerInfo[playerid][pBoatLicT] == 0)
    {
		format(string, sizeof(string), "Boat licence: %s", text3);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else
	{
		format(string, sizeof(string), "Boat licence: %s (expires in %d hours)", text3,PlayerInfo[playerid][pBoatLicT]);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	if(PlayerInfo[playerid][pGunLicT] == 0)
    {
		if(PlayerInfo[playerid][pGunLicSuspend] == 0)
		{
			format(string, sizeof(string), "Weapon licence: %s", text4);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else if(PlayerInfo[playerid][pGunLicSuspend] > 0)
		{
			format(string, sizeof(string), "Weapon licence: Suspended (suspended for %d hours)", PlayerInfo[playerid][pGunLicSuspend]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	else
	{
		format(string, sizeof(string), "Weapon licence: %s (expires in %d hours)", text4,PlayerInfo[playerid][pGunLicT]);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	SendClientMessage(playerid, COLOR_WHITE, "------------");
    return 1;
}
CMD:setfrequency(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string[256],password[20],password2[20],ownerid;
	if(PlayerInfo[playerid][pWTalkie] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a walkie talkie.");
	new freqss2;
    if(sscanf(params, "dS(q)[20]",freqss2,password)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /setfrequency [frequency] (0 to switch off).");
    if(freqss2 < 0 || freqss2 > 1000000) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Invalid frequency specified. Valid frequencies: 100 - 1000000.");
    if(freqss2 == 0)
    {
    	WTChannel[playerid] = 0;
    	mysql_format(SQL,string,sizeof(string),"UPDATE `users` SET `WTChannel` = '%d' WHERE `name` = '%s'",WTChannel[playerid],PlayerInfo[playerid][pNormalName]);
		mysql_tquery(SQL,string,"","");
    	SendClientMessage(playerid, COLOR_GREY, "You have switched off your walkie-talkie.");
    	return 1;
    }
    if(freqss2 < 100) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid walkie talkie frequency.");
    if(freqss2 >= 1000)
    {
	    format(string, sizeof(string), "You are now broadcasting at the frequency of #%d khz.",freqss2);
	    SendClientMessage(playerid, COLOR_WHITE, string);
		WTChannel[playerid] = freqss2;
		mysql_format(SQL,string,sizeof(string),"UPDATE `users` SET `WTChannel` = '%d' WHERE `name` = '%s'",WTChannel[playerid],PlayerInfo[playerid][pNormalName]);
		mysql_tquery(SQL,string,"","");
	}
	else
	{
		format(string, sizeof(string), "SELECT * FROM `frequencies` WHERE `freqid`='%d'", freqss2);
		new Cache: ab = mysql_query(SQL, string);
		if(cache_get_row_count() > 0)
		{
			cache_get_field_content(0, "password", password2);
			ownerid = cache_get_field_content_int(0, "ownerid");
		}
		else
		{
			cache_delete(ab);
			SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid frequency. This frequency can be bought from the /shop.");
			return 1;
		}
		cache_delete(ab);
		if(ownerid == PlayerInfo[playerid][pSQLID])
		{
			format(string, sizeof(string), "You are now broadcasting at the frequency of #%d khz.",freqss2);
		    SendClientMessage(playerid, COLOR_WHITE, string);
			WTChannel[playerid] = freqss2;
			mysql_format(SQL,string,sizeof(string),"UPDATE `users` SET `WTChannel` = '%d' WHERE `name` = '%s'",WTChannel[playerid],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,string,"","");
		}
		else
		{
			if(strcmp(password,password2,true) == 0)
			{
				format(string, sizeof(string), "You are now broadcasting at the frequency of #%d khz.",freqss2);
			    SendClientMessage(playerid, COLOR_WHITE, string);
				WTChannel[playerid] = freqss2;
				mysql_format(SQL,string,sizeof(string),"UPDATE `users` SET `WTChannel` = '%d' WHERE `name` = '%s'",WTChannel[playerid],PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,string,"","");
			}
			else return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Parola invalida! Aceasta este o frecventa privata. Ai nevoie de o parola pentru a o putea folosi.", "(Error){FFFFFF} Invalid password! This is a private frequency. You need the password to enter.");
		}
	}
	return 1;
}
CMD:setfreq(playerid, params[]) return cmd_setfrequency(playerid, params);
CMD:cmembers(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pClan] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in a clan.");
	new string[64],stringy[256],nr=0,stringyy[64];
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pClan] == PlayerInfo[playerid][pClan])
		{
			if(nr == 0) format(string, sizeof(string), "%s",PlayerInfo[i][pNormalName]);
			else if(nr <= 10) format(string, sizeof(string), ", %s",PlayerInfo[i][pNormalName]);
			else if(nr == 20) format(string, sizeof(string), "\n%s",PlayerInfo[i][pNormalName]);
			else if(nr <= 20) format(string, sizeof(string), ", %s",PlayerInfo[i][pNormalName]);
			nr++;
			strcat(stringy,string);
		}
	}
	format(stringyy,sizeof(stringyy),"Total - %d members",nr);
	ShowPlayerDialog(playerid, DIALOG_CMEMBERS, DIALOG_STYLE_MSGBOX, stringyy, stringy, "OK","");
	return 1;
}
CMD:freq(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new action[10], value[20],string[256];
	if(sscanf(params, "s[10]S[20]", action, value))
	{
		SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /freq [action] [value]");
		SendClientMessage(playerid, COLOR_WHITE, "Actions: password, members, list");
		return 1;
	}
	if(strcmp(action,"list",true) == 0)
	{
		new freqid, password[50];
		SendClientMessage(playerid, COLOR_WHITE, "Frequencies owned by you:");
		format(string, sizeof(string), "SELECT * FROM `frequencies` WHERE `ownerid`='%d'", PlayerInfo[playerid][pSQLID]);
		new Cache: test = mysql_query(SQL, string);
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
			freqid = cache_get_field_content_int(i, "freqid");
			cache_get_field_content(i, "password", password);
			format(string, sizeof(string), "Freq %d - pass: %s", freqid, password);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		cache_delete(test);
	}
	else if(strcmp(action,"members",true) == 0)
	{
		if(WTChannel[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be on the frequency that you want to manage.");
		new stringy[256],nr=0,stringyy[64];
		foreach(new i : Player)
		{
			if(WTChannel[i] == WTChannel[playerid])
			{
				if(nr == 0) format(string, sizeof(string), "%s",PlayerInfo[i][pNormalName]);
				else if(nr <= 10) format(string, sizeof(string), ", %s",PlayerInfo[i][pNormalName]);
				else if(nr == 20) format(string, sizeof(string), "\n%s",PlayerInfo[i][pNormalName]);
				else if(nr <= 20) format(string, sizeof(string), ", %s",PlayerInfo[i][pNormalName]);
				nr++;
				strcat(stringy,string);
			}
		}
		format(stringyy,sizeof(stringyy),"Total - %d members",nr);
		ShowPlayerDialog(playerid, DIALOG_CMEMBERS, DIALOG_STYLE_MSGBOX, stringyy, stringy, "OK","");
	}
	else if(strcmp(action,"password",true) == 0)
	{
		new xx, freqid;
		if(WTChannel[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be on the frequency that you want to manage.");
		format(string, sizeof(string), "SELECT * FROM `frequencies` WHERE `ownerid`='%d'", PlayerInfo[playerid][pSQLID]);
		new Cache: test = mysql_query(SQL, string);
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
			freqid = cache_get_field_content_int(i, "freqid");
			if(WTChannel[playerid] == freqid)
			{
				xx = 1;
				break;
			}
		}
		cache_delete(test);
		if(xx == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be on your own frequency to use this command.");
		mysql_format(SQL, string, sizeof(string), "UPDATE `frequencies` SET `password`='%s' WHERE `freqid`='%d'", value, WTChannel[playerid]);
		mysql_tquery(SQL, string, "", "");
		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Parola frecventei a fost schimbata in %s", value);
		else format(string, sizeof(string), "Frequency password changed to %s", value);
		SendClientMessage(playerid, COLOR_WHITE, string);
		SS(playerid, COLOR_WHITE, "Toti playerii au fost dati afara de pe frecventa ta deoarece ownerul frecventei a schimbat parola.", "Everyone got kicked from the frequency.");
		foreach(new i : Player)
		{
			if(WTChannel[i] == freqid)
			{
				WTChannel[i] = 0;
				SS(playerid, COLOR_WHITE, "Ai fost dat afara de pe frecventa deoarece ownerul frecventei a schimbat parola.", "You were kicked from the frequency because the owner of the frequency changed the password.");
			}
		}
	}
	return 1;
}
CMD:wt(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pWTalkie] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a walkie talkie.");
	new msg[128],sendername[25],string[256];
    if(PlayerInfo[playerid][pMuted] == 1)
    {
		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
		else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
		SendClientMessage(playerid, COLOR_DARKPINK, string);
		return 1;
	}
	if(sscanf(params, "s[128]", msg)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /wt [message]");
	if(WTChannel[playerid] == 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You need to set a broadcast frequency first (using /setfrequency).");
	GetPlayerName(playerid,sendername,sizeof(sendername));
	foreach(new i : Player)
	{
	    if(WTChannel[i] == WTChannel[playerid])
	    {
			format(string, sizeof(string), "[WT %d] %s: %s",WTChannel[playerid],sendername, msg);
			SendClientMessage(i, COLOR_SMS, string);
			format(string ,sizeof(string),"(radio) ''%s''", params);
			SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
	    }
	}
	new var100[300],resulttt[300],strr[300];
	format(strr, sizeof(strr),"[WT %d] %s: %s", WTChannel[playerid], sendername, msg);
	mysql_real_escape_string(strr, resulttt);
	mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','wt')", PlayerInfo[playerid][pSQLID], resulttt);
	mysql_tquery(SQL,var100,"","");
	return 1;
}
CMD:arrest(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new tmpcar = GetPlayerVehicleID(playerid);
	if(IsACop(playerid))
	{
        if(OnDuty[playerid] != 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not on duty.");
		new id,sendername[30],giveplayer[30],string[186];
		if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /arrest [name/playerid]");
		new tmpcar2 = GetPlayerVehicleID(id);
		if(IsPlayerConnected(id))
		{
			if(GetDistanceBetweenPlayers(playerid,id) < 5)
			{
				if( GetPlayerState(playerid) == PLAYER_STATE_DRIVER && Copcar2(tmpcar) && tmpcar == tmpcar2 && PlayerToPoint(10.0, playerid, 1526.2357,-1678.0305,5.8906) || PlayerToPoint(6.0, playerid, 268.9264,81.9687,1001.0391) || PlayerToPoint(4.0, playerid, 2282.1289,2425.7620,3.4692) )
				{
					GetPlayerName(id, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					if(PlayerInfo[id][pWantedLevel] < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player don't have wanted.");
					PlayerInfo[playerid][Raport2]++;
					Update(playerid, Raport2x);
					if(PlayerInfo[playerid][pQuest2] == 2)
					{
						if(PlayerInfo[playerid][pQuestNeed2] > PlayerInfo[playerid][pQuestProgress2])
						{
							PlayerInfo[playerid][pQuestProgress2]++;
							Update(playerid, pQuestProgress2x);
							if(PlayerInfo[playerid][pQuestProgress2] >= PlayerInfo[playerid][pQuestNeed2])
							{
								FinishQuest2(playerid, 2);
							}
							else
							{
								new str[128];
								if(PlayerInfo[playerid][pLanguage] == 1)
								{
									format(str, sizeof(str),"Quest [Arrest %d suspects] progress: %d/%d",PlayerInfo[playerid][pQuestNeed2],PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
									SendClientMessage(playerid, COLOR_YELLOW, str);
								}
								else
								{
									format(str, sizeof(str),"Progres pentru misiunea [Aresteaza %d suspecti]: %d/%d",PlayerInfo[playerid][pQuestNeed2],PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
									SendClientMessage(playerid, COLOR_YELLOW, str);
								}
							}
						}
					}
					if(PlayerInfo[id][pWantedLevel] >= 1)
					{
						new fine = PlayerInfo[id][pWantedLevel] * 100, time;
						if(SvarInfo[1][svValue] == 0) time = PlayerInfo[id][pWantedLevel] * 150;
						else time = PlayerInfo[id][pWantedLevel] * 75;
						GivePlayerCash(id, -fine);
						new str23[256],idfac;
						idfac = PlayerInfo[playerid][pMember];
                        DynamicFactions[idfac][fBank] += fine;
						mysql_format(SQL,str23,sizeof(str23),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'", DynamicFactions[idfac][fBank], idfac);
						mysql_tquery(SQL,str23,"","");
						ResetPlayerWeaponsEx(id);
						ResetPlayerWeapons(id);
						PlayerInfo[id][pJailTime] = time;
						SetPlayerWantedLevel(id, 0);
						PlayerTextDrawHide(id, WantedText[id]);
						SetPlayerInterior(id, 6);
		                new rand;
						rand = random(sizeof(gRandomJailSpawns));
						SetPlayerPosEx(id,gRandomJailSpawns[rand][0],gRandomJailSpawns[rand][1],gRandomJailSpawns[rand][2]);
						format(string, sizeof(string), "You have been arrested by %s for %d seconds, and issued a fine of $%d.", sendername, time, fine);
						SendClientMessage(id, COLOR_LIGHTBLUE, string);
						PlayerInfo[id][pJailed] = 1;
						PlayerInfo[id][pWantedLevel] = 0;
						WantedPoints[id] = 0;
						arrestcop[id] = playerid;
						if(CP[id] == 50)
						{
							DisablePlayerCheckpoint(id);
							CP[id] = 0;
						}
                        Update(id,pJailedx);
                        Update(id,pJailTimex);
						Update(id,pWantedLevelx);
						if(PlayerCuffed2[id] == 1)
						{
						    PlayerCuffed2[id] = 0;
					    	SetPlayerSpecialAction(id,SPECIAL_ACTION_NONE);
					    	RemovePlayerAttachedObject(id,9);
					    	if(PlayerInfo[id][pPet] != 0 && PlayerInfo[id][pPetStatus] != 0) AttachPet(id);
					    	TogglePlayerControllable(id, 1);
						}
						if(IsPlayerInRangeOfPoint(playerid, 4,2282.1289,2425.7620,3.4692))
						{
						    SetPlayerVirtualWorld(id, 3);
						    PlayerInfo[id][pVirtualPD] = 3;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,1526.2357,-1678.0305,5.8906))
						{
						    SetPlayerVirtualWorld(id, 0);
						    PlayerInfo[id][pVirtualPD] = 0;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,268.0995,82.1610,1001.0391) && GetPlayerVirtualWorld(playerid) == 3)
						{
						    SetPlayerVirtualWorld(id, 3);
						    PlayerInfo[id][pVirtualPD] = 3;
						    Update(id, pVirtualPDx);
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4,268.0995,82.1610,1001.0391) && GetPlayerVirtualWorld(playerid) == 0)
						{
						    SetPlayerVirtualWorld(id, 0);
						    PlayerInfo[id][pVirtualPD] = 0;
						    Update(id, pVirtualPDx);
						}
						format(string, sizeof(string), "%s arrested suspect %s, issuing a fine of $%d with a sentence of %d seconds.", sendername, giveplayer, fine, time);
						foreach(new i : Player) if(togarrests[i] == 0) SendClientMessage(i, COLOR_LIGHTRED, string);
						TogglePlayerControllable(id, 0);
						SetTimerEx("UnFreezeStation", 1000, false, "i", id);
						return 1;
					}
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not near the jail.");
			}
			else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
		}
		else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a cop.");
	return 1;
}
CMD:spawncar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new model,sendername[25],string[256];
		if(sscanf(params, "i", model)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /spawncar [model]");
		if(model < 400 || model > 611) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid car model.");
    	new Float:X,Float:Y,Float:Z;
		GetPlayerPos(playerid, X,Y,Z);
     	new carid = CreateVehicle(model, X,Y,Z, 0.0,  -1, -1, -1);
		Carspawn[carid] = carid;
		vehRadio[carid] = 0;
		SetVehicleNumberPlate(carid, "ADMIN");
       	GetPlayerName(playerid, sendername, sizeof(sendername));
       	new vehicles = GetVehicleModel(carid) - 400;
    	format(string, sizeof(string), "(AdmCmd){FFFFFF} %s has spawned a %s.",sendername,aVehicleNames[vehicles]);
    	ABroadCast(COLOR_RED2, string, 1);
    	Adminlog(PlayerInfo[playerid][pSQLID], string, "spawncar");
		LinkVehicleToInterior(carid, GetPlayerInterior(playerid));
		SetVehicleVirtualWorld(carid, GetPlayerVirtualWorld(playerid));
		PutPlayerInVehicle(playerid, carid, 0);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:destroycar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid,COLOR_LIGHTGREEN3, AdminOnly);
	new vid,string[128],sendername[30];
	if(sscanf(params, "i", vid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /destroycar [vid]");
	DestroyVehicle(vid);
	Carspawn[vid] = 0;
	GetPlayerName(playerid, sendername, sizeof(sendername));
	format(string, sizeof(string), "(AdmCmd){FFFFFF} %s has destroyed car %d.",sendername,vid);
	ABroadCast(COLOR_RED2, string, 1);
	Adminlog(PlayerInfo[playerid][pSQLID], string, "destroycar");
	return 1;
}
CMD:vcreate(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new id,model,string[128],giveplayer[30],total;
		if(sscanf(params, "ui", id, model)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /vcreate [playerid] [model]");
		if(model < 400 || model > 611) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid car ID! (400-611)");
		if(IsPlayerConnected(id))
		{
			if(id != INVALID_PLAYER_ID)
			{
				for(new v; v < MAX_PERSONAL_VEHICLES; v++)
				{
					if(PlayerInfo[id][pCar][v] != -1) total++;
				}
				if(total+1 > PlayerInfo[id][pCarSlots]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player have all vehicles slots full.");
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				CreateVEH[playerid] = model;
				CreateVEHID[playerid] = id;
				format(string, sizeof(string), "Esti sigur ca vrei sa-i dai lui %s masina %s?\n\nAbuzul de aceasta comanda poate duce la scoaterea ta din staff!", giveplayer, aVehicleNames[model - 400]);
				ShowPlayerDialog(playerid, DIALOG_VCREATE, DIALOG_STYLE_MSGBOX, "Personal Vehicle Create", string, "Da", "Nu");
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:savevehicle(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be in a vehicle to save it.");
		ShowPlayerDialog(playerid,DIALOG_SAVEVEHICLE,DIALOG_STYLE_MSGBOX, "Save vehicle", "Esti sigur ca vrei sa salvezi aceasta masina?", "Da","Nu");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:deletevehicle(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be in a vehicle to delete it.");
		ShowPlayerDialog(playerid,DIALOG_DELETEVEHICLE,DIALOG_STYLE_MSGBOX, "Delete vehicle", "Esti sigur ca vrei sa stergi aceasta masina?", "Da","Nu");
	}
	return 1;
}
CMD:vcolor(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		new color1, color2, str[256], carid = GetPlayerVehicleID(playerid);
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be in a vehicle to change his color.");
		if(sscanf(params, "dd", color1, color2)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /vcolor [color1] [color2]");
		if(color1 < -1 || color1 > 255) return 1;
		if(color2 < -1 || color2 > 255) return 1;
		for(new x; x < MAX_VEHICLES; x++)
		{
			if(VehicleInfo[x][vehCarID] == carid)
			{
				VehicleInfo[x][vehColor1] = color1;
				VehicleInfo[x][vehColor2] = color2;
				mysql_format(SQL,str,sizeof(str),"UPDATE vehicles SET `Color1`='%d',`Color2`='%d' WHERE `ID`='%d'",VehicleInfo[x][vehColor1],VehicleInfo[x][vehColor2],VehicleInfo[x][vehCarIDD]);
				mysql_tquery(SQL,str,"","");
				ChangeVehicleColor(VehicleInfo[x][vehCarID], VehicleInfo[x][vehColor1], VehicleInfo[x][vehColor2]);
				SendClientMessage(playerid, COLOR_YELLOW, "Vehicle color changed.");
				return 1;
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:vmove(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be in a vehicle to move it.");
		new str[256];
		for(new x = 0; x < MAX_VEHICLES; x++)
		{
			if(VehicleInfo[x][vehCarID] == GetPlayerVehicleID(playerid))
			{
				GetVehiclePos(VehicleInfo[x][vehCarID], VehicleInfo[x][vehPosX], VehicleInfo[x][vehPosY], VehicleInfo[x][vehPosZ]);
				GetVehicleZAngle(VehicleInfo[x][vehCarID], VehicleInfo[x][vehRotation]);
				mysql_format(SQL,str,sizeof(str),"UPDATE vehicles SET `PosX`='%f',`PosY`='%f',`PosZ`='%f',`Rotation`='%f' WHERE `ID`='%d'",VehicleInfo[x][vehPosX],VehicleInfo[x][vehPosY],VehicleInfo[x][vehPosZ],VehicleInfo[x][vehRotation],VehicleInfo[x][vehCarIDD]);
				mysql_tquery(SQL,str,"","");
				SendClientMessage(playerid, COLOR_YELLOW, "Vehicle position changed.");
				return 1;
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:vmodel(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be in a vehicle to change model.");
		new str[256],model;
		if(sscanf(params, "d", model)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /vmodel [model]");
		if(model < 400 || model > 611) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Model must be between 400 and 611.");
		for(new x = 0; x < MAX_VEHICLES; x++)
		{
			if(VehicleInfo[x][vehCarID] == GetPlayerVehicleID(playerid))
			{
				VehicleInfo[x][vehModel] = model;
				DestroyVehicle(VehicleInfo[x][vehCarID]);
				VehicleInfo[x][vehCarID] = CreateVehicle(VehicleInfo[x][vehModel], VehicleInfo[x][vehPosX], VehicleInfo[x][vehPosY], VehicleInfo[x][vehPosZ], VehicleInfo[x][vehRotation], VehicleInfo[x][vehColor1], VehicleInfo[x][vehColor2], 1800);
				PutPlayerInVehicle(playerid, VehicleInfo[x][vehCarID], 0);
				vehRadio[VehicleInfo[x][vehCarID]] = 0;
				mysql_format(SQL,str,sizeof(str),"UPDATE vehicles SET `Model`='%d' WHERE `ID`='%d'", VehicleInfo[x][vehModel],VehicleInfo[x][vehCarIDD]);
				mysql_tquery(SQL,str,"","");
				format(str, sizeof(str), "You have successfully changed vehicle %d to a %s.", x, aVehicleNames[VehicleInfo[x][vehModel] - 400]);
				SendClientMessage(playerid, COLOR_YELLOW, str);
				return 1;
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:vgroup(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be in a vehicle to change group.");
		new str[256],group;
		if(sscanf(params, "d", group)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /vgroup [faction id]");
		for(new x = 0; x < MAX_VEHICLES; x++)
		{
			if(VehicleInfo[x][vehCarID] == GetPlayerVehicleID(playerid))
			{
				VehicleInfo[x][vehGroup] = group;
				VehicleInfo[x][vehRank] = 1;
				mysql_format(SQL,str,sizeof(str),"UPDATE vehicles SET `Group`='%d',`Rank`='1' WHERE `ID`='%d'",VehicleInfo[x][vehGroup],VehicleInfo[x][vehCarIDD]);
				mysql_tquery(SQL,str,"","");
				SendClientMessage(playerid, COLOR_YELLOW, "Vehicle group changed.");
				return 1;
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:vjob(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be in a vehicle to change group.");
		new str[256],group;
		if(sscanf(params, "d", group)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /vjob [job id]");
		for(new x = 0; x < MAX_VEHICLES; x++)
		{
			if(VehicleInfo[x][vehCarID] == GetPlayerVehicleID(playerid))
			{
				VehicleInfo[x][vehJob] = group;
				mysql_format(SQL,str,sizeof(str),"UPDATE vehicles SET `Job`='%d' WHERE `ID`='%d'",VehicleInfo[x][vehJob],VehicleInfo[x][vehCarIDD]);
				mysql_tquery(SQL,str,"","");
				SendClientMessage(playerid, COLOR_YELLOW, "Vehicle job changed.");
				return 1;
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:vrank(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be in a vehicle to change rank.");
		new str[256],group;
		if(sscanf(params, "d", group)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /vrank [rank]");
		if(group < 0 || group > 7) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Rank must be between 0 and 7.");
		for(new x = 0; x < MAX_VEHICLES; x++)
		{
			if(VehicleInfo[x][vehCarID] == GetPlayerVehicleID(playerid))
			{
				VehicleInfo[x][vehRank] = group;
				mysql_format(SQL,str,sizeof(str),"UPDATE vehicles SET `Rank`='%d' WHERE `ID`='%d'",VehicleInfo[x][vehRank],VehicleInfo[x][vehCarIDD]);
				mysql_tquery(SQL,str,"","");
				SendClientMessage(playerid, COLOR_YELLOW, "Vehicle rank changed.");
				return 1;
			}
		}
	}
	else if(PlayerInfo[playerid][pLeader] >= 1)
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be in a vehicle to change rank.");
		new str[256],group;
		if(sscanf(params, "d", group)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /vrank [rank]");
		if(group < 0 || group > 7) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Rank must be between 0 and 7.");
		for(new x = 0; x < MAX_VEHICLES; x++)
		{
			if(VehicleInfo[x][vehCarID] == GetPlayerVehicleID(playerid))
			{
				if(VehicleInfo[x][vehGroup] != PlayerInfo[playerid][pLeader]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can use this command only on your faction vehicles.");
				VehicleInfo[x][vehRank] = group;
				mysql_format(SQL,str,sizeof(str),"UPDATE vehicles SET `Rank`='%d' WHERE `ID`='%d'",VehicleInfo[x][vehRank],VehicleInfo[x][vehCarIDD]);
				mysql_tquery(SQL,str,"","");
				SendClientMessage(playerid, COLOR_YELLOW, "Vehicle rank changed.");
				return 1;
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:destroycarspawn(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid,COLOR_LIGHTGREEN3, AdminOnly);
	if(Destroycar == 0)
	{
	    Destroycar = 1;
	    SendClientMessage(playerid,COLOR_WHITE,"Destroy car spawn is enable.");
	}
	else if(Destroycar == 1)
	{
	    Destroycar = 0;
	    SendClientMessage(playerid,COLOR_WHITE,"Destroy car spawn is disable.");
	}
	return 1;
}

CMD:removespawncarid(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
	    new id,string[128],sendername[30];
	    if(sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /removespawncarid [car id]");
		if(Carspawn[id] != 0)
		{
		    DestroyVehicle(id);
			Carspawn[id] = 0;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string,sizeof(string),"(AdmCmd){FFFFFF} Admin %s despawned vehicle %d.",sendername,id);
			ABroadCast(COLOR_RED2,string,1);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This is not a spawned car.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:removeallspawncar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new string[128],sendername[30];
		for(new i = 1; i < MAX_VEHICLES; i++)
		{
			if(Carspawn[i] != 0)
			{
				DestroyVehicle(Carspawn[i]);
				Carspawn[i] = 0;
			}
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string,sizeof(string),"(AdmCmd){FFFFFF} Admin %s despawned all vehicles.",sendername);
		ABroadCast(COLOR_RED2,string,1);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:checkspawncar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new string[64];
		for(new i = 1; i < MAX_VEHICLES; i++)
		{
			if(Carspawn[i] != 0)
			{
			    format(string,sizeof(string),"Car ID: %d",Carspawn[i]);
				SendClientMessage(playerid,COLOR_WHITE,string);
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:rob(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need level 3 to do this.");
	if(PlayerInfo[playerid][pWantedLevel] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't rob a business when you have wanted.");
	if(CP[playerid] >= 1 || IsATruck(GetPlayerVehicleID(playerid)) || CheckBus[playerid] >= 1 || GotoMats[playerid] >= 1 || CarJacker[playerid] >= 1 || UsedFind[playerid] != 0 || BeeCar[playerid] != 0 || PlayerInfo[playerid][pJobVehicle] != 0 || InMinerJob[playerid] != 0 || InStrawberryJob[playerid] != 0)
		return ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel checkpoint", "You are sure to cancel the current checkpoint?", "Yes", "No");
	if(PlayerInfo[playerid][pRob] >= 10 && PlayerInfo[playerid][pPremiumAccount] == 0 || PlayerInfo[playerid][pRob] >= 8 && PlayerInfo[playerid][pPremiumAccount] > 0)
    {
		if(IsACop(playerid)) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You are a cop.");
		if(InBussines[playerid] != -1)
		{
			DisablePlayerCheckpoint(playerid);
			SendClientMessage(playerid, COLOR_ROB, "Robbing the business...");
			SendClientMessage(playerid, COLOR_ROB, "Please wait 10 seconds...");
			RobTimer[playerid] = SetTimerEx("RobFunc", 10000, 0, "i", playerid);
			BusinessRob[playerid] = 3;
			if(PlayerInfo[playerid][pPremiumAccount] == 0)
			{
				PlayerInfo[playerid][pRob] -= 10;
			}
			else if(PlayerInfo[playerid][pPremiumAccount] > 0)
			{
				PlayerInfo[playerid][pRob] -= 8;
			}
			SetPlayerWantedLevel(playerid, 6);
			PlayerTextDrawShow(playerid, WantedText[playerid]);
			Update(playerid,pRobx);
			new str1[256];
 			if(PlayerInfo[playerid][pLanguage] == 2) format(str1,sizeof(str1),"WANTED SCADE IN: ~r~%d MINUTE",wantedlost[playerid]/60+1);
			else format(str1,sizeof(str1),"WANTED DECREASES IN: ~r~%d MINUTES",wantedlost[playerid]/60+1);
			PlayerTextDrawSetString(playerid, WantedText[playerid], str1);
			WantedPoints[playerid] = 12;
			SetPlayerCriminal(playerid,-1, "armed robbery");
			if(PlayerInfo[playerid][pQuest1] == 4 && PlayerInfo[playerid][pQuestProgress1] == 0)
			{
				PlayerInfo[playerid][pQuestProgress1] = 1;
				Update(playerid, pQuestProgress1x);
				FinishQuest1(playerid, 4);
			}
			Update(playerid,pRobx);
			Update(playerid,pWantedLevelx);
			if(UsedFind[playerid] == 1)
			{
				UsedFind[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				foreach(new i : Player)
				{
					if(IsACop(playerid))
					{
						if(caser[playerid] == i)
						{
							cased[i] --;
							caser[playerid] = 1001;
						}
					}
				}
				PlayerTextDrawHide(playerid, FindTXD[playerid][0]);
				PlayerTextDrawHide(playerid, FindTXD[playerid][1]);
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be in a business to start rob.");
	}
	else
	{
		if(PlayerInfo[playerid][pPremiumAccount] == 0) SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have 10 rob points.");
		else if(PlayerInfo[playerid][pPremiumAccount] > 0) SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have 8 rob points.");
	}
	return 1;
}
CMD:tod(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new hour,string[128],sendername[25];
	if(sscanf(params, "i", hour)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /tod [time]");
    SetWorldTime(hour);
    GetPlayerName(playerid, sendername, sizeof(sendername));
	format(string, sizeof(string), "(AdmCmd){FFFFFF} %s[%d] has set the time to %d.", sendername, playerid, hour);
	ABroadCast(COLOR_RED2,string, 1);
	return 1;
}
CMD:setweather(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new weather,string[128],sendername[25];
	GetPlayerName(playerid,sendername,sizeof(sendername));
	if(sscanf(params, "i",weather)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /setweather [weather id]");
	if(weather < 0 || weather > 45) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Weather ID can't be below 0 or above 45.");
	SetWeather(weather);
	format(string, sizeof(string), "(AdmCmd){FFFFFF} %s[%d] used the command /setweather %d", sendername, playerid, weather);
	ABroadCast(COLOR_RED2,string, 1);
	return 1;
}
CMD:down(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	{
		new id,size,string[128];
		if(sscanf(params, "ui",id,size)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /down [name/playerid] [size]");
    	new Float:slx, Float:sly, Float:slz;
	    if(IsPlayerConnected(id))
	    {
			GetPlayerPos(id, slx, sly, slz);
			SetPlayerPosEx(id, slx, sly, slz-size);
			format(string, sizeof(string), "(AdmCmd){FFFFFF} %s[%d] used the command /down on %s.", GetName(playerid), playerid, GetName(id));
			ABroadCast(COLOR_RED2,string, 1);
			Adminlog(PlayerInfo[playerid][pSQLID], string, "down");
		}
    	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	return 1;
}
CMD:slap(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
	{
		new string[64],giveplayer[25],sendername[25],id;
		if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /slap [name/playerid]");
    	new Float:slx, Float:sly, Float:slz;
	    if(IsPlayerConnected(id))
	    {
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			SlapPlayer(id); 
			PlayerPlaySound(playerid, 1190, slx, sly, slz);
			format(string, 256, "You have slaped %s.",giveplayer);
			SendClientMessage(playerid, COLOR_DARKPINK, string);
            format(string, 256, "/slap: %s has slapped %s.", sendername,giveplayer);
			ABroadCast(COLOR_ADMCOMMANDS,string,1);
			Adminlog(PlayerInfo[playerid][pSQLID], string, "slap");
		}
    	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin/helper.");
	return 1;
}
CMD:slapcar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new Float: x, Float: y, Float: z, string[128], id;
		if(sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /slapcar [car id]");
		GetVehiclePos(id, x, y, z);
		SetVehiclePos(id, x, y, z+5);
		format(string, sizeof(string), "(AdmCmd){FFFFFF} %s slapped (/slapcar) the car %d.", PlayerInfo[playerid][pNormalName], id);
		ABroadCast(COLOR_RED2,string,1);
		Adminlog(PlayerInfo[playerid][pSQLID], string, "slapcar");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:mute(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2)
	{
		new time,id,string[256],sendername[25],giveplayer[25],reason[128],reasone[128],str[256],mute=1;
		if(sscanf(params, "uis[128]",id,time,reason)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /mute [name/playerid] [minutes] [reason]");
	    if(IsPlayerConnected(id))
	    {
			mysql_real_escape_string(reason, reasone);
			if(time == 0) mute = 0;
			PlayerInfo[id][pMuted] = mute;
			PlayerInfo[id][pMuteTime] = time*60;
		    GetPlayerName(id, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* You were muted by Admin %s for %d minutes, reason: %s.", sendername,time,reasone);
			SendClientMessage(id, COLOR_LIGHTRED, string);
			format(string, sizeof(string), "AdmCmd: %s has been muted by %s for %d minutes, reason: %s.", giveplayer, sendername,time, reasone);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Muted`='%d',`MuteTime`='%d' WHERE `name`='%s'",mute,PlayerInfo[id][pMuteTime],PlayerInfo[id][pNormalName]);
			mysql_tquery(SQL,str,"","");
			new var100[256];
			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','7','%d','%s','%s','%s','%d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],time,reasone,giveplayer,sendername,gettime());
			mysql_tquery(SQL,var100,"","");
			Adminlog(PlayerInfo[playerid][pSQLID], string, "mute");
		}
    	else
    	{
    		SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
    	}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:unmute(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new string[256],sendername[25],giveplayer[25],id;
		if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /unmute [name/playerid]");
	    if(IsPlayerConnected(id))
	    {
			PlayerInfo[id][pMuted] = 0;
			PlayerInfo[id][pMuteTime] = 0;
		    GetPlayerName(id, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* You were unmuted by Admin %s.", sendername);
			SendClientMessage(id, COLOR_LIGHTRED, string);
			format(string, sizeof(string), "(AdmCmd){FFFFFF} %s has been unmuted by %s.", giveplayer, sendername);
			ABroadCast(COLOR_RED2, string,1);
			mysql_format(SQL,string,sizeof(string),"UPDATE users SET `Muted`='%d',`MuteTime`='%d' WHERE `name`='%s'",PlayerInfo[id][pMuted],PlayerInfo[id][pMuteTime],PlayerInfo[id][pNormalName]);
			mysql_tquery(SQL,string,"","");
		}
    	else
    	{
    		SendClientMessage(playerid, COLOR_GREY, "Player not connected.");
    	}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:mutedplayers(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
        new count = 0,string[250],giveplayer[25];
		SendClientMessage(playerid, COLOR_WHITE, "{ADFF5C}|___Muted Players___|");
	    foreach(new i : Player)
		{
			if(IsPlayerConnected(i))
			{
			    if(PlayerInfo[i][pMuted] == 1)
			    {
				    GetPlayerName(i, giveplayer, sizeof(giveplayer));
			        format(string, sizeof(string), "%s(%d) - Mute time left: %d.",giveplayer,i,PlayerInfo[i][pMuteTime]);
					SendClientMessage(playerid,COLOR_WHITE,string);
					count++;
				}
			}
		}
		if(count == 0)
		{
    		SendClientMessage(playerid,COLOR_LIGHTRED,"* Currently no muted players online.");
		}
    	else if(count == 1)
	    	{
	    	SendClientMessage(playerid,COLOR_LIGHTRED,"* Now are 1 muted player online.");
    	}
    	else if(count >= 2)
    	{
	    	format(string, sizeof(string), "* Now are %d muted players online.", count);
	        SendClientMessage(playerid, COLOR_LIGHTRED, string);
    	}
	}
    else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:getjob(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    new sendername[25],str[256];
	GetPlayerName(playerid,sendername,sizeof(sendername));
	if(PlayerInfo[playerid][pJob] == 0)
	{
	    if(GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1366.9601,-1292.1105,13.5469))
		{
	        SS(playerid, COLOR_JOB, "(Job){FFFFFF} Jobul tau este acum Arms Dealer.", "(Job){FFFFFF} Your new job is now Arms Dealer.");
		    PlayerInfo[playerid][pJob] = 9;
		}
		else if(GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2129.9590,-1700.0682,15.0784))
		{
	        SS(playerid, COLOR_JOB, "(Job){FFFFFF} Jobul tau este acum Drugs Dealer.", "(Job){FFFFFF} Your new job is now Drugs Dealer.");
		    PlayerInfo[playerid][pJob] = 4;
		}
		else if(GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,-366.4417,-1412.7061,25.7266))
		{
	        SS(playerid, COLOR_JOB, "(Job){FFFFFF} Jobul tau este acum Farmer.", "(Job){FFFFFF} Your new job is now Farmer.");
		    PlayerInfo[playerid][pJob] = 6;
		}
		else if(GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1653.6558,-2238.0095,13.5201))
		{
	        SS(playerid, COLOR_JOB, "(Job){FFFFFF} Jobul tau este acum Bus Driver.", "(Job){FFFFFF} Your now job is now Bus Driver.");
		    PlayerInfo[playerid][pJob] = 7;
		}
		else if(GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2510.2173,2794.8362,10.8203))
		{
	        SS(playerid, COLOR_JOB, "(Job){FFFFFF} Jobul tau este acum Garbage Man.", "(Job){FFFFFF} Your new job is now Garbage man.");
		    PlayerInfo[playerid][pJob] = 10;
		}
		else if(GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,607.8508,-1438.1113,14.0647))
		{
	        SS(playerid, COLOR_JOB, "(Job){FFFFFF} Jobul tau este acum Detective.", "(Job){FFFFFF} Your new job is now Detective.");
		    PlayerInfo[playerid][pJob] = 1;
		}
		else if(GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2849.8909,891.6392,10.7500))
		{
	        SS(playerid, COLOR_JOB, "(Job){FFFFFF} Jobul tau este acum Car Jacker.", "(Job){FFFFFF} Your new job is now Car Jacker.");
		    PlayerInfo[playerid][pJob] = 2;
		}
		else if(GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1621.0037,2210.8643,15.1959))
		{
	        SS(playerid, COLOR_JOB, "(Job){FFFFFF} Jobul tau este acum Mechanic.", "(Job){FFFFFF} Your new job is now Mechanic.");
		    PlayerInfo[playerid][pJob] = 8;
		}
		else if(GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2118.9165,-1786.8179,13.5608))
		{
	        SS(playerid, COLOR_JOB, "(Job){FFFFFF} Jobul tau este acum Pizza Boy.", "(Job){FFFFFF} Your new job is now Pizza Boy.");
		    PlayerInfo[playerid][pJob] = 5;
		}
		else if(GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,372.0800,-2086.0505,7.8359))
		{
	        SS(playerid, COLOR_JOB, "(Job){FFFFFF} Jobul tau este acum Fisherman.", "(Job){FFFFFF} Your new job is now Fisherman.");
		    PlayerInfo[playerid][pJob] = 13;
		}
		else if(GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2000.5967,1568.3157,15.3672))
		{
	        SS(playerid, COLOR_JOB, "(Job){FFFFFF} Jobul tau este acum Fisherman.", "(Job){FFFFFF} Your new job is now Fisherman.");
		    PlayerInfo[playerid][pJob] = 13;
		}
		else if(GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,-76.8129,-1136.6630,1.0781))
		{
	        SS(playerid, COLOR_JOB, "(Job){FFFFFF} Jobul tau este acum Trucker.", "(Job){FFFFFF} Your new job is now Trucker.");
		    PlayerInfo[playerid][pJob] = 14;
		}
		else if(GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,-375.0192,1174.9395,18.7422))
		{
	        SS(playerid, COLOR_JOB, "(Job){FFFFFF} Jobul tau este acum Miner.", "(Job){FFFFFF} Your new job is now Miner.");
		    PlayerInfo[playerid][pJob] = 3;
		}
		else if(GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,-1212.0938,-118.2671,14.1440))
		{
	        SS(playerid, COLOR_JOB, "(Job){FFFFFF} Jobul tau este acum Air Transporter.", "(Job){FFFFFF} Your new job is now Air Transporter.");
		    PlayerInfo[playerid][pJob] = 15;
		}
		else if(GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,-80.4875,83.1074,3.1096))
		{
	        SS(playerid, COLOR_JOB, "(Job){FFFFFF} Jobul tau este acum Strawberry Picker.", "(Job){FFFFFF} Your new job is now Strawberry Picker.");
		    PlayerInfo[playerid][pJob] = 16;
		}
		mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Job`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pJob], PlayerInfo[playerid][pNormalName]);
		mysql_tquery(SQL,str,"","");
	}
	else SS(playerid, COLOR_JOB, "(Job){FFFFFF} Ai deja un job. Foloseste /quitjob pentru a renunta la jobul curent!", "(Job){FFFFFF} You already have a job. Use /quitjob to quit the job you have first!");
    return 1;
}
CMD:quitjob(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pJob] >= 1)
    {
		if(IsPlayerInAnyVehicle(playerid)) return SS(playerid, COLOR_JOB, "(Job){FFFFFF} Poti folosi aceasta comanda doar cand nu te afli intr-un vehicul.", "(Job){FFFFFF} You can't use this command while you're in a vehicle.");
	    SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} You have {FF0000}quit{FFFFFF} your job!");
	    PlayerInfo[playerid][pJob] = 0;
	    UsedFind[playerid] = 0;
		foreach(new i : Player)
		{
			if(IsACop(playerid))
			{
				if(caser[playerid] == i)
				{
					cased[i] --;
					caser[playerid] = 1001;
				}
			}

		}
		PlayerTextDrawHide(playerid, FindTXD[playerid][0]);
		PlayerTextDrawHide(playerid, FindTXD[playerid][1]);
		GotoMats[playerid] = 0;
		if(IsAGarbageTruck(GetPlayerVehicleID(playerid)))
		{
			RemovePlayerFromVehicle(playerid);
		}
		if(PlayerInfo[playerid][pJobVehicle] != 0) CancelJob(playerid);
		if(InMinerJob[playerid] != 0) MinerCancel(playerid);
		if(InStrawberryJob[playerid] != 0) StrawberryCancel(playerid);
		if(CarJacker[playerid] > 0)
		{
	    	CarJacker[playerid] = 0;
	    	JackAcc[playerid] = 0;
		}
		if(MatsHolding[playerid] > 0)
		{
		    MatsHolding[playerid] = 0;
		}
		if(CP[playerid] == 34)
		{
		    new towedcar = GetVehicleTrailer(GetPlayerVehicleID(playerid));
			SetVehicleToRespawn(towedcar);
			CP[playerid] = 0;
		}
		CP[playerid] = 0;
		new str[128];
		mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d',`Job`='0' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pNormalName]);
		mysql_tquery(SQL,str,"","");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a job.");
	return 1;
}
CMD:jaillist(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
        new count = 0,string[250],giveplayer[25];
		SendClientMessage(playerid, COLOR_WHITE, "{ADFF5C}Jailed Players");
	    foreach(new i : Player)
		{
			if(IsPlayerConnected(i))
			{
			    if(PlayerInfo[i][pJailed] >= 1)
			    {
				    GetPlayerName(i, giveplayer, sizeof(giveplayer));
			        format(string, sizeof(string), "%s(%d) - Jailed time left: [%d]",giveplayer,i,PlayerInfo[i][pJailTime]);
					SendClientMessage(playerid,COLOR_WHITE,string);
					count++;
				}
			}
		}
		if(count == 0)
		{
    		SendClientMessage(playerid,COLOR_LIGHTRED,"* Currently no jailed players online.");
		}
    	else if(count == 1)
	    	{
	    	SendClientMessage(playerid,COLOR_LIGHTRED,"* Now are 1 jailed player online.");
    	}
    	else if(count >= 2)
    	{
	    	format(string, sizeof(string), "* Now are %d jailed players online.", count);
	        SendClientMessage(playerid, COLOR_LIGHTRED, string);
    	}
	}
    else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:opencase(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(InOpenCase[playerid] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already in opencase menu.");
	if(InBlackJackGame[playerid] == 1 || RouletteInGame[playerid] == 1 || joacapacanele[playerid] == 1 || GetPVarInt(playerid, "accs") == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are in another textdraw!");
	if(PlayerInfo[playerid][pCases] <= 0) 
	{
		new string[128];
		SendClientMessage(playerid, -1,"You don't have any case, but you can get one:");
		SendClientMessage(playerid, -1,"- if you complet all your daily quests");
		format(string, sizeof(string), "- every 5 online hours(AFK) (left: %d paydays)", PlayerInfo[playerid][pNextCase]);
		SendClientMessage(playerid, -1, string);
		SendClientMessage(playerid, -1,"- if you are online at 20:30");
		return 1;
	}
	ShowCaseTds(playerid);
	SelectTextDrawEx(playerid,0xFFFFFFFF);
	InOpenCase[playerid] = 1;
	TogglePlayerControllable(playerid, false);
	return 1;
}

forward CaseOpen(playerid);
public CaseOpen(playerid)
{
	new rand = random(100),string[256],strings[128],strz[64];
	if(rand == 1)
	{
		if(CaseCount[playerid] == 0)
		{
			if(PlayerInfo[playerid][pPremiumAccount] != 2) {
				PlayerInfo[playerid][pPremiumAccount] = 2;
				Update(playerid, pPremiumAccountx);
				format(strings,sizeof strings,"* You win a vip account.");
				SendClientMessage(playerid,COLOR_YELLOW,strings);
				PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 1277); //disket vip account
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
				format(strz, sizeof(strz), "vip account");
				PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
			}
			else 
			{   //1 - red | 2 - green | 3 - yellow | 4- pink | 5- blue
				new randneon = 1 + random(5),neontext[16],neon;
				if(randneon == 1) 
				{
					neon = 18647;
					format(neontext,sizeof(neontext), "red");
					PlayerInfo[playerid][pNeonR]++;
					Update(playerid, pNeonRx);
				}
				else if(randneon == 2)
				{	
					neon = 18649;
					format(neontext,sizeof(neontext), "green");
					PlayerInfo[playerid][pNeonV]++;
					Update(playerid, pNeonVx);
				}
				else if(randneon == 3)
				{	
					neon = 18650;
					format(neontext,sizeof(neontext), "yellow");
					PlayerInfo[playerid][pNeonG]++;
					Update(playerid, pNeonGx);
				}
				else if(randneon == 4)
				{	
					neon = 18651;
					format(neontext,sizeof(neontext), "pink");
					PlayerInfo[playerid][pNeonRZ]++;
					Update(playerid, pNeonRZx);
				}
				else if(randneon == 5)
				{	
					neon = 18648;
					format(neontext,sizeof(neontext), "blue");
					PlayerInfo[playerid][pNeonA]++;
					Update(playerid, pNeonAx);
				}
				format(strings,sizeof strings,"* You win a %s neon (/myneons).",neontext);
				SendClientMessage(playerid,COLOR_YELLOW,strings);
				PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], neon);
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
				format(strz, sizeof(strz), "%s neon",neontext);
				PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
			}
			mysql_format(SQL, string, sizeof(string), "INSERT INTO opencase_logs (`text`,`PlayerID`) VALUES ('%s','%d')", strings, PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,string,"","");
		}
		else {
			if(PlayerInfo[playerid][pPremiumAccount] != 2) {
				PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 1277); //disket vip account
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
				format(strz, sizeof(strz), "vip account");
				PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
			}
			else 
			{
				//1 - red | 2 - green | 3 - yellow | 4- pink | 5- blue
				new randneon = 1 + random(5),neontext[16],neon;
				if(randneon == 1) 
				{
					neon = 18647;
					format(neontext,sizeof(neontext), "red");
				}
				else if(randneon == 2)
				{	
					neon = 18649;
					format(neontext,sizeof(neontext), "green");
				}
				else if(randneon == 3)
				{	
					neon = 18650;
					format(neontext,sizeof(neontext), "yellow");
				}
				else if(randneon == 4)
				{	
					neon = 18651;
					format(neontext,sizeof(neontext), "pink");
				}
				else if(randneon == 5)
				{	
					neon = 18648;
					format(neontext,sizeof(neontext), "blue");
				}
				PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], neon);
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
				format(strz, sizeof(strz), "%s neon",neontext);
				PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
			}
		}
	}
	else if(rand == 0)
	{
		if(CaseCount[playerid] == 0)
		{
			if(PlayerInfo[playerid][pPremiumAccount] == 0) {
				PlayerInfo[playerid][pPremiumAccount] = 1;
				Update(playerid, pPremiumAccountx);
				format(strings,sizeof strings,"* You win a premium account.");
				SendClientMessage(playerid,COLOR_YELLOW,strings);
				PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 1277); //disket premium account
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
				format(strz, sizeof(strz), "premium account");
				PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
			}
			else 
			{
				 //1 - red | 2 - green | 3 - yellow | 4- pink | 5- blue
				new randneon = 1 + random(5),neontext[16],neon;
				if(randneon == 1) 
				{
					neon = 18647;
					format(neontext,sizeof(neontext), "red");
					PlayerInfo[playerid][pNeonR]++;
					Update(playerid, pNeonRx);
				}
				else if(randneon == 2)
				{	
					neon = 18649;
					format(neontext,sizeof(neontext), "green");
					PlayerInfo[playerid][pNeonV]++;
					Update(playerid, pNeonVx);
				}
				else if(randneon == 3)
				{	
					neon = 18650;
					format(neontext,sizeof(neontext), "yellow");
					PlayerInfo[playerid][pNeonG]++;
					Update(playerid, pNeonGx);
				}
				else if(randneon == 4)
				{	
					neon = 18651;
					format(neontext,sizeof(neontext), "pink");
					PlayerInfo[playerid][pNeonRZ]++;
					Update(playerid, pNeonRZx);
				}
				else if(randneon == 5)
				{	
					neon = 18648;
					format(neontext,sizeof(neontext), "blue");
					PlayerInfo[playerid][pNeonA]++;
					Update(playerid, pNeonAx);
				}
				format(strings,sizeof strings,"* You win a %s neon (/myneons).",neontext);
				SendClientMessage(playerid,COLOR_YELLOW,strings);
				PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], neon);
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
				format(strz, sizeof(strz), "%s neon",neontext);
				PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
			}
			mysql_format(SQL, string, sizeof(string), "INSERT INTO opencase_logs (`text`,`PlayerID`) VALUES ('%s','%d')", strings, PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,string,"","");
		}
		else 
		{
			if(PlayerInfo[playerid][pPremiumAccount] == 0) {
				PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 1277); //disket vip account
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
				format(strz, sizeof(strz), "premium account");
				PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
			}
			else 
			{
				//1 - red | 2 - green | 3 - yellow | 4- pink | 5- blue
				new randneon = 1 + random(5),neontext[16],neon;
				if(randneon == 1) 
				{
					neon = 18647;
					format(neontext,sizeof(neontext), "red");
				}
				else if(randneon == 2)
				{	
					neon = 18649;
					format(neontext,sizeof(neontext), "green");
				}
				else if(randneon == 3)
				{	
					neon = 18650;
					format(neontext,sizeof(neontext), "yellow");
				}
				else if(randneon == 4)
				{	
					neon = 18651;
					format(neontext,sizeof(neontext), "pink");
				}
				else if(randneon == 5)
				{	
					neon = 18648;
					format(neontext,sizeof(neontext), "blue");
				}
				PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], neon);
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
				format(strz, sizeof(strz), "%s neon",neontext);
				PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
			}
		}
	}
	else if(rand >= 2 && rand <= 7)
	{
		if(CaseCount[playerid] == 0)
		{
			PlayerInfo[playerid][pLevel]++;
			Update(playerid, pLevelx);
			SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
			format(strings,sizeof strings,"* You win a level up.");
			SendClientMessage(playerid,COLOR_YELLOW,strings);
		    mysql_format(SQL, string, sizeof(string), "INSERT INTO opencase_logs (`text`,`PlayerID`) VALUES ('%s','%d')", strings, PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,string,"","");
			PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 1851); //levelup
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
			format(strz, sizeof(strz), "level up");
			PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
		}
		else 
		{
			PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 1851); //levelup
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
			format(strz, sizeof(strz), "level up");
			PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
		}
	}
	else if(rand >= 8 && rand <= 13)
	{
		if(CaseCount[playerid] == 0)
		{
			PlayerInfo[playerid][pPremiumPoints] += 20;
			Update(playerid, pPremiumPointsx);
			format(strings,sizeof strings,"* You win 20 premium points.");
			SendClientMessage(playerid,COLOR_YELLOW,strings);
		    mysql_format(SQL, string, sizeof(string), "INSERT INTO opencase_logs (`text`,`PlayerID`) VALUES ('%s','%d')", strings, PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,string,"","");
			PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 1882); //premiumpoints
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
			format(strz, sizeof(strz), "20 premium points");
			PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
		}
		else
		{
			PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 1882); //premiumpoints
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
			format(strz, sizeof(strz), "20 premium points");
			PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
		}
	}
	else if(rand >= 14 && rand <= 25)
	{
		if(CaseCount[playerid] == 0)
		{
			if(PlayerInfo[playerid][pTSkins] < 311)
			{
				new randskin = random(312);
				while(verifySkin(playerid, randskin) == 1 || randskin == 74) randskin = random(312);
				addSkin(playerid, randskin);
				format(strings,sizeof strings,"* You win skin %d.",randskin);
				SendClientMessage(playerid,COLOR_YELLOW,strings);
				PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], randskin); //skin
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
				format(strz, sizeof(strz), "skin %d",randskin);
				PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
			}	
			else 
			{
				GivePlayerCash(playerid,800000);
				format(strings,sizeof strings,"* You win 800,000$.");
				SendClientMessage(playerid,COLOR_YELLOW,strings);
				PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 1550); //money
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
				format(strz, sizeof(strz), "800.000$");
				PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
			}
			mysql_format(SQL, string, sizeof(string), "INSERT INTO opencase_logs (`text`,`PlayerID`) VALUES ('%s','%d')", strings, PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,string,"","");
		}
		else
		{
			if(PlayerInfo[playerid][pTSkins] < 311)
			{
				new randskin = random(312);
				while(verifySkin(playerid, randskin) == 1 || randskin == 74) randskin = random(312);
				PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], randskin); //skin
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
				format(strz, sizeof(strz), "skin %d",randskin);
				PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
			}
			else
			{
				PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 1550); //money
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
				format(strz, sizeof(strz), "800.000$");
				PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
			}
		}
	}
	if(rand >= 26 && rand <= 40)
	{
		if(CaseCount[playerid] == 0)
		{
			if(PlayerInfo[playerid][pPet] != 0)
			{
				PlayerInfo[playerid][pPetPoints] += 50;
				Update(playerid, pPetPointsx);
				format(strings,sizeof strings,"* You win 50 pet points.");
				SendClientMessage(playerid,COLOR_YELLOW,strings);
				PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 19079); //pet points
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
				format(strz, sizeof(strz), "50 pet points");
				PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
			}
			else 
			{
				GivePlayerCash(playerid,400000);
				format(strings,sizeof strings,"* You win 400,000$.");
				SendClientMessage(playerid,COLOR_YELLOW,strings);
				PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 1550); //money
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
				format(strz, sizeof(strz), "400.000$");
				PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
			}
		    mysql_format(SQL, string, sizeof(string), "INSERT INTO opencase_logs (`text`,`PlayerID`) VALUES ('%s','%d')", strings, PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,string,"","");
		}
		else {
			if(PlayerInfo[playerid][pPet] != 0) 
			{
				PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 19079); //pet points
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
				format(strz, sizeof(strz), "50 pet points");
				PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
			}
			else
			{
				PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 1550); //money
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
				format(strz, sizeof(strz), "400.000$");
				PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
				PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
			}
		}
	}
	else if(rand >= 41 && rand <= 55)
	{
		if(CaseCount[playerid] == 0)
		{
			PlayerInfo[playerid][pGiftTime] += 100;
			Update(playerid, pGiftTimex);
			format(strings,sizeof strings,"* You win 100 gift points.");
			SendClientMessage(playerid,COLOR_YELLOW,strings);
		    mysql_format(SQL, string, sizeof(string), "INSERT INTO opencase_logs (`text`,`PlayerID`) VALUES ('%s','%d')", strings, PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,string,"","");
			PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 19054); //gift points
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
			format(strz, sizeof(strz), "100 gift points");
			PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
		}
		else
		{
			PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 19054); //gift points
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
			format(strz, sizeof(strz), "100 gift points");
			PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
		}
	}
	else if(rand >= 56 && rand <= 66)
	{
		if(CaseCount[playerid] == 0)
		{
			PlayerInfo[playerid][pExp] += 10;
			Update(playerid, pExpx);
			format(strings,sizeof strings,"* You win 10 respect points.");
			SendClientMessage(playerid,COLOR_YELLOW,strings);
		    mysql_format(SQL, string, sizeof(string), "INSERT INTO opencase_logs (`text`,`PlayerID`) VALUES ('%s','%d')", strings, PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,string,"","");
			PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 2614); //respect points
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
			format(strz, sizeof(strz), "10 respect points");
			PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
		}
		else
		{
			PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 2614); //respect points
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
			format(strz, sizeof(strz), "10 respect points");
			PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
		}
	}
	else if(rand >= 67 && rand <= 85)
	{
		if(CaseCount[playerid] == 0)
		{
			GivePlayerCash(playerid,200000);
			format(strings,sizeof strings,"* You win 200,000$.");
			SendClientMessage(playerid,COLOR_YELLOW,strings);
		    mysql_format(SQL, string, sizeof(string), "INSERT INTO opencase_logs (`text`,`PlayerID`) VALUES ('%s','%d')", strings, PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,string,"","");
			PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 1550); //money
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
			format(strz, sizeof(strz), "200.000$");
			PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
		}
		else
		{
			PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 1550); //money
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
			format(strz, sizeof(strz), "200.000$");
			PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
		}
	}
	else if(rand >= 86 && rand <= 100)
	{
		if(CaseCount[playerid] == 0)
		{
			GivePlayerCash(playerid,150000);
			format(strings,sizeof strings,"* You win 150,000$.");
			SendClientMessage(playerid,COLOR_YELLOW,strings);
		    mysql_format(SQL, string, sizeof(string), "INSERT INTO opencase_logs (`text`,`PlayerID`) VALUES ('%s','%d')", strings, PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,string,"","");
			PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 1550); //money
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
			format(strz, sizeof(strz), "150.000$");
			PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
		}
		else
		{
			PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 1550); //money
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][7]);
			format(strz, sizeof(strz), "150.000$");
			PlayerTextDrawSetString(playerid, OpencaseTD[playerid][8], strz);
			PlayerTextDrawShow(playerid, OpencaseTD[playerid][8]);
		}
	}
	if(CaseCount[playerid] > 0)
	{
		if(CaseCount[playerid] >= 10) opencasetimer[playerid] = SetTimerEx("CaseOpen",500, false, "i", playerid);
		else if(CaseCount[playerid] >= 5) opencasetimer[playerid] = SetTimerEx("CaseOpen",1000, false, "i", playerid);
		else opencasetimer[playerid] = SetTimerEx("CaseOpen",1500, false, "i", playerid);
	}
	if(CaseCount[playerid] >= 1) CaseCount[playerid]--;
	else 
	{
		PlayerInfo[playerid][pCases]--;
		Update(playerid,pCasesx);
		CaseOpening[playerid] = 0;
	}
	return 1;
}

stock ShowRegisterTds(playerid)
{
	new nametext[30];
	HideRegisterTds(playerid);
	for(new gjr=0; gjr<=11;gjr++) 
		if(gjr != 3 && gjr != 8) PlayerTextDrawShow(playerid, RegisterTD[playerid][gjr]);
	GetPlayerName(playerid,nametext,sizeof(nametext));
	PlayerTextDrawSetString(playerid, RegisterTD[playerid][3], nametext);
	PlayerTextDrawShow(playerid, RegisterTD[playerid][3]);
	SelectTextDrawEx(playerid,0xFFFFFFFF);
	return 1;
}

stock HideRegisterTds(playerid)
{
	for(new gjr=0; gjr<12;gjr++) PlayerTextDrawHide(playerid, RegisterTD[playerid][gjr]);
	CancelSelectTextDraw(playerid);
	return 1;
}

stock ShowLoginTds(playerid)
{
	HideLoginTds(playerid);
	for(new gjr=0; gjr<=5;gjr++) PlayerTextDrawShow(playerid, LoginTD[playerid][gjr]);
	SelectTextDrawEx(playerid,0xFFFFFFFF);
	return 1;
}

stock HideLoginTds(playerid)
{
	for(new gjr=0; gjr<=5;gjr++) PlayerTextDrawHide(playerid, LoginTD[playerid][gjr]);
	PlayerTextDrawHide(playerid, IncorrectTD[playerid][1]);
	PlayerTextDrawHide(playerid, IncorrectTD[playerid][0]);
	CancelSelectTextDraw(playerid);
	return 1;
}

stock ShowCaseTds(playerid)
{
	HideCaseTds(playerid);
	PlayerTextDrawSetPreviewModel(playerid, OpencaseTD[playerid][7], 18631);
	for(new i; i < 8; i++)
    	if(i<2 || i>5) PlayerTextDrawShow(playerid, OpencaseTD[playerid][i]);
    PlayerTextDrawShow(playerid, OpencaseTD[playerid][10]);
	return 1;
}

stock InitTradeProcess(playerid) {
	StopTradeProcess(playerid);
	for(new i; i <= 11; i++)
    	PlayerTextDrawShow(playerid, TradeTD[playerid][i]);
   	SelectTextDrawEx(playerid,0xFFFFFFFF);
	return 1;
}

stock StopTradeProcess(playerid) {
	for(new i; i <= 11; i++)
    	PlayerTextDrawHide(playerid, TradeTD[playerid][i]);
	CancelSelectTextDraw(playerid);
}

stock HideCaseTds(playerid)
{
	for(new i; i < 11; i++)
    	PlayerTextDrawHide(playerid, OpencaseTD[playerid][i]);
	CancelSelectTextDraw(playerid);
	return 1;
}

stock HideDmvTds(playerid)
{
	for(new i; i<= 11;i++)
		PlayerTextDrawHide(playerid, DmvTd[playerid][i]);
	CancelSelectTextDraw(playerid);
	return 1;
}
stock ShowDmvTds(playerid)
{
 	new string[128];
 	HideDmvTds(playerid);
 	DmvQtime[playerid] = 30;
 	for(new i; i<= 11;i++)
		if(i != 3 && i != 5 && i != 6 && i != 7 && i != 8 && i != 9) PlayerTextDrawShow(playerid, DmvTd[playerid][i]);
	format(string, sizeof(string), "00:%d",DmvQtime[playerid]);
	PlayerTextDrawSetString(playerid, DmvTd[playerid][3], string);
	PlayerTextDrawShow(playerid, DmvTd[playerid][3]);
	format(string, sizeof(string), "%d/3",DmvWrongs[playerid]);
	PlayerTextDrawSetString(playerid, DmvTd[playerid][6], string);
	PlayerTextDrawShow(playerid, DmvTd[playerid][6]);
	if(CurrentDmvQ[playerid] == 1)
	{
		if(PlayerInfo[playerid][pLanguage] == 2)
		{
			format(string, sizeof(string), "Ce esti obligat sa faci atunci cand un politist te someaza?");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][5], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][5]);
			format(string, sizeof(string), "a) ma opresc la marginea drumului");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][7], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][7]);
			format(string, sizeof(string), "b) ma deconectez de pe server");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][8], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][8]);
			format(string, sizeof(string), "c) fug pana imi pierde urma");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][9], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][9]);
		}
		else {
			format(string, sizeof(string), "What are you obligated to do when a cop somate you?");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][5], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][5]);
			format(string, sizeof(string), "a) I stop on the road edge");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][7], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][7]);
			format(string, sizeof(string), "b) I left the game");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][8], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][8]);
			format(string, sizeof(string), "c) I run until he lose me");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][9], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][9]);
		}
	}
	else if(CurrentDmvQ[playerid] == 2)
	{
		if(PlayerInfo[playerid][pLanguage] == 2)
		{
			format(string, sizeof(string), "Care este partea carosabila corecta de conducere?");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][5], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][5]);
			format(string, sizeof(string), "a) pe mijloc");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][7], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][7]);
			format(string, sizeof(string), "b) pe banda stanga");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][8], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][8]);
			format(string, sizeof(string), "c) pe banda dreapta");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][9], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][9]);
		}
		else {
			format(string, sizeof(string), "Which is the correct carriageway for driving?");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][5], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][5]);
			format(string, sizeof(string), "a) on the middle");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][7], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][7]);
			format(string, sizeof(string), "b) on the left lane");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][8], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][8]);
			format(string, sizeof(string), "c) on the right lane");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][9], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][9]);
		}
	}
	else if(CurrentDmvQ[playerid] == 3)
	{
		if(PlayerInfo[playerid][pLanguage] == 2)
		{
			format(string, sizeof(string), "Cum pornesti motorul unei masini?");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][5], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][5]);
			format(string, sizeof(string), "a) de pe tasta 2");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][7], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][7]);
			format(string, sizeof(string), "b) cu comanda /engine");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][8], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][8]);
			format(string, sizeof(string), "c) o impingi");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][9], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][9]);	
		}
		else {
			format(string, sizeof(string), "How you turn on the car engine?");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][5], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][5]);
			format(string, sizeof(string), "a) on the key 2");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][7], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][7]);
			format(string, sizeof(string), "b) with /engine command");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][8], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][8]);
			format(string, sizeof(string), "c) I push her");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][9], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][9]);	
		}
	}
	else if(CurrentDmvQ[playerid] == 4)
	{
		if(PlayerInfo[playerid][pLanguage] == 2)
		{
			format(string, sizeof(string), "Cu ce esti sanctionat daca mergi pe contrasens?");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][5], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][5]);
			format(string, sizeof(string), "a) primesc jail");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][7], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][7]);
			format(string, sizeof(string), "b) primesc kick");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][8], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][8]);
			format(string, sizeof(string), "c) confiscarea permisului");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][9], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][9]);
		}
		else {
			format(string, sizeof(string), "What are you sanctionated if you go on the counter?");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][5], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][5]);
			format(string, sizeof(string), "a) I will be jailed");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][7], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][7]);
			format(string, sizeof(string), "b) I will be kicked");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][8], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][8]);
			format(string, sizeof(string), "c) driving licence suspend");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][9], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][9]);
		}
	}
	else if(CurrentDmvQ[playerid] == 5)
	{
		if(PlayerInfo[playerid][pLanguage] == 2)
		{
			format(string, sizeof(string), "Ce trebuie sa faci de la 20:00 pana la 08:00?");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][5], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][5]);
			format(string, sizeof(string), "a) tin geamurile inchise");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][7], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][7]);
			format(string, sizeof(string), "b) aprind farurile");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][8], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][8]);
			format(string, sizeof(string), "c) merg cu bicicleta");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][9], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][9]);
		}
		else {
			format(string, sizeof(string), "What you need to do betwwen 20:00-08:00?");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][5], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][5]);
			format(string, sizeof(string), "a) close windows");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][7], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][7]);
			format(string, sizeof(string), "b) turn on the lights");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][8], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][8]);
			format(string, sizeof(string), "c) I go by bike");
			PlayerTextDrawSetString(playerid, DmvTd[playerid][9], string);
			PlayerTextDrawShow(playerid, DmvTd[playerid][9]);
		}
	}
 	return 1;
}

stock HideLicenceTds(playerid)
{
	for(new i; i<= 11;i++)
		PlayerTextDrawHide(playerid, LicenceTD[playerid][i]);
	CancelSelectTextDraw(playerid);
	return 1;
}
stock ShowLicenceTds(playerid)
{
 	new string[128];
 	HideLicenceTds(playerid);
 	LicenceQtime[playerid] = 30;
 	for(new i; i<= 11;i++)
		if(i != 3 && i != 5 && i != 6 && i != 7 && i != 8 && i != 9) PlayerTextDrawShow(playerid, LicenceTD[playerid][i]);
	format(string, sizeof(string), "00:%d",LicenceQtime[playerid]);
	PlayerTextDrawSetString(playerid, LicenceTD[playerid][3], string);
	PlayerTextDrawShow(playerid, LicenceTD[playerid][3]);
	format(string, sizeof(string), "%d/3",LicenceWrongs[playerid]);
	PlayerTextDrawSetString(playerid, LicenceTD[playerid][6], string);
	PlayerTextDrawShow(playerid, LicenceTD[playerid][6]);
	if(CurrentLicenceQ[playerid] == 1)
	{
		if(PlayerInfo[playerid][pLanguage] == 2)
		{
			if(InLicenceTest[playerid] == 1)
			{
				format(string, sizeof(string), "Ce esti obligat sa faci atunci cand un politist te someaza?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) aterizez");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) ma deconectez de pe server");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) fug pana imi pierde urma");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
			else if(InLicenceTest[playerid] == 2)
			{
				format(string, sizeof(string), "Ce esti obligat sa faci atunci cand un politist te someaza?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) ma opresc");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) ma deconectez de pe server");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) fug pana imi pierde urma");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
			else if(InLicenceTest[playerid] == 3)
			{
				format(string, sizeof(string), "Pe cine este permis sa faci DM?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) politisti");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) civili");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) hitmani");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
		}
		else {
			if(InLicenceTest[playerid] == 1)
			{
				format(string, sizeof(string), "What are you obligated to do when a cop somate you?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) I land");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) I left the game");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) I run until he lose me");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
			else if(InLicenceTest[playerid] == 2)
			{
				format(string, sizeof(string), "What are you obligated to do when a cop somate you?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) I stop");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) I left the game");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) I run until he lose me");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
			else if(InLicenceTest[playerid] == 3)
			{
				format(string, sizeof(string), "Who you are allowed to do DM?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) cops");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) civils");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) hitmans");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
		}
	}
	else if(CurrentLicenceQ[playerid] == 2)
	{
		if(PlayerInfo[playerid][pLanguage] == 2)
		{
			if(InLicenceTest[playerid] == 1)
			{
				format(string, sizeof(string), "Cand este interzis zborul?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) cand ploua");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) noaptea");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) niciodata");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
			else if(InLicenceTest[playerid] == 2)
			{
				format(string, sizeof(string), "Cand este interzisa navigarea?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) cand ploua");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) noaptea");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) niciodata");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
			else if(InLicenceTest[playerid] == 3)
			{
				format(string, sizeof(string), "Unde ai nevoie de licenta de arme?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) la strawberry");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) la jail");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) la paintball");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}	
		}
		else {
			if(InLicenceTest[playerid] == 1)
			{
				format(string, sizeof(string), "When is fly restricted?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) when is raining");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) at night");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) never");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
			else if(InLicenceTest[playerid] == 2)
			{
				format(string, sizeof(string), "When is sailing restricted?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) when is raining");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) at night");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) never");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
			else if(InLicenceTest[playerid] == 3)
			{
				format(string, sizeof(string), "Where do you need weapons?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) at strawberry");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) at jail");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) at paintball");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
		}
	}
	else if(CurrentLicenceQ[playerid] == 3)
	{
		if(PlayerInfo[playerid][pLanguage] == 2)
		{
			if(InLicenceTest[playerid] == 1)
			{
				format(string, sizeof(string), "Cum pornesti motorul unui avion/elicopter?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) de pe tasta 2");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) cu comanda /engine");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) astept");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);	
			}
			else if(InLicenceTest[playerid] == 2)
			{
				format(string, sizeof(string), "Cum pornesti motorul unei barci?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) de pe tasta 2");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) cu comanda /engine");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) astept");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
			else if(InLicenceTest[playerid] == 3)
			{
				format(string, sizeof(string), "De unde poti lua arme?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) gun shop");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) arms dealer");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) 24/7");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
		}
		else {
			if(InLicenceTest[playerid] == 1)
			{
				format(string, sizeof(string), "How you turn on the plane/helicopter engine?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) on the key 2");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) with /engine command");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) I will wait");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);	
			}
			else if(InLicenceTest[playerid] == 2)
			{
				format(string, sizeof(string), "How you turn on the boat engine?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) on the key 2");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) with /engine command");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) I will wait");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);	
			}
			else if(InLicenceTest[playerid] == 3)
			{
				format(string, sizeof(string), "Where you can get weapons?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) gun shop");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) arms dealer");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) 24/7");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
		}
	}
	else if(CurrentLicenceQ[playerid] == 4)
	{
		if(PlayerInfo[playerid][pLanguage] == 2)
		{
			if(InLicenceTest[playerid] == 1)
			{
				format(string, sizeof(string), "Cu ce esti sanctionat daca faci drive-by?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) primesc avertizari");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) primesc ban");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) primesc kick/jail");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
			else if(InLicenceTest[playerid] == 2)
			{
				format(string, sizeof(string), "Cu ce esti sanctionat daca faci drive-by?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) primesc avertizari");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) primesc ban");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) primesc kick/jail");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
			else if(InLicenceTest[playerid] == 3)
			{
				format(string, sizeof(string), "Unde este interzis sa folosesti arme?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) pe chiliad");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) la politie");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) la spawn");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
		}
		else {
			if(InLicenceTest[playerid] == 1)
			{
				format(string, sizeof(string), "What are you sanctionated if you do drive-by?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) advertise");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) I will be banned");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) I will be kicked/jailed");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
			else if(InLicenceTest[playerid] == 2)
			{
				format(string, sizeof(string), "What are you sanctionated if you do drive-by?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) advertise");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) I will be banned");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) I will be kicked/jailed");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
			else if(InLicenceTest[playerid] == 3)
			{
				format(string, sizeof(string), "Where is restricted weapon use?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) on chiliad");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) at police");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) at spawn");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
		}
	}
	else if(CurrentLicenceQ[playerid] == 5)
	{
		if(PlayerInfo[playerid][pLanguage] == 2)
		{
			if(InLicenceTest[playerid] == 1)
			{
				format(string, sizeof(string), "Care sunt controalele de directie ale avionului/elicopterului?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) tastele W/S si Z/C");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) tastele Q/E si A/D");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) tastele B/N si U/I");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
			else if(InLicenceTest[playerid] == 2)
			{
				format(string, sizeof(string), "Cum opresti eficient barca?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) cu tasta space");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) tasta S cu D/A");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) cu tastele D/A");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
			else if(InLicenceTest[playerid] == 3)
			{
				format(string, sizeof(string), "Cu ce este sanctionata folosirea de weapon cheats?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) cu kick");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) cu ban");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) cu warn");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
		}
		else {
			if(InLicenceTest[playerid] == 1)
			{
				format(string, sizeof(string), "Which of these are direction controls?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) key W/S and Z/C");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) key Q/E and A/D");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) key B/N and U/I");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
			else if(InLicenceTest[playerid] == 2)
			{
				format(string, sizeof(string), "How do you stop efficiently the boat?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) with space key");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) key S with A/D");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) with D/A key");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
			else if(InLicenceTest[playerid] == 3)
			{
				format(string, sizeof(string), "How is sanctionated the use of weapon hacks?");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][5], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][5]);
				format(string, sizeof(string), "a) with kick");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][7], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][7]);
				format(string, sizeof(string), "b) with ban");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][8], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][8]);
				format(string, sizeof(string), "c) with warn");
				PlayerTextDrawSetString(playerid, LicenceTD[playerid][9], string);
				PlayerTextDrawShow(playerid, LicenceTD[playerid][9]);
			}
		}
	}
 	return 1;
}

CMD:getlicense(playerid, params[]) return cmd_getlicence(playerid, params);
CMD:getlicence(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use this command when you are in a car.");
	new licence[64];
	if(sscanf(params, "s[64]",licence))
	{
		SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /getlicence [item]");
		SendClientMessage(playerid, COLOR_WHITE, "Items: fly, boat, weapon");
		return 1;
	}
	if(InLicenceTest[playerid] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already have a licence exam.");
	if(CP[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1 && PlayerInfo[playerid][pJobVehicle] == 0 && BeeCar[playerid] == 0 && UsedFind[playerid] == 0 && InStrawberryJob[playerid] == 0 && InMinerJob[playerid] == 0 && PizzaCP[playerid] != 1 && busc[playerid] != 1 && Trucker[playerid] ==0)
	{
        if(strcmp(licence,"fly",true) == 0)
		{
			if(!PlayerToPoint(2.0,playerid, 414.4034,2535.7585,19.1484)) {
				SetPlayerCheckpoint(playerid,414.4034,2535.7585,19.1484,2.0);
				CP[playerid] = 43;
				SendClientMessage(playerid,COLOR_ERROR, "(Info){FFFFFF} You are not at correct location, go to the checkpoint to start the exam!");
				return 1;
			}
			if(PlayerInfo[playerid][pFlyLicT] > 10) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Your licence expire in more than 10 hours.");
			if(GetPlayerCash(playerid) < 200000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have $200.000 to pay exam costs.");
			InLicenceTest[playerid] = 1;
			CurrentLicenceQ[playerid] = 1;
			LicenceWrongs[playerid] = 0;
			TogglePlayerControllable(playerid, 0);
			ShowLicenceTds(playerid);
			SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} The exam has been started (-20.000$).");
			GivePlayerCash(playerid, -200000);
		}
		else if(strcmp(licence,"boat",true) == 0)
		{
			if(!PlayerToPoint(2.0,playerid, 2161.2642,-102.5932,2.7500)) {
				SetPlayerCheckpoint(playerid,2161.2642,-102.5932,2.7500,2.0);
				CP[playerid] = 43;
				SendClientMessage(playerid,COLOR_ERROR, "(Info){FFFFFF} You are not at correct location, go to the checkpoint to start the exam!");
				return 1;
			}
			if(PlayerInfo[playerid][pBoatLicT] > 10) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Your licence expire in more than 10 hours.");
			if(GetPlayerCash(playerid) < 100000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have $100.000 to pay exam costs.");
			InLicenceTest[playerid] = 2;
			CurrentLicenceQ[playerid] = 1;
			LicenceWrongs[playerid] = 0;
			TogglePlayerControllable(playerid, 0);
			ShowLicenceTds(playerid);
			SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} The exam has been started (-10.000$).");
			GivePlayerCash(playerid, -100000);
		}
		else if(strcmp(licence,"weapon",true) == 0)
		{	
			if(!PlayerToPoint(2.0,playerid, -684.5781,939.6581,13.6328)) {
				SetPlayerCheckpoint(playerid,-684.5781,939.6581,13.6328,2.0);
				CP[playerid] = 43;
				SendClientMessage(playerid,COLOR_ERROR, "(Info){FFFFFF} You are not at correct location, go to the checkpoint to start the exam!");
				return 1;
			}
			if(PlayerInfo[playerid][pGunLicT] > 10) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Your licence expire in more than 10 hours.");
			if(PlayerInfo[playerid][pGunLicSuspend] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Your license is suspended.");
			if(GetPlayerCash(playerid) < 300000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have $300.000 to pay exam costs.");
			InLicenceTest[playerid] = 3;
			CurrentLicenceQ[playerid] = 1;
			LicenceWrongs[playerid] = 0;
			TogglePlayerControllable(playerid, 0);
			ShowLicenceTds(playerid);
			SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} The exam has been started (-30.000$).");
			GivePlayerCash(playerid, -300000);
		}
	}
	else
	{
	    ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel checkpoint", "You are sure to cancel the current checkpoint?", "Yes", "No");

	}
	return 1;
}
CMD:exam(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use this command when you are in a car.");
    if(PlayerToPoint(5.0,playerid, 1219.0502,-1812.7823,16.5938))
    {
		new string[256];
    	if(PlayerInfo[playerid][pCarLic] == 0)
     	{
     		if(GetPlayerAnimationIndex(playerid) != 1189) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosii aceasta comanda cand esti in miscare.","(Error){FFFFFF} You can't use this animation when you moving.");
			if(PlayerInfo[playerid][pCarLicSuspend] > 0)
			{
				if(PlayerInfo[playerid][pLanguage] == 2)
					format(string,sizeof(string),"(Error){FFFFFF} Permisul tau de conducere a fost suspendat recent. Poti da examenul peste %d ore.",PlayerInfo[playerid][pCarLicSuspend]);
				else format(string,sizeof(string),"(Error){FFFFFF} Your driving license was suspended recently. You can take the exam after %d hours.",PlayerInfo[playerid][pCarLicSuspend]);
				SendClientMessage(playerid, COLOR_ERROR, string);
				return 1;
			}
			if(InDmvTest[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already have an exam.");
			if(GetPlayerCash(playerid) < 1000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have $1.000 to pay exam costs."); 
			InDmvTest[playerid] = 1;
			CurrentDmvQ[playerid] = 1;
			DmvWrongs[playerid] = 0;
			TogglePlayerControllable(playerid, 0);
			ShowDmvTds(playerid);
			SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} The exam has been started.");
			GivePlayerCash(playerid, -1000);
      	}
       	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already have a driver license.");
    }
   	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not at the DMV.");
	return 1;
}
CMD:buy(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(InBussines[playerid] > 0)
	{
		if(BizzInfo[InBussines[playerid]][bType] == 6)
			ShowPlayerDialog(playerid,Dialog_24,DIALOG_STYLE_LIST,"SERVER: 24/7","Cellphone ($500)\nPhone Book ($50)\nPhone Credit ($500)\nWalkie Talkie ($2,500)\nPhoto Camera ($2,000)\nGas Can ($5,000)","Select","Exit");
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in a 24/7 store.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in a 24/7 store.");
    return 1;
}
CMD:buyfightstyle(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(InBussines[playerid] > 0)
	{
		if(BizzInfo[InBussines[playerid]][bType] == 8)
		{
			ShowPlayerDialog(playerid,Dialog_Gym,DIALOG_STYLE_LIST,"SERVER: Fighting Styles","Boxing ($6,000)\nKung Fu ($10,000)\nKnee Head ($10,000)\nGrab & Kick ($10,000)\nElbow ($10,000)\nDefault ($2,000)","Select","Cancel");
			return 1;
		}
		else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You are not at gym.");
	}
    return 1;
}
CMD:buytoys(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(InBussines[playerid] > 0)
	{
		if(BizzInfo[InBussines[playerid]][bType] == 4)
		{
			ShowPlayerDialog(playerid,DIALOG_SEXSHOP,DIALOG_STYLE_LIST,"SERVER: Sex Shop","Purple Dildo ($100)\nSmall White Vibrator ($100)\nSilver Vibrator ($100)\nLarge White Vibrator ($100)\nFlowers ($150)","Select","Exit");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not at sex shop.");
	}
	return 1;
}
CMD:buydrink(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(InBussines[playerid] > 0)
	{
	    if(BizzInfo[InBussines[playerid]][bType] == 3)
	    {
	        ShowPlayerDialog(playerid,DIALOG_BAR,DIALOG_STYLE_LIST,"SERVER: Bar","Stock Bar Cigars ($50)\nSprunk ($50)\nBeer ($60)\nWine ($100)","Select","Exit");
        }
        else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not at bar.");
    }
    return 1;
}
CMD:billboards(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    {
    	if(CP[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && CarJacker[playerid] < 1 && PlayerInfo[playerid][pJobVehicle] == 0 && BeeCar[playerid] == 0 && UsedFind[playerid] == 0 && InMinerJob[playerid] == 0 && InStrawberryJob[playerid] == 0 && PizzaCP[playerid] != 1 && busc[playerid] != 1 && Trucker[playerid] ==0)
		{
			new titlestring[64],string[128],iString[1500],nr = 0,date[6];
	  		format(titlestring, sizeof(titlestring), "Billboards (%d)", billboards);
	  		format(string, sizeof(string), "Billboard\tOwned by\tExpire\n");
			strcat(iString,string);
			for(new i = 1; i <= billboards; i++)
			{
				if(strcmp(bBill[i][bBillOwner],"Admbot",true) == 0)
				{
					if(nr == 0) format(string, sizeof(string), "#%d\tno one\tno expire",i);
					else format(string, sizeof(string), "\n#%d\tno one\tno expire",i);
					nr++;
					strcat(iString,string);
				}
				else 
				{
					TimestampToDate(bBill[i][bBillTime],date[0],date[1],date[2],date[3],date[4],date[5],2);
					if(nr == 0) format(string, sizeof(string), "#%d\t%s\t%02d.%02d.%02d - %02d:%02d:%02d",i,bBill[i][bBillOwner],date[0],date[1],date[2],date[3],date[4],date[5]);
					else format(string, sizeof(string), "\n#%d\t%s\t%02d.%02d.%02d - %02d:%02d:%02d",i,bBill[i][bBillOwner],date[0],date[1],date[2],date[3],date[4],date[5]);
					nr++;
					strcat(iString,string);
				}
			}
		 	ShowPlayerDialog(playerid,DIALOG_BILLBOARDS,DIALOG_STYLE_TABLIST_HEADERS, titlestring, iString, "Select","Exit");
	    }
	    else
	    {
	        ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel checkpoint", "You are sure to cancel the current checkpoint?", "Yes", "No");
		}
    }
    return 1;
}
CMD:billboard(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    {
    	if(PlayerInfo[playerid][pBillboard] == 0) return  SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have rented a billboard.");
		ShowPlayerDialog(playerid,DIALOG_BILLMENU,DIALOG_STYLE_LIST, "Manage billboard", "Text information\nText Size", "Select","Exit");
    }
    return 1;
}
CMD:shop(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    {
        new titlestring[64],string1[MAX_STRING],string2[MAX_STRING],string3[MAX_STRING],string4[MAX_STRING],string5[MAX_STRING],string6[MAX_STRING],string7[MAX_STRING],string8[MAX_STRING],iString[1500];
  		format(titlestring, sizeof(titlestring), "Premium points: {79AFD4}%d", PlayerInfo[playerid][pPremiumPoints]);
  		format(string1, sizeof(string1), "{EEC271}[+] Get Premium Points");
  		format(string2, sizeof(string2), "{FFFFFF}Premium account - {79AFD4}60 {FFFFFF}premium points\n{FFFFFF}Change Nickname - {79AFD4}15 {FFFFFF}premium points");
  		format(string3, sizeof(string3), "{FFFFFF}Clear FP - {79AFD4}15 {FFFFFF}premium points");
  		format(string4, sizeof(string4), "{FFFFFF}Clear warns - {79AFD4}20 {FFFFFF}premium points\n{FFFFFF}Clear KM & Distance traveled for a vehicle - {79AFD4}20 {FFFFFF}points");
  		format(string5, sizeof(string5), "{FFFFFF}Vehicle hidden color - {79AFD4}20 {FFFFFF}premium points\n{FFFFFF}5x fireworks - {79AFD4}1 {FFFFFF}premium point");
  		format(string6, sizeof(string6), "{FFFFFF}Buy vehicle slot - {79AFD4}20 {FFFFFF}premium points\n{FFFFFF}Walkie-talkie private frequency - {79AFD4}15 {FFFFFF}premium points\n{FFFFFF}iPhone - {79AFD4}10 {FFFFFF}premium points");
		format(string7, sizeof(string7), "{FFFFFF}Buy $300,000 - {79AFD4}1 {FFFFFF}premium point\n{FFFFFF}Buy $3,000,000 - {79AFD4}10 {FFFFFF}premium points\n{FFFFFF}Buy $15,000,000 - {79AFD4}50 {FFFFFF}premium points\n{FFFFFF}Buy $30,000,000 - {79AFD4}100 {FFFFFF}premium points\n{FFFFFF}Clear Faction History - {79AFD4}50 {FFFFFF}premium points\n{FFFFFF}Buy Clan - {79AFD4}100 {FFFFFF}premium points");
  		format(string8, sizeof(string8), "{FFFFFF}Buy Personal Pet - {79AFD4}300 {FFFFFF}premium points\n{FFFFFF}Mp3 Player - {79AFD4}20 {FFFFFF}premium points");
  		format(iString, sizeof(iString), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s", string1, string2, string3, string4, string5, string6,string7,string8);
	 	ShowPlayerDialog(playerid,DIALOG_SHOP,DIALOG_STYLE_LIST, titlestring, iString, "Buy","Exit");
    }
    return 1;
}
CMD:oldcar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string[64];
    format(string, sizeof(string), "Your old car was: %d",gLastCar[playerid]);
    SendClientMessage(playerid, COLOR_GREY, string);
    return 1;
}
function SlapPlayer(playerid) 
{
    TogglePlayerControllable(playerid, 0);
    new Float: Pos[3];
    Slapped[playerid]=1;
    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
    SetPlayerPosEx(playerid, Pos[0], Pos[1], Pos[2]+2);
    SetTimerEx("UnFreezeStation", 2000, false, "i", playerid);
	PlayerPlaySound(playerid, 1190, 0, 0, 10.0);
	return 1;
}
CMD:eject(playerid, params[]) 
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Trebuie sa fii intr-un vehicul pentru a folosi aceasta comanda.");
	new id,string[128],giveplayer[25];
	if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You can only eject people as the driver.");
	if(sscanf(params, "u",id)) return SendClientMessage(playerid,COLOR_GREY, "USAGE: {FFFFFF}/eject <playerid/name>");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Acel player nu este conectat.");
	new test = GetPlayerVehicleID(playerid);
	if(PlayerTied[id] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Acel player e legat.","(Error){FFFFFF} This player is tied.");
	if(id == playerid) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu iti poti da eject singur.","(Error){FFFFFF} You can't eject yourself.");
	if(IsPlayerInVehicle(id,test) || GetPlayerSurfingVehicleID(id) == test) {
		if(GetPlayerSurfingVehicleID(id) == test) SlapPlayer(id);
		new PName[MAX_PLAYER_NAME];
		GetPlayerName(playerid,PName,sizeof(PName));
		GetPlayerName(id, giveplayer, sizeof(giveplayer));
		format(string, sizeof(string), "* %s has thrown %s out of their vehicle.",GetName(playerid),GetName(id));		           
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		format(string, sizeof(string), "* You have thrown out %s from vehicle!", giveplayer);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* You have been thrown out of vehicle by %s !", PName);
		SendClientMessage(id, COLOR_LIGHTBLUE, string);
		
		RemovePlayerFromVehicleEx(id);
	}
	return 1;
}
CMD:tie(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsAMember(playerid))
	{
	    if(PlayerInfo[playerid][pRank] < 3) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need rank 2 or higher to tie people up.");
	    new id,string[128],sendername[25],giveplayer[25];
		if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /tie [name/playerid]");
	    if(IsPlayerConnected(id))
		{
		    if(id != INVALID_PLAYER_ID)
		    {
			    if(PlayerTied[id] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is already tied.");
				if(ProxDetectorS(8.0, playerid, id))
				{
				    new car = GetPlayerVehicleID(playerid);
				    if(id == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't tie yourself.");
				    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(id, car))
				    {
				        GetPlayerName(id, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
				        format(string, sizeof(string), "* You were tied up by %s, till untie.", sendername);
						SendClientMessage(id, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* You tied %s up, till untie.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s ties %s up, so he wont go anywhere.", sendername ,giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						TogglePlayerControllable(id, 0);
						PlayerTied[id] = 1;
				    }
				    else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not in your car or you are not the driver.");
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} No player near you.");
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a gang member.");
	return 1;
}
CMD:untie(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsAMember(playerid) || IsACop(playerid))
	{
	    if(PlayerInfo[playerid][pRank] < 3 && IsAMember(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need rank 2 or higher to untie people.");
		new id,string[128],giveplayer[25],sendername[25];
		if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /untie [name/playerid]");
		if(IsPlayerConnected(id))
		{
			if(id != INVALID_PLAYER_ID)
			{
			    if(ProxDetectorS(8.0, playerid, id))
				{
				    if(id == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't untie yourself!");
					if(PlayerTied[id])
					{
					    GetPlayerName(id, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* You were Untied by %s.", sendername);
						SendClientMessage(id, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* You Untied %s.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						TogglePlayerControllable(id, 1);
						PlayerTied[id] = 0;
					}
					else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} That player isn't tied up.");
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} No player near you.");
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a gang member/cop.");
	return 1;
}
CMD:cc(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2)
	{
		foreach(Player, i) {
			if(PlayerInfo[i][pAdmin] < 1) {
				for( new j = 0; j <= 50; j++) SendClientMessage(i, COLOR_WHITE, "");
			}
		}
		new sendername[25],string[100];
		GetPlayerName(playerid,sendername,sizeof(sendername));
		format(string,sizeof(string),"(AdmCmd){FFFFFF} {FFFFFF}%s used /cc.",sendername);
		ABroadCast(COLOR_RED2,string,1);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:buygun(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pGunLic] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have gun license.");
	if(InBussines[playerid] > 0)
	{
		if(BizzInfo[InBussines[playerid]][bType] == 2)
			ShowPlayerDialog(playerid,Dialog_gunshop,DIALOG_STYLE_LIST,"Select:","Baseball bat($1,000)\nSD Pistol($2,000)\nDesert eagle($3,000)\nShotgun($4,200)\nMP5($4,600)\nAK47($7,000)\nM4($7,000)","Select","Cancel");
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in a gun shop.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in a gun shop.");
    return 1;
}
CMD:whisper(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string[128],id,mess[250],giveplayer[25],sendername[25];
    if(PlayerInfo[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You must have level 2 to use /w(isper).");
    if(PlayerInfo[playerid][pMuted] == 1)
    {
		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
		else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
		SendClientMessage(playerid, COLOR_DARKPINK, string);
		return 1;
	}
	if(sscanf(params, "us[250]",id,mess)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /w [name/playerid] [message]");
	if(IsPlayerConnected(id))
	{
	    if(id != INVALID_PLAYER_ID)
	    {
			if(GetDistanceBetweenPlayers(playerid,id) > 5) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
			if(Spectate[id] != -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
		    if(HidePM[id] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player doesn't allow whispers.");
			if(id == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can not send a message to yourself.");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			format(string, sizeof(string), "%s whispers: %s", sendername, mess);
			SendClientMessage(id, COLOR_YELLOW, string);
			format(string, sizeof(string), "Whisper to %s: %s", giveplayer, mess);
			SendClientMessage(playerid,  COLOR_YELLOW, string);
			new var100[300],resulttt[300],strr[300];
			format(strr, sizeof(strr),"%s whisper to %s: %s", sendername, giveplayer, mess);
			mysql_real_escape_string(strr, resulttt);
			mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','w')", PlayerInfo[playerid][pSQLID], resulttt);
			mysql_tquery(SQL,var100,"","");
			for(new adm = 0; adm<=MAX_PLAYERS;adm++)
			{
				if(IsPlayerConnected(adm))
				{
    				if(PlayerInfo[adm][pAdmin] > 0 && BigEar[adm] == 1)
	    			{
	        			format(string, sizeof(string), "Whisper: (%d) %s to (%d) %s: %s",playerid,sendername,id,giveplayer,mess);
						SendClientMessage(adm,  COLOR_YELLOW, string);
	    			}
				}
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	return 1;
}
CMD:w(playerid, params[]) return cmd_whisper(playerid, params);
CMD:makeleader(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new para1,level,string[256],giveplayer[25],sendername[25],escape[256];
     	if(sscanf(params, "ui",para1,level))
    	{
	     	SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /makeleader [name/playerid] [faction]");
			SendClientMessage(playerid, COLOR_WHITE, "(1) LSPD (2) FBI (3) National Guard (4) Los Aztecas");
			SendClientMessage(playerid, COLOR_WHITE, "(5) Grove Street (6) Los Vagos (7) Mayor (8) LVPD");
			SendClientMessage(playerid, COLOR_WHITE, "(9) News Reporter (10) Ballas (11) Hitman Agency");
			SendClientMessage(playerid, COLOR_WHITE, "(13) Los Santos Taxi (14) Paramedic");
			return 1;
		}
		if(level > 14 || level < 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Don't go below number 1, or above number 14.");
		if(level == 12) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This group doesn't exit.");
	    if(IsPlayerConnected(para1))
	    {
	        if(para1 != INVALID_PLAYER_ID)
	        {
	            if(PlayerInfo[para1][pMember] > 0 && PlayerInfo[para1][pLeader] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is in a faction.");
				GetPlayerName(para1, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new ftext[50],query[256];
				if(level == 1) { ftext = "Los Santos Police Department"; } //Police Force
				else if(level == 2) { ftext = "Federal Bureau of Investigations"; } //FBI
				else if(level == 3) { ftext = "National Guard"; } //National Guard
				else if(level == 4) { ftext = "Los Aztecas"; } //Los Aztecas
				else if(level == 5) { ftext = "Grove Street"; } //Grove Street
				else if(level == 6) { ftext = "Los Vagos"; } //Los Vagos
				else if(level == 7) { ftext = "Mayor"; } //Mayor
				else if(level == 8) { ftext = "Las Venturas Police Department"; } //LVPD
				else if(level == 9) { ftext = "News Reporters"; } //News Reporter
				else if(level == 10) { ftext = "Ballas"; } //Ballas
                else if(level == 11) { ftext = "Hitman Agency"; } //The Agency
                //else if(level == 12) { ftext = "School Instructors LV"; } //School Instructors
                else if(level == 13) { ftext = "Taxi"; } //Los Santos Taxi
                else if(level == 14) { ftext = "Las Venturas Paramedic Department"; } //Paramedic
				PlayerInfo[para1][pMember] = level;
				PlayerInfo[para1][pLeader] = level;
				format(string, sizeof(string), "<< Administrator %s has set you to lead group %s. >>", sendername,ftext);
				SendClientMessage(para1, COLOR_DARKPINK, string);
				format(string, sizeof(string), "<< Admin %s has set %s to lead group %s >>",sendername,giveplayer,ftext);
				ABroadCast(COLOR_RED2,string,1);
				format(string, sizeof(string), "%s is now the leader of faction %s.", PlayerInfo[para1][pNormalName], ftext);
				Log(PlayerInfo[playerid][pSQLID], string, "staff");
				mysql_real_escape_string(string, escape);
				Factionlog(level,PlayerInfo[para1][pSQLID],PlayerInfo[playerid][pSQLID],escape);
				mysql_format(SQL, query, sizeof(query), "INSERT INTO faction_logs (`text`, `player`,`leader`) VALUES ('%s','%d','%d')", escape, PlayerInfo[para1][pSQLID],PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL,query,"","");
				mysql_format(SQL, query, sizeof(query), "INSERT INTO staff_logs (`text`) VALUES ('%s')", escape);
				mysql_tquery(SQL,query,"","");
				if(level == 0)
				{
				    gTeam[para1] = 3;
			    	PlayerInfo[para1][pTeam] = 3;
				}
				else if(level == 1 || level == 2 || level == 3 || level == 7 || level == 8)
				{
				    gTeam[para1] = 2;
			    	PlayerInfo[para1][pTeam] = 2;
				}
				else if(level == 4 || level == 5 || level == 6 || level == 10)
				{
				    gTeam[para1] = 5;
			    	PlayerInfo[para1][pTeam] = 5;
				}
				else if(level == 9 || level == 12 || level == 13 || level == 14)
				{
				    gTeam[para1] = 4;
			    	PlayerInfo[para1][pTeam] = 4;
				}
				else if(level == 11)
				{
				    gTeam[para1] = 11;
			    	PlayerInfo[para1][pTeam] = 11;
				}
				else if(level == 7)
				{
				    gTeam[para1] = 11;
			    	PlayerInfo[para1][pTeam] = 11;
				}
			    SetPlayerSkinEx(para1);
                PlayerInfo[para1][pRank] = 7;
                PlayerInfo[para1][pFactionJoin] = gettime();
			 	new wakaname[25];
				GetPlayerName(para1,wakaname,25);
				new str[356];
				mysql_format(SQL,str,356,"UPDATE users SET `Leader`='%d',`Member`='%d',`Rank`='7',`Team`='%d',`Model`='%d',`FactionJoin`='%d' WHERE `name`='%s'",PlayerInfo[para1][pLeader],PlayerInfo[para1][pMember],PlayerInfo[para1][pTeam],PlayerInfo[para1][pModel],PlayerInfo[para1][pFactionJoin],PlayerInfo[para1][pNormalName]);
				mysql_tquery(SQL,str,"","");
				new str2[356];
				mysql_format(SQL,str2,356,"UPDATE factions SET `Name7`='1' WHERE `ID`='%s'",PlayerInfo[para1][pMember]);
				mysql_tquery(SQL,str2,"","");
				SetPlayerToTeamColor(para1);
				PlayerInfo[para1][Raport1] = 0;
				PlayerInfo[para1][Raport2] = 0;
				PlayerInfo[para1][Raport3] = 0;
				PlayerInfo[para1][Raport4] = 0;
				PlayerInfo[para1][Raport5] = 0;
				PlayerInfo[para1][Raport6] = 0;
				PlayerInfo[para1][pPaydayON] = 0;
				new varxx[256];
				mysql_format(SQL, varxx, sizeof(varxx), "UPDATE users SET Raport1 = 0, Raport2 = 0, Raport3 = 0, Raport4 = 0, Raport5 = 0, Raport6 = 0, PaydayON = 0 WHERE name = '%s'",PlayerInfo[para1][pNormalName]);
				mysql_tquery(SQL,varxx,"","");
			}
		}
 		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:refill(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pJob] != 8) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a mechanic.");
	new playa,money,string[256],giveplayer[25],sendername[25];
 	if(sscanf(params, "ui",playa,money)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /refill [name/playerid] [price]");
	if(money < 1 || money > 1000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Price not lower then 1, or above 1,000.");
	if(RefillOffer[playa] == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player have already a refill offer.");
	if(RepairTime[playerid] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Poti folosi asta doar o data la 60 de secunde.", "(Error){FFFFFF} You can use this command once per 60 seconds.");
	if(IsPlayerConnected(playa))
	{
	    if(playa != INVALID_PLAYER_ID)
	    {
	        if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
			{
			    if(playa == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't offer refill to yourself.");
			    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "(Job){FFFFFF} You offered %s to refill his car for $%s.",giveplayer,FormatNumber(money));
				SendClientMessage(playerid, COLOR_JOB, string);
				format(string, sizeof(string), "%s wants to refill your car for $%s, type /accept refill %d to accept the offer.",sendername,FormatNumber(money),playerid);
				SendClientMessage(playa, COLOR_WHITE, string);
				RefillOffer[playa] = playerid;
				RefillPrice[playa] = money;
				RepairTime[playerid] = 60;
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} That player is not near you/not in a car.");
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	return 1;
}
CMD:repair(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pJob] != 8) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a mechanic.");
	new playa,money,string[256],giveplayer[25],sendername[25];
	if(sscanf(params, "ui",playa,money)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /repair [name/playerid] [price]");
	if(money < 1 || money > 30000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Price not lower then 1, or above 1,000.");
	if(RepairOffer[playa] == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player have already a repair offer.");
	if(RepairTime[playerid] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to wait 60 seconds to use this command again.");
	if(IsPlayerConnected(playa))
	{
	    if(playa != INVALID_PLAYER_ID)
	    {
	        if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
			{
			    if(playa == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't offer repair to yourself.");
		    	GetPlayerName(playa, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "(Job){FFFFFF} You offered %s to fix his car for $%s.",giveplayer,FormatNumber(money));
				SendClientMessage(playerid, COLOR_JOB, string);
				format(string, sizeof(string), "%s wants to repair your car for $%s, type /accept repair %d to accept the offer.",sendername,FormatNumber(money),playerid);
				SendClientMessage(playa, COLOR_WHITE, string);
				RepairOffer[playa] = playerid;
				RepairPrice[playa] = money;
				RepairTime[playerid] = 60;
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} That player is not near you/not in a car.");
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	return 1;
}
CMD:dropcar(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pJob] != 2) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a car jacker. Use /jobs.");
	if(CP[playerid] > 0 || UsedFind[playerid] == 0)
	{
 		ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel checkpoint", "You are sure to cancel the current checkpoint?", "Yes", "No");
	}
    if(JackAcc[playerid] > 0)
	{
		new string[128];
		format(string,sizeof(string),"(Job){FFFFFF} Wait %d seconds before drop another car.",JackAcc[playerid]);
		SendClientMessage(playerid, COLOR_JOB, string);
		return 1;
	}
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
		if(!IsAnOwnableCar(GetPlayerVehicleID(playerid)))
		{
			SetPlayerCheckpoint(playerid, 2850.9663, 891.8728, 10.7500, 10.0);
			CarJacker[playerid] = 1;
			SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} Reach the checkpoint to drop your vehicle off at the crane.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't sell personal vehicles.");
	}
	return 1;
}
CMD:tow(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pJob] == 8)
    {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            new m = GetVehicleModel(GetPlayerVehicleID(playerid));
	    	if(m == 525)
     	   	{
     	   	    if(TowAcc[playerid] == 1) return SS(playerid, COLOR_JOB, "(Job){FFFFFF} Nu poti tracta atat de repede o masina, trebuie sa astepti 2 minute.","(Job){FFFFFF} You can't tow a vehicle so fast, you need to wait 2 minutes.");
     	   	    if(GetPlayerState(playerid)==2)
     	   	    {
					new Float:pX,Float:pY,Float:pZ;
					GetPlayerPos(playerid,pX,pY,pZ);
					new Float:vX,Float:vY,Float:vZ;
					new Found=0;
					new vid=0;
					while((vid<MAX_VEHICLES)&&(!Found))
					{
	   					vid++;
	   					GetVehiclePos(vid,vX,vY,vZ);
	   					if((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pZ-vZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
						{
							if(IsABike(vid) || GetVehicleModel(vid) == 448 || GetVehicleModel(vid) == 461 || GetVehicleModel(vid) == 462 || GetVehicleModel(vid) == 463 || GetVehicleModel(vid) == 468 || GetVehicleModel(vid) == 471 || GetVehicleModel(vid) == 521 || GetVehicleModel(vid) == 522 || GetVehicleModel(vid) == 523)
							{
	 							SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} Please chose another vehicle this is invalid model.");
							    return 1;
							}
							if(IsAnOwnableCar(vid)) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You can't tow personal cars.");
						    Found=1;
	   				    	if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
	           				{
	   				        	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
                 				DisablePlayerCheckpoint(playerid);
                                gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
					       	}
				           	else
				           	{
	    						AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
                				new rand;
								rand = random(sizeof(TowCarCk));
					 		    SetPlayerCheckpoint(playerid, TowCarCk[rand][0],TowCarCk[rand][1],TowCarCk[rand][2], 6);
                     			CP[playerid] = 34;
							}
	 					}
	     			}
					if(!Found) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} There is no car near to you.");
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be the driver.");
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be in a tow truck to use this command.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be in a tow truck to use this command.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be a mechanic to use this command.");
	return 1;
}
CMD:spawnchange(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pPhousekey] != 999 || PlayerInfo[playerid][pRented] != -1)
    {
        if(PlayerInfo[playerid][pSpawnChange] == 1)
        {
            SendClientMessage(playerid, COLOR_CYAN, "Spawn Changed! You will now be spawned at the HQ / spawn zone.");
            PlayerInfo[playerid][pSpawnChange] = 0;
            Update(playerid, pSpawnChangex);
        }
        else
        {
            SendClientMessage(playerid, COLOR_CYAN, "Spawn Changed! You will now be spawned at your own / rented house.");
            PlayerInfo[playerid][pSpawnChange] = 1;
            Update(playerid, pSpawnChangex);
        }
    }
    else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You do not have a home or a rent.");
    return 1;
}
CMD:unfreeze(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new playa;
		if(sscanf(params, "u",playa)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /unfreeze [name/playerid]");
	    if(IsPlayerConnected(playa))
	    {
	        if(playa != INVALID_PLAYER_ID)
	        {
				TogglePlayerControllable(playa, 1);
				Freezed[playa] = 0;
				new sendername[25],giveplayer[25],string[100];
				GetPlayerName(playerid,sendername,sizeof(sendername));
				GetPlayerName(playa,giveplayer,sizeof(giveplayer));
				format(string, sizeof(string), "%s unfrozen %s (/unfreeze).",sendername, giveplayer);
				ABroadCast(COLOR_RED2,string,1);
				HLChat(COLOR_RED2,string);
				return 1;
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3,"You are not an admin/helper.");
	return 1;
}
CMD:freeze(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new playa,string[128],sendername[30],giveplayer[30];
		if(sscanf(params, "u",playa)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /freeze [name/playerid]");
	    if(IsPlayerConnected(playa))
	    {
	        if(playa != INVALID_PLAYER_ID)
	        {
				TogglePlayerControllable(playa, 0);
				Freezed[playa] = 1;
				GetPlayerName(playerid,sendername,sizeof(sendername));
				GetPlayerName(playa,giveplayer,sizeof(giveplayer));
				format(string, sizeof(string), "%s has frozen %s (/freeze).",sendername, giveplayer);
				ABroadCast(COLOR_RED2,string,1);
				HLChat(COLOR_RED2,string);
				return 1;
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin/helper.");
	return 1;
}
CMD:entercar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new testcar,loc;
		if(sscanf(params, "ii",testcar,loc)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /entercar [car id] [seat id]");
		if(loc < 0 || loc > 4) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid Seat ID(0-4).");
		if(GetPlayerAnimationIndex(playerid) != 1189) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosii aceasta comanda cand esti in miscare.","(Error){FFFFFF} You can't use this animation when you moving.");
		PutPlayerInVehicleEx(playerid, testcar, loc);
		SendClientMessage(playerid, COLOR_GRAD1, "You have been teleported.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:putplayerinvehicle(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new testcar,loc,id;
		if(sscanf(params, "uii",id,testcar,loc)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /putplayerinvehicle [name/playerid] [car id] [seat id]");
		if(loc < 0 || loc > 4) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid Seat ID(0-4).");
		PutPlayerInVehicleEx(id, testcar, loc);
		SendClientMessage(id, COLOR_GRAD1, "You have been teleported.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:getcar(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new plo;
		if(sscanf(params, "i",plo)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /getcar [car id]");
	    new Float:plocx,Float:plocy,Float:plocz;
	    new interiorr = GetPlayerInterior(playerid);
	    new virtuall = GetPlayerVirtualWorld(playerid);
		GetPlayerPos(playerid, plocx, plocy, plocz);
		SetVehiclePos(plo,plocx,plocy+4, plocz);
		GetVehiclePos(plo, old_veh_pos[plo][0], old_veh_pos[plo][1], old_veh_pos[plo][2]);
		LinkVehicleToInterior(plo, interiorr);
		SetVehicleVirtualWorld(plo, virtuall);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:fill(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new idcar = GetPlayerVehicleID(playerid);
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
	    if(GetPVarInt(playerid, "Engine") == 0 && !IsABike(idcar))
        {
	    	if(IsAtGasStation(playerid))
	    	{
 				TogglePlayerControllable(playerid, 0);
   				GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Re-Fueling Vehicle, please wait",2000,3);
    			SetTimerEx("Fillup",RefuelWait,0,"i",playerid);
   				Refueling[playerid] = 1;
	    	}
	    	else
		    {
		        if(PlayerInfo[playerid][pFuel] > 0)
		        {
		    		new fill_veh = 100;

				    foreach(new s : Player)
						for(new v; v < MAX_PERSONAL_VEHICLES; v++)
							if(PlayerInfo[s][pCarID][v] == idcar) fill_veh = PlayerInfo[s][pCarGasMax][v];

		    		SendClientMessage(playerid, COLOR_DARKPINK, "* You filled your car with 20% fuel from your gas can.");
					if(Gas[idcar] < fill_veh - 20) Gas[idcar] += 20;
					else return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Ai suficient combustibil in vehicul!", "(Error){FFFFFF} You have enough fuel in your vehicle.");
		        	PlayerInfo[playerid][pFuel] = 0;
					new str[128];
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Fuel`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str,"","");
					TogglePlayerControllable(playerid, 1);
				}
				return 1;
	    	}
    	}
    	else return SendClientMessage(playerid,COLOR_ERROR,"(Error){FFFFFF} You need to stop your engine before reffueling!");
    }
	return 1;
}
CMD:fillgascan(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pGasCan] != 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a gas can. Go to a 24/7 shop to buy one.");
    if(PlayerInfo[playerid][pFuel] < 20)
    {
    	if(IsAtGasStation(playerid))
    	{
 			new price = 20 * 50;
 			if(GetPlayerCash(playerid) < price) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enought money.");
			new string[128];
			format(string, sizeof(string), "Ai platit $%s pentru a umple canistra cu benzina.",FormatNumber(price));
			SendClientMessage(playerid, COLOR_GREEN, string);
			PlayerInfo[playerid][pFuel] = 20;
			GivePlayerCash(playerid, - price);
			new str[178],bid;
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d',`Fuel`='20' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
            if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[33][bEntranceX],BizzInfo[33][bEntranceY],BizzInfo[33][bEntranceZ])) bid = 33;
			else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[42][bEntranceX],BizzInfo[42][bEntranceY],BizzInfo[42][bEntranceZ])) bid = 42;
			else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[43][bEntranceX],BizzInfo[43][bEntranceY],BizzInfo[43][bEntranceZ])) bid = 43;
			else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[44][bEntranceX],BizzInfo[44][bEntranceY],BizzInfo[44][bEntranceZ])) bid = 44;
			else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[45][bEntranceX],BizzInfo[45][bEntranceY],BizzInfo[45][bEntranceZ])) bid = 45;
			else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[46][bEntranceX],BizzInfo[46][bEntranceY],BizzInfo[46][bEntranceZ])) bid = 46;
			else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[47][bEntranceX],BizzInfo[47][bEntranceY],BizzInfo[47][bEntranceZ])) bid = 47;
			else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[48][bEntranceX],BizzInfo[48][bEntranceY],BizzInfo[48][bEntranceZ])) bid = 48;
			else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[49][bEntranceX],BizzInfo[49][bEntranceY],BizzInfo[49][bEntranceZ])) bid = 49;
			else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[50][bEntranceX],BizzInfo[50][bEntranceY],BizzInfo[50][bEntranceZ])) bid = 50;
			BizzInfo[bid][bTill] += price;
	    	mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
			mysql_tquery(SQL,str,"","");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not near a gas station.");
	}
    else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Your gas can is already full.");
	return 1;
}

stock GivePizzaCp(playerid)
{
	new string[128];
	DisablePlayerRaceCheckpoint(playerid);
	new rand,Float:Position[3],distance;
	rand = random(sizeof(gRandomPizza));
	GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	SetPlayerRaceCheckpoint(playerid,1,gRandomPizza[rand][0],gRandomPizza[rand][1],gRandomPizza[rand][2],0.0,0.0,0.0,4.0);
	distance = floatround(GetDistanceBetweenPoints(Position[0],Position[1], Position[2], gRandomPizza[rand][0], gRandomPizza[rand][1], gRandomPizza[rand][2]), floatround_round);
	pizzaprize[playerid] = distance/10 + SvarInfo[9][svValue] + PlayerInfo[playerid][pPizzaSkill]*1000;
	if(PlayerInfo[playerid][pPet] != 0) pizzaprize[playerid] += PlayerInfo[playerid][pPetLevel]*100;
	pizzaj[playerid] = 1;
	PizzaCP[playerid] = 1;
	format(string, sizeof(string), "Pizza boxes in scooter: %d boxes", packageson[playerid]);
	PlayerTextDrawSetString(playerid, Packages[playerid], string);
	PlayerTextDrawShow(playerid, Packages[playerid]);
	SS(playerid, COLOR_JOB, "(Job){FFFFFF} Mergi la checkpoint pentru a livra pizza!", "(Job){FFFFFF} Go to the checkpoint for deliver pizza!");
	return 1;
}

stock GiveJobVeh(playerid, model)
{
	new Float:X,Float:Y,Float:Z,string[10];
	GetPlayerPos(playerid, X,Y,Z);
 	PlayerInfo[playerid][pJobVehicle] = CreateVehicle(model, X,Y,Z, 0.0,  -1, -1, -1);
 	vehRadio[PlayerInfo[playerid][pJobVehicle]] = 0;
 	format(string, sizeof(string),"Job %d", PlayerInfo[playerid][pJob]);
	SetVehicleNumberPlate(PlayerInfo[playerid][pJobVehicle], string);
	LinkVehicleToInterior(PlayerInfo[playerid][pJobVehicle], GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(PlayerInfo[playerid][pJobVehicle], GetPlayerVirtualWorld(playerid));
	PutPlayerInVehicle(playerid, PlayerInfo[playerid][pJobVehicle], 0);
	return 1;
}

stock CancelJob(playerid)
{
	RemovePlayerFromVehicle(playerid);
	if(PlayerInfo[playerid][pJob] == 5) {
		CP[playerid] = 0;
		pizzaj[playerid] = 0;
		PizzaCP[playerid] = 0;
		pizzaprize[playerid] = 0;
		packageson[playerid] = 0;
		DisablePlayerRaceCheckpoint(playerid);
		PlayerTextDrawHide(playerid, Packages[playerid]);
	}
	else if(PlayerInfo[playerid][pJob] == 6 && farmerc[playerid] == 1) {
		farmerc[playerid] = 0;
		farmertime[playerid] = 50;
		PlayerTextDrawHide(playerid, farmtime[playerid]);
		PlayerTextDrawHide(playerid, farmspeed[playerid]);
		PlayerTextDrawHide(playerid, farmwanted[playerid]);
		KillTimer(timerfarmm[playerid]);
	}
	else if(PlayerInfo[playerid][pJob] == 14 && (Trucker[playerid] >= 1 || Trucker2[playerid] >=1)) {
		Trucker[playerid] = 0;
        Trucker2[playerid] = 0;
	}
	else if(PlayerInfo[playerid][pJob] == 7 && busc[playerid] == 1) {
		busc[playerid] = 0;
		PlayerTextDrawHide(playerid, BusJob[playerid]);
		PlayerTextDrawHide(playerid, BusCheck[playerid]);
		KillTimer(timerbus[playerid]);
		DisablePlayerRaceCheckpoint(playerid);
		CheckBus[playerid] = 0;
		if(JobStep[playerid] >= 1)
		{
			JobStep[playerid] = 0;
			GivePlayerCash(playerid, -200);
			SS(playerid, COLOR_JOB, "(Job){FFFFFF} Ai platit $200 companiei de autobuze pentru taxe.","(-) You paid $200 to bus company for taxes.");
		}
	}
	else if(PlayerInfo[playerid][pJob] == 15) {
		CP[playerid] = 0;
		airj[playerid] = 0;
		AirCP[playerid] = 0;
		airprize[playerid] = 0;
		packageson[playerid] = 0;
		DisablePlayerRaceCheckpoint(playerid);
		PlayerTextDrawHide(playerid, Packages[playerid]);
	}
	DestroyJobVeh(playerid);
	return 1;
}

stock DestroyJobVeh(playerid)
{
	DestroyVehicle(PlayerInfo[playerid][pJobVehicle]);
	PlayerInfo[playerid][pJobVehicle]=0;
	DisablePlayerCheckpoint(playerid);
	SS(playerid, COLOR_JOB, "(Job){FFFFFF} Job terminat!", "(Job){FFFFFF} Job ended!");
	if(viddd[playerid] != 0)
	{
	    DestroyVehicle(viddd[playerid]);
	    viddd[playerid] = 0;
	}
	return 1;
}

stock FarmerStart(playerid)
{
    KillTimer(timerfarmm[playerid]);
	farmerc[playerid] = 1;
	farmertime[playerid] = 50;
	timerfarmm[playerid] = SetTimerEx("SetFarmer", 1000, 1, "i", playerid);
	return 1;
}

stock TruckerStart(playerid)
{
	Trucker2[playerid] = 1;
	SetPlayerCheckpoint(playerid,-54.6322,-1461.7084,6.8239,5.0);
	SS(playerid, COLOR_JOB, "(Job){FFFFFF} Mergi la checkpoint pentru a incepe munca.","(Job){FFFFFF} Go to the checkpoint for start the work.");
	SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} If you lose the trailer you can press left ALT to attach him back.");
	return 1;
}

stock BusStart(playerid)
{
	new string[64];
    PlayerTextDrawShow(playerid, BusJob[playerid]);
    format(string,sizeof(string),"~w~CHECKPOINTS: ~r~0~w~/~r~59");
	PlayerTextDrawSetString(playerid, BusCheck[playerid], string);
	PlayerTextDrawShow(playerid, BusCheck[playerid]);
	SS(playerid, COLOR_JOB, "(Job){FFFFFF} Mergi la checkpoint.","(Job){FFFFFF} Go to the checkpoint.");
	busc[playerid] = 1;
	CheckBus[playerid] = 1;
	SetPlayerRaceCheckpoint(playerid, 0, 1693.2972,-2197.6602,13.4714,1941.3706,-2169.2083,13.4851,4.0);
	return 1;
}

forward Minerloot(playerid);
public Minerloot(playerid)
{
	if(InMinerJob[playerid] == 0) return MinerCancel(playerid);
	ClearAnimations(playerid);
	RemovePlayerAttachedObject(playerid, 9);
	TogglePlayerControllable(playerid, 1);
	if(minerloot[playerid] == 1) SetPlayerAttachedObject(playerid,9,2060,14,0.247998,-0.191998,0.132000,100.499984,10.199997,-102.599983,0.518998,0.708000,1.068999, 0xFFE6C5A2);
	else if(minerloot[playerid] == 2) SetPlayerAttachedObject(playerid,9,2060,14,0.247998,-0.191998,0.132000,100.499984,10.199997,-102.599983,0.518998,0.708000,1.068999, 0xFFD1CCC6);
	else if(minerloot[playerid] == 3) SetPlayerAttachedObject(playerid,9,2060,14,0.247998,-0.191998,0.132000,100.499984,10.199997,-102.599983,0.518998,0.708000,1.068999, 0xFFECF142);
	else if(minerloot[playerid] == 4) SetPlayerAttachedObject(playerid,9,2060,14,0.247998,-0.191998,0.132000,100.499984,10.199997,-102.599983,0.518998,0.708000,1.068999, 0xFF42F1E9);
	ApplyAnimation(playerid,"CARRY","crry_prtial",4.0,1,0,0,1,1,1);
	SetPlayerCheckpoint(playerid, -402.2753,1239.8280,5.0360,3.0);
	CP[playerid] = 550;
	return 1;
}

stock MinerCancel(playerid)
{
	ClearAnimations(playerid);
	RemovePlayerAttachedObject(playerid, 9);
	TogglePlayerControllable(playerid, 1);
	if(PlayerInfo[playerid][pPet] != 0 && PlayerInfo[playerid][pPetStatus] != 0) AttachPet(playerid);
	InMinerJob[playerid] = 0;
	minerloot[playerid] = 0;
	CP[playerid] = 0;
	DisablePlayerCheckpoint(playerid);
	SS(playerid, COLOR_JOB, "(Job){FFFFFF} Job terminat!", "(Job){FFFFFF} Job ended!");
	return 1;
}

stock MinerStart(playerid)
{
	new RandomCheck = random(4);
	ClearAnimations(playerid);
	InMinerJob[playerid] = 1;
	minerloot[playerid] = 0;
	CP[playerid] = 0;
	switch(RandomCheck)
  	{
        case 0: // iron
     	{
            CP[playerid] = 546;
			SetPlayerCheckpoint(playerid, -402.2740,1295.7325,9.7172,2.0);
		}
  		case 1: // silver
    	{
            CP[playerid] = 547;
			SetPlayerCheckpoint(playerid, -400.7913,1309.5493,11.0315,2.0);
   		}
   		case 2: //gold
    	{
            CP[playerid] = 548;
			SetPlayerCheckpoint(playerid, -423.9014,1371.1931,12.8903,2.0);
   		}
   		case 3: //diamond
    	{
            CP[playerid] = 549;
			SetPlayerCheckpoint(playerid, -433.3321,1426.8187,19.9604,2.0);
   		}
   	}
	return 1;
}

stock StrawberryCancel(playerid)
{
	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, 1);
	PlayerTextDrawHide(playerid, Packages[playerid]);
	InStrawberryJob[playerid] = 0;
	StrawCP[playerid] = 0;
	DisablePlayerRaceCheckpoint(playerid);
	SS(playerid, COLOR_JOB, "(Job){FFFFFF} Job terminat!", "(Job){FFFFFF} Job ended!");
	return 1;
}

stock StrawberryStart(playerid)
{
	new string[128];
	DisablePlayerRaceCheckpoint(playerid);
	new rand,Float:Position[3];
	rand = random(sizeof(gRandomStrawberry));
	GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	SetPlayerRaceCheckpoint(playerid,2,gRandomStrawberry[rand][0],gRandomStrawberry[rand][1],gRandomStrawberry[rand][2],0.0,0.0,0.0,3.0);
	StrawCP[playerid] = 1;
	format(string, sizeof(string), "Strawberry basket: %d/%d strawberrys", packageson[playerid],PlayerInfo[playerid][pStrawSkill]*10);
	PlayerTextDrawSetString(playerid, Packages[playerid], string);
	PlayerTextDrawShow(playerid, Packages[playerid]);
	SS(playerid, COLOR_JOB, "(Job){FFFFFF} Mergi la checkpoint pentru a culege capsuni!", "(Job){FFFFFF} Go to the checkpoint for collect strowberrys!");
	return 1;
}

forward StrawCollect(playerid);
public StrawCollect(playerid)
{
	if(InStrawberryJob[playerid] == 0) return StrawberryCancel(playerid);
	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid);
	new string[128];
	StrawCP[playerid] = 0;
	new rand = 1 + random(4);
	format(string,sizeof(string),"(Job){FFFFFF} You collected %d strawberrys.",rand);
	SendClientMessage(playerid,COLOR_JOB,string);
	packageson[playerid]+=rand;
	if(packageson[playerid] < 10*PlayerInfo[playerid][pStrawSkill]) StrawberryStart(playerid);
	else {
		DisablePlayerRaceCheckpoint(playerid);
		SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} Go to the checkpoint to receive your reward for strawberrys.");
		StrawCP[playerid] = 2;
		SetPlayerRaceCheckpoint(playerid,2,-78.0348,90.0071,3.1172,0.0,0.0,0.0,3.0);
		PlayerTextDrawHide(playerid,Packages[playerid]);
	}
	return 1;
}

forward AirDrop(playerid);
public AirDrop(playerid)
{
	new string[128];
	AirCP[playerid] = 0;
	airj[playerid] = 0;
	format(string,sizeof(string),"(Job){FFFFFF} Package was delivered with succes! You won %s$.",FormatNumber(airprize[playerid]));
	SendClientMessage(playerid,COLOR_JOB,string);
	GivePlayerCash(playerid,airprize[playerid]);
	if(PlayerInfo[playerid][pClan]!=0) {
    	new safestring[128];
		ClanInfo[PlayerInfo[playerid][pClan]][cClanSeif]+=airprize[playerid]/10;
		ClanUpdate(PlayerInfo[playerid][pClan], ClanSafex);
		PlayerInfo[playerid][pClanDep]+=airprize[playerid]/10;
		Update(playerid, pClanDepx);
		format(safestring,sizeof(safestring), "(Job){FFFFFF} After your work %s$ was added in {%s}clan safe{FFFFFF}.",FormatNumber(airprize[playerid]/10),ClanInfo[PlayerInfo[playerid][pClan]][cClanColor]);
		SendClientMessage(playerid,COLOR_JOB,safestring);
	}
	airprize[playerid] = 0;
	PlayerInfo[playerid][pAirRem]--;
	PlayerInfo[playerid][pAirTimes]++;
	Update(playerid,pAirRemx);
	Update(playerid,pAirTimesx);
	if(PlayerInfo[playerid][pQuest2] == 8)
	{
		if(PlayerInfo[playerid][pQuestNeed2] > PlayerInfo[playerid][pQuestProgress2])
		{
			PlayerInfo[playerid][pQuestProgress2]++;
			Update(playerid, pQuestProgress2x);
			if(PlayerInfo[playerid][pQuestProgress2] >= PlayerInfo[playerid][pQuestNeed2])
			{
				FinishQuest2(playerid, 8);
			}
			else
			{
				new str[128];
				if(PlayerInfo[playerid][pLanguage] == 1)
				{
					format(str, sizeof(str),"Quest [Deliver %d packages at Air Transporter] progress: %d/%d",PlayerInfo[playerid][pQuestNeed2],PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
					SendClientMessage(playerid, COLOR_YELLOW, str);
				}
				else
				{
					format(str, sizeof(str),"Progres pentru misiunea [Livreaza %d pachete la Air Transporter]: %d/%d",PlayerInfo[playerid][pQuestNeed2],PlayerInfo[playerid][pQuestProgress2],PlayerInfo[playerid][pQuestNeed2]);
					SendClientMessage(playerid, COLOR_YELLOW, str);
				}
			}
		}
	}
	if(PlayerInfo[playerid][pAirSkill] <= 5)
	{
		if(PlayerInfo[playerid][pAirRem] <= 0)
		{
		    PlayerInfo[playerid][pAirSkill]++;
			if(PlayerInfo[playerid][pAirSkill] == 2)
			{
				PlayerInfo[playerid][pAirRem] = 34;
			}
			else if(PlayerInfo[playerid][pAirSkill] == 3)
			{
				PlayerInfo[playerid][pAirRem] = 49;
			}
			else if(PlayerInfo[playerid][pAirSkill] == 4)
			{
				PlayerInfo[playerid][pAirRem] = 89;
			}
			else if(PlayerInfo[playerid][pAirSkill] == 5)
			{
				PlayerInfo[playerid][pAirRem] = 99;
			}
	    	Update(playerid,pAirSkillx);
	    	Update(playerid,pAirRemx);
			new stringe[128];
		    format(string,sizeof(string),"Felicitari! Ai acum skill %d pentru acest job!",PlayerInfo[playerid][pAirSkill]);
			format(stringe,sizeof(stringe),"Congratulations! Now you have skill %d for this job!",PlayerInfo[playerid][pAirSkill]);
		    SS(playerid, COLOR_YELLOW, string, stringe);
		}
	}
	if(packageson[playerid] != 0) GiveAirCp(playerid);
	else {
		DisablePlayerRaceCheckpoint(playerid);
		SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} Go to the checkpoint to get more packages.");
		AirCP[playerid] = 2;
		SetPlayerRaceCheckpoint(playerid,3,-1240.3885,-112.3491,44.1484,0.0,0.0,0.0,10.0);
		PlayerTextDrawHide(playerid,Packages[playerid]);
	}
	return 1;
}


stock GiveAirCp(playerid)
{
	new string[128];
	DisablePlayerRaceCheckpoint(playerid);
	new rand,Float:Position[3],distance;
	rand = random(sizeof(gRandomAir));
	GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	SetPlayerRaceCheckpoint(playerid,3,gRandomAir[rand][0],gRandomAir[rand][1],gRandomAir[rand][2],0.0,0.0,0.0,10.0);
	distance = floatround(GetDistanceBetweenPoints(Position[0],Position[1], Position[2], gRandomAir[rand][0], gRandomAir[rand][1], gRandomAir[rand][2]), floatround_round);
	airprize[playerid] = distance/10 + SvarInfo[18][svValue] + PlayerInfo[playerid][pAirSkill]*1000;
	if(PlayerInfo[playerid][pPet] != 0) airprize[playerid] += PlayerInfo[playerid][pPetLevel]*100;
	airj[playerid] = 1;
	AirCP[playerid] = 1;
	format(string, sizeof(string), "Packages in plane: %d packages", packageson[playerid]);
	PlayerTextDrawSetString(playerid, Packages[playerid], string);
	PlayerTextDrawShow(playerid, Packages[playerid]);
	SS(playerid, COLOR_JOB, "(Job){FFFFFF} Mergi la checkpoint pentru a livra pachetul!", "(Job){FFFFFF} Go to the checkpoint for deliver the package!");
	return 1;
}

CMD:work(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pJob] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a job.");
	if(CP[playerid] >= 1 || IsATruck(GetPlayerVehicleID(playerid)) || CheckBus[playerid] >= 1 || GotoMats[playerid] >= 1 || UsedFind[playerid] != 0 || CarJacker[playerid] >= 1 || BeeCar[playerid] != 0 || PlayerInfo[playerid][pJobVehicle] != 0 || InMinerJob[playerid] != 0 || InStrawberryJob[playerid] != 0)
		return ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel checkpoint", "You are sure to cancel the current checkpoint?", "Yes", "No");
	if(InMinerJob[playerid] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are already mining!");
	if(InStrawberryJob[playerid] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are aready collecting strowberrys.");
	if(PlayerInfo[playerid][pJob] == 5)	{
		if(!PlayerToPoint(5.0,playerid, 2114.5991,-1773.2551,13.4076)) {
			SetPlayerCheckpoint(playerid,2114.5991,-1773.2551,13.4076,4.0);
			CP[playerid] = 43;
			SendClientMessage(playerid,COLOR_JOB, "(Job){FFFFFF} You are not at correct location, go to the checkpoint to start work!");
			return 1;
		}
		if(PlayerInfo[playerid][pCarLic] == 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You need a driving license to use this command.");
    	if(GetPlayerAnimationIndex(playerid) != 1189) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosii aceasta comanda cand esti in miscare.","(Error){FFFFFF} You can't use this animation when you moving.");
		packageson[playerid] = 5*PlayerInfo[playerid][pPizzaSkill];
		GivePizzaCp(playerid);
		GiveJobVeh(playerid,448);
	}
	else if(PlayerInfo[playerid][pJob] == 6) {
		if(!PlayerToPoint(5.0,playerid, -387.6437,-1387.8787,23.0775)) {
			SetPlayerCheckpoint(playerid,-387.6437,-1387.8787,23.0775,4.0);
			CP[playerid] = 43;
			SendClientMessage(playerid,COLOR_JOB, "(Job){FFFFFF} You are not at correct location, go to the checkpoint to start work!");
			return 1;
		}
		if(PlayerInfo[playerid][pCarLic] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need a driving license to use this command.");
    	if(GetPlayerAnimationIndex(playerid) != 1189) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosii aceasta comanda cand esti in miscare.","(Error){FFFFFF} You can't use this animation when you moving.");
		if(AreFaina[playerid] != 0) return SS(playerid, COLOR_JOB, "(Job){FFFFFF} Vinde faina inainte de a munci din nou.", "(Job){FFFFFF} Sell the flour before working again.");
		if(strcmp(PlayerInfo[playerid][pCrime1], "stealing a vehicle from the farm", false) == 0) return SS(playerid, COLOR_JOB, "(Job){FFFFFF} Nu poti munci aici pentru ca ai furat un vehicul de la ferma.", "(Job){FFFFFF} You can't work here because you recently stole a vehicle from the farm.");
		GiveJobVeh(playerid, 531);
		FarmerStart(playerid);
	}
	else if(PlayerInfo[playerid][pJob] == 14) {
		if(Trucker2[playerid] != 0) return 1;
		if(!PlayerToPoint(5.0,playerid, -67.1100,-1123.3777,1.9599)) {
			SetPlayerCheckpoint(playerid,-67.1100,-1123.3777,1.9599,4.0);
			CP[playerid] = 43;
			SendClientMessage(playerid,COLOR_JOB, "(Job){FFFFFF} You are not at correct location, go to the checkpoint to start work!");
			return 1;
		}
		if(PlayerInfo[playerid][pCarLic] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need a driving license to use this command.");
    	if(GetPlayerAnimationIndex(playerid) != 1189) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosii aceasta comanda cand esti in miscare.","(Error){FFFFFF} You can't use this animation when you moving.");
		if(PlayerInfo[playerid][pTruckSkill] < 3) GiveJobVeh(playerid, 514);
		else if(PlayerInfo[playerid][pTruckSkill] < 5) GiveJobVeh(playerid, 403);
		else GiveJobVeh(playerid, 515);
		TruckerStart(playerid);
	}
	else if(PlayerInfo[playerid][pJob] == 7) {
		if(!PlayerToPoint(5.0,playerid, 1681.1997,-2264.0535,13.5173)) {
			SetPlayerCheckpoint(playerid,1681.1997,-2264.0535,13.5173,4.0);
			CP[playerid] = 43;
			SendClientMessage(playerid,COLOR_JOB, "(Job){FFFFFF} You are not at correct location, go to the checkpoint to start work!");
			return 1;
		}
		if(PlayerInfo[playerid][pCarLic] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need a driving license to use this command.");
    	if(GetPlayerAnimationIndex(playerid) != 1189) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosii aceasta comanda cand esti in miscare.","(Error){FFFFFF} You can't use this animation when you moving.");
		BusStart(playerid);
		GiveJobVeh(playerid, 431);
	}
	else if(PlayerInfo[playerid][pJob] == 3) {
		if(!PlayerToPoint(5.0,playerid, -402.2753,1239.8280,5.0360)) {
			SetPlayerCheckpoint(playerid,-402.2753,1239.8280,5.0360,4.0);
			CP[playerid] = 43;
			SendClientMessage(playerid,COLOR_JOB, "(Job){FFFFFF} You are not at correct location, go to the checkpoint to start work!");
			return 1;
		}
    	if(GetPlayerAnimationIndex(playerid) != 1189) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosii aceasta comanda cand esti in miscare.","(Error){FFFFFF} You can't use this animation when you moving.");
		MinerStart(playerid);
	}
	else if(PlayerInfo[playerid][pJob] == 15) {
		if(!PlayerToPoint(5.0,playerid, -1240.3885,-112.3491,14.1484)) {
			SetPlayerCheckpoint(playerid,-1240.3885,-112.3491,14.1484,4.0);
			CP[playerid] = 43;
			SendClientMessage(playerid,COLOR_JOB, "(Job){FFFFFF} You are not at correct location, go to the checkpoint to start work!");
			return 1;
		}
		if(PlayerInfo[playerid][pFlyLic] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need a flying license to use this command.");
    	if(GetPlayerAnimationIndex(playerid) != 1189) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosii aceasta comanda cand esti in miscare.","(Error){FFFFFF} You can't use this animation when you moving.");
		packageson[playerid] = 5*PlayerInfo[playerid][pAirSkill];
		GiveAirCp(playerid);
		GiveJobVeh(playerid, 511);
	}
	else if(PlayerInfo[playerid][pJob] == 16) {
		if(!PlayerToPoint(5.0,playerid, -98.1630,78.2496,3.1172)) {
			SetPlayerCheckpoint(playerid,-98.1630,78.2496,3.1172,5.0);
			CP[playerid] = 43;
			SendClientMessage(playerid,COLOR_JOB, "(Job){FFFFFF} You are not at correct location, go to the checkpoint to start work!");
			return 1;
		}
    	if(GetPlayerAnimationIndex(playerid) != 1189) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosii aceasta comanda cand esti in miscare.","(Error){FFFFFF} You can't use this animation when you moving.");
		packageson[playerid] = 0;
		InStrawberryJob[playerid] = 1;
		StrawberryStart(playerid);
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a job who is work with this command!");
	return 1;
}

stock CreateBeeHiveObjects(playerid) {
	BeeObjects[0][playerid] = CreatePlayerObject(playerid, 1451, 1903.11316, 101.78123, 33.43680,   0.00000, 0.00000, 0.00000, 150);
	BeeObjects[1][playerid] = CreatePlayerObject(playerid, 1451, 1905.01953, 101.83248, 33.31680,   0.00000, 0.00000, 0.00000, 150);
	BeeObjects[2][playerid] = CreatePlayerObject(playerid, 1451, 1906.90820, 101.86146, 33.25680,   0.00000, 0.00000, 0.00000, 150);
	BeeObjects[3][playerid] = CreatePlayerObject(playerid, 1451, 1901.42419, 101.75456, 33.45680,   0.00000, 0.00000, 0.00000, 150);
	BeeObjects[4][playerid] = CreatePlayerObject(playerid, 1451, 1899.71228, 101.70198, 33.55680,   0.00000, 0.00000, 0.00000, 150);
	if(PlayerInfo[playerid][pBeePlaced] == 1)
		Bee3DText[playerid] = CreatePlayer3DTextLabel(playerid, "Loading info...", COLOR_WHITE, 1902.8530,99.2951,33.5180, 50, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
	else if(PlayerInfo[playerid][pBeePlaced] == 2)
		Bee3DText[playerid] = CreatePlayer3DTextLabel(playerid, "Press 'Alt' to collect beehives product.", COLOR_WHITE, 1902.8530,99.2951,33.5180, 50, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
	return 1;
}

stock DestroyBeeHiveObjects(playerid) {
	DestroyPlayerObject(playerid, BeeObjects[0][playerid]);
	DestroyPlayerObject(playerid, BeeObjects[1][playerid]);
	DestroyPlayerObject(playerid, BeeObjects[2][playerid]);
	DestroyPlayerObject(playerid, BeeObjects[3][playerid]);
	DestroyPlayerObject(playerid, BeeObjects[4][playerid]);
	DeletePlayer3DTextLabel(playerid, Bee3DText[playerid]);
	PlayerTextDrawHide(playerid, BeehiveTimer[playerid]);
	return 1;
}

stock BeeCancel(playerid) {
	DestroyVehicle(BeeCar[playerid]);
	RemovePlayerFromVehicle(playerid);
	DisablePlayerCheckpoint(playerid);
	CP[playerid] = 0;
	DestroyObject(BeeObjects[0][playerid]);
	DestroyObject(BeeObjects[1][playerid]);
	DestroyObject(BeeObjects[2][playerid]);
	DestroyObject(BeeObjects[3][playerid]);
	DestroyObject(BeeObjects[4][playerid]);

	BeeCar[playerid] = 0;
	return 1;
}

CMD:beestart(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(CP[playerid] >= 1 || IsATruck(GetPlayerVehicleID(playerid)) || CheckBus[playerid] >= 1 || GotoMats[playerid] >= 1 || UsedFind[playerid] != 0 || CarJacker[playerid] >= 1 || PlayerInfo[playerid][pJobVehicle] != 0 || InMinerJob[playerid] != 0 || InStrawberryJob[playerid] != 0)
		return ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel checkpoint", "You are sure to cancel the current checkpoint?", "Yes", "No");
	if(PlayerInfo[playerid][pBeePlaced] == 0)	{
		if(!PlayerToPoint(5.0,playerid, 1305.4702,181.9989,20.4609)) {
			SetPlayerCheckpoint(playerid,1305.4702,181.9989,20.4609,4.0);
			CP[playerid] = 43;
			SendClientMessage(playerid,COLOR_JOB, "(BeeHives){FFFFFF} You are not at correct location, go to the checkpoint to start planting the beehives!");
			return 1;
		}
		if(PlayerInfo[playerid][pCarLic] == 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You need a driving license to use this command.");
    	if(GetPlayerAnimationIndex(playerid) != 1189) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosii aceasta comanda cand esti in miscare.","(Error){FFFFFF} You can't use this animation when you moving.");
		
    	BeeCar[playerid] = CreateVehicle(578, 1288.5464,177.5214,20.4609,136.2756, 1, 1, -1);
    	Gas[BeeCar[playerid]] = 100;

		BeeObjects[0][playerid] = CreateObject(1451, 0.00000, 0.00000, 0.00000,0.00000, 0.00000, 0.00000);
		BeeObjects[1][playerid] = CreateObject(1451, 0.00000, 0.00000, 0.00000,0.00000, 0.00000, 0.00000);
		BeeObjects[2][playerid] = CreateObject(1451, 0.00000, 0.00000, 0.00000,0.00000, 0.00000, 0.00000);
		BeeObjects[3][playerid] = CreateObject(1451, 0.00000, 0.00000, 0.00000,0.00000, 0.00000, 0.00000);
		BeeObjects[4][playerid] = CreateObject(1451, 0.00000, 0.00000, 0.00000,0.00000, 0.00000, 0.00000);

		AttachObjectToVehicle(BeeObjects[0][playerid], BeeCar[playerid], -0.73636, 1.16963, 0.47010,   0.00000, 0.00000, 0.00000);
		AttachObjectToVehicle(BeeObjects[1][playerid], BeeCar[playerid], 0.72414, 1.20015, 0.47010,   0.00000, 0.00000, 0.00000);
		AttachObjectToVehicle(BeeObjects[2][playerid], BeeCar[playerid], 0.72265, -0.86436, 0.47010,   0.00000, 0.00000, 0.00000);
		AttachObjectToVehicle(BeeObjects[3][playerid], BeeCar[playerid], -0.70183, -0.81128, 0.47010,   0.00000, 0.00000, 0.0000);
		AttachObjectToVehicle(BeeObjects[4][playerid], BeeCar[playerid], 0.04668, -3.03652, 0.47010,   0.00000, 0.00000, 0.00000);
		PutPlayerInVehicle(playerid, BeeCar[playerid], 0);

		CP[playerid] = 150;
		SetPlayerCheckpoint(playerid,1899.71228, 101.70198, 33.55680,10.0);
		SendClientMessage(playerid, COLOR_JOB, "(Beehives){FFFFFF} Go to the checkpoint to place your beehives.");
	}
	else SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have already placed the bee hives.");
	return 1;
}

CMD:creategun(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to login first.");
    if(PlayerInfo[playerid][pJob] != 9) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You are not an Arms Dealer.");
    if(PlayerInfo[playerid][pArmsSkill] < 5) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You don't have skill 5.");
    if(PlayerInfo[playerid][pJailed] > 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You are jailed.");
	if(PlayerInfo[playerid][pGunLic] == 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You don't have gun license.");
	new x_weapon[10],sendername[25],string[128];
	if(sscanf(params, "s[10]",x_weapon))
	{
		SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /creategun <Gun Name>");
		SendClientMessage(playerid, COLOR_WHITE, "*** Create Guns ***");
		SendClientMessage(playerid, COLOR_WHITE, "{B8DBFF}Weapons:{FFFFFF} SDPistol(100) Deagle(150)");
		SendClientMessage(playerid, COLOR_WHITE, "{B8DBFF}Weapons:{FFFFFF} MP5(200) Shotgun(300)");
		SendClientMessage(playerid, COLOR_WHITE, "{B8DBFF}Weapons:{FFFFFF} AK47(350) M4(400) Rifle(600)");
		return 1;
	}
	if(strcmp(x_weapon,"sdpistol",true) == 0)
	{
	    if(PlayerInfo[playerid][pMats] < 100) return SendClientMessage(playerid,COLOR_JOB, "(Job){FFFFFF} Not enough Materials for that Weapon.");
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GivePlayerWeaponEx(playerid, 23, 100);
		format(string, sizeof(string), "* %s creates himself a gun (Silenced Pistol) from materials.",sendername);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		PlayerInfo[playerid][pMats] -= 100;

    	Update(playerid, pMatsx);
	}
	else if(strcmp(x_weapon,"deagle",true) == 0)
	{
	    if(PlayerInfo[playerid][pMats] < 150) return SendClientMessage(playerid,COLOR_JOB, "(Job){FFFFFF} Not enough Materials for that Weapon.");
	    GetPlayerName(playerid, sendername, sizeof(sendername));
		GivePlayerWeaponEx(playerid, 24, 100);
		format(string, sizeof(string), "* %s creates himself a gun (Deagle) from materials.",sendername);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		PlayerInfo[playerid][pMats] -= 150;

    	Update(playerid, pMatsx);
	}
	else if(strcmp(x_weapon,"mp5",true) == 0)
	{
	    if(PlayerInfo[playerid][pMats] < 200) return SendClientMessage(playerid,COLOR_JOB, "(Job){FFFFFF} Not enough Materials for that Weapon.");
	    GetPlayerName(playerid, sendername, sizeof(sendername));
		GivePlayerWeaponEx(playerid, 29, 150);
		format(string, sizeof(string), "* %s creates himself a gun (Mp5) from materials.",sendername);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		PlayerInfo[playerid][pMats] -= 200;

    	Update(playerid, pMatsx);
	}
	else if(strcmp(x_weapon,"shotgun",true) == 0)
	{
	    if(PlayerInfo[playerid][pMats] < 300) return SendClientMessage(playerid,COLOR_JOB, "(Job){FFFFFF} Not enough Materials for that Weapon.");
	    GetPlayerName(playerid, sendername, sizeof(sendername));
		GivePlayerWeaponEx(playerid, 25, 50);
		format(string, sizeof(string), "* %s creates himself a gun (Shotgun) from materials.",sendername);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		PlayerInfo[playerid][pMats] -= 300;

    	Update(playerid, pMatsx);
	}
	else if(strcmp(x_weapon,"ak47",true) == 0)
	{
	    if(PlayerInfo[playerid][pMats] < 350) return SendClientMessage(playerid,COLOR_JOB, "(Job){FFFFFF} Not enough Materials for that Weapon.");
	    GetPlayerName(playerid, sendername, sizeof(sendername));
		GivePlayerWeaponEx(playerid, 30, 350);
		format(string, sizeof(string), "* %s creates himself a gun (Ak47) from materials.",sendername);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		PlayerInfo[playerid][pMats] -= 350;

    	Update(playerid, pMatsx);
	}
	else if(strcmp(x_weapon,"m4",true) == 0)
	{
	    if(PlayerInfo[playerid][pMats] < 400) return SendClientMessage(playerid,COLOR_JOB, "(Job){FFFFFF} Not enough Materials for that Weapon.");
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GivePlayerWeaponEx(playerid, 31, 350);
		format(string, sizeof(string), "* %s creates himself a gun (M4) from materials.",sendername);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		PlayerInfo[playerid][pMats] -= 400;

    	Update(playerid, pMatsx);
	}
	else if(strcmp(x_weapon,"rifle",true) == 0)
	{
	    if(PlayerInfo[playerid][pMats] < 600) return SendClientMessage(playerid,COLOR_JOB, "(Job){FFFFFF} Not enough Materials for that Weapon.");
	    GetPlayerName(playerid, sendername, sizeof(sendername));
		GivePlayerWeaponEx(playerid, 33, 200);
		format(string, sizeof(string), "* %s creates himself a gun (Rifle) from materials.",sendername);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		PlayerInfo[playerid][pMats] -= 600;

    	Update(playerid, pMatsx);
	}
	else return SendClientMessage(playerid,COLOR_JOB,"(Job){FFFFFF} Invalid weapon name.");
	return 1;
}
CMD:getmats(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pJob] != 9) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You are not an arms dealer.");
    if(IsPlayerInRangeOfPoint(playerid, 5, 597.5396,-1246.9562,18.2512))
	{
		if(GetPlayerCash(playerid) >= 50)
		{
	    	SetPlayerCheckpoint(playerid, 1713.1602,916.2577,10.8203, 10.0);
	    	SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} Got to the checkpoint for collect the materials.");
	    	MatsHolding[playerid] = 1;
	    	CP[playerid] = 6901;
	    	GivePlayerCash(playerid,-50);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have $50.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} Go to the checkpoint to start collecting materials.");
	    SetPlayerCheckpoint(playerid,597.5396,-1246.9562,18.2512, 10.0);
	    GotoMats[playerid] = 1;
	}
	return 1;
}
CMD:sellmaterials(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
    if(PlayerInfo[playerid][pJob] != 9) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not an arms dealer.");
	new id,mats,string[128],sendername[25],giveplayer[25],price;
    if(sscanf(params, "uii",id,mats,price)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sellmaterials [name/playerid] [materials] [price]");
	if(price < 1000 || price > 500000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Price can't be lower than $1000 or above $50.000.");
	if(playerid == id) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can not sell materials to yourself.");
    if(id != INVALID_PLAYER_ID)
    {
		if(ProxDetectorS(5.0, playerid, id))
		{
		    if(mats > PlayerInfo[playerid][pMats]) return SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} You don't have so many materials to sell.");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			format(string, sizeof(string), "(Job){FFFFFF} You offered %s, %d materials for %s$.",giveplayer,mats,FormatNumber(price));
			SendClientMessage(playerid, COLOR_JOB, string);
			format(string, sizeof(string), "%s offered you %d materials for %s$, type /accept materials %d to accept the offer.",sendername,mats,FormatNumber(price),playerid);
			SendClientMessage(id, COLOR_WHITE, string);
			MatsOffer[id] = playerid;
			MatsPrice[id] = price;
			MatsAmmo[id] = mats;
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
    }
    return 1;
}
CMD:sellgun(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pJob] != 9) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not an arms dealer.");
	new x_weapon[10],weapon[MAX_PLAYERS],ammo[MAX_PLAYERS],price[MAX_PLAYERS],price2,id,giveplayer[25],sendername[25],string[128];
	if(sscanf(params, "us[10]d",id,x_weapon,price2))
	{
		SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sellgun [name/playerid] [gun name] [price]");
		SendClientMessage(playerid, COLOR_WHITE, "Weapons: SDPistol(100) Deagle(150)");
		SendClientMessage(playerid, COLOR_WHITE, "Weapons: MP5(200) Shotgun(300)");
		SendClientMessage(playerid, COLOR_WHITE, "Weapons: AK47(350) M4(400) Rifle(600)");
		return 1;
	}
	if(playerid == id) return SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} You can't sell guns to yourself.");
	if(PlayerInfo[id][pJailed] > 0) return SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} This player is in jail.");
	if(id != INVALID_PLAYER_ID)
    {
		if(PlayerInfo[id][pGunLic] == 0) return SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} This player does not have a gun license.");
		if(strcmp(x_weapon,"sdpistol",true) == 0)
		{
		    if(PlayerInfo[playerid][pMats] < 100) return SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} Not enough materials for that gun.");
			weapon[playerid] = 23;
			price[playerid] = 100;
			ammo[playerid] = 100;
		}
		else if(strcmp(x_weapon,"deagle",true) == 0)
		{
		    if(PlayerInfo[playerid][pMats] < 150) return SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} Not enough materials for that gun.");
		    weapon[playerid] = 24;
			price[playerid] = 150;
			ammo[playerid] = 100;
		}
		else if(strcmp(x_weapon,"mp5",true) == 0)
		{
		    if(PlayerInfo[playerid][pMats] < 200) return SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} Not enough materials for that gun.");
		    weapon[playerid] = 29;
			price[playerid] = 200;
			ammo[playerid] = 150;
		}
		else if(strcmp(x_weapon,"shotgun",true) == 0)
		{
		    if(PlayerInfo[playerid][pMats] < 300) return SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} Not enough materials for that gun.");
		    weapon[playerid] = 25;
			price[playerid] = 300;
			ammo[playerid] = 50;
		}
		else if(strcmp(x_weapon,"ak47",true) == 0)
		{
		    if(PlayerInfo[playerid][pMats] < 350) return SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} Not enough materials for that gun.");
		    weapon[playerid] = 30;
			price[playerid] = 350;
			ammo[playerid] = 250;
		}
		else if(strcmp(x_weapon,"m4",true) == 0)
		{
		    if(PlayerInfo[playerid][pMats] < 400) return SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} Not enough materials for that gun.");
			weapon[playerid] = 31;
			price[playerid] = 400;
			ammo[playerid] = 250;
		}
		else if(strcmp(x_weapon,"rifle",true) == 0)
		{
		    if(PlayerInfo[playerid][pMats] < 600) return SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} Not enough materials for that gun.");
		    weapon[playerid] = 33;
			price[playerid] = 600;
			ammo[playerid] = 25;
		}
		else return SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} Invalid weapon name.");
		if(price2 < 1 || price2 > 100000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Price must be between $1 and $100.000.");
		if(ProxDetectorS(5.0, playerid, id))
		{
            if(Spectate[id] == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
            if(GetPlayerCash(id) < price2) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player don't have money needed.");
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			SellgunOffer[id] = playerid;
			SellgunPrice[id] = price2;
			SellgunMats[id] = price[playerid];
			SellgunAmmo[id] = ammo[playerid];
			SellgunID[id] = weapon[playerid];
			new gunname[50];
			GetWeaponNameEx(weapon[playerid],gunname,sizeof(gunname));
			format(string, sizeof(string), "(Job){FFFFFF} You offered %s a %s for %s$.",giveplayer,gunname,FormatNumber(price2));
			SendClientMessage(playerid, COLOR_JOB, string);
			format(string, sizeof(string), "%s offered you a %s for %s$, type /accept gun %d to accept the offer.",sendername,gunname,FormatNumber(price2),playerid);
			SendClientMessage(id, COLOR_WHITE, string);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	return 1; 
}
CMD:lights(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        new engine,lights,alarm,doors,bonnet,boot,objective;
        new veh = GetPlayerVehicleID(playerid);
	    if(IsABike(veh)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi comanda /lights pentru biciclete.", "(Error){FFFFFF} You can't do that for bikes!");
		if(GetPVarInt(playerid, "Lights") == 0)
		{
			GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(veh,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
			SetPVarInt(playerid, "Lights", 1);
		}
		else if(GetPVarInt(playerid, "Lights") == 1)
		{
			GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(veh,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
			SetPVarInt(playerid, "Lights", 0);
		}
    }
	else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You need to be in a vehicle to use this command.");
	return 1;
}
CMD:engine(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        new idcar = GetPlayerVehicleID(playerid),string[128],sendername[25];
        new engine,lights,alarm,doors,bonnet,boot,objective;
        if(Gas[idcar] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This car is out of fuel.");
	    if(IsABike(idcar)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi comanda /engine pentru biciclete.", "(Error){FFFFFF} You can't do that for bikes!");
	    if(Refueling[playerid] == 0)
  	 	{
     	    if(vehEngine[idcar] == 0)
        	{
				vehEngine[idcar] = 1;
	            GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
	            SetVehicleParamsEx(idcar,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
	            new vehicle;
	            vehicle = GetVehicleModel(idcar) - 400;
	    		GetPlayerName(playerid, sendername, sizeof(sendername));
	            SetPVarInt(playerid, "Engine", 1);
	            if(Undercover[playerid] != 0)
	            {
	                format(string,sizeof(string),"* An unknown hitman starts the engine of his %s.",aVehicleNames[vehicle]);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            }
	            else
	            {
		            format(string,sizeof(string),"* %s starts the engine of his %s.",sendername,aVehicleNames[vehicle]);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
        	}
      	  	else if(vehEngine[idcar] == 1)
        	{
    			vehEngine[idcar] = 0;
    			GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
      	    	SetVehicleParamsEx(idcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
            	new vehicle;
            	vehicle = GetVehicleModel(idcar) - 400;
	        	GetPlayerName(playerid, sendername, sizeof(sendername));
            	SetPVarInt(playerid, "Engine", 0);
            	if(Undercover[playerid] != 0)
            	{
	                format(string,sizeof(string),"* An unknown hitman stops the engine of his %s.",aVehicleNames[vehicle]);
	            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	}
            	else
            	{
	            	format(string,sizeof(string),"* %s stops the engine of his %s.",sendername,aVehicleNames[vehicle]);
	            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
        	}
    	}
		else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Please wait, you refill your vehicle.");
    }
	else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You need to be in a vehicle to use this command.");
	return 1;
}
CMD:disarm(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new id,string[128],sendername[25],giveplayer[25];
		if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /disarm [name/playerid]");
		if(id != INVALID_PLAYER_ID)
		{
		    GetPlayerName(id, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
		    ResetPlayerWeaponsEx(id);
		    ResetPlayerWeapons(id);
			format(string, sizeof(string), "(AdmCmd){FFFFFF} Admin %s disarmed %s [%d].",sendername, giveplayer, id);
			ABroadCast(COLOR_RED2,string,1);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:agl(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to login first.");
    if(IsPlayerConnected(playerid))
    {
        if (PlayerInfo[playerid][pAdmin] > 4)
        {
			new id,x_nr[10],sendername[25],giveplayer[25],string[128],hour;
			if(sscanf(params, "us[10]i",id,x_nr,hour))
			{
				SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /agl [name/playerid] [license] [hours]");
		   	 	SendClientMessage(playerid, COLOR_WHITE, "Available names: Driving, Pilots, Sailing, Weapon.");
				return 1;
			}
			if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
			if(hour >= 501) return SendClientMessage(playerid, COLOR_WHITE, "You can set maximum 500 hours of license.");
			GetPlayerName(playerid, sendername, sizeof(sendername));
		    GetPlayerName(id, giveplayer, sizeof(giveplayer));
		    if(strcmp(x_nr,"driving",true) == 0)
			{
	            format(string, sizeof(string), "* You've given a Drivers License to %s for %d hours.",giveplayer,hour);
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		        format(string, sizeof(string), "* Admin %s has given you a Drivers License for %d hours.",sendername,hour);
		        SendClientMessage(id, COLOR_LIGHTBLUE, string);
		        if(hour == 0) PlayerInfo[id][pCarLic] = 0;
		        else PlayerInfo[id][pCarLic] = 1;
		        PlayerInfo[id][pCarLicT] = hour;
				PlayerInfo[id][pCarLicSuspend] = 0;
				Update(id, pCarLicSuspendx);
				Update(id, pCarLicTx);
				Update(id, pCarLicx);
		        return 1;
			}
			else if(strcmp(x_nr,"pilots",true) == 0)
			{
	            format(string, sizeof(string), "* You've given a Pilots License to %s for %d hours.",giveplayer,hour);
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		        format(string, sizeof(string), "* Admin %s has given you a Pilots License for %d hours.",sendername,hour);
		        SendClientMessage(id, COLOR_LIGHTBLUE, string);
		        if(hour == 0) PlayerInfo[id][pFlyLic] = 0;
		        else PlayerInfo[id][pFlyLic] = 1;	
		        PlayerInfo[id][pFlyLicT] = hour;
				new str[128];
				if(hour == 0)
				{	
					mysql_format(SQL,str,128,"UPDATE users SET `FlyLic`='0',`FlyLicT`='%d' WHERE `name`='%s'",hour,PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
				}
				else
				{
					mysql_format(SQL,str,128,"UPDATE users SET `FlyLic`='1',`FlyLicT`='%d' WHERE `name`='%s'",hour,PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
				}	
		        return 1;
			}
			else if(strcmp(x_nr,"sailing",true) == 0)
			{
	            format(string, sizeof(string), "* You've given a Sailing License to %s ofr %d hours.",giveplayer,hour);
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		        format(string, sizeof(string), "* Admin %s has given you a Sailing License for %d hours.",sendername,hour);
		        SendClientMessage(id, COLOR_LIGHTBLUE, string);
		        if(hour == 0) PlayerInfo[id][pBoatLic] = 0;	
		        else PlayerInfo[id][pBoatLic] = 1;
		        PlayerInfo[id][pBoatLicT] = hour;
				new str[128];
				if(hour == 0)
				{
					mysql_format(SQL,str,128,"UPDATE users SET `BoatLic`='0',`BoatLicT`='%d' WHERE `name`='%s'",hour,PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
				}	
				else
				{
					mysql_format(SQL,str,128,"UPDATE users SET `BoatLic`='1',`BoatLicT`='%d' WHERE `name`='%s'",hour,PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
				}	
		        return 1;
			}
			else if(strcmp(x_nr,"weapon",true) == 0)
			{
	            format(string, sizeof(string), "* You've given a Weapon License to %s for %d hours.",giveplayer,hour);
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		        format(string, sizeof(string), "* Admin %s has given you a Weapon License for %d hours.",sendername,hour);
		        SendClientMessage(id, COLOR_LIGHTBLUE, string);
		        if(hour == 0) PlayerInfo[id][pGunLic] = 0;
		        else PlayerInfo[id][pGunLic] = 1;
		        PlayerInfo[id][pGunLicT] = hour;
				PlayerInfo[id][pGunLicSuspend] = 0;
				Update(id, pGunLicSuspendx);
				new str[128];
				if(hour == 0)
				{
					mysql_format(SQL,str,128,"UPDATE users SET `GunLic`='0',`GunLicT`='%d' WHERE `name`='%s'",hour,PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
				}
				else
				{
					mysql_format(SQL,str,128,"UPDATE users SET `GunLic`='1',`GunLicT`='%d' WHERE `name`='%s'",hour,PlayerInfo[id][pNormalName]);
					mysql_tquery(SQL,str,"","");
				}	
		        return 1;
			}
        }
        else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
    }
    return 1;
}
CMD:carcolortemp(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new color1,color2;
	new vehid = GetPlayerVehicleID(playerid);
	if(sscanf(params, "ii",color1,color2)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /carcolortemp [color 1] [color 2]");
	if(!IsPlayerInVehicle(playerid, vehid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in a car.");
    if(color1 < 0 || color1 > 255) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Wrong color id.");
    if(color2 < 0 || color2 > 255) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Wrong color id.");
	ChangeVehicleColor(vehid, color1, color2);
    return 1;
}
CMD:togvip(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pPremiumAccount] == 2)
	{
		if(TogVIP[playerid] == 0)
		{
			TogVIP[playerid] = 1;
			SS(playerid, COLOR_LIGHTRED2, "Ai activat chatul VIP.", "You enabled the VIP chat.");
		}
		else
		{
			TogVIP[playerid] = 0;
			SS(playerid, COLOR_LIGHTRED2, "Ai dezactivat chatul VIP.", "You disabled the VIP chat.");
		}
	}
	else SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu esti un user VIP.", "(Error){FFFFFF} You are not a VIP user.");
	return 1;
}
CMD:vip(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pPremiumAccount] == 2)
	{
		if(TogVIP[playerid] == 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Foloseste /togvip pentru a activa chatul VIP.", "(Error){FFFFFF} Use /togvip to enable the VIP chat.");
		new text[128],string[128],sendername[25];
		if(sscanf(params, "s[128]",text)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /vip [message]");
		GetPlayerName(playerid,sendername,sizeof(sendername));
		format(string, sizeof(string), "VIP %s: %s", sendername, text);
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pPremiumAccount] == 2 && TogVIP[i] == 1) SendClientMessage(i, COLOR_LIGHTRED2, string);
		}
		new var100[300],resulttt[128],strr[128];
		format(strr, sizeof(strr),"VIP %s: %s", sendername, text);
		mysql_real_escape_string(strr, resulttt);
		mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','vip')", PlayerInfo[playerid][pSQLID], resulttt);
		mysql_tquery(SQL,var100,"","");
	}
	else SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu esti un user VIP.", "(Error){FFFFFF} You are not a VIP user.");
	return 1;
}
CMD:vipcolors(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pPremiumAccount] == 2) ShowPlayerDialog(playerid, 6268, DIALOG_STYLE_LIST, "Nickname color", "White\nCool Red\nDark Red\nLight Red", "Choose", "Cancel");
	else SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu ai cont VIP.", "(Error){FFFFFF} You are not a VIP.");
	return 1;
}
CMD:o(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] >= 6)
    {
		new text[256],string[300];
		if(sscanf(params, "s[256]",text)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /o [message]");
		if(PlayerInfo[playerid][pAdmin] >= 6)
		{
			format(string, sizeof(string), "(a6+ chat) %s: %s", PlayerInfo[playerid][pNormalName], text);
			ABroadCast(0xF4AFFCFF, string, 6);
		}
	}
	return 1;
}
CMD:anno2(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] >= 1)
    {
		new text[256],string[300];
		if(sscanf(params, "s[256]",text)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /anno2 [message]");
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			format(string, sizeof(string), "(( %s: %s ))", PlayerInfo[playerid][pNormalName], text);
			foreach(new x : Player)
			{
				SendSplitMessage(x, COLOR_GENANNOUNCE2, string);
			}
			Log(PlayerInfo[playerid][pSQLID], string, "anno2");
		}
	}
	return 1;
}
CMD:anno(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] >= 1)
    {
		new text[256],string[300];
		if(sscanf(params, "s[256]",text)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /anno [message]");
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			format(string, sizeof(string), "(( %s says: %s ))", PlayerInfo[playerid][pNormalName], text);
			foreach(new x : Player)
			{
				SendSplitMessage(x, COLOR_GENANNOUNCE,string);
			}
			Log(PlayerInfo[playerid][pSQLID], string, "anno");
		}
	}
	return 1;
}
CMD:count(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
	    new sendername[30],range,string[256],count=0;
	    if(sscanf(params, "i", range)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /count [range]");
	    {
     		GetPlayerName(playerid, sendername, sizeof(sendername));
 			if(countdown == 0)
    		{
    			foreach(new i : Player)
    			{
 		    		if(IsPlayerConnected(i))
					{
	    				if(ProxDetectorS(range, playerid, i))
				    	{
							SetTimerEx("CountDownCheck3", 1000, 0, "i", i);
							SetTimer("CountDownFinalize", 5000, 0);
   							countdown = 1;
   							count++;
						}
					}
				}
				format(string,sizeof(string),"{FFFFCC}Admin %s has started the countdown for %d players(range: %d).",sendername,count,range);
				ABroadCast(COLOR_WHITE, string,1);
			}
			else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Countdown is already started.");
		}
	}
	else return SendClientMessage(playerid,COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:contract(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new id,moneys,string[256],giveplayer[30];
	if(sscanf(params, "ui",id,moneys)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /contract [name/playerid] [money]");
	if(moneys < 10000 || moneys > 1000000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Contract money must be atleast $10,000, and not more then $1,000,000.");
	if(PlayerInfo[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You must be level 3 to place a Contract.");
    if(id != INVALID_PLAYER_ID)
    {
		//if(PlayerInfo[id][pAdmin] > 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Cannot place contracts on Admin.");
		if(PlayerInfo[id][pMember] == 11) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Cannot place contracts on hitmans.");
        if(PlayerInfo[playerid][pMember] == 11) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't place a contract because you are a hitman.");
	    if(IsACop(id) && moneys < 10000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Only $10,000 can be placed as a contract on cops.");
	    if(id == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You cannot contract yourself.");
		GetPlayerName(id, giveplayer, sizeof(giveplayer));
		if(GetPlayerCash(playerid) >= moneys)
		{
			GivePlayerCash(playerid, -moneys);
			PlayerInfo[id][pHeadValue] += 2*moneys;
			format(string, sizeof(string), "New hit available! Target: %s. Price: unknown.", giveplayer);
			SendFamilyMessage(11, COLOR_CYAN, string);
			SendClientMessage(playerid, COLOR_GREY, "Contract placed! The hitmans will kill your target soon!");
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			new str[184];
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `HeadValue`='%d' WHERE `name`='%s'",PlayerInfo[id][pHeadValue],PlayerInfo[id][pNormalName]);
			mysql_tquery(SQL,str,"","");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid transaction amount.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	return 1;
}
CMD:pay(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	new id,moneys,sendername[25],giveplayer[25],string[256];
	if(sscanf(params, "ui",id,moneys)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /pay [name/playerid] [money]");
	if(moneys > 100 && PlayerInfo[playerid][pLevel] < 5) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti transfera mai mult de $100 daca nu ai level 5.", "(Error){FFFFFF} You can't /pay more than $100 if you don't have level 5.");
	if(moneys < 1 || moneys > 50000 && PlayerInfo[playerid][pPremiumAccount] < 1) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu ai cont premium pentru a transfera mai mult de $50.000.", "(Error){FFFFFF} You don't have premium account to /pay more than $50,000.");
	if(moneys < 1 || moneys > 1000000 && PlayerInfo[playerid][pPremiumAccount] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Suma transferata poate fi intre $1 si $1,000,000.", "(Error){FFFFFF} The /pay ammount must be between $1 and $1,000,000.");
	if(id == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't /pay yourself.");
	if(floatround(PlayerInfo[playerid][pConnectTime], floatround_round) < 2) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need 2 played hours to use this command.");
    if(id != INVALID_PLAYER_ID)
    {
        if(payala[playerid] == 1) return 1;
		if(ProxDetectorS(5.0, playerid, id))
		{
			if(Spectate[id] != -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new playermoney;
			playermoney = GetPlayerCash(playerid);
			if(moneys > 0 && playermoney >= moneys)
			{
			    SetTimerEx("payala2", 3000, 0, "i", playerid);
			    payala[playerid] = 1;
				GivePlayerCash(playerid, -moneys);
				GivePlayerCash(id, moneys);
				format(string, sizeof(string), "You have paid $%s to %s.",FormatNumber(moneys),giveplayer);
				SendClientMessage(playerid, COLOR_WHITE, string);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "%s has paid you $%s.",sendername,FormatNumber(moneys));
				SendClientMessage(id, COLOR_WHITE, string);
				PlayerPlaySound(id, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "%s takes out $%s in cash, and hands it to %s.",sendername,FormatNumber(moneys),giveplayer);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				new var100[256],string2[256],string3[256];
				format(string2,sizeof(string2),"%s[user:%d] /pay $%s to %s[user:%d].",sendername,PlayerInfo[playerid][pSQLID],FormatNumber(moneys),giveplayer,PlayerInfo[id][pSQLID]);
				mysql_real_escape_string(string2, string3);
				mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],string3);
				mysql_tquery(SQL,var100,"","");
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid transaction amount.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	return 1;
}
CMD:number(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pPhoneBook] == 1)
	{
		new id,string[128],sendername[25];
		if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /number [name/playerid]");
	    if(id != INVALID_PLAYER_ID)
	    {
	        GetPlayerName(id, sendername, sizeof(sendername));
	        if(PlayerInfo[id][pPnumber] == 0)
	        {
				format(string, 256, "Name: {CECECE}%s {FFFFFF}| Number: {CECECE}None",sendername);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else
			{
			    format(string, 256, "Name: {CECECE}%s {FFFFFF}| Number: {CECECE}%d",sendername,PlayerInfo[id][pPnumber]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You do not have a phonebook.");
	return 1;
}
CMD:tognews(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(!gNews[playerid])
	{
		gNews[playerid] = 1;
		SendClientMessage(playerid, COLOR_GRAD1, "News chat channel Disabled.");
	}
	else if(gNews[playerid])
	{
		gNews[playerid] = 0;
		SendClientMessage(playerid, COLOR_GRAD1, "News chat channel Enabled.");
	}
	return 1;
}
CMD:togf(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pMember] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a part of a faction.");
	if(!gFam[playerid])
	{
		gFam[playerid] = 1;
		SendClientMessage(playerid, COLOR_WHITE, "Family chat disabled.");
	}
	else if(gFam[playerid])
	{
		gFam[playerid] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "Family chat enabled.");
	}
	return 1;
}
CMD:togwhisper(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pPremiumAccount] > 0 || PlayerInfo[playerid][pAdmin] >= 1)
    {
		if(!HidePM[playerid])
		{
			HidePM[playerid] = 1;
			SendClientMessage(playerid, COLOR_GRAD1, "Whisper chat channel Disabled.");
		}
		else if(HidePM[playerid])
		{
			HidePM[playerid] = 0;
			SendClientMessage(playerid, COLOR_GRAD1, "Whisper chat channel Enabled.");
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Your are not admin or you don't have premium account.");
	return 1;
}
CMD:togw(playerid, params[]) return cmd_togwhisper(playerid, params);
CMD:changepass(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	ShowPlayerDialog(playerid, DIALOG_NEWPASS,DIALOG_STYLE_INPUT, "Change password:","Type in box your new password:","Done","Close");
	return 1;
}
CMD:me(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string[250],result[250],sendername[25];
    if(PlayerInfo[playerid][pMuted] == 1)
    {
		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
		else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
		SendClientMessage(playerid, COLOR_DARKPINK, string);
		return 1;
	}
	GetPlayerName(playerid, sendername, sizeof(sendername));
	if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /me [action]");
	format(string, sizeof(string), "* (/me) %s %s", sendername, result);
	ProxDetector(12.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	new var100[300],resulttt[300],strr[300];
	format(strr, sizeof(strr),"* %s %s", sendername, result);
	mysql_real_escape_string(strr, resulttt);
	mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','me')", PlayerInfo[playerid][pSQLID], resulttt);
	mysql_tquery(SQL,var100,"","");
	return 1;
}
CMD:advertise(playerid, params[]) return cmd_ad(playerid, params);
CMD:ad(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string[256],sendername[30],message[256],idx,adss=0,time,time2;
	GetPlayerName(playerid, sendername, sizeof(sendername));
	if(AdvPlayer[playerid] != 0)
	{
		SendClientMessage(playerid, COLOR_DARKPINK, "Your ad:");
		SendClientMessage(playerid, COLOR_DARKPINK, AdvMSG[playerid]);
		SendClientMessage(playerid, COLOR_DARKPINK, "Pentru a-ti sterge anuntul, foloseste /deletemyad.");
		return 1;
	}
	if(PlayerInfo[playerid][pLevel] < 5) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have level 5.");
    if(!PlayerToPoint(5.0, playerid, BizzInfo[28][bEntranceX],BizzInfo[28][bEntranceY],BizzInfo[28][bEntranceZ]) && !PlayerToPoint(5.0, playerid, BizzInfo[52][bEntranceX],BizzInfo[52][bEntranceY],BizzInfo[52][bEntranceZ])) return SendClientMessage(playerid, COLOR_WHITE, "You are not near CNN.");
	if(PlayerInfo[playerid][pMuted] == 1)
    {
		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
		else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
		SendClientMessage(playerid, COLOR_DARKPINK, string);
		return 1;
	}
	if(sscanf(params, "s[256]",message)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /ad [message]");
	new length = strlen(params);
	while ((idx < length) && (params[idx] <= ' '))
	{
		idx++;
	}
	new offset = idx;
	new result[264];
	while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	{
		result[idx - offset] = params[idx];
		idx++;
	}
	result[idx - offset] = EOS;
	new payout = idx * 15;
	if(GetPlayerCash(playerid) < payout) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
	GivePlayerCash(playerid, -payout);
	foreach(new i : Player)
	{
		if(AdvPlayer[i] != 0)
		{
			adss++;
		}
	}
	if(adss >= 20) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} There are 20 ads placed, come back later.");
	if(adss > 0) { time = (adss+1)*30*1000; time2 = (adss+1)*30; }
	else if(adss == 0) { time = 30000; time2 = 30; }
	format(AdvMSG[playerid], 256, "%s",message);
	format(string, sizeof(string),"(Info) Preview Ad - Ad by %s (%d): %s",sendername,playerid,message);
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pAdmin] > 0 || PlayerInfo[i][pHelper] > 0)
		{
			SendSplitMessage(i, COLOR_ARENA, string);
		}
	}
	new var100[300],resulttt[300],strr[300];
	format(strr, sizeof(strr),"Ad by %s: %s", sendername, message);
	mysql_real_escape_string(strr, resulttt);
	mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','ad')", PlayerInfo[playerid][pSQLID], resulttt);
	mysql_tquery(SQL,var100,"","");
	AdvPlayer[playerid] = 1;
	AdvTimer[playerid] = SetTimerEx("PlaceAD", time, false, "i", playerid);
    format(string, sizeof(string), "Ai platit $%d pentru anunt. Anuntul tau va fi afisat in %d secunde.", payout, time2);
    SendClientMessage(playerid, COLOR_DARKPINK, string);
	new str[128];
	if(IsPlayerInRangeOfPoint(playerid, 5.0,BizzInfo[28][bEntranceX],BizzInfo[28][bEntranceY],BizzInfo[28][bEntranceZ]))
	{
		BizzInfo[28][bTill] += payout;
		mysql_format(SQL,str,128,"UPDATE bizz SET `Till`='%d' WHERE `ID`='28'",BizzInfo[28][bTill]);
		mysql_tquery(SQL,str,"","");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5.0,BizzInfo[52][bEntranceX],BizzInfo[52][bEntranceY],BizzInfo[52][bEntranceZ]))
	{
		BizzInfo[52][bTill] += payout;
		mysql_format(SQL,str,128,"UPDATE bizz SET `Till`='%d' WHERE `ID`='52'",BizzInfo[52][bTill]);
		mysql_tquery(SQL,str,"","");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5.0,BizzInfo[56][bEntranceX],BizzInfo[56][bEntranceY],BizzInfo[56][bEntranceZ]))
	{
		BizzInfo[56][bTill] += payout;
		mysql_format(SQL,str,128,"UPDATE bizz SET `Till`='%d' WHERE `ID`='56'",BizzInfo[56][bTill]);
		mysql_tquery(SQL,str,"","");
	}
	return 1;
}
CMD:deletemyad(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(AdvPlayer[playerid] != 0)
	{
		KillTimer(AdvTimer[playerid]);
		AdvPlayer[playerid] = 0;
		format(AdvMSG[playerid], 256, "");
		SendClientMessage(playerid, COLOR_DARKPINK, "Ad-ul tau a fost sters.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have an ad placed.");
	return 1;
}
CMD:dad(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pHelper] > 0)
	{
		new id,string[256],sendername[30],giveplayer[30];
		if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /dad [name/playerid]");
		if(IsPlayerConnected(id))
		{
			if(AdvPlayer[id] != 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(id, giveplayer, sizeof(giveplayer));
				KillTimer(AdvTimer[id]);
				AdvPlayer[id] = 0;
				format(AdvMSG[id], 256, "");
				format(string, sizeof(string),"/deletead: Admin %s has deleted %s's (%d) /ad.",sendername,giveplayer,id);
				ABroadCast(COLOR_ADMCOMMANDS,string,1);
				format(string, sizeof(string),"Admin %s deleted your /ad.",sendername);
				SendClientMessage(id, COLOR_LIGHTRED, string);
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player don't have an ad placed.");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin/helper.");
	return 1;
}
CMD:deletead(playerid, params[]) return cmd_dad(playerid, params);
CMD:shout(playerid, params[]) return cmd_s(playerid, params);
CMD:s(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string[250],result[250],sendername[25];
    if(PlayerInfo[playerid][pMuted] == 1)
    {
		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
		else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
		SendClientMessage(playerid, COLOR_DARKPINK, string);
		return 1;
	}
	GetPlayerName(playerid, sendername, sizeof(sendername));
	if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /s [message]");
	format(string, sizeof(string), "%s shouts: %s!", sendername, result);
	ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
	format(string, sizeof(string), "(shouts) \"%s!\"", params);
	SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 30.0, 10000);
	new var100[300],resulttt[300],strr[300];
	format(strr, sizeof(strr),"%s shouts: %s!", sendername, result);
	mysql_real_escape_string(strr, resulttt);
	mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','s')", PlayerInfo[playerid][pSQLID], resulttt);
	mysql_tquery(SQL,var100,"","");
	for(new adm = 0; adm<=MAX_PLAYERS;adm++)
	{
		if(IsPlayerConnected(adm))
		{
			if(PlayerInfo[adm][pAdmin] > 0 && BigEar[adm] == 1)
			{
				format(string, sizeof(string), "%s shouts: %s!",sendername,result);
				SendClientMessage(adm,  COLOR_YELLOW, string);
			}
		}
	}
	return 1;
}
CMD:b(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string[250],result[250],sendername[25];
    if(PlayerInfo[playerid][pMuted] == 1)
    {
		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
		else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
		SendClientMessage(playerid, COLOR_DARKPINK, string);
		return 1;
	}
	GetPlayerName(playerid, sendername, sizeof(sendername));
	if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /b [message]");
	format(string, sizeof(string), "%s says: (( %s ))", sendername, result);
	ProxDetector(35.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
	new var100[300],resulttt[300],strr[300];
	format(strr, sizeof(strr),"%s says: (( %s ))", sendername, result);
	mysql_real_escape_string(strr, resulttt);
	mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','b')", PlayerInfo[playerid][pSQLID], resulttt);
	mysql_tquery(SQL,var100,"","");
	for(new adm = 0; adm<=MAX_PLAYERS;adm++)
	{
		if(IsPlayerConnected(adm))
		{
			if(PlayerInfo[adm][pAdmin] > 0 && BigEar[adm] == 1)
			{
				format(string, sizeof(string), "%s says: (( %s ))",sendername,result);
				SendClientMessage(adm,  COLOR_YELLOW, string);
			}
		}
	}
	return 1;
}
CMD:low(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string[250],result[250],sendername[25];
    if(PlayerInfo[playerid][pMuted] == 1)
    {
		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
		else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
		SendClientMessage(playerid, COLOR_DARKPINK, string);
		return 1;
	}
	GetPlayerName(playerid, sendername, sizeof(sendername));
	if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /low [message]");
	format(string, sizeof(string), "%s says quietly: %s", sendername, result);
	ProxDetector(3.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
	format(string, sizeof(string), "(quietly) \"%s\"", params);
	SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 3.0, 10000);
	new var100[300],resulttt[300],strr[300];
	format(strr, sizeof(strr),"%s says quietly: %s", sendername, result);
	mysql_real_escape_string(strr, resulttt);
	mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','low')", PlayerInfo[playerid][pSQLID], resulttt);
	mysql_tquery(SQL,var100,"","");
	for(new adm = 0; adm<=MAX_PLAYERS;adm++)
	{
		if(IsPlayerConnected(adm))
		{
			if(PlayerInfo[adm][pAdmin] > 0 && BigEar[adm] == 1)
			{
				format(string, sizeof(string), "%s says quietly: %s",sendername,result);
				SendClientMessage(adm,  COLOR_YELLOW, string);
			}
		}
	}
	return 1;
}
CMD:fish(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pJob] != 13) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a fisherman.");
	if(ValidFishPlace(playerid) && !IsPlayerInAnyVehicle(playerid))
	{
        if(PlayerInfo[playerid][pFishes] > 0) return SendClientMessage(playerid,COLOR_JOB,"(Job){FFFFFF} Got to a 24/7 store to sell the fish before start fishing again.");
		if(Fishing[playerid] == 1) return SendClientMessage(playerid,COLOR_JOB,"(Job){FFFFFF} You are already fishing.");
		ClearAnimations(playerid);
		TogglePlayerControllable(playerid, 0);
		SetPlayerAttachedObject(playerid, 9, 18632, 5, 0.217000, 0.089999, -0.139999, -34.000007, 5.899998, -61.399993);
		ApplyAnimation(playerid, "SAMP", "FishingIdle", 4.0, 0, 1, 1, 1, 0, 1);
		Fishing[playerid] = 1;
		new timer = 20 + random(20);
		FishTimer[playerid] = timer;
		SendClientMessage(playerid, COLOR_JOB, "(Job){FFFFFF} You're now fishing. It will take a few seconds to reel your fish in.");
		FishTimerr[playerid] = SetTimerEx("Fisher", 1000, 1, "i", playerid);
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~FISHING...", 4110, 5);
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in the fishing zone. [/jobs > Fisherman]");
	return 1;
}
CMD:unrentroom(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pSleeping] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You sleeping, use /sleep first.");
	if(PlayerInfo[playerid][pPhousekey] != 999) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You own this house.");
	if(PlayerInfo[playerid][pRented] == -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have rent a house.");
	SetTimerEx("OnPropTextdrawUpdate", 1000, false, "dd", 1, PlayerInfo[playerid][pRented]);
	PlayerInfo[playerid][pRented] = -1;
	SendClientMessage(playerid, COLOR_DARKPINK, "House unrented!");
	Update(playerid,pPhousekeyx);
	Update(playerid,pRentedx);
	return 1;
}
CMD:up(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] >= 1) SlapPlayer(playerid); 
	else return SendClientMessage(playerid,COLOR_LIGHTGREEN3,"You are not an admin.");
	return 1;
}
CMD:fly(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
    {
    	new Float:PosX,Float:PosY,Float:PosZ,car = GetPlayerVehicleID(playerid);
    	if(IsPlayerInAnyVehicle(playerid))
    	{
    		GetVehiclePos(car, PosX, PosY, PosZ);
    		SetVehiclePos(car, PosX, PosY+5, PosZ+10.0);
    	}
    	else
    	{
			GetPlayerPos(playerid, PosX, PosY, PosZ);
			SetPlayerPosEx(playerid, PosX, PosY+5, PosZ+10.0);
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin.");
	return 1;
}
CMD:time(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] == 1) return 1;
	new sendername[25],string[256];
	new hour,minute,second;
	gettime(hour,minute,second);
	hour+=SERVER_HOUR_FIX;
	if(hour == 24) hour = 0;
	format(string, sizeof(string), "The current time is %d:%s%d (%d seconds).", hour, (minute < 10) ? ("0") : (""), minute, second);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Connected for %d seconds.", PlayerInfo[playerid][pPayDay]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	GetPlayerName(playerid, sendername, sizeof(sendername));
	format(string, sizeof(string), "* %s raises her hand and looks down at her watch.", sendername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0);
	return 1;
}
CMD:sec(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string[30];
	format(string, sizeof(string),"%d",OnlineTime[playerid]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}
CMD:ringbell(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	for(new h = 1; h < sizeof(HouseInfo); h++)
	{
		if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]))
		{
			new string[128],name[30];
			GetPlayerName(playerid, name, sizeof(name));
			format(string, sizeof(string), "* %s presses a button, ringing the doorbell of the house.", name);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			foreach(new i : Player)
			{
				if(InHouse[i] == h)
				{
					SendClientMessage(i, COLOR_PURPLE, "* The doorbell rings.");
				}
			}
		}
	}
   	return 1;
}
CMD:lockhouse(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pPhousekey] != 999)
	{
		new x = PlayerInfo[playerid][pPhousekey], str[256];
		if(HouseInfo[x][hLock] == 0)
		{
			HouseInfo[x][hLock] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "House locked.");
		}
		else
		{
			HouseInfo[x][hLock] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "House unlocked.");
		}
		mysql_format(SQL,str,sizeof(str),"UPDATE `houses` SET `Lockk`='%d' WHERE `ID`='%d'", HouseInfo[x][hLock], x);
		mysql_tquery(SQL,str,"","");
		OnPropTextdrawUpdate(1, x);
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own a house.");
   	return 1;
}
CMD:usedrugs(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(UsingDrugs[playerid] == 0)
    {
		if(PlayerInfo[playerid][pDrugs] >= 1)
	    {
			if(DrugTimer[playerid] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Poti folosi droguri doar o data la 5 minute.");
	        PlayerStoned[playerid] += 2;
			new sendername[25],string[128];
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        format(string, sizeof(string), "* %s took some drugs out of his pocket.", sendername);
            ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, "Stai nemiscat 30 de secunde pentru ca drogurile sa-si faca efectul.");
	        UsingDrugs[playerid] = 1;
			LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
            drug[playerid] = SetTimerEx("DrugEffectGone",30000,false,"d",playerid);
			if(PlayerInfo[playerid][pQuest2] == 6 && PlayerInfo[playerid][pQuestProgress2] == 0)
			{
				PlayerInfo[playerid][pQuestProgress2] = 1;
				Update(playerid, pQuestProgress2x);
				FinishQuest2(playerid, 6);
			}
			PlayerInfo[playerid][pDrugs] -= 1;
			new str2[128];
			mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `Drugs`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pDrugs],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str2,"","");
        }
    	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have drugs.");
    }
    else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are already taking drugs.");
	return 1;
}
CMD:getdrugs(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pJob] != 4) return SS(playerid, COLOR_JOB, "(Job){FFFFFF} Nu ai jobul de dealer de droguri.", "(Job){FFFFFF} You are not a drug dealer.");
    new points;
    new dpoints = PlayerInfo[playerid][pDrugs];
    if(sscanf(params, "i", points))
    {
    	SendClientMessage(playerid, COLOR_WHITE, "Usage: /getdrugs [amount]");
    	SendClientMessage(playerid, COLOR_WHITE, "Price: $100 / gram at crack house, $50 / gram at faction HQ.");
    	return 1;
    }
    new totaldrugs = dpoints + points;
    if(points < 1) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Numar invalid.", "(Error){FFFFFF} Invalid number.");
    if(totaldrugs > 99) return SS(playerid, COLOR_JOB, "(Job){FFFFFF} Nu poti detine atat de multe droguri la tine.", "(Job){FFFFFF} You can't have that amount of drugs.");
    if(IsPlayerInRangeOfPoint(playerid, 5.0, 316.1940,1117.5341,1083.8828))
    {
	    new money = points * 100;
		if(GetPlayerCash(playerid) < money) return SS(playerid, COLOR_JOB, "(Job){FFFFFF} Nu ai suficienti bani.", "(Job){FFFFFF} You don't have enough money.");
		PlayerInfo[playerid][pDrugs] += points;
		GivePlayerCash(playerid, -money);
		new string[128],string2[128];
		format(string,sizeof(string),"(Job){FFFFFF} Ai cumparat %d grame de droguri pentru $%s",points,FormatNumber(money));
		format(string,sizeof(string),"(Job){FFFFFF} You bought %d grams of drugs for $%s",points,FormatNumber(money));
		SS(playerid, COLOR_JOB, string, string2);
		new str2[256];
		mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `Money`='%d',`Drugs`='%d' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pDrugs],PlayerInfo[playerid][pNormalName]);
		mysql_tquery(SQL,str2,"","");
	}
	else
	{
		if(PlayerInfo[playerid][pMember] >= 1)
		{
			new fid = PlayerInfo[playerid][pMember];
			if(IsPlayerInRangeOfPoint(playerid, 50.0, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]) && GetPlayerVirtualWorld(playerid) == DynamicFactions[fid][fVirtual])
			{
				new money = points * 50;
				if(GetPlayerCash(playerid) < money) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu ai suficienti bani.", "(Error){FFFFFF} You don't have enough money.");
				if(DynamicFactions[fid][fDrugs] < points) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Not enough drugs in faction safe.");
				DynamicFactions[fid][fDrugs] -= points;
				PlayerInfo[playerid][pDrugs] += points;
				GivePlayerCash(playerid, -money);
				DynamicFactions[fid][fBank] += money;
				new string[128],string2[128];
				format(string,sizeof(string),"(Job){FFFFFF} Ai cumparat %d grame de droguri pentru $%s",points,FormatNumber(money));
				format(string,sizeof(string),"(Job){FFFFFF} You bought %d grams of drugs for $%s",points,FormatNumber(money));
				SS(playerid, COLOR_JOB, string, string2);
				new str2[256];
				mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `Money`='%d',`Drugs`='%d' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pDrugs],PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str2,"","");
				mysql_format(SQL,str2,sizeof(str2),"UPDATE factions SET `Bank`='%d',`Drugs`='%d' WHERE `ID`='%d'",DynamicFactions[fid][fBank],DynamicFactions[fid][fDrugs],fid);
				mysql_tquery(SQL,str2,"","");
			}
			else SS(playerid, COLOR_JOB, "(Job){FFFFFF} Trebuie sa fi in HQ-ul factiunii sau la crack house pentru a lua droguri.", "(Job){FFFFFF} You need to be at the crack house or on your faction's HQ to get drugs.");
		}
		else SS(playerid, COLOR_JOB, "(Job){FFFFFF} Trebuie sa fi in HQ-ul factiunii sau la crack house pentru a lua droguri.", "(Job){FFFFFF} You need to be at the crack house or on your faction's HQ to get drugs.");
	}
	return 1;
}
CMD:selldrugs(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
    if(PlayerInfo[playerid][pJob] != 4) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a drugs dealer.");
	new playa,needed,string[128],giveplayer[25],sendername[25],money;
	if(sscanf(params, "uii",playa,needed,money)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /selldrugs [name/playerid] [drugs] [price]");
	if(needed < 1 || needed > 50) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Drugs ammount can't be lower then 1, or above 50.");
	if(money < 10 || money > 5000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Price can't be lower then 10$, or above 5000$.");
	if(needed > PlayerInfo[playerid][pDrugs]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You dont have that ammount of drugs with you.");
	if(IsPlayerConnected(playa))
	{
	    if(playa != INVALID_PLAYER_ID)
	    {
	     	if(ProxDetectorS(8.0, playerid, playa))
    		{
        	    if(playa == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Can't sell to yourself.");
        	    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
        		GetPlayerName(playerid, sendername, sizeof(sendername));
        	    format(string, sizeof(string), "(Job){FFFFFF} You offered %s to buy %d gram of drugs for $%s.", giveplayer, needed, FormatNumber(money));
        		SendClientMessage(playerid, COLOR_JOB, string);
         		format(string, sizeof(string), "Drug dealer %s wants to sell you %d grams of drugs for $%s, type /accept drugs %d to buy them.", sendername, needed, FormatNumber(money),playerid);
	        	SendClientMessage(playa, COLOR_WHITE, string);
	         	DrugOffer[playa] = playerid;
	        	DrugPrice[playa] = money;
	        	DrugGram[playa] = needed;
    		}
	    	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
    	}
	}
 	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	return 1;
}
CMD:gotohouse(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] >= 1)
    {
		new housenum,string[128],name[30];
		if(sscanf(params, "d",housenum)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gotohouse [house id]");
		if(housenum < 0 || housenum > 110) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid house id.");
		GetPlayerName(playerid, name, sizeof(name));
		format(string,sizeof(string),"%s used /gotohouse %d.",name,housenum);
		ABroadCast(COLOR_ADMCOMMANDS,string,1);
		SetPlayerInterior(playerid,HouseInfo[housenum][hInterior]);
		SetPlayerPosEx(playerid,HouseInfo[housenum][hExitx],HouseInfo[housenum][hExity],HouseInfo[housenum][hExitz]);
		PlayerInfo[playerid][pInt] = HouseInfo[housenum][hInterior];
		PlayerInfo[playerid][pLocal] = housenum;
		InHouse[playerid] = housenum;
		SetPlayerVirtualWorld(playerid,HouseInfo[housenum][hVirtual]);
		if(strlen(housestring[InHouse[playerid]]) > 0)
		{
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:gotobiz(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pAdmin] >= 1)
    {
		new housenum,string[128],name[30];
		if(sscanf(params, "d",housenum)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gotobiz [biz id]");
		if(housenum < 0 || housenum > 100) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid biz id.");
		SetPlayerPosEx(playerid,BizzInfo[housenum][bEntranceX],BizzInfo[housenum][bEntranceY],BizzInfo[housenum][bEntranceZ]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		GetPlayerName(playerid, name, sizeof(name));
		format(string,sizeof(string),"%s used /gotobiz %d.",name,housenum);
		ABroadCast(COLOR_ADMCOMMANDS,string,1);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:gotohq(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
    {
    	new hqid, string[128], name[30];
    	if(sscanf(params, "d", hqid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gotohq [faction id]");
    	if(hqid < 0 || hqid > 14) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid hq id.");
    	SetPlayerPosEx(playerid, DynamicFactions[hqid][fceX], DynamicFactions[hqid][fceY], DynamicFactions[hqid][fceZ]);
    	SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		GetPlayerName(playerid, name, sizeof(name));
		format(string, sizeof(string), "%s used /gotohq %d.", name, hqid);
		ABroadCast(COLOR_ADMCOMMANDS, string, 1);
    }
    else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:levelinfo(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	LevelInfo(playerid);
	return 1;
}/*
CMD:newyear(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pNewYear] == 0)
	{
		new money, xp, pp;
		money = 20000000 + random(5000000); 
		xp = 20 + random(10);
		pp = 20 + random(10);
		PlayerInfo[playerid][pAccount] += money;
		PlayerInfo[playerid][pExp] += xp;
		PlayerInfo[playerid][pPremiumPoints] += pp;
		Update(playerid,pPremiumPointsx);
		Update(playerid,pExpx);
		Update(playerid, pBank);

		PlayerInfo[playerid][pNewYear] = 1;
		Update(playerid, pNewYearx);

		new string[128],string2[128];
		format(string,sizeof(string), "(La multi ani!){FFFFFF} Ai primit %s$, %d respect points si %d puncte premium.",FormatNumber(money),xp,pp);
		format(string2,sizeof(string2), "(Happy new year!){FFFFFF} You recieved %s$, %d respect points and %d premium points.",FormatNumber(money),xp,pp);
		SS(playerid, COLOR_YELLOW, string,string2);
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already received the gift for 2020.");
	return 1;
}*/
CMD:buylevel(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    new nxtlevel = PlayerInfo[playerid][pLevel];
	new costlevel;
	new expamount,string[128],sendername[30];
	if(PlayerInfo[playerid][pLevel] <= 4)
	{
	    expamount = nxtlevel*2;
	    costlevel = nxtlevel*400;
	}
	else if(PlayerInfo[playerid][pLevel] >= 5)
	{
	    expamount = nxtlevel*levelexp;
	    costlevel = nxtlevel*levelcost;
	}
    GetPlayerName(playerid,sendername,sizeof(sendername));
	if(GetPlayerCash(playerid) < costlevel) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You do not have enough cash.");
	if(PlayerInfo[playerid][pExp] < expamount) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You do not have the necessary number of respect points.");
	GivePlayerCash(playerid, -costlevel);
	PlayerInfo[playerid][pLevel]++;
    PlayerInfo[playerid][pExp] -= expamount;
    if(PlayerInfo[playerid][pLanguage] == 2) format(string,sizeof(string),"Felicitari, acum ai level %d!",PlayerInfo[playerid][pLevel]);
    else format(string,sizeof(string),"Congratulations, you are now level %d!",PlayerInfo[playerid][pLevel]);
	SendClientMessage(playerid, 0x3A8EBAFF, string);
	if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "* %s are acum level %d.",sendername,PlayerInfo[playerid][pLevel]);
	else format(string, sizeof(string), "* %s is now level %d.",sendername,PlayerInfo[playerid][pLevel]);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    new total = PlayerInfo[playerid][pExp];
    if(total > 0)
    {
        PlayerInfo[playerid][pExp] = total;
    }
    else
    {
        PlayerInfo[playerid][pExp] = 0;
    }
    Update(playerid,pExpx);
	Update(playerid,pLevelx);
	SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	SS(playerid,COLOR_LIGHTBLUE, "Foloseste comanda /levelinfo pentru informatii despre nivele.","Use /levelinfo command for levels information.");
	return 1;
}
CMD:race(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerInRangeOfPoint(playerid,3.0, 1102.4310,-1458.1349,15.7969))
	{
		if(PlayerInfo[playerid][pLevel] < 6) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have level 6.");
		if(PlayerInfo[playerid][pCarLic] < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a driving licence.");
		if(PlayerInfo[playerid][pWantedLevel] != 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You can not enter, because you have wanted.");
		if(racers > 10 || racep < 2)
		{
			if(racet > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Here is already a race ongoing, try to join other race arena or come back later.");
			new sendernamee[30],stringg[128];
			if(racep >= 20) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This arena is full.");
			SetPlayerPos(playerid, -40.3110,1508.9723,1000.9155);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnFreezeStation", 2000, false, "i", playerid);
			SetPlayerVirtualWorld(playerid, 1);
			PlayerInfo[playerid][pRaceG] = 0;
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
				{
					GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
					format(stringg,sizeof(stringg),"(Race){FFFFFF} %s has joined the race arena.", sendernamee);
					SendClientMessage(i, COLOR_ARENA, stringg);
				 }
			}
			racep++;
			if(racep == 1)
			{
				PlayerTextDrawShow(playerid, PaintBallText[playerid]);
				PlayerTextDrawSetString(playerid, PaintBallText[playerid], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
				GameTextForPlayer(playerid, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
			}
			if(racep == 2)
			{
				racers = 61;
				racet = 0;
				preparerace1 = SetTimer("PrepareRoundRace1", 1000, 1);
			}
		}
		else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Here is already a race ongoing, try to join other race arena or come back later.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not at Race Arena.");
	return 1;
}
CMD:racestats(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to login first.");
    {
		new string[256];
		SendClientMessage(playerid, COLOR_GREY, "---------------------------------------------------------------------");

		format(string, sizeof(string), "Race Stats - Won matches: %d | Experience: %d", PlayerInfo[playerid][pRaceWon], PlayerInfo[playerid][pRaceExp]);
		SendClientMessage(playerid, COLOR_WHITE, string);

		SendClientMessage(playerid, COLOR_GREY, "---------------------------------------------------------------------");
	}
	return 1;
}
CMD:paintstats(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to login first.");
    {
		new string[256];
		SendClientMessage(playerid, COLOR_GREY, "---------------------------------------------------------------------");

		format(string, sizeof(string), "PaintBall Stats - Won matches: %d | Kills/Deaths: %d/%d | Rank: %s", PlayerInfo[playerid][pPaintWon], PlayerInfo[playerid][pPaintKills], PlayerInfo[playerid][pPaintDeaths], PaintRankName[PlayerInfo[playerid][pPaintRank]]);
		SendClientMessage(playerid, COLOR_WHITE, string);

		SendClientMessage(playerid, COLOR_GREY, "---------------------------------------------------------------------");
	}
	return 1;
}
CMD:paint(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerInRangeOfPoint(playerid,3.0, 1154.7026,-1440.1458,15.7969))
	{
		if(PlayerInfo[playerid][pLevel] < 4) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have level 4.");
		if(PlayerInfo[playerid][pGunLic] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a gun licence.");
		new string[256],string1[10],string2[10],string3[10],string4[10];
	    if(PlayerInfo[playerid][pWantedLevel] != 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You can not enter, because you have wanted.");
		if(paintm[1] == 1) { format(string1,sizeof(string1),"rc_arena"); }
		if(paintm[1] == 2) { format(string1,sizeof(string1),"tennis"); }
		if(paintm[1] == 3) { format(string1,sizeof(string1),"farm"); }
		if(paintm[1] == 4) { format(string1,sizeof(string1),"beach"); }
		if(paintm[1] == 5) { format(string1,sizeof(string1),"lspd"); }

		if(paintm[2] == 1) { format(string2,sizeof(string2),"rc_arena"); }
		if(paintm[2] == 2) { format(string2,sizeof(string2),"tennis"); }
		if(paintm[2] == 3) { format(string2,sizeof(string2),"farm"); }
		if(paintm[2] == 4) { format(string2,sizeof(string2),"beach"); }
		if(paintm[2] == 5) { format(string2,sizeof(string2),"lspd"); }

		if(paintm[3] == 1) { format(string3,sizeof(string3),"rc_arena"); }
		if(paintm[3] == 2) { format(string3,sizeof(string3),"tennis"); }
		if(paintm[3] == 3) { format(string3,sizeof(string3),"farm"); }
		if(paintm[3] == 4) { format(string3,sizeof(string3),"beach"); }
		if(paintm[3] == 5) { format(string3,sizeof(string3),"lspd"); }

		if(paintm[4] == 1) { format(string4,sizeof(string4),"rc_arena"); }
		if(paintm[4] == 2) { format(string4,sizeof(string4),"tennis"); }
		if(paintm[4] == 3) { format(string4,sizeof(string4),"farm"); }
		if(paintm[4] == 4) { format(string4,sizeof(string4),"beach"); }
		if(paintm[4] == 5) { format(string4,sizeof(string4),"lspd"); }
	    format(string,sizeof(string),"Type\tSlots\tMap\nClassic / Free For All\t%d/20\t%s\nClassic + Armour\t%d/20\t%s\nGun Game\t%d/20\t%s\nDeagle Only\t%d/20\t%s",paintp[1],string1,paintp[2],string2,paintp[3],string3,paintp[4],string4);
	    ShowPlayerDialog(playerid, DIALOG_PAINTBALL, DIALOG_STYLE_TABLIST_HEADERS, "Choose Arena", string, "Select", "Close");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not at Paintball Arena.");
	return 1;
}
CMD:paintleave(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pPaintBallG] > 0)
    {
        new string [128],sendername[30];
        GetPlayerName(playerid, sendername, sizeof(sendername));
        SendClientMessage(playerid, COLOR_WHITE, "Leaving the paintball arena...");
		foreach(new i : Player)
		{
		    if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
		    {
		        format(string,sizeof(string),"(Paint){FFFFFF} %s has left the paintball arena.", sendername);
		        SendClientMessage(i, COLOR_ARENA, string);
			}
		}
		SetPlayerHealthEx(playerid, 100.0);
		curatj[playerid] = 0;
		for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
		SpawnPlayer(playerid);
		PlayerTextDrawHide(playerid, PaintBallText[playerid]);
		SetPlayerSkinEx(playerid);
		paintp[PlayerInfo[playerid][pPaintBallG]]--;
        PlayerInfo[playerid][pPaintBallG] = 0;
        PlayerInfo[playerid][pPaintBallKills] = 0;
        PlayerInfo[playerid][pPaintBallVoted] = 0;
        PlayerInfo[playerid][pPaintBallVoted2] = 0;
        ResetPlayerWeaponsEx(playerid);
	    ResetPlayerWeapons(playerid);
	    SetPlayerArmourEx(playerid, 0);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid,0);
	    SetPlayerToTeamColor(playerid);
	    SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
	   	SetTimerEx("SetPlayerPosExx", 1000, false, "ufffdd", playerid, 1154.7026,-1440.1458,15.7969, 0, 0);
	}
	return 1;
}
CMD:leavepaint(playerid, params[]) return cmd_paintleave(playerid, params);
CMD:raceleave(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pRaceG] == 0)
    {
        new string [128],sendername[30];
        GetPlayerName(playerid, sendername, sizeof(sendername));
        SendClientMessage(playerid, COLOR_WHITE, "Leaving the race arena...");
		foreach(new i : Player)
		{
		    if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
		    {
		        format(string,sizeof(string),"(Race){FFFFFF} %s has left the race arena.", sendername);
		        SendClientMessage(i, COLOR_ARENA, string);
			}
		}
		SetPlayerHealthEx(playerid, 100.0);
		curatj[playerid] = 0;
		for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
		SpawnPlayer(playerid);
		PlayerTextDrawHide(playerid, PaintBallText[playerid]);
		racep--;
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid,0);
	    SetTimerEx("SetPlayerPosExx", 1000, false, "ufffdd", playerid, 1102.4310,-1458.1349,15.7969, 0, 0);
		RaceCP[playerid] = 0;
		DisablePlayerRaceCheckpoint(playerid);
		StopAudioStreamForPlayer(playerid);
		DisableRemoteVehicleCollisions(playerid, 0);
		if(racet > -1)
		{
			for(new cs; cs < 20; cs++)
			{
				if(rcarid[cs] == GetPlayerVehicleID(playerid))
				{
					DestroyVehicle(rcarid[cs]);
					rcarid[cs] = 0;
				}
			}
			foreach(new x : Player)
			{
				if(PlayerInfo[x][pRaceG] == PlayerInfo[playerid][pRaceG] && x != playerid)
				{
					if(RacePos[x] > RacePos[playerid]) RacePos[x]--;
				}
			}
		}
		PlayerInfo[playerid][pRaceG] = -1;
		PlayerTextDrawHide(playerid, RaceTD[playerid][0]);
		PlayerTextDrawHide(playerid, RaceTD[playerid][1]);
		PlayerTextDrawHide(playerid, RaceTD[playerid][2]);
		PlayerTextDrawHide(playerid, RaceTD[playerid][3]);
		PlayerTextDrawHide(playerid, RaceTD[playerid][4]);
		PlayerInfo[playerid][pRaceVoted] = 0;
	}
	return 1;
}
CMD:leaverace(playerid, params[]) return cmd_raceleave(playerid, params);
CMD:voterace(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pRaceG] == -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not at a race.");
    if(racers <= 10) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use /voterace now.");
	if(PlayerInfo[playerid][pRaceVoted] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have already used /voterace.");
	if(PlayerInfo[playerid][pRaceG] == 0)
    	ShowPlayerDialog(playerid, DIALOG_RACEVOTEMAP, DIALOG_STYLE_LIST, "Vote Race Map", "Auto LS-LV\nChiliad\nThe Forest", "Vote", "Exit");
	return 1;
}
CMD:votemap(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(paintrs[PlayerInfo[playerid][pPaintBallG]] < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use /votemap when round has started.");
	if(PlayerInfo[playerid][pPaintBallVoted] > 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You have already voted a map.");
	if(PlayerInfo[playerid][pPaintBallG] > 0)
    	ShowPlayerDialog(playerid, DIALOG_PAINTBALLMAP, DIALOG_STYLE_LIST, "Vote Paintball Map", "rc_arena\ntennis\nfarm\nbeach\nlspd", "Vote", "Exit");
	return 1;
}
CMD:votegun(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pPaintBallG] > 0)
	{
    	if(PlayerInfo[playerid][pPaintBallG] == 3 || PlayerInfo[playerid][pPaintBallG] == 4) return SendClientMessage(playerid, COLOR_WHITE, "You can't use /votegun at this game type.");
    	if(paintrs[PlayerInfo[playerid][pPaintBallG]] < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use /votegun when round has started.");
    	if(PlayerInfo[playerid][pPaintBallVoted2] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have already voted a gun.");
    	if(PlayerInfo[playerid][pPaintBallG] == 1 || PlayerInfo[playerid][pPaintBallG] == 2)
    	{
        	if(paintrs[PlayerInfo[playerid][pPaintBallG]] > 0)
        		ShowPlayerDialog(playerid, DIALOG_PAINTBALLWEAPON, DIALOG_STYLE_LIST, "Vote Paintball Weapon", "Deagle, M4, Grenade & Spray\nBaseball Bat\nChainsaw", "Vote", "Exit");
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use this command now.");
		}
	}
	return 1;
}
CMD:bigears(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    new string[256],sendername[30];
    GetPlayerName(playerid, sendername, sizeof(sendername));
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid,COLOR_LIGHTGREEN3, AdminOnly);
	if(!BigEar[playerid])
	{
		BigEar[playerid] = 1;
		SendClientMessage(playerid, COLOR_WHITE, "{999999}Your ears have grown.");
		format(string, sizeof(string), "{FFFFCC}Admin %s has activated /bigears.",sendername);
		ABroadCast(COLOR_WHITE, string,6);
	}
	else if(BigEar[playerid])
	{
		(BigEar[playerid] = 0);
		SendClientMessage(playerid, COLOR_WHITE, "{999999}Your ears have shrank.");
		format(string, sizeof(string), "{FFFFCC}Admin %s has deactivated /bigears.",sendername);
		ABroadCast(COLOR_WHITE, string,6);
	}
	return 1;
}
CMD:gotoa(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
    	SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
    	SendClientMessage(playerid, COLOR_WHITE, "Welcome to LV airport.");
    	if(GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1477.1122, 1713.9915, 10.8125);
			GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			OnPlayerGoto(playerid, 0, 0);
		}
		else
		{
			SetPlayerPosEx(playerid, 1477.1122,1713.9915,10.8125);
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:aaa2(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
	    SetPlayerVirtualWorld(playerid, 1337);
    	SetPlayerInterior(playerid, 0);
    	SendClientMessage(playerid, COLOR_WHITE, "Welcome to LV airport (in virtual world).");
    	if(GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1477.1122, 1713.9915, 10.8125);
			GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 1337);
			LinkVehicleToInterior(tmpcar, 0);
			OnPlayerGoto(playerid, 0, 1337);
		}
		else
		{
			SetPlayerPosEx(playerid, 1477.1122,1713.9915,10.8125);
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:aaa3(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
	    SetPlayerVirtualWorld(playerid, 1338);
    	SetPlayerInterior(playerid, 0);
    	SendClientMessage(playerid, COLOR_WHITE, "Welcome to LV airport (in virtual world 1338).");
    	if(GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1477.1122, 1713.9915, 10.8125);
			GetVehiclePos(tmpcar, old_veh_pos[tmpcar][0], old_veh_pos[tmpcar][1], old_veh_pos[tmpcar][2]);
			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 1338);
			LinkVehicleToInterior(tmpcar, 0);
			OnPlayerGoto(playerid, 0, 1338);
		}
		else
		{
			SetPlayerPosEx(playerid, 1477.1122,1713.9915,10.8125);
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:toge(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pHelper] > 0)
	{
		new string[128], name[30];
		GetPlayerName(playerid, name, sizeof(name));
		if(toge[playerid] == 1)
		{
			toge[playerid] = 0;
			format(string, sizeof(string), "[v] %s enabled helper chat.", name);
			ABroadCast(COLOR_ADMIN, string, 1);
     		HLChat(COLOR_ADMIN, string);
		}
		else
		{
			toge[playerid] = 1;
			format(string, sizeof(string), "[x] %s disabled helper chat.", name);
			ABroadCast(COLOR_ADMIN, string, 1);
     		HLChat(COLOR_ADMIN, string);
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not allowed to use this command.");
    return 1;
}
CMD:e(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pHelper] > 0)
	{
		if(toge[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have disabled helper chat, use /toge to enable.");
		new string[250],result[250],sendername[25];
		if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /e [message]");
   		GetPlayerName(playerid, sendername, sizeof(sendername));
    	if(PlayerInfo[playerid][pAdmin] >= 1)
    	{
     		format(string, sizeof(string), "(%d) Admin %s: %s", PlayerInfo[playerid][pAdmin], sendername, result);
    	}
    	else if(PlayerInfo[playerid][pHelper] >= 1)
    	{
    	    format(string, sizeof(string), "(%d) Helper %s: %s", PlayerInfo[playerid][pHelper], sendername, result);
    	}
    	foreach(new i : Player)
    	{
    		if(PlayerInfo[i][pAdmin] > 0 || PlayerInfo[i][pHelper] > 0)
    		{
    			if(toge[i] == 0) SendSplitMessage(i, COLOR_ADMIN, string);
    		}
    	}
		new var100[300],resulttt[300];
		mysql_real_escape_string(string, resulttt);
		mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','e')", PlayerInfo[playerid][pSQLID], resulttt);
		mysql_tquery(SQL,var100,"","");
    }
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}

CMD:a(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
		new string[250],result[250],sendername[25];
		if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /a [message]");
   		GetPlayerName(playerid, sendername, sizeof(sendername));
    	if(PlayerInfo[playerid][pAdmin] > 0)
		{
			format(string, sizeof(string), "(%d) Admin %s: %s", PlayerInfo[playerid][pAdmin], sendername, result);
		}
		ABroadCast(COLOR_ADMCHAT, string,1);
		new var100[300],resulttt[300];
		mysql_real_escape_string(string, resulttt);
		mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','a')", PlayerInfo[playerid][pSQLID], resulttt);
		mysql_tquery(SQL,var100,"","");
    }
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:cw(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(IsPlayerInAnyVehicle(playerid))
    {
		new result[250],sendername[25],string[250];
		if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /cw [message]");
		GetPlayerName(playerid, sendername, sizeof(sendername));
	    format(string, sizeof(string), "(Car Whisper) %s[%d]: %s", sendername, playerid, result);
        foreach(new i : Player)
        {
            if(IsPlayerConnected(i))
            {
                if(IsPlayerInVehicle(i, GetPlayerVehicleID(playerid)))
                {
                    SendClientMessage(i,COLOR_YELLOW, string);
                }
            }
        }
		new var100[300],resulttt[300];
		mysql_real_escape_string(string, resulttt);
		mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','cw')", PlayerInfo[playerid][pSQLID], resulttt);
		mysql_tquery(SQL,var100,"","");
    }
    else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be in vehicle.");
    return 1;
}
CMD:skydive(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		GetPlayerPos(playerid, rx, ry, rz);
		GivePlayerWeaponEx(playerid, 46, 0);
		SetPlayerPosEx(playerid,rx, ry, rz+1500);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:live(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
	{
		new giveplayerid,count=0;
		if(sscanf(params, "u",giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /live [name/playerid]");
		foreach(new i : Player)
		{
			if(TalkingLive[i] != 0 && PlayerInfo[i][pMember] != 9)
			{
				count++;
			}
		}
		if(!IsANewsCar(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in a news van/news chopper.");
		if(!IsANewsCar(GetPlayerVehicleID(giveplayerid))) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} That player is not in a news van/news chopper.");
		if(PlayerInfo[playerid][pRank] >= 1 && PlayerInfo[playerid][pRank] <= 5 && count > 2) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't invite more than 3 players to a live interview.");
		if(PlayerInfo[playerid][pRank] >= 6 && count > 3) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't invite more than 4 players to a live interview.");
		if(IsPlayerConnected(giveplayerid))
		{
		    if(giveplayerid != INVALID_PLAYER_ID)
		    {
				if(ProxDetectorS(5.0, playerid, giveplayerid))
				{
				    if(giveplayerid == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't invite yourself to a live interview.");
					if(TalkingLive[giveplayerid] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is already in a live interview.");
					new sendername[25],giveplayer[25],string[128];
				    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "You invited %s to take a live interview.", giveplayer);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "%s has invited you to take a live interview. (to accept the invitation, type '/accept live %d').", sendername,playerid);
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					LiveOffer[giveplayerid] = playerid;
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a news reporter.");
	return 1;
}
CMD:endlive(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
	{
		new giveplayerid,string[128],sendername[30],giveplayer[30],count=0;
		if(sscanf(params, "u",giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /endlive [name/playerid]");
		if(playerid == giveplayerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't stop live to yourself.");
		if(TalkingLive[giveplayerid] != 0)
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			format(string,sizeof(string),"You have stopped %s live interview!",giveplayer);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string,sizeof(string),"%s has stopped the live interview!",sendername);
	        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
	        TogglePlayerControllable(giveplayerid, 1);
            TalkingLive[giveplayerid] = 0;
			foreach(new i : Player)
			{
				if(TalkingLive[i] != 0 && PlayerInfo[i][pMember] != 9)
				{
					count++;
				}
			}
			if(count < 1)
			{
				TogglePlayerControllable(playerid, 1);
				TalkingLive[playerid] = 0;
			}
	    }
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player don't have a live.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a news reporter.");
	return 1;
}
CMD:ticket(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(OnDuty[playerid] != 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not on duty.");
    new giveplayerid,moneys,giveplayer[25],sendername[25],string[128];
	if(sscanf(params, "u",giveplayerid,moneys)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /ticket [name/playerid]");
	if(playerid == giveplayerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use this command on you.");
	if(IsPlayerConnected(giveplayerid))
	{
	    if(giveplayerid != INVALID_PLAYER_ID)
	    {
	        if(ProxDetectorS(8.0, playerid, giveplayerid))
			{
			    if(IsACop(playerid))
			    {
			    	if(PlayerHandsup[giveplayerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This isn't with hands up.");
			    	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* %s writes up a ticket, and hands it to %s.", sendername, giveplayer);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					format(string, sizeof(string), "You have issued %s a ticket costing $%s.", giveplayer, FormatNumber(SvarInfo[16][svValue]));
					SendClientMessage(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "%s has issued you a ticket costing $%s - /accept ticket %d to pay the fine.", sendername, FormatNumber(SvarInfo[16][svValue]), playerid);
					SendClientMessage(giveplayerid, COLOR_GENANNOUNCE, string);
					TicketOffer[giveplayerid] = playerid;
					TicketMoney[giveplayerid] = SvarInfo[16][svValue];
					return 1;
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a cop.");
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	return 1;
}
CMD:resetgift(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to login first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
	    foreach(Player, i)
	    {
	        if(IsPlayerConnected(i))
	        {
	            PlayerInfo[i][pGiftTime] += 100;
	            SS(i, COLOR_YELLOW, "Toti jucatorii au primit 100 gift points.","All players recieved 100 gift points.");
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:giftbox(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to login first.");
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
	    if(IsPlayerInAnyVehicle(playerid)) return 1;
	    new Float:A;
	    GetPlayerFacingAngle(playerid, A);
	    if(GiftBoxActiv < 1)
	    {
	        giftboxobject = CreateDynamicObject(19054, GiftPosX,GiftPosY,GiftPosZ - 0.4, 0.0, 0.0, A);
	        giftbox3DText = CreateStreamed3DTextLabel("bluffs RPG Giftbox\nUse /getgift to get a gift",0xA9C4E4CC,GiftPosX,GiftPosY,GiftPosZ+0.25,8.0,0);
	    	SS(playerid, COLOR_YELLOW, "Ai activat sistemul de Gift Box!", "The Gift Box system was activated!");
	    	GiftBoxActiv = 1;
		}
		else
		{
		    DestroyDynamicObject(giftboxobject);
        	DestroyDynamic3DTextLabel(giftbox3DText);
	    	SS(playerid, COLOR_YELLOW, "Ai dezactivat sistemul de Gift Box!", "The Gift Box system was dezactivated!");
	    	GiftBoxActiv = 0;
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}

CMD:getgift(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(GiftBoxActiv > 0)
    {
	    //if(floatround(PlayerInfo[playerid][pConnectTime], floatround_round) < 3) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need 3 played hours to use /getgift.");
        if(PlayerInfo[playerid][pGiftTime] < 100)
        {
            new string[128],stringe[128];
			format(string,sizeof(string),"Poti folosi /getgift doar daca ai 100 gift points. Acum ai %d puncte.",PlayerInfo[playerid][pGiftTime]);
			format(stringe,sizeof(stringe),"You can use /getgift only if you have 100 gift points. Now you have %d points.",PlayerInfo[playerid][pGiftTime]);
		    SS(playerid, COLOR_YELLOW, string, stringe);

		    SS(playerid, COLOR_YELLOW, "Poti obtine gift points la payday si la questuri!", "You can receive gift point on payday and quests!");
	        return 1;
		}
 		if(IsPlayerInRangeOfPoint(playerid,5.0, GiftPosX,GiftPosY,GiftPosZ))
  		{
  			new randgift = random(100),string[256],sendername[30],randmoney,stringg[500],y,m,d,h,mi,s;
  			GetPlayerName(playerid,sendername,sizeof(sendername));
			if(randgift >= 0 && randgift <= 30)
			{
				randmoney = 50000 + random(800000) + random(100000);
				GivePlayerCash(playerid, randmoney);
				format(string, sizeof(string), "%s a castigat $%s.",sendername,FormatNumber(randmoney));
				ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "Premiu Gift Box", string, "OK", "");
				ProxDetector(30.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				mysql_real_escape_string(string, stringg);
				mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`) VALUES ('%s','%d')", stringg, PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL,string,"","");
			}
			else if(randgift >= 31 && randgift <= 45)
			{
				if(PlayerInfo[playerid][pCarLicT] <= 50)
				{
					new str[1400];
					PlayerInfo[playerid][pCarLic] = 1;
					PlayerInfo[playerid][pCarLicT] = 200;
					PlayerInfo[playerid][pFlyLic] = 1;
					PlayerInfo[playerid][pFlyLicT] = 200;
					PlayerInfo[playerid][pBoatLic] = 1;
					PlayerInfo[playerid][pBoatLicT] = 200;
					PlayerInfo[playerid][pGunLic] = 1;
					PlayerInfo[playerid][pGunLicT] = 200;
					mysql_format(SQL,str,sizeof(str),"UPDATE users SET `CarLic`='1',`CarLicT`='200',`FlyLic`='1',`FlyLicT`='200',`BoatLic`='1',`BoatLicT`='200',`GunLic`='1',`GunLicT`='200' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,str,"","");
					format(string,sizeof(string),"%s a castigat licentele pentru 200 ore.",sendername);
					ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "Premiu Gift Box", string, "OK", "");
					ProxDetector(30.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					mysql_real_escape_string(string, stringg);
					mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`) VALUES ('%s','%d')", stringg, PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,string,"","");
				}
				else
				{
					randmoney = 50000 + random(800000) + random(100000);
					GivePlayerCash(playerid, randmoney);
					format(string, sizeof(string), "%s a castigat $%s.",sendername,FormatNumber(randmoney));
					ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "Premiu Gift Box", string, "OK", "");
					ProxDetector(30.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					mysql_real_escape_string(string, stringg);
					mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`) VALUES ('%s','%d')", stringg, PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,string,"","");
				}
			}
			else if(randgift >= 46 && randgift <= 56)
			{
				if(PlayerInfo[playerid][pWarns] == 0)
				{
					randmoney = 5 + random(10);
					PlayerInfo[playerid][pExp] += randmoney;
					Update(playerid, pExpx);
					format(string, sizeof(string), "%s a castigat %d respect points.",sendername,randmoney);
					ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "Premiu Gift Box", string, "OK", "");
					ProxDetector(30.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					mysql_real_escape_string(string, stringg);
					mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`) VALUES ('%s','%d')", stringg, PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,string,"","");
				}
				else
				{
					PlayerInfo[playerid][pWarns] = 0;
					Update(playerid, pWarnsx);
					format(string,sizeof(string),"%S a castigat clear warns.",sendername);
					ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "Premiu Gift Box", string, "OK", "");
					ProxDetector(30.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					mysql_real_escape_string(string, stringg);
					mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`) VALUES ('%s','%d')", stringg, PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,string,"","");
				}
			}
			else if(randgift >= 57 && randgift <= 70)
			{
				if(PlayerInfo[playerid][pFpunish] == 0)
				{
					randmoney = 50000 + random(800000) + random(100000);
					GivePlayerCash(playerid, randmoney);
					format(string, sizeof(string), "%s a castigat $%s.",sendername,FormatNumber(randmoney));
					ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "Premiu Gift Box", string, "OK", "");
					ProxDetector(30.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					mysql_real_escape_string(string, stringg);
					mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`) VALUES ('%s','%d')", stringg, PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,string,"","");
				}
				else
				{
					PlayerInfo[playerid][pFpunish] = 0;
					Update(playerid, pFpunishx);
					format(string,sizeof(string),"%s a castigat clear faction punish.",sendername);
					ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "Premiu Gift Box", string, "OK", "");
					ProxDetector(30.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					mysql_real_escape_string(string, stringg);
					mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`) VALUES ('%s','%d')", stringg, PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,string,"","");
				}
			}
			else if(randgift >= 71 && randgift <= 80)
			{
				if(randgift%2 == 0)
				{
					PlayerInfo[playerid][pHiddenColor]++;
					Update(playerid, pHiddenColorx);
					format(string,sizeof(string),"(( Gift Box: %s a castigat o culoare hidden din Gift Box! Felicitari! ))",sendername);
					SendClientMessageToAll(COLOR_GENANNOUNCE, string);
					ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "Premiu Gift Box", "You won a hidden color from the Gift Box.", "OK", "");
					mysql_real_escape_string(string, stringg);
					mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`) VALUES ('%s','%d')", stringg, PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,string,"","");
				}
				else 
				{
					randmoney = 5 + random(10);
					PlayerInfo[playerid][pExp] += randmoney;
					Update(playerid, pExpx);
					format(string, sizeof(string), "%s a castigat %d respect points.",sendername,randmoney);
					ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "Premiu Gift Box", string, "OK", "");
					ProxDetector(30.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					mysql_real_escape_string(string, stringg);
					mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`) VALUES ('%s','%d')", stringg, PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,string,"","");
				}
			}
			else if(randgift >= 81 && randgift <= 89)
			{
				new randpoints = 5 + random(31) + random(26),points,str2[128],count;
				PlayerInfo[playerid][pPremiumPoints] += randpoints;
				Update(playerid, pPremiumPointsx);
				format(string,sizeof(string),"(( Gift Box: %s a castigat %d puncte premium din Gift Box! Felicitari! ))",sendername,randpoints);
				SendClientMessageToAll(COLOR_GENANNOUNCE, string);
				mysql_real_escape_string(string, stringg);
				mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`,`time`,`puncte`) VALUES ('%s','%d','%02d/%02d/%d %02d:%02d:%02d','%d')", stringg, PlayerInfo[playerid][pSQLID],d,m,y,h,mi,s,randpoints);
				mysql_tquery(SQL,string,"","");
				format(string,sizeof(string),"You won %d premium points.",randpoints);
				ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "Premiu Gift Box", string, "OK", "");
				
				format(str2, sizeof(str2), "SELECT * FROM `giftbox_logs`");
				new Cache: ab = mysql_query(SQL, str2);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					points = cache_get_field_content_int(i, "puncte");
					count += points;
				}
				cache_delete(ab);
				format(string, sizeof(string), "(( Gift Box: Au fost castigate %d puncte premium. ))",(count+randpoints));
				SendClientMessageToAll(COLOR_GENANNOUNCE, string);
			}
			else if(randgift >= 90 && randgift <= 94)
			{
				randmoney = 50000 + random(800000) + random(100000);
				GivePlayerCash(playerid, randmoney);
				format(string, sizeof(string), "%s a castigat $%s.",sendername,FormatNumber(randmoney));
				ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "Premiu Gift Box", string, "OK", "");
				ProxDetector(30.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				mysql_real_escape_string(string, stringg);
				mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`) VALUES ('%s','%d')", stringg, PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL,string,"","");
			}
			else if(randgift >= 95)
			{
				new total,str2[256],masina=1;
				for(new v; v < MAX_PERSONAL_VEHICLES; v++)
				{
					if(PlayerInfo[playerid][pCar][v] != -1) total++;
				}
				if(total+1 > PlayerInfo[playerid][pCarSlots])
				{
					if(PlayerInfo[playerid][pCarSlots] < MAX_PERSONAL_VEHICLES)
					{
						PlayerInfo[playerid][pCarSlots] += 1;
						mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `CarSlots`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pCarSlots],PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,str2,"","");
					}
					else
					{
						masina = 0;
					}
				}
				if(masina == 1)
				{
					new result[128],count;
					InsertCar(playerid,104,3);
					format(string,sizeof(string),"(( Gift Box: %s a castigat o masina de tip BF Injection! Felicitari! ))",sendername);
					SendClientMessageToAll(COLOR_GENANNOUNCE, string);
					ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "Premiu Gift Box", "You won a BF Injection.", "OK", "");
					mysql_real_escape_string(string, stringg);
					mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`) VALUES ('%s','%d')", stringg, PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,string,"","");
					format(str2, sizeof(str2), "SELECT * FROM `giftbox_logs`");
					new Cache: ab = mysql_query(SQL, str2);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "text", result);
						if(strfind(result, "BF Injection", true) != -1) count++;
					}
					cache_delete(ab);
					format(string, sizeof(string), "(( Gift Box: Au fost castigate %d masini ))",(count+1));
					SendClientMessageToAll(COLOR_GENANNOUNCE, string);
				}
				else
				{
					randmoney = 50000 + random(800000) + random(100000);
					GivePlayerCash(playerid, randmoney);
					format(string, sizeof(string), "%s a castigat $%s.",sendername,FormatNumber(randmoney));
					ShowPlayerDialog(playerid, DIALOG_GIFTBOX, DIALOG_STYLE_MSGBOX, "Premiu Gift Box", string, "OK", "");
					ProxDetector(30.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					mysql_real_escape_string(string, stringg);
					mysql_format(SQL, string, sizeof(string), "INSERT INTO giftbox_logs (`text`,`PlayerID`) VALUES ('%s','%d')", stringg, PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,string,"","");
				}
			}
			PlayerInfo[playerid][pGiftTime] -= 100;
			Update(playerid, pGiftTimex);
		}
		else
		{
		    SS(playerid, COLOR_GREY, "Nu esti langa giftbox!", "You are not at giftbox!");
		    SS(playerid, COLOR_GREY, "Mergi la checkpoint-ul de pe minimap pentru a ajunge la giftbox!", "Go to the minimap checkpoint to find the giftbox!");
		    SetPlayerCheckpoint(playerid,GiftPosX,GiftPosY,GiftPosZ,5.0);
			CP[playerid] = 6868;
		    return 1;
		}
	}
	else SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Sistemul de Gift Box nu este activ!", "(Error){FFFFFF} Gift Box sistem is not active!");
	return 1;
}
CMD:hud(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pLevel] < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have level 1.");
    new string[256],stringhp[64],stringarm[64],stringfps[64],stringdmg[64];
    if(PlayerInfo[playerid][pHUD1] != 0)
    {
        if(PlayerInfo[playerid][pHUD1] == 1)
        {
    		format(stringhp,sizeof(stringhp),"{C0C0C0}Grey");
		}
		else if(PlayerInfo[playerid][pHUD1] == 2)
		{
		    format(stringhp,sizeof(stringhp),"{FF0000}Red");
		}
		else if(PlayerInfo[playerid][pHUD1] == 3)
		{
		    format(stringhp,sizeof(stringhp),"{00FF00}Green");
		}
		else if(PlayerInfo[playerid][pHUD1] == 4)
		{
		    format(stringhp,sizeof(stringhp),"{0000FF}Blue");
		}
		else if(PlayerInfo[playerid][pHUD1] == 5)
		{
		    format(stringhp,sizeof(stringhp),"{FFFF00}Yellow");
		}
	}
	else
	{
	    format(stringhp,sizeof(stringhp),"{FF0000}Disabled");
	}
	if(PlayerInfo[playerid][pHUD2] != 0)
    {
        if(PlayerInfo[playerid][pHUD2] == 1)
        {
    		format(stringarm,sizeof(stringarm),"{C0C0C0}Grey");
		}
		else if(PlayerInfo[playerid][pHUD2] == 2)
		{
		    format(stringarm,sizeof(stringarm),"{FF0000}Red");
		}
		else if(PlayerInfo[playerid][pHUD2] == 3)
		{
		    format(stringarm,sizeof(stringarm),"{00FF00}Green");
		}
		else if(PlayerInfo[playerid][pHUD2] == 4)
		{
		    format(stringarm,sizeof(stringarm),"{0000FF}Blue");
		}
		else if(PlayerInfo[playerid][pHUD2] == 5)
		{
		    format(stringarm,sizeof(stringarm),"{FFFF00}Yellow");
		}
	}
	else
	{
	    format(stringarm,sizeof(stringarm),"{FF0000}Disabled");
	}
	if(PlayerInfo[playerid][pHUD3] != 0)
	{
	    format(stringfps,sizeof(stringfps),"{FFFF00}Enabled");
	}
	else
	{
	    format(stringfps,sizeof(stringfps),"{FF0000}Disabled");
	}
	if(PlayerInfo[playerid][pHUD4] != 0)
	{
	    format(stringdmg,sizeof(stringdmg),"{FFFF00}Enabled");
	}
	else
	{
	    format(stringdmg,sizeof(stringdmg),"{FF0000}Disabled");
	}
    format(string,sizeof(string),"Option\tStatus\nHP Text\t%s\n{FFFFFF}Armour Text\t%s\n{FFFFFF}Display FPS\t%s\n{FFFFFF}Damage informer\t%s",stringhp,stringarm,stringfps,stringdmg);
    ShowPlayerDialog(playerid,DIALOG_HUD,DIALOG_STYLE_TABLIST_HEADERS, "HUD Options", string, "Select","Close");
	return 1;
}
CMD:help(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_LIST, "SERVER: Commands", "General\nChat\nGroups\nAnimations\nHouses\nJobs\nBusinesses\nVehicles\nBank\nRob", "Select","Exit");
	return 1;
}
CMD:home(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    if(PlayerInfo[playerid][pPhousekey] != 999 || PlayerInfo[playerid][pRented] != -1)
    {
		if(CP[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 &&  UsedFind[playerid] == 0 && CarJacker[playerid] < 1 && PlayerInfo[playerid][pJobVehicle] == 0 && BeeCar[playerid] == 0 && InStrawberryJob[playerid] == 0 && InMinerJob[playerid] == 0 && PizzaCP[playerid] != 1 && busc[playerid] != 1 && Trucker[playerid] ==0)
		{
            new h;
            if(PlayerInfo[playerid][pRented] == -1) h = PlayerInfo[playerid][pPhousekey];
            else h = PlayerInfo[playerid][pRented];
            SetPlayerCheckpoint(playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 5.0);
			CP[playerid] = 43;
			SendClientMessage(playerid, COLOR_WHITE, "A checkpoint has been set to your house.");
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel checkpoint", "You are sure to cancel the current checkpoint?", "Yes", "No");

		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a house.");
	return 1;
}
CMD:stopanim(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use this command in a vehicle.");
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
    ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
    PlayerHandsup[playerid] = 0;
    return 1;
}
CMD:tazer(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsACop(playerid))
	{
		if(OnDuty[playerid] != 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not on duty.");
		if(fctdeelay[playerid] != 0)
        {
   			new string[128];
			if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Vei putea echipa un tazer in %d secunde (deelay).",fctdeelay[playerid]);
			else format(string, sizeof(string), "You can equip a tazer in %d seconds (deelay).",fctdeelay[playerid]);
			SendClientMessage(playerid, COLOR_DARKPINK, string);
			return 1;
	    }
	    fctdeelay[playerid] = 30;
	    new sendername[30],string[128];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		tazer[playerid] = 1;
		GivePlayerWeaponEx(playerid, 23, 3);
		format(string, sizeof(string), "* %s equiped a taser.", sendername);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    }
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a cop.");
	return 1;
}
CMD:ta(playerid,params[]) return cmd_tazer(playerid, params);
CMD:cuff(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsACop(playerid))
	{
		new giveplayerid,string[256],sendername[25],giveplayer[25];
		if(sscanf(params, "u",giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /cuff [name/playerid]");
	    if(IsPlayerConnected(giveplayerid))
		{
		    if(giveplayerid != INVALID_PLAYER_ID)
		    {
		        if(IsACop(giveplayerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't cuff cops.");
		        if(PlayerHandsup[giveplayerid] < 1 && !IsPlayerInAnyVehicle(giveplayerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't cuff a player who don't have hands up.");
			    if(PlayerCuffed2[giveplayerid] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is already cuffed.");
				if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
				    if(giveplayerid == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't cuff yourself.");
					if(IsPlayerInAnyVehicle(giveplayerid))
						TogglePlayerControllable(giveplayerid, 0);
				    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
				    format(string, sizeof(string), "* You were Cuffed by %s, till uncuff.", sendername);
					SendClientMessage(giveplayerid, COLOR_WHITE, string);
					format(string, sizeof(string), "* You Cuffed %s, till uncuff.", giveplayer);
					SendClientMessage(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "* %s Hand Cuffs %s, so he wont go anywhere.", sendername ,giveplayer);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GameTextForPlayer(giveplayerid, "~r~~h~Cuffed", 2500, 3);
					PlayerCuffed2[giveplayerid] = 1;
					SetPlayerAttachedObject(giveplayerid, 9, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
                    SetPlayerSpecialAction(giveplayerid,SPECIAL_ACTION_CUFFED);
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
			}
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a cop.");
	return 1;
}
CMD:uncuff(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsACop(playerid))
	{
		new giveplayerid,giveplayer[25],sendername[25],string[128];
		if(sscanf(params, "u",giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /uncuff [name/playerid]");
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if(ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't uncuff yourself.");
						if(PlayerCuffed2[giveplayerid] == 1)
						{
							if(IsPlayerInAnyVehicle(giveplayerid))
							{
								TogglePlayerControllable(giveplayerid, 1);
							}
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
						    format(string, sizeof(string), "* You were Uncuffed by %s.", sendername);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* You Uncuffed %s.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							GameTextForPlayer(giveplayerid, "~g~Uncuffed", 2500, 3);
				     		PlayerCuffed2[giveplayerid] = 0;
					    	SetPlayerSpecialAction(giveplayerid,SPECIAL_ACTION_NONE);
					    	RemovePlayerAttachedObject(giveplayerid,9);
					    	if(PlayerInfo[giveplayerid][pPet] != 0 && PlayerInfo[playerid][pPetStatus] != 0) AttachPet(giveplayerid);
						}
						else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not cuffed.");
					}
					else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a cop.");
	return 1;
}
CMD:skill(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    new string[MAX_STRING];
    SendClientMessage(playerid, COLOR_WHITE, "---- Skills: ----");
    if(PlayerInfo[playerid][pRobSkill] < 6)
    {
    	format(string,sizeof(string),"Rob skill: %d/6 (%d robs) | Needed for next skill level: %d",PlayerInfo[playerid][pRobSkill], PlayerInfo[playerid][pRobTimes], PlayerInfo[playerid][pRobRem]);
	}
	else if(PlayerInfo[playerid][pRobSkill] >= 6)
	{
    	format(string,sizeof(string),"Rob skill: %d/6 (%d robs)",PlayerInfo[playerid][pRobSkill], PlayerInfo[playerid][pRobTimes]);
	}
    SendClientMessage(playerid, COLOR_WHITE, string);
    if(PlayerInfo[playerid][pTruckSkill] < 6)
    {
    	format(string,sizeof(string),"Trucker skill: %d/6 (%d trailers delivered) | Needed for next skill level: %d",PlayerInfo[playerid][pTruckSkill], PlayerInfo[playerid][pTruckTimes], PlayerInfo[playerid][pTruckRem]);
	}
	else if(PlayerInfo[playerid][pTruckSkill] >= 6)
	{
    	format(string,sizeof(string),"Trucker skill: %d/6 (%d trailers delivered)",PlayerInfo[playerid][pTruckSkill], PlayerInfo[playerid][pTruckTimes]);
	}
    SendClientMessage(playerid, COLOR_WHITE, string);
	if(PlayerInfo[playerid][pFishSkill] < 6)
    {
    	format(string,sizeof(string),"Fisherman skill: %d/6 (%d fish caught) | Needed for next skill level: %d",PlayerInfo[playerid][pFishSkill], PlayerInfo[playerid][pFishTimes], PlayerInfo[playerid][pFishRem]);
	}
	else if(PlayerInfo[playerid][pFishSkill] >= 6)
	{
    	format(string,sizeof(string),"Fisherman skill: %d/6 (%d fish caught)",PlayerInfo[playerid][pFishSkill], PlayerInfo[playerid][pFishTimes]);
	}
    SendClientMessage(playerid, COLOR_WHITE, string);
	if(PlayerInfo[playerid][pGarbageSkill] < 6)
    {
    	format(string,sizeof(string),"Garbageman skill: %d/6 (%d garbage trucks delivered) | Needed for next skill level: %d",PlayerInfo[playerid][pGarbageSkill], PlayerInfo[playerid][pGarbageTimes], PlayerInfo[playerid][pGarbageRem]);
	}
	else if(PlayerInfo[playerid][pGarbageSkill] >= 6)
	{
    	format(string,sizeof(string),"Garbageman skill: %d/6 (%d shifts completed)",PlayerInfo[playerid][pGarbageSkill], PlayerInfo[playerid][pGarbageTimes]);
	}
    SendClientMessage(playerid, COLOR_WHITE, string);
    if(PlayerInfo[playerid][pFarmSkill] < 6)
    {
    	format(string,sizeof(string),"Farmer skill: %d/6 (%d bags of flour sold) | Needed for next skill level: %d",PlayerInfo[playerid][pFarmSkill], PlayerInfo[playerid][pFarmTimes], PlayerInfo[playerid][pFarmRem]);
	}
	else if(PlayerInfo[playerid][pFarmSkill] >= 6)
	{
    	format(string,sizeof(string),"Farmer skill: %d/6 (%d bags of flour sold)",PlayerInfo[playerid][pFarmSkill], PlayerInfo[playerid][pFarmTimes]);
	}
    SendClientMessage(playerid, COLOR_WHITE, string);
	if(PlayerInfo[playerid][pArmsSkill] < 6)
    {
    	format(string,sizeof(string),"Arms dealer skill: %d/6 (delivered materials %d times) | Needed for next skill level: %d",PlayerInfo[playerid][pArmsSkill], PlayerInfo[playerid][pArmsTimes], PlayerInfo[playerid][pArmsRem]);
	}
	else if(PlayerInfo[playerid][pArmsSkill] >= 6)
	{
    	format(string,sizeof(string),"Arms dealer skill: %d/6 (delivered materials %d times)",PlayerInfo[playerid][pArmsSkill], PlayerInfo[playerid][pArmsTimes]);
	}
    SendClientMessage(playerid, COLOR_WHITE, string);
	if(PlayerInfo[playerid][pPizzaSkill] < 6)
    {
    	format(string,sizeof(string),"Pizza Boy skill: %d/6 (delivered %d pizzas) | Needed for next skill level: %d",PlayerInfo[playerid][pPizzaSkill], PlayerInfo[playerid][pPizzaTimes], PlayerInfo[playerid][pPizzaRem]);
	}
	else if(PlayerInfo[playerid][pPizzaSkill] >= 6)
	{
    	format(string,sizeof(string),"Pizza Boy skill: %d/6 (delivered %d pizzas)",PlayerInfo[playerid][pPizzaSkill], PlayerInfo[playerid][pPizzaTimes]);
	}
    SendClientMessage(playerid, COLOR_WHITE, string);
	if(PlayerInfo[playerid][pBusSkill] < 6)
    {
    	format(string,sizeof(string),"Bus Driver skill: %d/6 (%d shifts completed) | Needed for next skill level: %d",PlayerInfo[playerid][pBusSkill], PlayerInfo[playerid][pBusTimes], PlayerInfo[playerid][pBusRem]);
	}
	else if(PlayerInfo[playerid][pBusSkill] >= 6)
	{
    	format(string,sizeof(string),"Bus Driver skill: %d/6 (%d shifts completed)",PlayerInfo[playerid][pBusSkill], PlayerInfo[playerid][pBusTimes]);
	}
    SendClientMessage(playerid, COLOR_WHITE, string);
    if(PlayerInfo[playerid][pAirSkill] < 6)
    {
    	format(string,sizeof(string),"Air Transporter skill: %d/6 (%d packages delivered) | Needed for next skill level: %d",PlayerInfo[playerid][pAirSkill], PlayerInfo[playerid][pAirTimes], PlayerInfo[playerid][pAirRem]);
	}
	else if(PlayerInfo[playerid][pAirSkill] >= 6)
	{
    	format(string,sizeof(string),"Air Transporter skill: %d/6 (%d packages delivered)",PlayerInfo[playerid][pAirSkill], PlayerInfo[playerid][pAirTimes]);
	}
    SendClientMessage(playerid, COLOR_WHITE, string);
    if(PlayerInfo[playerid][pStrawSkill] < 6)
    {
    	format(string,sizeof(string),"Strawberry Picker skill: %d/6 (%d baskets sold) | Needed for next skill level: %d",PlayerInfo[playerid][pStrawSkill], PlayerInfo[playerid][pStrawTimes], PlayerInfo[playerid][pStrawRem]);
	}
	else if(PlayerInfo[playerid][pStrawSkill] >= 6)
	{
    	format(string,sizeof(string),"Strawberry Picker skill: %d/6 (%d baskets sold)",PlayerInfo[playerid][pStrawSkill], PlayerInfo[playerid][pStrawTimes]);
	}
    SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}
CMD:skills(playerid, params[]) return cmd_skill(playerid, params);
CMD:news(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
	{
	    new string[256],sendername[25];
        if(PlayerInfo[playerid][pMuted] == 1)
        {
			if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
			else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
			SendClientMessage(playerid, COLOR_DARKPINK, string);
			return 1;
	    }
	    if(fctdeelay[playerid] != 0)
        {
			if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Vei putea scrie pe chat peste %d secunde (deelay).",fctdeelay[playerid]);
			else format(string, sizeof(string), "You will be able to talk again in %d seconds (deelay).",fctdeelay[playerid]);
			SendClientMessage(playerid, COLOR_DARKPINK, string);
			return 1;
	    }
	    new result[250];
	    if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /news [message]");
		if(IsANewsCar(GetPlayerVehicleID(playerid)))
		{
			if(strlen(result) > 14)
			{
				new h,mi,sec;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "NR %s: %s", sendername, result);
				OOCNews(COLOR_ORANGE,string);
				gettime(h,mi,sec);
				h+=SERVER_HOUR_FIX;
				if(h == 24) h = 0;
				if(mi >= 50 && mi <= 59)
				{
					if(PlayerInfo[playerid][pSession] == 0)
					{
						fctdeelay[playerid] = 30;
						PlayerInfo[playerid][pSession] = 1;
						Update(playerid, pSessionx);
						PlayerInfo[playerid][Raport1]+=3;
						Update(playerid, Raport1x);
					}
					PlayerInfo[playerid][Raport1]+=2;
					Update(playerid, Raport1x);
				}
				else
				{
					fctdeelay[playerid] = 120;
					PlayerInfo[playerid][Raport1]++;
					Update(playerid, Raport1x);
				}
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} News can have maximum 15 caracters.");
		}
		else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You are not in a news van/news chopper.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a news reporter.");
	return 1;
}
CMD:startq(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pMember] == 9)
	{
		new count;
		foreach(new i : Player)
		{
			if(TalkingLive[i] != 0)
			{
				count++;
			}
		}
		if(count == 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu este un live in acest moment.","(Error){FFFFFF} Is not a active live.");
		if(QuestionsOn == 1) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Deja sunt activate intrebarile.","(Error){FFFFFF} Public questions are already active.");
		QuestionsOn = 1;
		SS(playerid, COLOR_DARKPINK, "Acum jucatorii pot pune intrebari folosind /question.","Now players can ask the live player with command /question..");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a news reporter.");
	return 1;
}
CMD:stopq(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pMember] == 9)
	{
		if(QuestionsOn == 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Intrebarile nu sunt activate.","(Error){FFFFFF} Questions are not active.");
		QuestionsOn = 0;
		SS(playerid, COLOR_DARKPINK, "Ai dezactivat intrebarile.","Public questions are dezactivated.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a news reporter.");
	return 1;
}
CMD:question(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new message[128],string[128],name[30];
	if(sscanf(params, "s[128]",message)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /question [message]");
	if(QuestionsOn == 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Intrebarile publice sunt dezactivate.", "(Error){FFFFFF} Public questions are disabled.");
	if(strcmp(LiveQuestion[playerid], "NULL", true)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Ai dat deja o intrebare. Poti pune o intrebare la 5 minute.", "(Error){FFFFFF} You can use this command once per 5 minutes.");
	GetPlayerName(playerid, name, sizeof(name));
	format(string, sizeof(string),"Q from %s[%d]: %s", name, playerid, message);
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pMember] == 9)
		{
			SendClientMessage(i, COLOR_YELLOW, string);
		}
	}
	format(string, sizeof(string),"Intrebarea '%s' a fost trimisa reporterilor.",message);
	SendSplitMessage(playerid, COLOR_YELLOW, string);
	format(LiveQuestion[playerid], 128, message);
	TimerQuestion[playerid] = 300;
	new var100[300],resulttt[300],strr[300];
	format(strr, sizeof(strr),"Q from %s: %s", name, message);
	mysql_real_escape_string(strr, resulttt);
	mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','question')", PlayerInfo[playerid][pSQLID], resulttt);
	mysql_tquery(SQL,var100,"","");
	return 1;
}
CMD:aq(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new id,string[256],name[30];
	if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /aq [name/playerid]");
	if(IsPlayerConnected(id))
	{
		if(!strcmp(LiveQuestion[id], "NULL", true)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player don't have a question.");
		GetPlayerName(id, name, sizeof(name));
		format(string, sizeof(string), "Question from %s: %s",name,LiveQuestion[id]);
		foreach(new i : Player)
		{
			SendSplitMessage(i, COLOR_LIGHTGREEN, string);
		}
		format(LiveQuestion[id], 128, "NULL");
		TimerQuestion[id] = -1;
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	return 1;
}
CMD:editbizz(playerid, params[], help) {
	new id, code[180], list;
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
    if(sscanf(params, "iis[180]", id,list,code)) {
 		SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /editbizz <biz id> <code> <result>");
 		SCM(playerid, 0xFFFFFFFF, "(1) Level, (2) Nume, (3) Pret");
 		return true;
 	}
 	if(BizzInfo[id][bID] == 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Invalid business id.");
 	new result = strval(code), string[180], str[256];
 	switch(list) {
 	    case 1: {
 	        format(string, sizeof(string), "Admin %s changed the level of business %d to %d.", PlayerInfo[playerid][pNormalName], id, result);
 	        ABroadCast(COLOR_COOLRED, string, 6);
 	        BizzInfo[id][bLevelNeeded] = result;
			mysql_format(SQL, str,sizeof(str),"UPDATE `bizz` SET `LevelNeeded`='%d' WHERE `ID`='%d'",BizzInfo[id][bLevelNeeded], BizzInfo[id][bID]);
			mysql_tquery(SQL,str, "", "");
 	    }
 	    case 2: {
 	        format(string, sizeof(string), "Admin %s changed the name of business %d to %s.", PlayerInfo[playerid][pNormalName], id, code);
 	        ABroadCast(COLOR_COOLRED, string, 6);
 	        format(BizzInfo[id][bMessage],256,code);
			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Message`='%s' WHERE `ID`='%d'",BizzInfo[id][bMessage], BizzInfo[id][bID]);
			mysql_tquery(SQL,str, "", "");
	     }
 	    case 3: {
 	       	format(string, sizeof(string), "Admin %s changed the price of business %d to $%s.", PlayerInfo[playerid][pNormalName], id, FormatNumber(result));
 	        ABroadCast(COLOR_COOLRED, string, 6);
			BizzInfo[id][bBuyPrice] = result;
	        mysql_format(SQL,str, sizeof(str), "UPDATE `bizz` SET `BuyPrice`='%d' WHERE `ID`='%d'",BizzInfo[id][bBuyPrice], BizzInfo[id][bID]);
	        mysql_tquery(SQL,str, "", "");
 	    }
 	}
 	OnPropTextdrawUpdate(2, id);
	return true;
}
CMD:edithouse(playerid, params[], help) {
	new id, code[180], list;
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
    if(sscanf(params, "iis[180]", id,list,code)) {
 		SCM(playerid, COLOR_GREY, "Syntax:{FFFFFF} /edithouse <house id> <code> <result>");
 		SCM(playerid, 0xFFFFFFFF, "(1) Level, (2) Nume, (3) Pret, (4) Owned");
 		return true;
 	}
 	if(HouseInfo[id][hID] == 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Invalid house id.");
 	new result = strval(code), string[180], str[256];
 	switch(list) {
 	    case 1: {
 	        format(string, sizeof(string), "Admin %s changed the level of house %d to %d.", PlayerInfo[playerid][pNormalName], id, result);
 	        ABroadCast(COLOR_COOLRED, string, 6);
 	        HouseInfo[id][hLevel] = result;
			mysql_format(SQL,str,sizeof(str),"UPDATE `houses` SET `Level`='%d' WHERE `ID`='%d'", HouseInfo[id][hLevel], HouseInfo[id][hID]);
			mysql_tquery(SQL,str, "", "");
 	    }
 	    case 2: {
 	       	format(string, sizeof(string), "Admin %s changed the name of house %d to %s.", PlayerInfo[playerid][pNormalName], id, code);
 	        ABroadCast(COLOR_COOLRED, string, 6);
 	        format(HouseInfo[id][hDiscription],256,code);
			mysql_format(SQL,str,sizeof(str),"UPDATE houses SET Discription='%s' WHERE ID='%d'", HouseInfo[id][hDiscription],HouseInfo[id][hID]);
			mysql_tquery(SQL,str,"","");
	     }
 	    case 3: {
 	        format(string, sizeof(string), "Admin %s changed the price of house %d to $%s.", PlayerInfo[playerid][pNormalName], id, FormatNumber(result));
 	        ABroadCast(COLOR_COOLRED, string, 6);
			HouseInfo[id][hValue] = result;
	        mysql_format(SQL,str, sizeof(str), "UPDATE `houses` SET `Value`='%d' WHERE `ID`='%d'",HouseInfo[id][hValue],HouseInfo[id][hID]);
	        mysql_tquery(SQL,str, "", "");
 	    }
 	    case 4: {
 	        format(string, sizeof(string), "Admin %s changed the owned status of house %d to %d.", PlayerInfo[playerid][pNormalName], id, result);
 	        ABroadCast(COLOR_COOLRED, string, 6);
			HouseInfo[id][hOwned] = result;
	        mysql_format(SQL,str, sizeof(str), "UPDATE `houses` SET `Owned`='%d' WHERE `ID`='%d'",HouseInfo[id][hOwned],HouseInfo[id][hID]);
	        mysql_tquery(SQL,str, "", "");
 	    }		
 	}
 	OnPropTextdrawUpdate(1, id);
	return true;
}
CMD:howner(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		new name[25],hid,string[256],playername[30],haveowner;
		if(sscanf(params, "s[25]d", name, hid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /howner [full name] [houseid]");
		format(string, sizeof(string), "SELECT * FROM `users` WHERE `name`='%s'", name);
		new Cache: abc = mysql_query(SQL, string);
		if(cache_get_row_count() == 0)
		{
			cache_delete(abc);
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Invalid player id.");
			return 1;
		}
		cache_delete(abc);
		format(string, sizeof(string), "SELECT * FROM `houses` WHERE `ID`='%d'", hid);
		new Cache: abs = mysql_query(SQL, string);
		if(cache_get_row_count() == 0)
		{
			cache_delete(abs);
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Invalid house id.");
			return 1;
		}
		cache_delete(abs);
		format(string, sizeof(string), "SELECT * FROM `users` WHERE `House`='%d'", hid);
		new Cache: abd = mysql_query(SQL, string);
		if(cache_get_row_count() > 0)
		{
			cache_get_field_content(0, "name", playername);
			haveowner = 1;
		}
		cache_delete(abd);
		HOwnerID[playerid] = hid;
		strmid(HOwnerName[playerid], name, 0, 25, 255);
		if(haveowner == 0) format(string, sizeof(string), "Esti sigur ca vrei sa-i dai lui %s casa %d?\n\nAbuzul de aceasta comanda duce la pierderea functiei!", name, hid);
		else format(string, sizeof(string), "Esti sigur ca vrei sa-i dai lui %s casa %d?\nAceasta casa este detinuta de %s, acesta va ramane fara aceasta.\n\nAbuzul de aceasta comanda duce la pierderea functiei!", name, hid, playername);
		ShowPlayerDialog(playerid, DIALOG_HOWNER, DIALOG_STYLE_MSGBOX, "Esti sigur?", string, "Da", "Nu");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:bowner(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		new name[25],bid,string[256],playername[30],haveowner;
		if(sscanf(params, "s[25]d", name, bid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /bowner [full name] [businessid]");
		format(string, sizeof(string), "SELECT * FROM `users` WHERE `name`='%s'", name);
		new Cache: abc = mysql_query(SQL, string);
		if(cache_get_row_count() == 0)
		{
			cache_delete(abc);
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Invalid player id.");
			return 1;
		}
		cache_delete(abc);
		format(string, sizeof(string), "SELECT * FROM `bizz` WHERE `ID`='%d'", bid);
		new Cache: abs = mysql_query(SQL, string);
		if(cache_get_row_count() == 0)
		{
			cache_delete(abs);
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Invalid business id.");
			return 1;
		}
		cache_delete(abs);
		format(string, sizeof(string), "SELECT * FROM `users` WHERE `Bizz`='%d'", bid);
		new Cache: abd = mysql_query(SQL, string);
		if(cache_get_row_count() > 0)
		{
			cache_get_field_content(0, "name", playername);
			haveowner = 1;
		}
		cache_delete(abd);
		HOwnerID[playerid] = bid;
		strmid(HOwnerName[playerid], name, 0, 25, 255);
		if(haveowner == 0) format(string, sizeof(string), "Esti sigur ca vrei sa-i dai lui %s biz-ul %d?\n\nAbuzul de aceasta comanda duce la pierderea functiei!", name, bid);
		else format(string, sizeof(string), "Esti sigur ca vrei sa-i dai lui %s biz-ul %d?\nAcest biz este detinut de %s, acesta va ramane fara acesta.\n\nAbuzul de aceasta comanda duce la pierderea functiei!", name, bid, playername);
		ShowPlayerDialog(playerid, DIALOG_BOWNER, DIALOG_STYLE_MSGBOX, "Esti sigur?", string, "Da", "Nu");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:vowner(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		new name[30],vid,string[256],playername[30],carmodel;
		if(sscanf(params, "s[25]d", name, vid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /vowner [full name] [carid]");
		format(string, sizeof(string), "SELECT * FROM `users` WHERE `name`='%s'", name);
		new Cache: abc = mysql_query(SQL, string);
		if(cache_get_row_count() == 0)
		{
			cache_delete(abc);
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Invalid player id.");
			return 1;
		}
		cache_delete(abc);
		format(string, sizeof(string), "SELECT * FROM `cars` WHERE `ID`='%d'", vid);
		new Cache: abs = mysql_query(SQL, string);
		if(cache_get_row_count() == 0)
		{
			cache_delete(abs);
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Invalid car id.");
			return 1;
		}
		else
		{
			carmodel = cache_get_field_content_int(0, "Model");
			cache_get_field_content(0, "Owner", playername);
		}
		cache_delete(abs);
		HOwnerID[playerid] = vid;
		strmid(HOwnerName[playerid], name, 0, 25, 255);
		format(string, sizeof(string), "Esti sigur ca vrei sa-i dai lui %s masina %s(carid:%d)?\nAceasta masina este detinuta de %s, acesta va ramane fara aceasta.\n\nAbuzul de aceasta comanda duce la pierderea functiei!", name, aVehicleNames[carmodel - 400], vid, playername);
		ShowPlayerDialog(playerid, DIALOG_VOWNER, DIALOG_STYLE_MSGBOX, "Esti sigur?", string, "Da", "Nu");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}
CMD:vremove(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		new vid,string[256],playername[30],carmodel;
		if(sscanf(params, "d", vid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /vremove [carid]");
		format(string, sizeof(string), "SELECT * FROM `cars` WHERE `ID`='%d'", vid);
		new Cache: abs = mysql_query(SQL, string);
		if(cache_get_row_count() == 0)
		{
			cache_delete(abs);
			SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Invalid car id.");
			return 1;
		}
		else
		{
			carmodel = cache_get_field_content_int(0, "Model");
			cache_get_field_content(0, "Owner", playername);
		}
		cache_delete(abs);
		HOwnerID[playerid] = vid;
		format(string, sizeof(string), "Esti sigur ca vrei sa-i stergi lui %s masina %s(carid:%d)?\n\nAbuzul de aceasta comanda duce la pierderea functiei!", playername, aVehicleNames[carmodel - 400], vid);
		ShowPlayerDialog(playerid, DIALOG_VREMOVE, DIALOG_STYLE_MSGBOX, "Esti sigur?", string, "Da", "Nu");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	return 1;
}

CMD:puthelmet(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new model = GetVehicleModel(GetPlayerVehicleID(playerid)), name[30], string[128];
	if(model == 448 || model == 461 || model == 462 || model == 463 || model == 468 || model == 471 || model == 481 || model == 509 || model == 510 || model == 521 || model == 522 || model == 523 || model == 581 || model == 586)
	{
		if(HaveHelmet[playerid] == 0)
		{
			GetPlayerName(playerid, name, sizeof(name));
			HaveHelmet[playerid] = 1;
			SetPlayerAttachedObject(playerid, 9, 18645, 2, 0.101, -0.0, 0.0, 5.50, 84.60, 83.7, 1, 1, 1);
			format(string, sizeof(string), "* %s puts on his helmet.", name);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have already an helmet.");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can only use that while on a bike.");
	return 1;
}
CMD:ph(playerid, params[]) return cmd_puthelmet(playerid, params);
CMD:removehelmet(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new name[30], string[128];
	if(HaveHelmet[playerid] == 1)
	{
		GetPlayerName(playerid, name, sizeof(name));
		HaveHelmet[playerid] = 0;
		RemovePlayerAttachedObject(playerid, 9);
		if(PlayerInfo[playerid][pPet] != 0 && PlayerInfo[playerid][pPetStatus] != 0) AttachPet(playerid);
		format(string, sizeof(string), "* %s takes off his helmet.", name);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can only use this command if you have your helmet on.");
	return 1;
}
CMD:rh(playerid, params[]) return cmd_removehelmet(playerid, params);
CMD:frisk(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    new giveplayerid,sendername[25],giveplayer[25],string[128];
    if(sscanf(params, "u",giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /frisk [name/playerid]");
	if(IsACop(playerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
		    if(ProxDetectorS(8.0, playerid, giveplayerid))
			{
			    if(giveplayerid == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't frisk yourself.");
			    if(PlayerHandsup[giveplayerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This isn't with hands up.");
			    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
			    new text1[20], text2[20], text4[20];
			    if(PlayerInfo[giveplayerid][pDrugs] > 0) text1 = "| Drugs.";  
			    else text1 = "| Empty Pocket.";
			    if(PlayerInfo[giveplayerid][pMats] > 0) text2 = "| Materials."; 
			    else text2 = "| Empty Pocket."; 
			    if(PlayerInfo[giveplayerid][pPhoneBook] > 0) text4 = "| Phone Book."; 
			    else text4 = "| Empty Pocket.";
			    format(string, sizeof(string), "** Items with {B8DBFF}%s{FFFFFF} **", giveplayer);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string), "%s, Grams:%d", text1,PlayerInfo[giveplayerid][pDrugs]);
				SendClientMessage(playerid, 0xFFFFFFAA, string);
				format(string, sizeof(string), "%s, Materials:%d", text2,PlayerInfo[giveplayerid][pMats]);
				SendClientMessage(playerid, 0xFFFFFFAA, string);
				format(string, sizeof(string), "%s.", text4);
				SendClientMessage(playerid, 0xFFFFFFAA, string);
                new Player_Weapons[13];
                new Player_Ammos[13];
                new i;
                for(i = 1;i <= 12;i++)
                {
                    GetPlayerWeaponData(giveplayerid,i,Player_Weapons[i],Player_Ammos[i]);
                    if(Player_Weapons[i] != 0)
                    {
                        new weaponName[256];
                        GetWeaponName(Player_Weapons[i],weaponName,255);
                        format(string,255,"{B8DBFF}* %s, Gun:{FFFFFF} %s{B8DBFF}, Ammo:{FFFFFF} %d",giveplayer,weaponName,Player_Ammos[i]);
                        SendClientMessage(playerid,0xFFFFFFAA,string);
                    }
                }
				format(string, sizeof(string), "* %s has frisked %s for any illegal items.", sendername ,giveplayer);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
		}
        else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	}
    else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not a cop.");
    return 1;
}
CMD:f(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new string[300];
    if(PlayerInfo[playerid][pMuted] == 1)
    {
		if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
		else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
		SendClientMessage(playerid, COLOR_DARKPINK, string);
		return 1;
	}
	new result[250],sendername[25];
	if(sscanf(params, "s[250]",result)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /f [message]");
	GetPlayerName(playerid, sendername, sizeof(sendername));
	new member = PlayerInfo[playerid][pMember];
	new leader = PlayerInfo[playerid][pLeader];
	if(member == 4 || leader == 4 || member == 5 || leader == 5 || member == 6 || leader == 6 || member == 9 || leader == 9 || member == 10 || leader == 10 || member == 11 || leader == 11 || member == 12 || leader == 12 || member == 13 || leader == 13)
	{
		if(gFam[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have family chat disabled, use /togf to enable.");
		new rtext[64];
		if(PlayerInfo[playerid][pRank] == 1) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1]);
		else if(PlayerInfo[playerid][pRank] == 2) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2]);
		else if(PlayerInfo[playerid][pRank] == 3) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3]);
		else if(PlayerInfo[playerid][pRank] == 4) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4]);
		else if(PlayerInfo[playerid][pRank] == 5) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5]);
		else if(PlayerInfo[playerid][pRank] == 6) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6]);
		else if(PlayerInfo[playerid][pRank] == 7) format(rtext, sizeof(rtext),"%s",DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7]);
		format(string, sizeof(string),"# %s %s: %s",rtext,sendername,result);
		if(PlayerInfo[playerid][pRank] >= 1 && PlayerInfo[playerid][pRank] <= 5)
		{
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_MEMBER, string);
		}
		else if(PlayerInfo[playerid][pRank] >= 6)
		{
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LEADER, string);
		}
		new var100[300],resulttt[300];
		mysql_real_escape_string(string, resulttt);
		mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','f')", PlayerInfo[playerid][pSQLID], resulttt);
		mysql_tquery(SQL,var100,"","");
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Your group data is invalid.");
	return 1;
}
CMD:fspec(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new id,string[128],name[30];
		if(sscanf(params, "d",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /fspec [faction id]");
		FactionSpec[playerid] = id;
		GetPlayerName(playerid, name, sizeof(name));
		format(string, sizeof(string), "(AdmCmd){FFFFFF} %s is now spectating faction %d.", name, id);
		ABroadCast(COLOR_RED2, string, 1);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin.");
	return 1;
}
CMD:troll(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		new id;
		if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /troll [playerid/name]");
		if(GetPlayerState(id) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player isn't the driver.");
		new Float:vx,Float:vy,Float:vz;
		GetVehicleVelocity(GetPlayerVehicleID(id),vx,vy,vz);
		SetVehicleVelocity(GetPlayerVehicleID(id), vx * 1.8, vy *1.8, vz * 1.8);
	}
	else return SendClientMessage(playerid, COLOR_WHITE, "SERVER: Unknown command.");
	return 1;
}
CMD:fspecid(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new id,string[128],name[30];
		if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /fspecid [playerid/name]");
		FactionSpec[playerid] = PlayerInfo[id][pMember];
		GetPlayerName(playerid, name, sizeof(name));
		format(string, sizeof(string), "(AdmCmd){FFFFFF} %s is now spectating faction %d.", name, PlayerInfo[id][pMember]);
		ABroadCast(COLOR_RED2, string, 1);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin.");
	return 1;
}
CMD:fchat(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new message[128],name[30], string[256];
		if(sscanf(params, "s[128]",message)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /fchat [message]");
		if(FactionSpec[playerid] > 0)
		{
			GetPlayerName(playerid, name, sizeof(name));
			if(FactionSpec[playerid] > 3 && FactionSpec[playerid] < 7 || FactionSpec[playerid] > 8 && FactionSpec[playerid] < 14)
			{
				format(string, sizeof(string),"# Admin %s: %s", name, message);
				SendFamilyMessage(FactionSpec[playerid], COLOR_LEADER, string);
			}
			else if(FactionSpec[playerid] > 0 && FactionSpec[playerid] < 4 || FactionSpec[playerid] == 8 || FactionSpec[playerid] == 14)
			{
				format(string, sizeof(string),"# Admin %s: %s", name, message);
				SendFamilyMessage(FactionSpec[playerid], COLOR_RADIOCHAT, string);
			}
			new var100[300],resulttt[300],strr[300];
			format(strr, sizeof(strr),"# Admin %s: %s", name, message);
			mysql_real_escape_string(strr, resulttt);
			mysql_format(SQL,var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','fchat')", PlayerInfo[playerid][pSQLID], resulttt);
			mysql_tquery(SQL,var100,"","");
		}
		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not spectating any faction.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You are not an admin.");
	return 1;
}
CMD:bat(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /bat [1-2]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "CRACK", "Bbalbat_Idle_01", 4.0, 1, 0, 0, 0, 0);
		case 2: ApplyAnimation(playerid, "CRACK", "Bbalbat_Idle_02", 4.0, 1, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /bat [1-2]");
	}
	return 1;
}
CMD:signal(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /signal [1-2]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "POLICE", "CopTraf_Come", 4.0, 0, 0, 0, 0, 0);
		case 2: ApplyAnimation(playerid, "POLICE", "CopTraf_Stop", 4.0, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /signal [1-2]");
	}
	return 1;
}
CMD:nobreath(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /nobreath [1-3]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
    	case 2: ApplyAnimation(playerid, "PED", "IDLE_tired", 4.0, 1, 0, 0, 0, 0);
     	case 3: ApplyAnimation(playerid, "FAT", "IDLE_tired", 4.0, 1, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /nobreath [1-3]");
	}
	return 1;
}
CMD:fallover(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /fallover [1-3]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0);
    	case 2: ApplyAnimation(playerid, "PED", "KO_shot_face", 4.0, 0, 1, 1, 1, 0);
     	case 3: ApplyAnimation(playerid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /fallover [1-3]");
	}
	return 1;
}
CMD:pedmove(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /pedmove [1-26]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "PED", "JOG_femaleA", 4.0, 1, 1, 1, 1, 1);
    	case 2: ApplyAnimation(playerid, "PED", "JOG_maleA", 4.0, 1, 1, 1, 1, 1);
	    case 3: ApplyAnimation(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1);
	    case 4: ApplyAnimation(playerid, "PED", "run_fat", 4.0, 1, 1, 1, 1, 1);
	    case 5: ApplyAnimation(playerid, "PED", "run_fatold", 4.0, 1, 1, 1, 1, 1);
	    case 6: ApplyAnimation(playerid, "PED", "run_old", 4.0, 1, 1, 1, 1, 1);
	    case 7: ApplyAnimation(playerid, "PED", "Run_Wuzi", 4.0, 1, 1, 1, 1, 1);
	    case 8: ApplyAnimation(playerid, "PED", "swat_run", 4.0, 1, 1, 1, 1, 1);
     	case 9: ApplyAnimation(playerid, "PED", "WALK_fat", 4.0, 1, 1, 1, 1, 1);
      	case 10: ApplyAnimation(playerid, "PED", "WALK_fatold", 4.0, 1, 1, 1, 1, 1);
       	case 11: ApplyAnimation(playerid, "PED", "WALK_gang1", 4.0, 1, 1, 1, 1, 1);
	    case 12: ApplyAnimation(playerid, "PED", "WALK_gang2", 4.0, 1, 1, 1, 1, 1);
	    case 13: ApplyAnimation(playerid, "PED", "WALK_old", 4.0, 1, 1, 1, 1, 1);
	    case 14: ApplyAnimation(playerid, "PED", "WALK_shuffle", 4.0, 1, 1, 1, 1, 1);
	    case 15: ApplyAnimation(playerid, "PED", "woman_run", 4.0, 1, 1, 1, 1, 1);
	    case 16: ApplyAnimation(playerid, "PED", "WOMAN_runbusy", 4.0, 1, 1, 1, 1, 1);
	    case 17: ApplyAnimation(playerid, "PED", "WOMAN_runfatold", 4.0, 1, 1, 1, 1, 1);
	    case 18: ApplyAnimation(playerid, "PED", "woman_runpanic", 4.0, 1, 1, 1, 1, 1);
	    case 19: ApplyAnimation(playerid, "PED", "WOMAN_runsexy", 4.0, 1, 1, 1, 1, 1);
	    case 20: ApplyAnimation(playerid, "PED", "WOMAN_walkbusy", 4.0, 1, 1, 1, 1, 1);
	    case 21: ApplyAnimation(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1);
	    case 22: ApplyAnimation(playerid, "PED", "WOMAN_walknorm", 4.0, 1, 1, 1, 1, 1);
	    case 23: ApplyAnimation(playerid, "PED", "WOMAN_walkold", 4.0, 1, 1, 1, 1, 1);
     	case 24: ApplyAnimation(playerid, "PED", "WOMAN_walkpro", 4.0, 1, 1, 1, 1, 1);
  		case 25: ApplyAnimation(playerid, "PED", "WOMAN_walksexy", 4.0, 1, 1, 1, 1, 1);
  		case 26: ApplyAnimation(playerid, "PED", "WOMAN_walkshop", 4.0, 1, 1, 1, 1, 1);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /pedmove [1-26]");
	}
	return 1;
}
CMD:getjiggy(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /getjiggy [1-9]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "DANCING", "DAN_Down_A", 4.0, 1, 0, 0, 0, 0);
    	case 2: ApplyAnimation(playerid, "DANCING", "DAN_Left_A", 4.0, 1, 0, 0, 0, 0);
     	case 3: ApplyAnimation(playerid, "DANCING", "DAN_Loop_A", 4.0, 1, 0, 0, 0, 0);
      	case 4: ApplyAnimation(playerid, "DANCING", "DAN_Right_A", 4.0, 1, 0, 0, 0, 0);
       	case 5: ApplyAnimation(playerid, "DANCING", "DAN_Up_A", 4.0, 1, 0, 0, 0, 0);
        case 6: ApplyAnimation(playerid, "DANCING", "dnce_M_a", 4.0, 1, 0, 0, 0, 0);
       	case 7: ApplyAnimation(playerid, "DANCING", "dnce_M_b", 4.0, 1, 0, 0, 0, 0);
        case 8: ApplyAnimation(playerid, "DANCING", "dnce_M_c", 4.0, 1, 0, 0, 0, 0);
        case 9: ApplyAnimation(playerid, "DANCING", "dnce_M_d", 4.0, 1, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /getjiggy [1-9]");
	}
	return 1;
}
CMD:stripclub(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /stripclub [1-2]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "STRIP", "PLY_CASH", 4.0, 0, 0, 0, 0, 0);
       	case 2: ApplyAnimation(playerid, "STRIP", "PUN_CASH", 4.0, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /stripclub [1-2]");
	}
	return 1;
}
CMD:dj(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /dj [1-4]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "SCRATCHING", "scdldlp", 4.0, 1, 0, 0, 0, 0);
    	case 2: ApplyAnimation(playerid, "SCRATCHING", "scdlulp", 4.0, 1, 0, 0, 0, 0);
     	case 3: ApplyAnimation(playerid, "SCRATCHING", "scdrdlp", 4.0, 1, 0, 0, 0, 0);
     	case 4: ApplyAnimation(playerid, "SCRATCHING", "scdrulp", 4.0, 1, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /dj [1-4]");
	}
	return 1;
}
CMD:reload(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /reload - 1 (Desert Eagle), 2 (SPAS12), 3 (UZI/AK-47/M4A1)");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.0, 0, 0, 0, 0, 0);
 		case 3: ApplyAnimation(playerid, "UZI", "UZI_reload", 4.0,0,0,0,0,0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /reload - 1 (Desert Eagle), 2 (SPAS12), 3 (UZI/AK-47/M4A1)");
	}
	return 1;
}
CMD:tag(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /tag [1-2]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "GRAFFITI", "graffiti_Chkout", 4.0, 0, 0, 0, 0, 0);
    	case 2: ApplyAnimation(playerid, "GRAFFITI", "spraycan_fire", 4.0, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /tag [1-2]");
	}
	return 1;
}
CMD:cheer(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /cheer [1-8]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "ON_LOOKERS", "shout_01", 4.0, 0, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "ON_LOOKERS", "shout_02", 4.0, 0, 0, 0, 0, 0);
  		case 3: ApplyAnimation(playerid, "ON_LOOKERS", "shout_in", 4.0, 0, 0, 0, 0, 0);
  		case 4: ApplyAnimation(playerid, "RIOT", "RIOT_ANGRY_B", 4.0, 1, 0, 0, 0, 0);
  		case 5: ApplyAnimation(playerid, "RIOT", "RIOT_CHANT", 4.0, 0, 0, 0, 0, 0);
  		case 6: ApplyAnimation(playerid, "RIOT", "RIOT_shout", 4.0, 0, 0, 0, 0, 0);
  		case 7: ApplyAnimation(playerid, "STRIP", "PUN_HOLLER", 4.0, 0, 0, 0, 0, 0);
  		case 8: ApplyAnimation(playerid, "OTB", "wtchrace_win", 4.0, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /cheer [1-8]");
	}
	return 1;
}
CMD:bar(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /bar [1-5]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "BAR", "Barcustom_get", 4.0, 0, 1, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "BAR", "Barserve_bottle", 4.0, 0, 0, 0, 0, 0);
  		case 3: ApplyAnimation(playerid, "BAR", "Barserve_give", 4.0, 0, 0, 0, 0, 0);
		case 4: ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 0, 0, 0, 0);
	    case 5: ApplyAnimation(playerid, "BAR", "BARman_idle", 4.0, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /bar [1-5]");
	}
	return 1;
}
CMD:showoff(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	ApplyAnimation(playerid, "Freeweights", "gym_free_celebrate", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:goggles(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:cry(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	ApplyAnimation(playerid, "GRAVEYARD", "mrnF_loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:throw(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	ApplyAnimation(playerid, "GRENADE", "WEAPON_throw", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:robbed(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	ApplyAnimation(playerid, "SHOP", "SHP_Rob_GiveCash", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:hurt(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:handwash(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:stop(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	ApplyAnimation(playerid, "PED", "endchat_01", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:robman(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:finger(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	ApplyAnimation(playerid, "PED", "fucku", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:blob(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	ApplyAnimation(playerid, "CRACK", "crckidle1", 4.0, 0, 1, 1, 1, -1);
	return 1;
}
CMD:opendoor(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	ApplyAnimation(playerid, "AIRPORT", "thrw_barl_thrw", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:wavedown(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	ApplyAnimation(playerid, "BD_FIRE", "BD_Panic_01", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:cpr(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	ApplyAnimation(playerid, "MEDIC", "CPR", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:dive(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	ApplyAnimation(playerid, "DODGE", "Crush_Jump", 4.0, 0, 1, 1, 1, 0);
	return 1;
}
CMD:box(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	LoopingAnim(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,0);
	return 1;
}
CMD:handsup(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(PlayerInfo[playerid][pPaintBallG] > 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Command is not currently accessible.");
	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
		PlayerHandsup[playerid] = 1;
	}
	return 1;
}
CMD:laugh(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	OnePlayAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:lookout(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
    OnePlayAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:crossarms(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
    new anim;
   	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /crossarms [1-4]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
  		case 2: ApplyAnimation(playerid, "DEALER", "DEALER_IDLE", 4.0, 1, 0, 0, 0, 0);
  		case 3: ApplyAnimation(playerid, "GRAVEYARD", "mrnM_loop", 4.0, 1, 0, 0, 0, 0);
  		case 4: ApplyAnimation(playerid, "GRAVEYARD", "prst_loopa", 4.0, 1, 0, 0, 0, 0);
  		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /crossarms [1-4]");
	}
	return 1;
}
CMD:lay(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	new anim;
	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /lay [1-3]");
	switch(anim)
	{
		case 1: ApplyAnimation(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0);
  		case 3: ApplyAnimation(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0);
  		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /lay [1-3]");
	}
	return 1;
}
CMD:hide(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:vomit(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	OnePlayAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:wave(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
	new anim;
	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /wave [1-3]");
    switch(anim)
	{
		case 1: LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0);
		case 2: ApplyAnimation(playerid, "KISSING", "gfwave2", 4.0, 1, 0, 0, 0, 0);
		case 3: ApplyAnimation(playerid, "PED", "endchat_03", 4.0, 1, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /wave [1-3]");
	}
	return 1;
}
CMD:salute(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
    LoopingAnim(playerid, "ON_LOOKERS", "Pointup_loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:slapass(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
    OnePlayAnim(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:deal(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
    new anim;
   	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /deal [1-2]");
	switch(anim) {

  		case 1: ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
  		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /deal [1-2]");
 	}
	return 1;
}
CMD:crack(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
    LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:wank(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
    LoopingAnim(playerid,"PAULNMAC", "wank_loop", 1.800001, 1, 0, 0, 1, 600);
	return 1;
}
CMD:gro(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
 	LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:rap(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
	new anim;
   	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /rap [1-3]");
	switch(anim)
	{

  		case 1: ApplyAnimation(playerid, "RAPPING", "RAP_A_Loop", 4.0, 1, 0, 0, 0, 0);
    	case 2: ApplyAnimation(playerid, "RAPPING", "RAP_B_Loop", 4.0, 1, 0, 0, 0, 0);
     	case 3: ApplyAnimation(playerid, "RAPPING", "RAP_C_Loop", 4.0, 1, 0, 0, 0, 0);
      	default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /rap [1-3]");
   	}
    return 1;
}
CMD:pee(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
	if(PlayerInfo[playerid][pPaintBallG] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Command is not currently accesible.");
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
	}
	return 1;
}
CMD:crabs(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
	LoopingAnim(playerid,"MISC","Scratchballs_01", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:sit(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
	new anim;
   	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sit [1-6]");
	switch(anim) {

  		case 1: ApplyAnimation(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0);
  		case 3: ApplyAnimation(playerid, "BEACH", "ParkSit_W_loop", 4.0, 1, 0, 0, 0, 0);
		case 4: ApplyAnimation(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0);
  		case 5: ApplyAnimation(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
  		case 6: ApplyAnimation(playerid, "PED", "SEAT_down", 4.0, 0, 1, 1, 1, 0);
  		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sit [1-6]");
 	}
	return 1;
}
CMD:siteat(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
	new anim;
   	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /siteat [1-2]");
	switch(anim) {

  		case 1: ApplyAnimation(playerid, "FOOD", "FF_Sit_Eat3", 4.0, 1, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "FOOD", "FF_Sit_Eat2", 4.0, 1, 0, 0, 0, 0);
  		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /siteat [1-2]");
 	}
	return 1;
}
CMD:drunk(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
	LoopingAnim(playerid,"PED","WALK_DRUNK",4.0,1,1,1,1,0);
	return 1;
}
CMD:bomb(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
   	ClearAnimations(playerid);
   	OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:chat(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
    new anim;
	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /chat [1-7]");
	switch(anim) {

  		case 1: ApplyAnimation(playerid, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkA", 4.0, 0, 0, 0, 0, 0);
		case 3: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkB", 4.0, 0, 0, 0, 0, 0);
  		case 4: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkE", 4.0, 0, 0, 0, 0, 0);
  		case 5: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkF", 4.0, 0, 0, 0, 0, 0);
  		case 6: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkG", 4.0, 0, 0, 0, 0, 0);
	    case 7: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkH", 4.0, 0, 0, 0, 0, 0);
  		default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /chat [1-7]");
 	}
	return 1;
}
CMD:taichi(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
    LoopingAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
	return 1;
}
CMD:dance(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
	if(PlayerInfo[playerid][pPaintBallG] > 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Command is not currently accessible.");
	{
		new anim;
		if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /dance [1-4]");
		switch(anim)
		{
			case 1: SetPlayerSpecialAction(playerid, 5);
			case 2: SetPlayerSpecialAction(playerid, 6);
			case 3: SetPlayerSpecialAction(playerid, 7);
			case 4: SetPlayerSpecialAction(playerid, 8);
			default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /dance [1-4]");
		}
	}
	return 1;
}
CMD:smoke(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
	if(PlayerInfo[playerid][pPaintBallG] > 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Command is not currently accessible.");
	{
		new anim;
		if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /smoke [1-2]");
		switch(anim)
		{
		    case 1: ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.0, 0, 0, 0, 0, 0);
		    case 2: ApplyAnimation(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
			default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /smoke [1-2]");
		}
	}
	return 1;
}
CMD:gesture(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi o animatie deoarece dormi.","(Error){FFFFFF} You can't use animations when you are sleeping.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Animations are inaccessible on foot.");
	if(Freezed[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't do animations because your are freezed.");
	if(PlayerInfo[playerid][pPaintBallG] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Command is not currently accesible.");
	{
		new anim;
		if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gesture [1-15]");
		switch(anim) {

			case 1: ApplyAnimation(playerid, "GHANDS", "gsign1", 4.0, 0, 0, 0, 0, 0);
			case 2: ApplyAnimation(playerid, "GHANDS", "gsign1LH", 4.0, 0, 0, 0, 0, 0);
			case 3: ApplyAnimation(playerid, "GHANDS", "gsign2", 4.0, 0, 0, 0, 0, 0);
			case 4: ApplyAnimation(playerid, "GHANDS", "gsign2LH", 4.0, 0, 0, 0, 0, 0);
			case 5: ApplyAnimation(playerid, "GHANDS", "gsign3", 4.0, 0, 0, 0, 0, 0);
			case 6: ApplyAnimation(playerid, "GHANDS", "gsign3LH", 4.0, 0, 0, 0, 0, 0);
			case 7: ApplyAnimation(playerid, "GHANDS", "gsign4", 4.0, 0, 0, 0, 0, 0);
			case 8: ApplyAnimation(playerid, "GHANDS", "gsign4LH", 4.0, 0, 0, 0, 0, 0);
			case 9: ApplyAnimation(playerid, "GHANDS", "gsign5", 4.0, 0, 0, 0, 0, 0);
			case 10: ApplyAnimation(playerid, "GHANDS", "gsign5", 4.0, 0, 0, 0, 0, 0);
			case 11: ApplyAnimation(playerid, "GHANDS", "gsign5LH", 4.0, 0, 0, 0, 0, 0);
			case 12: ApplyAnimation(playerid, "GANGS", "Invite_No", 4.0, 0, 0, 0, 0, 0);
			case 13: ApplyAnimation(playerid, "GANGS", "Invite_Yes", 4.0, 0, 0, 0, 0, 0);
			case 14: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkD", 4.0, 0, 0, 0, 0, 0);
			case 15: ApplyAnimation(playerid, "GANGS", "smkcig_prtl", 4.0, 0, 0, 0, 0, 0);
			default: SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /gesture [1-15]");
		}
	}
	return 1;
}
CMD:bbalance(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new bouse = PlayerInfo[playerid][pPbiskey], string[128];
	if(bouse == 255) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own a business.");
	format(string, sizeof(string), "Business Vault Balance: $%d", BizzInfo[bouse][bTill]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}
CMD:bizwithdraw(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new bouse = PlayerInfo[playerid][pPbiskey];
	if(bouse == 255) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own a business.");
	new cashdeposit,string[128];
	if(sscanf(params, "d",cashdeposit)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /bwithdraw [money]");
	if(cashdeposit < 1) return 1;
	if(cashdeposit > BizzInfo[bouse][bTill]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money in your business.");
	if(!PlayerToPoint(5.0, playerid,BizzInfo[bouse][bEntranceX],BizzInfo[bouse][bEntranceY],BizzInfo[bouse][bEntranceZ])) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Poti folosi aceasta comanda doar daca esti in apropierea biz-ului tau.", "(Error){FFFFFF} You need to be near your business to use this command.");
	GivePlayerCash(playerid,cashdeposit);
	BizzInfo[bouse][bTill] -= cashdeposit;
	format(string, sizeof(string), "You have withdrawn $%d from your business vault.", cashdeposit);
	SendClientMessage(playerid, COLOR_WHITE, string);
    new str1[184];
	mysql_format(SQL,str1,sizeof(str1),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bouse][bTill],bouse);
	mysql_tquery(SQL,str1,"","");
	return 1;
}
CMD:bwithdraw(playerid, params[]) return cmd_bizwithdraw(playerid, params);
CMD:bizname(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	new bouse = PlayerInfo[playerid][pPbiskey];
	if(bouse == 255) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own a business.");
	new result[60],string[128];
	if(sscanf(params, "s[60]",result)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /bizname [name]");
	new maxc = strlen(result);
	if(maxc > 20) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Maximum caracters is 20.");
	new result2[60];
	mysql_real_escape_string(result, result2);
	strmid(BizzInfo[bouse][bMessage], result, 0, 64, 255);
	format(string, sizeof(string), "Business name set to %s.", BizzInfo[bouse][bMessage]);
    new str1[184];
	mysql_format(SQL,str1,sizeof(str1),"UPDATE bizz SET Message='%s' WHERE ID='%d'", result2, bouse);
	mysql_tquery(SQL,str1,"","");
	OnPropTextdrawUpdate(2, bouse);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}
CMD:sellbizto(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	new money,giveplayerid,sendername[25],giveplayer[25],string[150],playername[25],other[128];
	GetPlayerName(playerid, playername, sizeof(playername));
    if(PlayerInfo[playerid][pPbiskey] == 255) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own a bussines.");
	if(sscanf(params, "uiS(NULL)[128]",giveplayerid,money,other)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /sellbizto [name/playerid] [price]");
	if(strcmp(other, "NULL", true)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu folosi spatii in pret.", "(Error){FFFFFF} Don't use spaces in the price.");
	if(money < 100000 || money > 200000000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Price can't be lower than $100.000 - $200.000.000.");
	if(PlayerInfo[giveplayerid][pPbiskey] != 255) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This player have a business.");
	if(IsPlayerConnected(giveplayerid))
	{
	    if(giveplayerid != INVALID_PLAYER_ID)
	    {
	        if(ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(PlayerInfo[giveplayerid][pLevel] < BizzInfo[PlayerInfo[playerid][pPbiskey]][bLevelNeeded]) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} This player don't have needed level.");
				if(giveplayerid == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't sell Bussines to yourself.");
				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "You offered to %s to buy your business for $%s.", giveplayer, FormatNumber(money));
				SendClientMessage(playerid, COLOR_DARKPINK, string);
				format(string, sizeof(string), "%s wants to sell his business to you for $%s, (type /accept biz %d) to accept.", sendername, FormatNumber(money),playerid);
				SendClientMessage(giveplayerid, COLOR_DARKPINK, string);
				bizid[giveplayerid] = PlayerInfo[playerid][pPbiskey];
				bizprice[giveplayerid] = money;
				bizoffer[giveplayerid] = playerid;
				return 1;
			}
			else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} This player is not near you.");
		}
	}
	else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
	return 1;
}
CMD:sellbiztostate(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pBlockedAcc] == 1) return BlockedMessage(playerid);
	if(PlayerInfo[playerid][pPbiskey] == 255) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own a bussines.");
	if(strcmp(PlayerInfo[playerid][pNormalName], BizzInfo[PlayerInfo[playerid][pPbiskey]][bOwner], true) == 0)
	{
		SellHouseID[playerid] = PlayerInfo[playerid][pPbiskey];
		if(PlayerInfo[playerid][pLanguage] == 2) ShowPlayerDialog(playerid, DIALOG_SELLBIZTOSTATE, DIALOG_STYLE_MSGBOX, "Esti sigur?", "Esti sigur ca vrei sa-ti vinzi biz-ul pentru $6.000.000?", "Da", "Nu");
		else ShowPlayerDialog(playerid, DIALOG_SELLBIZTOSTATE, DIALOG_STYLE_MSGBOX, "Are you sure?", "Are you sure you want to sell your biz for $6.000.000?", "Yes", "No");
	}
	else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You don't own a business.");
	return 1;
}
CMD:panel(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    SendClientMessage(playerid, COLOR_YELLOW,"bluffs.ga/panel");
	return 1;
}
CMD:forum(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
    SendClientMessage(playerid, COLOR_YELLOW,"bluffs.ga/panel");
	return 1;
}
CMD:hprice(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid,COLOR_LIGHTGREEN3, AdminOnly);
	new cashdeposit,string[356],id;
	if(sscanf(params, "dd",id,cashdeposit)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /hprice [id] [money]");
	HouseInfo[id][hPrice] = cashdeposit;
    mysql_format(SQL, string, sizeof(string), "UPDATE houses SET `Value`='%d' WHERE `ID`='%d'",cashdeposit,id);
    mysql_tquery(SQL,string,"","");
    OnPropTextdrawUpdate(1,id);
	return 1;
}
CMD:bprice(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid,COLOR_LIGHTGREEN3, AdminOnly);
	new cashdeposit,string[356],id;
	if(sscanf(params, "dd",id,cashdeposit)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /bprice [id] [money]");
	BizzInfo[id][bPrice] = cashdeposit;
    mysql_format(SQL, string, sizeof(string), "UPDATE bizz SET `BuyPrice`='%d' WHERE `ID`='%d'",cashdeposit,id);
    mysql_tquery(SQL,string,"","");
    OnPropTextdrawUpdate(2,id);
	return 1;
}
CMD:hlevel(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid,COLOR_LIGHTGREEN3, AdminOnly);
	new cashdeposit,string[356],id;
	if(sscanf(params, "dd",id,cashdeposit)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /hlevel [id] [level]");
	HouseInfo[id][hLevel] = cashdeposit;
    mysql_format(SQL, string, sizeof(string), "UPDATE houses SET `Level`='%d' WHERE `ID`='%d'",cashdeposit,id);
    mysql_tquery(SQL,string,"","");
    OnPropTextdrawUpdate(1,id);
	return 1;
}
CMD:blevel(playerid,params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid,COLOR_LIGHTGREEN3, AdminOnly);
	new cashdeposit,string[356],id;
	if(sscanf(params, "dd",id,cashdeposit)) return SendClientMessage(playerid, COLOR_GREY, "Syntax:{FFFFFF} /nlevel [id] [level]");
	BizzInfo[id][bLevelNeeded] = cashdeposit;
    mysql_format(SQL, string, sizeof(string), "UPDATE bizz SET `LevelNeeded`='%d' WHERE `ID`='%d'",cashdeposit,id);
    mysql_tquery(SQL,string,"","");
    OnPropTextdrawUpdate(2,id);
	return 1;
}
CMD:eat(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(BizzInfo[InBussines[playerid]][bType] == 7 || BizzInfo[InBussines[playerid]][bType] == 9 || BizzInfo[InBussines[playerid]][bType] == 14)
	{
	    new bid = InBussines[playerid],str[256],name[30];
		if(GetPlayerCash(playerid) < 100) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
	 	new Float:health;
		GetPlayerHealth(playerid,health);
		if(health >= 75)
		{
            SetPlayerHealthEx(playerid, 100);
            ApplyAnimation(playerid,"FOOD","EAT_Burger", 3.0, 0, 0, 0, 0, 0);
            GivePlayerCash(playerid, -100);
            GameTextForPlayer(playerid, "~r~-100$", 5000, 1);
			BizzInfo[bid][bTill] += 100;
			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
			mysql_tquery(SQL,str,"","");
			GetPlayerName(playerid, name, sizeof(name));
			format(str, sizeof(str),"* %s ate some food.",name);
			ProxDetector(30.0, playerid, str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			SetPlayerHealthEx (playerid, health+25);
			ApplyAnimation(playerid,"FOOD","EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			GivePlayerCash(playerid, -100);
			GameTextForPlayer(playerid, "~r~-100$", 5000, 1);
			BizzInfo[bid][bTill] += 100;
			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
			mysql_tquery(SQL,str,"","");
			GetPlayerName(playerid, name, sizeof(name));
			format(str, sizeof(str),"* %s ate some food.",name);
			ProxDetector(30.0, playerid, str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	return 1;
}
CMD:buyfood(playerid, params[]) return cmd_eat(playerid, params);
CMD:elevator(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to log in first.");
	if(!IsACop(playerid)) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You are not a cop.");
	if(IsPlayerInRangeOfPoint(playerid, 4.0, 1568.5184,-1690.2205,5.8906))
	{
	    SetPlayerPosEx(playerid,1564.8662,-1666.4962,28.3956);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, 1564.8662,-1666.4962,28.3956))
	{
	    SetPlayerPosEx(playerid,1568.5184,-1690.2205,5.8906);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, 2340.2810,2456.5625,14.9688))
	{
	    SetPlayerPosEx(playerid,2339.3237,2461.2197,38.6837);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, 2339.3237,2461.2197,38.6837))
	{
	    SetPlayerPosEx(playerid,2340.2810,2456.5625,14.9688);
	}
	return 1;
}

// OnPlayerCommandText
public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(TutTime[playerid] >= 1 || RegistrationStep[playerid] >= 1) return 0;
	if(iGMXTick > 0) return 0;
	new string[256];
	// -- ANTI SPAM -- //
	if(strfind(cmdtext, "/s ", true) != -1 || strfind(cmdtext, "/b ", true) != -1 || strfind(cmdtext, "/low ", true) != -1 || strfind(cmdtext, "/sms ", true) != -1 || strfind(cmdtext, "/reply ", true) != -1 || strfind(cmdtext, "/me ", true) != -1 || strfind(cmdtext, "/wt ", true) != -1 || strfind(cmdtext, "/do ", true) != -1)
	{
		if(!strcmp(cmdtext, LastText[playerid]) && strlen(LastText[playerid]) > 0) return 0;
		strcpy(LastText[playerid], cmdtext, 128);
	}
    if(LastTextTime[playerid] >= GetTickCount() && gPlayerLogged[playerid] == 1)
    {
    	TextCount[playerid]++;
    	if(TextCount[playerid] > 5)
    	{
    		PlayerInfo[playerid][pMuted] = 1;
			PlayerInfo[playerid][pMuteTime] += 10;
    		TextCount[playerid] = 0;
    		mysql_format(SQL,string,sizeof(string),"UPDATE users SET `Muted`='1',`MuteTime`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pMuteTime], PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,string,"","");
    		SendClientMessage(playerid, COLOR_DARKPINK, "You have been auto-muted for spamming. You will be unmuted in 10 seconds.");
    		return 0;
    	}
    }
    LastTextTime[playerid] = GetTickCount() + 1000*3;
	// -- ANTI SPAM -- //
	//---- Anti Reclama ----//
	new word[30];
	new Cache: adv = mysql_query(SQL, "SELECT * FROM `adv`");
	for(new ix, jx = cache_get_row_count (); ix != jx; ++ix)
	{
		cache_get_field_content(ix, "word", word);
		if(strfind(cmdtext, word, true) != -1)
		{
			if(PlayerInfo[playerid][pAdmin] < 6)
			{
				new name[30];
				GetPlayerName(playerid, name, sizeof(name));
				format(string, sizeof(string), "%s (%d, level %d) may be server advertising (word found %s):", name, playerid, PlayerInfo[playerid][pLevel], word);
				ABroadCast(COLOR_RED2, string, 1);
				ABroadCast(COLOR_RED2, cmdtext, 1);
				SS(playerid, COLOR_LIGHTGREEN3, "Este interzis sa discuti despre alte servere sau sa faci reclama altor servere.", "You are not allowed to advertise other servers!");
				return 0;
			}
		}
	}
	cache_delete(adv);
    return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(success)
	{
		SpamCheck[playerid] = GetTickCount();
	}
	if(!success) return SendClientMessage(playerid, COLOR_WHITE, "SERVER: Unknown command!");
	return 1;
}

forward HouseLevel(playerid);
public HouseLevel(playerid)
{
	new h = PlayerInfo[playerid][pPhousekey];
	if(h == 999)
	{
		return 0;
	}
	if(h <= 4)
	{
		return 1;
	}
	if(h >= 5 && h <= 9)
	{
		return 2;
	}
	if(h >= 10 && h <= 18)
	{
		return 3;
	}
	if(h >= 19 && h <= 22)
	{
		return 4;
	}
	if(h >= 23 && h <= 25)
	{
		return 5;
	}
	if(h == 26)
	{
		return 6;
	}
	if(h == 27)
	{
		return 7;
	}
	if(h >= 28 && h <= 31)
	{
		return 7;
	}
	return 0;
}

forward CHouseLevel(houseid);
public CHouseLevel(houseid)
{
	if(houseid <= 4)
	{
		return 3;
	}
	if(houseid >= 29 && houseid <= 30)
	{
		return 4;
	}
	if(houseid >= 5 && houseid <= 9)
	{
		return 5;
	}
	if(houseid >= 10 && houseid <= 18 || houseid == 28)
	{
		return 7;
	}
	if(houseid >= 19 && houseid <= 22)
	{
		return 8;
	}
	if(houseid >= 23 && houseid <= 25)
	{
		return 9;
	}
	if(houseid == 26)
	{
		return 10;
	}
	if(houseid == 27)
	{
		return 11;
	}
	if(houseid >= 28 && houseid <= 31)
	{
		return 12;
	}
	return 0;
}

forward ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5);
public ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		foreach(new i : Player)
		{
			if(GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
			{
				if(!BigEar[i])
				{
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					if(((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						SendSplitMessage(i, col1, string);
					}
					else if(((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						SendSplitMessage(i, col2, string);
					}
					else if(((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						SendSplitMessage(i, col3, string);
					}
					else if(((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						SendSplitMessage(i, col4, string);
					}
					else if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						SendSplitMessage(i, col5, string);
					}
				}
				else
				{
					SendSplitMessage(i, col1, string);
				}
			}
		}
	}
	return 1;
}

forward ChatMessage(Float:radi, playerid, string[]);
public ChatMessage(Float:radi, playerid, string[])
{
	if(IsPlayerConnected(playerid))
	{
		new playername[30], stringg[256], Distance2;
		new Float: posx, Float: posy, Float: posz, Float: Distance;
		GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerPos(playerid, posx, posy, posz);
		foreach(new i : Player)
		{
			if(GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
			{
				if(!BigEar[i])
				{
					Distance = GetPlayerDistanceFromPoint(i, posx, posy, posz);
					Distance2 = floatround(Distance, floatround_round);
					if(Distance2 >= 0 && Distance2 <= 14)
					{
						if(PlayerInfo[playerid][pColors] == 0) format(stringg, sizeof(stringg), "{CECECE}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 1) format(stringg, sizeof(stringg), "{0087FE}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 2) format(stringg, sizeof(stringg), "{4700C2}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 3) format(stringg, sizeof(stringg), "{EBFF00}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 4) format(stringg, sizeof(stringg), "{EF00FF}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 5) format(stringg, sizeof(stringg), "{40FF00}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 6) format(stringg, sizeof(stringg), "{9CFF29}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 7) format(stringg, sizeof(stringg), "{0E7F03}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 8) format(stringg, sizeof(stringg), "{FF9A00}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 9) format(stringg, sizeof(stringg), "{6E6E6E}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 10) format(stringg, sizeof(stringg), "{FF4C9D}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 11) format(stringg, sizeof(stringg), "{F4FA58}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 12) format(stringg, sizeof(stringg), "{00BFFF}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 13) format(stringg, sizeof(stringg), "{819FF7}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 14) format(stringg, sizeof(stringg), "{FE9A2E}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 15) format(stringg, sizeof(stringg), "{FA8258}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 16) format(stringg, sizeof(stringg), "{00FF40}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 17) format(stringg, sizeof(stringg), "{D358F7}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 18) format(stringg, sizeof(stringg), "{4169E1}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 19) format(stringg, sizeof(stringg), "{9ACD32}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 20) format(stringg, sizeof(stringg), "{F0E68C}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 21) format(stringg, sizeof(stringg), "{BDB76B}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 22) format(stringg, sizeof(stringg), "{FF1493}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 23) format(stringg, sizeof(stringg), "{9966CC}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 24) format(stringg, sizeof(stringg), "{F0B2B2}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 25) format(stringg, sizeof(stringg), "{DB7093}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 26) format(stringg, sizeof(stringg), "{E70031}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 27) format(stringg, sizeof(stringg), "{AB0000}%s:{FFFFFF} %s", playername, string);
						else if(PlayerInfo[playerid][pColors] == 28) format(stringg, sizeof(stringg), "{FF6347}%s:{FFFFFF} %s", playername, string);
						SendSplitMessage(i, COLOR_WHITE, stringg);
					}
					else if(Distance2 >= 15 && Distance2 <= 19)
					{
						format(stringg, sizeof(stringg), "%s: %s", playername, string);
						SendSplitMessage(i, COLOR_FADE3, stringg);
					}
					else if(Distance2 >= 20 && Distance2 <= 25)
					{
						format(stringg, sizeof(stringg), "%s: %s", playername, string);
						SendSplitMessage(i, COLOR_FADE4, stringg);
					}
				}
				else
				{
					if(PlayerInfo[playerid][pColors] == 0) format(stringg, sizeof(stringg), "{CECECE}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 1) format(stringg, sizeof(stringg), "{0087FE}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 2) format(stringg, sizeof(stringg), "{4700C2}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 3) format(stringg, sizeof(stringg), "{EBFF00}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 4) format(stringg, sizeof(stringg), "{EF00FF}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 5) format(stringg, sizeof(stringg), "{40FF00}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 6) format(stringg, sizeof(stringg), "{9CFF29}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 7) format(stringg, sizeof(stringg), "{0E7F03}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 8) format(stringg, sizeof(stringg), "{FF9A00}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 9) format(stringg, sizeof(stringg), "{6E6E6E}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 10) format(stringg, sizeof(stringg), "{FF4C9D}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 11) format(stringg, sizeof(stringg), "{F4FA58}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 12) format(stringg, sizeof(stringg), "{00BFFF}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 13) format(stringg, sizeof(stringg), "{819FF7}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 14) format(stringg, sizeof(stringg), "{FE9A2E}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 15) format(stringg, sizeof(stringg), "{FA8258}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 16) format(stringg, sizeof(stringg), "{00FF40}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 17) format(stringg, sizeof(stringg), "{D358F7}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 18) format(stringg, sizeof(stringg), "{4169E1}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 19) format(stringg, sizeof(stringg), "{9ACD32}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 20) format(stringg, sizeof(stringg), "{F0E68C}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 21) format(stringg, sizeof(stringg), "{BDB76B}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 22) format(stringg, sizeof(stringg), "{FF1493}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 23) format(stringg, sizeof(stringg), "{9966CC}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 24) format(stringg, sizeof(stringg), "{F0B2B2}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 25) format(stringg, sizeof(stringg), "{DB7093}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 26) format(stringg, sizeof(stringg), "{EE1C1C}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 27) format(stringg, sizeof(stringg), "{A40000}%s:{FFFFFF} %s", playername, string);
					else if(PlayerInfo[playerid][pColors] == 28) format(stringg, sizeof(stringg), "{FF5252}%s:{FFFFFF} %s", playername, string);
					SendSplitMessage(i, COLOR_WHITE, stringg);
				}
			}
		}
	}
	return 1;
}

forward SS(playerid, color, ro[], en[]);
public SS(playerid, color, ro[], en[])
{
	switch(PlayerInfo[playerid][pLanguage])
	{
		case 1: SendSplitMessage(playerid, color, en);
		case 2: SendSplitMessage(playerid, color, ro);
		default: SendSplitMessage(playerid, color, ro);
	}
	return 1;
}

forward BlockedMessage(playerid);
public BlockedMessage(playerid)
{
	SS(playerid, COLOR_RED2, "Contul tau este limitat pentru 72 de ore (3 zile) pentru ca te-ai logat dintr-o locatie diferita. In acest timp nu poti cumpara/vinde nimic.", "Your account is limited for 72 hours (3 days) because your logged in from a different location. In this time you can't buy/sell/trade goods or transfer money.");
	SS(playerid, COLOR_RED2, "Nu trebuie sa faci nimic pentru deblocarea contului. Va fi deblocat automat dupa 72 de ore.", "You don't need to do anything in order to get your account limit removed. Just wait 72 hours.");
	return 1;
}

forward CrimInRange(Float:radi, playerid,copid);
public CrimInRange(Float:radi, playerid,copid)
{
	if(IsPlayerConnected(playerid)&&IsPlayerConnected(copid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(copid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

forward payala2(playerid);
public payala2(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    payala[playerid] = 0;
	}
	return 0;
}

forward ProxDetectorS(Float:radi, playerid, targetid);
public ProxDetectorS(Float:radi, playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

forward PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z);
public PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		tempposx = (oldposx -x);
		tempposy = (oldposy -y);
		tempposz = (oldposz -z);
		if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

forward OnPropTextdrawUpdate(update, h);
public OnPropTextdrawUpdate(update, h)
{
	new PropertyString[256];
	if(update == 1)
	{
		new type[10],locked[20];
		if(HouseInfo[h][hInteriorType] == 0) format(type, sizeof(type),"Small");
		if(HouseInfo[h][hInteriorType] == 1) format(type, sizeof(type),"Medium");
		if(HouseInfo[h][hInteriorType] == 2) format(type, sizeof(type),"Big");
		if(HouseInfo[h][hLock] == 1) format(locked, sizeof(locked), "\n(locked)");
		if(HouseInfo[h][hOwned] == 0)
		{
			DestroyDynamic3DTextLabel(HouseLabel[h]);
			format(PropertyString, sizeof(PropertyString),"{FFFFFF}House {B40404}%d \n{B40404}%s \n{FFFFFF}Size: {B40404}%s \n{FFFFFF}Price: {B40404}$%s (/buyhouse) \n{FFFFFF}Level: {B40404}%d %s",h,HouseInfo[h][hDiscription],type,FormatNumber(HouseInfo[h][hValue]),HouseInfo[h][hLevel],locked);
			HouseLabel[h] = CreateDynamic3DTextLabel(PropertyString, 0x9C0000F7, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			DestroyDynamicPickup(HousePickup[h]);
			HousePickup[h] = CreateDynamicPickup(1273, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
		}
		else if(HouseInfo[h][hOwned] == 1)
		{
			new tenants=0,query[256],selltext[64];
			format(query, sizeof(query), "SELECT * FROM `users` WHERE `Rented` = '%d' AND `Status`='1'", h);
			new Cache: membresult = mysql_query(SQL, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				tenants++;
			}
			cache_delete(membresult);
			if(HouseInfo[h][hPrice] > 0)
			{
				format(selltext, sizeof(selltext),"\n{FFFFFF}Price: {B40404}$%s (/buyhouse)",FormatNumber(HouseInfo[h][hPrice]));
			}
			if(HouseInfo[h][hRentabil] == 1)
			{
				DestroyDynamic3DTextLabel(HouseLabel[h]);
				format(PropertyString, sizeof(PropertyString),"{FFFFFF}House {B40404}%d \n{B40404}%s \n{FFFFFF}Owner: {B40404}%s \n{FFFFFF}Tenants: {B40404}%d \n{FFFFFF}Size: {B40404}%s \n{FFFFFF}Rent: {B40404}$%d (/rentroom) %s %s",h,HouseInfo[h][hDiscription],HouseInfo[h][hOwner],tenants,type,HouseInfo[h][hRent],selltext,locked);
				HouseLabel[h] = CreateDynamic3DTextLabel(PropertyString, 0x9C0000F7, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
				DestroyDynamicPickup(HousePickup[h]);
				HousePickup[h] = CreateDynamicPickup(1272, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
			}
			else
			{
				DestroyDynamic3DTextLabel(HouseLabel[h]);
				format(PropertyString, sizeof(PropertyString),"{FFFFFF}House {B40404}%d \n{B40404}%s \n{FFFFFF}Owner: {B40404}%s \n{FFFFFF}Tenants: {B40404}%d \n{FFFFFF}Size: {B40404}%s %s %s",h,HouseInfo[h][hDiscription],HouseInfo[h][hOwner], tenants, type, selltext, locked);
				HouseLabel[h] = CreateDynamic3DTextLabel(PropertyString, 0x9C0000F7, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
				DestroyDynamicPickup(HousePickup[h]);
				HousePickup[h] = CreateDynamicPickup(1272, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
			}
		}
	}
	else if(update == 2)
	{
		if(BizzInfo[h][bOwned] == 0)
		{
			DestroyDynamic3DTextLabel(BizzLabel[h]);
			if(BizzInfo[h][bLocked] == 0) format(PropertyString, sizeof(PropertyString),"{0068CF}%s \n{EEEEEE}Business {0068CF}#%d \n {EEEEEE}Price: {0068CF}$%s (/buybusiness) \n{EEEEEE}Level: {0068CF}%d",BizzInfo[h][bMessage],h,FormatNumber(BizzInfo[h][bBuyPrice]),BizzInfo[h][bLevelNeeded]);
			else format(PropertyString, sizeof(PropertyString),"{0068CF}%s \n{EEEEEE}Business {0068CF}#%d \n {EEEEEE}Price: {0068CF}$%s (/buybusiness) \n{EEEEEE}Level: {0068CF}%d \n(locked)",BizzInfo[h][bMessage],h,FormatNumber(BizzInfo[h][bBuyPrice]),BizzInfo[h][bLevelNeeded]);
			BizzLabel[h] = CreateDynamic3DTextLabel(PropertyString, 0x0053CFD1, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
		}
		else if(BizzInfo[h][bOwned] == 1)
		{
			DestroyDynamic3DTextLabel(BizzLabel[h]);
			if(BizzInfo[h][bPrice] > 0)
			{
				if(BizzInfo[h][bLocked] == 0) format(PropertyString, sizeof(PropertyString),"{0068CF}%s \n{EEEEEE}Business {0068CF}#%d \n{EEEEEE}Owner: {0068CF}%s \n{EEEEEE}Fee: {0068CF}$%s \n{EEEEEE}Price: {0068CF}$%s (/buybusiness)",BizzInfo[h][bMessage],h,BizzInfo[h][bOwner],FormatNumber(BizzInfo[h][bEntranceCost]), FormatNumber(BizzInfo[h][bPrice]));
				else format(PropertyString, sizeof(PropertyString),"{0068CF}%s \n{EEEEEE}Business {0068CF}#%d \n{EEEEEE}Owner: {0068CF}%s \n{EEEEEE}Fee: {0068CF}$%s \n{EEEEEE}Price: {0068CF}$%s (/buybusiness) \n(locked)",BizzInfo[h][bMessage],h,BizzInfo[h][bOwner],FormatNumber(BizzInfo[h][bEntranceCost]), FormatNumber(BizzInfo[h][bPrice]));
			}
			else
			{
				if(BizzInfo[h][bLocked] == 0) format(PropertyString, sizeof(PropertyString),"{0068CF}%s \n{EEEEEE}Business {0068CF}#%d \n{EEEEEE}Owner: {0068CF}%s \n{EEEEEE}Fee: {0068CF}$%s",BizzInfo[h][bMessage],h,BizzInfo[h][bOwner],FormatNumber(BizzInfo[h][bEntranceCost]));
				else format(PropertyString, sizeof(PropertyString),"{0068CF}%s \n{EEEEEE}Business {0068CF}#%d \n{EEEEEE}Owner: {0068CF}%s \n{EEEEEE}Fee: {0068CF}$%s \n(locked)",BizzInfo[h][bMessage],h,BizzInfo[h][bOwner],FormatNumber(BizzInfo[h][bEntranceCost]));
			}
			BizzLabel[h] = CreateDynamic3DTextLabel(PropertyString, 0x0053CFD1, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
		}
	}
	return 1;
}

stock GetVehicleDriver(vid) {
	for(new i; i < GetMaxPlayers(); i++) {
		if(!IsPlayerConnected(i)) continue;
		if(GetPlayerVehicleID(i) == vid) return i;
	}
	return INVALID_PLAYER_ID;
}

stock Carspeed(playerid, mode = 1) {
    new Float:Velocity [3];
    GetVehicleVelocity (GetPlayerVehicleID(playerid), Velocity [ 0 ] , Velocity [ 1 ] , Velocity [ 2 ] ) ;
    return floatround ( ( ( floatsqroot ( ( ( Velocity [ 0 ] * Velocity [ 0 ] ) + ( Velocity [ 1 ] * Velocity [ 1 ] ) + ( Velocity [ 2 ] * Velocity [ 2 ] ) ) ) * ( !mode ? 105.0 : 170.0 ) ) ) * 1 );
}

stock SetVehicleToRespawnEx2(carid)
{
	foreach(new i : Player)
	{
		for(new v; v < MAX_PERSONAL_VEHICLES; v++)
		{
			if(PlayerInfo[i][pCarID][v] == carid)
			{
				new engine,lights,alarm,doors,bonnet,boot,objective,Float:PosX,Float:PosY,Float:PosZ;
				GetVehiclePos(carid, PosX, PosY, PosZ);
				DestroyVehicle(PlayerInfo[i][pCarID][v]);
				PlayerInfo[i][pCarID][v] = CreateVehicle(PlayerInfo[i][pCarModel][v],PosX,PosY,PosZ,PlayerInfo[i][pCarAngle][v],PlayerInfo[i][pCarColor1][v],PlayerInfo[i][pCarColor2][v],-1);
				SetVehicleNumberPlate(PlayerInfo[i][pCarID][v], CarPlate[i][v]);
				vehRadio[PlayerInfo[i][pCarID][v]] = 0;
				SetVehicleHealth(PlayerInfo[i][pCarID][v], PlayerInfo[i][pCarHP][v]);
				UpdateVehicleDamageStatus(PlayerInfo[i][pCarID][v], PlayerInfo[i][pCarDamage1][v], PlayerInfo[i][pCarDamage2][v], PlayerInfo[i][pCarDamage3][v], PlayerInfo[i][pCarDamage4][v]);
				Gas[PlayerInfo[i][pCarID][v]] = PlayerInfo[i][pCarGas][v];
				if(PlayerInfo[i][pCarLock][v] == 0)
				{
					GetVehicleParamsEx(PlayerInfo[i][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(PlayerInfo[i][pCarID][v],VEHICLE_PARAMS_OFF,lights,alarm,0,bonnet,boot,objective);
				}
				else
				{
					GetVehicleParamsEx(PlayerInfo[i][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(PlayerInfo[i][pCarID][v],VEHICLE_PARAMS_OFF,lights,alarm,1,bonnet,boot,objective);
				}
				for(new d; d < 17; d++)
				{
					if(CarMod[i][v][d] != 0) AddVehicleComponent(PlayerInfo[i][pCarID][v],CarMod[i][v][d]);
				}
				ChangeVehiclePaintjob(PlayerInfo[i][pCarID][v], PlayerInfo[i][pCarPaintJ][v]);
				vehEngine[PlayerInfo[i][pCarID][v]] = 0;
				SetVipText(i, v);
				AttachNeon(i ,v);
			}
		}
	}
	return 1;
}

stock SetVehicleToRespawnEx(carid)
{
	new found;
	for(new x = 0; x < sizeof(VehicleInfo); x++)
	{
		if(VehicleInfo[x][vehCarID] == carid)
		{
			new str[30];
			DestroyVehicle(carid);
			if(VehicleInfo[x][vehGroup] == 8 && VehicleInfo[x][vehModel] == 411 || VehicleInfo[x][vehGroup] == 2 && VehicleInfo[x][vehModel] == 541 || VehicleInfo[x][vehGroup] == 1 && VehicleInfo[x][vehModel] == 411 || VehicleInfo[x][vehGroup] == 8 && VehicleInfo[x][vehModel] == 468 || VehicleInfo[x][vehGroup] == 8 && VehicleInfo[x][vehModel] == 470)
			{
				VehicleInfo[x][vehCarID] = CreateVehicle(VehicleInfo[x][vehModel], VehicleInfo[x][vehPosX], VehicleInfo[x][vehPosY], VehicleInfo[x][vehPosZ], VehicleInfo[x][vehRotation], VehicleInfo[x][vehColor1], VehicleInfo[x][vehColor2], 1800, 1);
				vehRadio[VehicleInfo[x][vehCarID]] = 0;
			}
			else
			{
				VehicleInfo[x][vehCarID] = CreateVehicle(VehicleInfo[x][vehModel], VehicleInfo[x][vehPosX], VehicleInfo[x][vehPosY], VehicleInfo[x][vehPosZ], VehicleInfo[x][vehRotation], VehicleInfo[x][vehColor1], VehicleInfo[x][vehColor2], 1800);
				vehRadio[VehicleInfo[x][vehCarID]] = 0;
			}
			if(VehicleInfo[x][vehGroup] == 0)
			{
				format(str,sizeof(str),"BLF %d",VehicleInfo[x][vehCarID]);
				SetVehicleNumberPlate(VehicleInfo[x][vehCarID],str);
			}
			else if(VehicleInfo[x][vehGroup] > 0)
			{
				if(VehicleInfo[x][vehGroup] > 9)
				{
					format(str,sizeof(str),"F%d %d",VehicleInfo[x][vehGroup],VehicleInfo[x][vehCarID]);
					SetVehicleNumberPlate(VehicleInfo[x][vehCarID],str);
				}
				else if(VehicleInfo[x][vehGroup] < 10)
				{
					format(str,sizeof(str),"F0%d %d",VehicleInfo[x][vehGroup],VehicleInfo[x][vehCarID]);
					SetVehicleNumberPlate(VehicleInfo[x][vehCarID],str);
				}
			}
			if(VehicleInfo[x][vehGroup] == 13)
			{
				if(VehicleInfo[x][vehModel] != 438)
				{
					new taxiobj = CreateObject(19308, 0.00000, 0.00000, 0.00000,0.00000, 0.00000, 0.00000);
					AttachObjectToVehicle(taxiobj, VehicleInfo[x][vehCarID], 0.000000, -0.249999, 0.949999, 0.000000, 0.000001, 90.449951);
				}
			}
			if(VehicleInfo[x][vehGroup] == 8 || VehicleInfo[x][vehGroup] == 2 || VehicleInfo[x][vehGroup] == 1)
			{
				if(VehicleInfo[x][vehModel] == 411)
				{
					object = CreateObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(object, VehicleInfo[x][vehCarID],  0.010000, -0.060000, 0.689999, 0.000000, 0.000000, 0.000000);
					new policecar = CreateObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
					SetObjectMaterialText(policecar, "POLICE", 0, OBJECT_MATERIAL_SIZE_256x128, "Arial", 40, 1, -16777216, 0, 1);
					AttachObjectToVehicle(policecar, VehicleInfo[x][vehCarID], 0.000000, -1.984998, 0.229999, -85.424964, 0.000000, 0.000000);
				}
			}
			found = 1;
		}
	}
	if(found == 0)
	{
		if(IsAnOwnableCar(carid))
		{
			foreach(new i : Player)
			{
				for(new v; v < MAX_PERSONAL_VEHICLES; v++)
				{
					if(PlayerInfo[i][pCarID][v] == carid)
					{
						new engine,lights,alarm,doors,bonnet,boot,objective;
						DestroyVehicle(PlayerInfo[i][pCarID][v]);
						PlayerInfo[i][pCarID][v] = CreateVehicle(PlayerInfo[i][pCarModel][v],PlayerInfo[i][pCarLocX][v],PlayerInfo[i][pCarLocY][v],PlayerInfo[i][pCarLocZ][v],PlayerInfo[i][pCarAngle][v],PlayerInfo[i][pCarColor1][v],PlayerInfo[i][pCarColor2][v],-1);
						SetVehicleNumberPlate(PlayerInfo[i][pCarID][v], CarPlate[i][v]);
						SetVehicleHealth(PlayerInfo[i][pCarID][v], PlayerInfo[i][pCarHP][v]);
						UpdateVehicleDamageStatus(PlayerInfo[i][pCarID][v], PlayerInfo[i][pCarDamage1][v], PlayerInfo[i][pCarDamage2][v], PlayerInfo[i][pCarDamage3][v], PlayerInfo[i][pCarDamage4][v]);
						Gas[PlayerInfo[i][pCarID][v]] = PlayerInfo[i][pCarGas][v];
						if(PlayerInfo[i][pCarLock][v] == 0)
						{
							GetVehicleParamsEx(PlayerInfo[i][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
							SetVehicleParamsEx(PlayerInfo[i][pCarID][v],VEHICLE_PARAMS_OFF,lights,alarm,0,bonnet,boot,objective);
						}
						else
						{
							GetVehicleParamsEx(PlayerInfo[i][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
							SetVehicleParamsEx(PlayerInfo[i][pCarID][v],VEHICLE_PARAMS_OFF,lights,alarm,1,bonnet,boot,objective);
						}
						for(new d; d < 17; d++)
						{
							if(CarMod[i][v][d] != 0) AddVehicleComponent(PlayerInfo[i][pCarID][v],CarMod[i][v][d]);
						}
						ChangeVehiclePaintjob(PlayerInfo[i][pCarID][v], PlayerInfo[i][pCarPaintJ][v]);
						vehEngine[PlayerInfo[i][pCarID][v]] = 0;
						vehRadio[PlayerInfo[i][pCarID][v]] = 0;
						SetVipText(i, v);
						AttachNeon(i, v);
					}
				}
			}
		}
		else
		{
			SetVehicleToRespawn(carid);
		}
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(TutTime[playerid] >= 1 || RegistrationStep[playerid] >= 1) return 0;
	assert(AntiFlood_Check(playerid));
    new string[256];
    if(PlayerInfo[playerid][pMuted] == 1)
    {
	    if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Nu poti scrie pe chat momentan(mute). Vei putea scrie pe chat peste %d secunde.",PlayerInfo[playerid][pMuteTime]);
		else format(string, sizeof(string), "You are now muted! You will be able to talk again in %d seconds.",PlayerInfo[playerid][pMuteTime]);
		SendClientMessage(playerid, COLOR_DARKPINK, string);
		return 0;
	}
    // -- ANTI SPAM -- //
    if(!strcmp(text, LastText[playerid]) && strlen(LastText[playerid]) > 0) return 0;
    strcpy(LastText[playerid], text, 128);
    if(LastTextTime[playerid] >= GetTickCount() && gPlayerLogged[playerid] == 1)
    {
    	TextCount[playerid]++;
    	if(TextCount[playerid] > 5)
    	{
    		PlayerInfo[playerid][pMuted] = 1;
			PlayerInfo[playerid][pMuteTime] += 10;
    		TextCount[playerid] = 0;
    		mysql_format(SQL,string,sizeof(string),"UPDATE users SET `Muted`='1',`MuteTime`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pMuteTime], PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,string,"","");
    		SendClientMessage(playerid, COLOR_DARKPINK, "You have been auto-muted for spamming. You will be unmuted in 10 seconds.");
    		return 0;
    	}
    }
    LastTextTime[playerid] = GetTickCount() + 1000*3;
    // -- ANTI SPAM -- //
	///----- CHAT LOGS -----///
	new var100[300],resulttt[300],result3[300],namename[30];
	GetPlayerName(playerid, namename, sizeof(namename));
	if(Mobile[playerid] != -1)
	{
		format(result3, sizeof(result3),"(cellphone) %s: %s", namename, text);
	}
	else
	{
		format(result3, sizeof(result3),"%s: %s", namename, text);
	}
	mysql_real_escape_string(result3, resulttt);
 	mysql_format(SQL, var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','chat')", PlayerInfo[playerid][pSQLID], resulttt);
	mysql_tquery(SQL,var100,"","");
	///----- CHAT LOGS -----///
    new word[30];
    new Cache: adv = mysql_query(SQL, "SELECT * FROM `adv`");
	for(new ix, jx = cache_get_row_count (); ix != jx; ++ix)
	{
		cache_get_field_content(ix, "word", word);
		if(strfind(text, word, true) != -1)
		{
			if(PlayerInfo[playerid][pAdmin] < 6)
			{
				new strrr[128],nameee[30];
				GetPlayerName(playerid, nameee, sizeof(nameee));
				format(strrr, sizeof(strrr), "%s (%d, level %d) may be server advertising (word found %s):", nameee, playerid, PlayerInfo[playerid][pLevel], word);
				ABroadCast(COLOR_RED2, strrr, 1);
				ABroadCast(COLOR_RED2, text, 1);
				SS(playerid, COLOR_LIGHTGREEN3, "Este interzis sa discuti despre alte servere sau sa faci reclama altor servere.", "You are not allowed to advertise other servers!");
				return 0;
			}
		}
	}
	cache_delete(adv);

	new sendername[MAX_PLAYER_NAME];
	new tmp[256];
	format(string, sizeof(string), "\"%s\"", text);
	SetPlayerChatBubble(playerid, text, COLOR_CHATBUBBLE, 10.0, 10000);
	if(TalkingLive[playerid] != 0)
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayerInfo[playerid][pLeader] == 9 || PlayerInfo[playerid][pMember] == 9)
		{
		    format(string, sizeof(string), "NR %s: %s", sendername, text);
			OOCNews(COLOR_LIGHTGREEN, string);
		}
		else
		{
		    format(string, sizeof(string), "LivePlayer %s: %s", sendername, text);
			OOCNews(COLOR_LIGHTGREEN, string);
		}
		return 0;
	}
	if(Mobile[playerid] != -1)
	{
		new idx;
		tmp = strtok(text, idx);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "(cellphone) %s: %s", sendername, text);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		if(Mobile[playerid] != -2 && Mobile[playerid] != -3 && Mobile[playerid] != -4)
		{
			if(IsPlayerConnected(Mobile[playerid]))
			{
			    if(Mobile[Mobile[playerid]] == playerid)
			    {
					if(PlayerInfo[Mobile[playerid]][pSpeaker] == 1)
					{
						ProxDetector(20.0, Mobile[playerid], string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					}
					else
					{
					    SendClientMessage(Mobile[playerid], COLOR_YELLOW,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_YELLOW,"Theres nobody there.");
			}
		}
		else
		{
			if(Mobile[playerid] == -2)
			{
				if(!strcmp(text, "LSPD", true) || !strcmp(text, "police", true))
				{
					Mobile[playerid] = -3;
					SendClientMessage(playerid, COLOR_WHITE, "(cellphone) 112: You have reached the Los Santos Police emergency hotline; can you describe the crime?");
				}
				else if(!strcmp(text, "LSFMD", true) || !strcmp(text, "medic", true) || !strcmp(text, "ambulance", true))
				{
					Mobile[playerid] = -4;
					SendClientMessage(playerid, COLOR_WHITE, "(cellphone) 112: This is the Los Santos Fire & Medic Department emergency hotline; describe the emergency, please.");
				}
				else return SendClientMessage(playerid, COLOR_WHITE, "(cellphone) 112: Sorry, I didn't quite understand that... speak again?");
			}
			else if(Mobile[playerid] == -3)
			{
				new location[MAX_ZONE_NAME], name[30], strings[128];
				GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
				GetPlayerName(playerid, name, sizeof(name));
				format(strings, sizeof(strings), "Dispatch: %s has reported: '%s' (10-20 %s)", name, text, location);
				SendTeamMessage(8, COLOR_LIGHTBLUE, strings);
				SendTeamMessage(3, COLOR_LIGHTBLUE, strings);
				SendTeamMessage(2, COLOR_LIGHTBLUE, strings);
				SendTeamMessage(1, COLOR_LIGHTBLUE, strings);
				SendClientMessage(playerid, COLOR_WHITE, "(cellphone) 112: Thank you for reporting this incident; a patrol unit is now on its way.");
				SendClientMessage(playerid, COLOR_WHITE, "Your call has been terminated by the other party.");
				RemovePlayerAttachedObject(playerid, 9);
				if(PlayerInfo[playerid][pPet] != 0 && PlayerInfo[playerid][pPetStatus] != 0) AttachPet(playerid);
				Mobile[playerid] = -1;
				CellTime[playerid] = 0;
				PlayerInfo[playerid][pSpeaker] = 0;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			}
			else if(Mobile[playerid] == -4)
			{
				new location[MAX_ZONE_NAME], name[30], strings[128];
				GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
				GetPlayerName(playerid, name, sizeof(name));
				format(strings, sizeof(strings), "Dispatch: %s has reported '%s' (10-20 %s)", name, text, location);
				SendTeamMessage(14, COLOR_ALLDEPT, strings);
				SendClientMessage(playerid, COLOR_WHITE, "(cellphone) 112: Thank you for reporting this incident; we are on our way.");
				SendClientMessage(playerid, COLOR_WHITE, "Your call has been terminated by the other party.");
				RemovePlayerAttachedObject(playerid, 9);
				if(PlayerInfo[playerid][pPet] != 0 && PlayerInfo[playerid][pPetStatus] != 0) AttachPet(playerid);
				Mobile[playerid] = -1;
				CellTime[playerid] = 0;
				PlayerInfo[playerid][pSpeaker] = 0;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			}
		}
		format(string, sizeof(string), "(cellphone) \"%s\"", text);
		SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
		return 0;
	}
	if(realchat)
	{
		if(gPlayerLogged[playerid] == 0)
		{
				return 0;
		}
		//GetPlayerName(playerid, sendername, sizeof(sendername));
		//format(string, sizeof(string), "%s: %s", sendername, text);
		//ProxDetector(20.0, playerid,string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);

		new szMessage[1000];
		new szPlayerName[32];
		GetPlayerName(playerid, szPlayerName, 32);
		if(PlayerInfo[playerid][pPaintBallG] > 0)
		{
			format(szMessage,sizeof(szMessage),"{BA3FC1}%s %s [%d kills]{FFFFFF}: %s",ShortPRankName[PlayerInfo[playerid][pPaintRank]],szPlayerName,PlayerInfo[playerid][pPaintBallKills],text);
			foreach(new idd : Player)
			{
				if(PlayerInfo[idd][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
				{
					SendSplitMessage(idd, COLOR_WHITE, szMessage);
				}
			}
		}
		if(PlayerInfo[playerid][pRaceG] > -1)
		{
			format(szMessage,sizeof(szMessage),"{BA3FC1}%s{FFFFFF}: %s",szPlayerName,text);
			foreach(new idd : Player)
			{
				if(PlayerInfo[idd][pRaceG] == PlayerInfo[playerid][pRaceG])
				{
					SendSplitMessage(idd, COLOR_WHITE, szMessage);
				}
			}
		}
		if(PlayerInfo[playerid][pPaintBallG] == 0 && PlayerInfo[playerid][pRaceG] == -1)
		{
			if(AdminDuty[playerid] > 0 && PlayerInfo[playerid][pAdmin] > 0)
			{
				format(szMessage, sizeof(szMessage), "(( Admin %s says: %s ))", szPlayerName, text);
				ProxDetector(100.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
			}
			else
			{
				format(szMessage, sizeof(szMessage), "%s",text);
				//MESSAGE SPLIT
				new len = strlen(szMessage),
					_iL = len / EX_SPLITLENGTHH;
				if( ( len % EX_SPLITLENGTHH ) ) _iL++;
				new _Line[EX_SPLITLENGTHH+5];
				new _:_i@Index;
				while( _i@Index < _iL )
				{
					if( _i@Index == 0 )
						strmid( _Line, szMessage, ( _i@Index * EX_SPLITLENGTHH ), ( _i@Index * EX_SPLITLENGTHH ) + EX_SPLITLENGTHH );
					else
						strmid( _Line, szMessage, ( _i@Index * EX_SPLITLENGTHH ), ( _i@Index * EX_SPLITLENGTHH ) + EX_SPLITLENGTHH );

					if( _iL > 1 )
					{
						if( _i@Index > 0 )
						{
							format( _Line, sizeof _Line, "... %s", _Line );
						}
					}
					ChatMessage(25.0, playerid, _Line);
					_i@Index++;
				}
			}
		}
		format(szMessage, sizeof(szMessage), "\"%s\"", text);
		SetPlayerChatBubble(playerid, szMessage, COLOR_CHATBUBBLE, 15.0, 10000);
		return 0;
	}
	return 1;
}

forward FixHour(hour);
public FixHour(hour)
{
	hour = timeshift+hour;
	if(hour < 0)
	{
		hour = hour+24;
	}
	else if(hour > 23)
	{
		hour = hour-24;
	}
	shifthour = hour;
	return 1;
}

function NightBot(playerid, reason[]) {
	if(PlayerInfo[playerid][pAdmin] > 0 || Spectate[playerid] != -1 || !IsPlayerConnected(playerid)) return 1;
	if(GetPVarInt(playerid, "Kicked") == 1) return 1;
	new string[180];
	format(string, sizeof(string), "AdmCmd: %s was kicked by AdmBot, reason: %s.", GetName(playerid), reason);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	KickEx(playerid);
	new var100[300];
	mysql_format(SQL, var100, sizeof(var100), "INSERT INTO kicklogs (`playerid`,`giverid`,`playername`,`givername`,`reason`) VALUES ('%d','-1','%s','AdmBot','%s')", PlayerInfo[playerid][pSQLID],GetName(playerid),reason);
	mysql_tquery(SQL,var100,"","");	
	SetPVarInt(playerid, "Kicked", 1);
	printf(string);
	return 1;
}

forward RobFunc(playerid);
public RobFunc(playerid)
{
	KillTimer(RobTimer[playerid]);
	BusinessRob[playerid] = 2;
	RobTime[playerid] = 0;
	new rand = random(sizeof(gRandomRob));
	SetPlayerCheckpoint(playerid, gRandomRob[rand][0],gRandomRob[rand][1],gRandomRob[rand][2], 4.0);
	SS(playerid, COLOR_ROB,"Mergi la checkpoint-ul de pe minimap pentru a ascunde banii furati.","Go to the minimap checkpoint for hide the stolen money.");
    return 1;
}

forward UnFreezeStation(playerid);
public UnFreezeStation(playerid)
{
    PlayerTextDrawHide(playerid, Bus1[playerid]);
    PlayerTextDrawHide(playerid, Bus2[playerid]);
	TogglePlayerControllable(playerid, 1);
	Slapped[playerid]=0;
	return 1;
}

forward Fisher(playerid);
public Fisher(playerid)
{
	FishTimer[playerid]--;
	switch(FishTimer[playerid]) {
		case 1: {
		    new string[MAX_STRING],sendername[30],money,string2[128];
			GetPlayerName(playerid, sendername, sizeof(sendername));
		    KillTimer(FishTimerr[playerid]);
		    Fishing[playerid] = 0;
		    FishTimer[playerid] = 0;
			ClearAnimations(playerid);
			ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
		 	TogglePlayerControllable(playerid, 1);
			RemovePlayerAttachedObject(playerid, 9);
			if(PlayerInfo[playerid][pPet] != 0 && PlayerInfo[playerid][pPetStatus] != 0) AttachPet(playerid);
		    if(TipPeste[playerid] == 1)
			{
				money = SvarInfo[8][svValue] + random(5000);
				if(PlayerInfo[playerid][pPet] != 0) money+=PlayerInfo[playerid][pPetLevel]*100;
				PlayerInfo[playerid][pFishPrice] = money;
			    SS(playerid, COLOR_DARKPINK, "Ai prins un peste obisnuit!", "You caught a common fish!");
			    format(string,sizeof(string),"Pestele prins de tine valoreaza $%s!", FormatNumber(money));
			    format(string2, sizeof(string2), "The value of the fish you caught is $%s!", FormatNumber(money));
			    SS(playerid, COLOR_DARKPINK, string, string2);
			    SS(playerid, COLOR_WHITE, "Pentru a vinde pestele, mergi la un magazin 24/7.", "To sell the fish, go to a 24/7 store.");
		     	format(string,sizeof(string),"* %s caught a common fish that can be sold for about $%s.", sendername, FormatNumber(money));
        		ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				PlayerInfo[playerid][pFishes] = 1;
			}
			else if(TipPeste[playerid] == 2)
			{
				money = SvarInfo[8][svValue] + 5000 + random(15000);
				if(PlayerInfo[playerid][pPet] != 0) money+=PlayerInfo[playerid][pPetLevel]*100;
				PlayerInfo[playerid][pFishPrice] = money;
			    SS(playerid, COLOR_BLUE, "Ai prins un peste rar!", "You caught a rare fish!");
			    format(string,sizeof(string),"Pestele prins de tine valoreaza $%s!", FormatNumber(money));
			    format(string2, sizeof(string2), "The value of the fish you caught is $%s!", FormatNumber(money));
			    SS(playerid, COLOR_DARKPINK, string, string2);
			    SS(playerid, COLOR_WHITE, "Pentru a vinde pestele, mergi la un magazin 24/7.", "To sell the fish, go to a 24/7 store.");
		     	format(string,sizeof(string),"* %s caught a rare fish that can be sold for about $%s.", sendername, FormatNumber(money));
        		ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				PlayerInfo[playerid][pFishes] = 1;
			}
			else if(TipPeste[playerid] == 3)
			{
				if(SvarInfo[2][svValue] == 0)
				{
					money = SvarInfo[8][svValue] + 20000 + random(20000);
					if(PlayerInfo[playerid][pPet] != 0) money+=PlayerInfo[playerid][pPetLevel]*100;
					PlayerInfo[playerid][pFishPrice] = money;
				    SS(playerid, COLOR_YELLOW, "Ai prins un peste foarte rar!", "You caught a very rare fish!");
				    format(string,sizeof(string),"Pestele prins de tine valoreaza $%s!", FormatNumber(money));
				    format(string2, sizeof(string2), "The value of the fish you caught is $%s!", FormatNumber(money));
			   		SS(playerid, COLOR_DARKPINK, string, string2);
				    SS(playerid, COLOR_WHITE, "Pentru a vinde pestele, mergi la un magazin 24/7.", "To sell the fish, go to a 24/7 store.");
			     	format(string,sizeof(string),"* %s caught a very rare fish that can be sold for about $%s.", sendername, FormatNumber(money));
	        		ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					PlayerInfo[playerid][pFishes] = 1;
				}
				else
				{
					new x = random(99);
					if(x >= 0 && x <= 49)
					{
						money = SvarInfo[8][svValue] + random(20000) + 22000;
						if(PlayerInfo[playerid][pPet] != 0) money+=PlayerInfo[playerid][pPetLevel]*100;
						PlayerInfo[playerid][pFishPrice] = money;
					    SS(playerid, COLOR_YELLOW, "Ai prins un peste foarte rar!", "You caught a very rare fish!");
					    format(string,sizeof(string),"Pestele prins de tine valoreaza $%s!", FormatNumber(money));
					    format(string2, sizeof(string2), "The value of the fish you caught is $%s!", FormatNumber(money));
			    		SS(playerid, COLOR_DARKPINK, string, string2);
					    SS(playerid, COLOR_WHITE, "Pentru a vinde pestele, mergi la un magazin 24/7.", "To sell the fish, go to a 24/7 store.");
				     	format(string,sizeof(string),"* %s caught a very rare fish that can be sold for about $%s.", sendername, FormatNumber(money));
		        		ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						PlayerInfo[playerid][pFishes] = 1;
					}
					else if(x >= 50)
					{
						money = SvarInfo[8][svValue] + random(20000) + 30000;
						if(PlayerInfo[playerid][pPet] != 0) money+=PlayerInfo[playerid][pPetLevel]*100;
						PlayerInfo[playerid][pFishPrice] = money;
						SS(playerid, COLOR_YELLOW, "Ai prins un peste special!", "You caught a special fish!");
						format(string,sizeof(string),"Pestele prins de tine valoreaza $%s!", FormatNumber(money));
					    format(string2, sizeof(string2), "The value of the fish you caught is $%s!", FormatNumber(money));
			    		SS(playerid, COLOR_DARKPINK, string, string2);
					    SS(playerid, COLOR_WHITE, "Pentru a vinde pestele, mergi la un magazin 24/7.", "To sell the fish, go to a 24/7 store.");
					    format(string,sizeof(string),"* %s caught a special fish that can be sold for about $%s.", sendername, FormatNumber(money));
		        		ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						PlayerInfo[playerid][pFishes] = 1;
					}
				}
			}
			TipPeste[playerid] = 0;
		}
	    case 2: {
		 	new randfish = random(99);
		 	if(PlayerInfo[playerid][pFishSkill] == 1)
		 	{
				if(randfish >= 0 && randfish <= 87) TipPeste[playerid] = 1;
				else if(randfish >= 88 && randfish <= 98) TipPeste[playerid] = 2;
				else if(randfish >= 99) TipPeste[playerid] = 3;
			}
			else if(PlayerInfo[playerid][pFishSkill] == 2)
		 	{
				if(randfish >= 0 && randfish <= 83) TipPeste[playerid] = 1;
				else if(randfish >= 84 && randfish <= 97) TipPeste[playerid] = 2;
				else if(randfish >= 98) TipPeste[playerid] = 3;
			}
			else if(PlayerInfo[playerid][pFishSkill] == 3)
		 	{
				if(randfish >= 0 && randfish <= 79) TipPeste[playerid] = 1;
				else if(randfish >= 80 && randfish <= 96) TipPeste[playerid] = 2;
				else if(randfish >= 97) TipPeste[playerid] = 3;
			}
			else if(PlayerInfo[playerid][pFishSkill] == 4)
		 	{
				if(randfish >= 0 && randfish <= 75) TipPeste[playerid] = 1;
				else if(randfish >= 76 && randfish <= 95) TipPeste[playerid] = 2;
				else if(randfish >= 96) TipPeste[playerid] = 3;
			}
			else if(PlayerInfo[playerid][pFishSkill] == 5)
		 	{
				if(randfish >= 0 && randfish <= 71) TipPeste[playerid] = 1;
				else if(randfish >= 72 && randfish <= 94) TipPeste[playerid] = 2;
				else if(randfish >= 95) TipPeste[playerid] = 3;
			}
			else if(PlayerInfo[playerid][pFishSkill] >= 6)
		 	{
				if(randfish >= 0 && randfish <= 67) TipPeste[playerid] = 1;
				else if(randfish >= 68 && randfish <= 93) TipPeste[playerid] = 2;
				else if(randfish >= 94) TipPeste[playerid] = 3;
			}
	    }
	    case 7: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~FISHING...", 4110, 5);
	    case 12: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~FISHING...", 4110, 5);
	    case 19: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~FISHING...", 4110, 5);
		case 26: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~FISHING...", 4110, 5);
		case 33: GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~FISHING...", 4110, 5);
	}
 	return 1;
}

forward Fisher2(playerid);
public Fisher2(playerid)
{
	Fishing[playerid] = 0;
	SendClientMessage(playerid,COLOR_WHITE,"{999999}Now you can fish again.");
	return 1;
}

forward TowAgain(playerid);
public TowAgain(playerid)
{
	TowAcc[playerid] = 0;
	SendClientMessage(playerid,COLOR_GREY,"Job reload time ended.");
	return 1;
}

forward lspdgateclose();
public lspdgateclose()
{
    MoveObject(gatelspd, 1592.67676, -1638.05225, 14.95110, 1.5, -1000.0, -1000.0, -1000.0);
    return 1;
}

forward lvpdgateclose();
public lvpdgateclose()
{
    MoveDynamicObject(gatelvpd, 2335.89282, 2444.87451, 7.29770, 1.5, -1000.0, -1000.0, -1000.0);
    return 1;
}

forward lvpdgateclose2();
public lvpdgateclose2()
{
    MoveDynamicObject(gatelvpd2, 2294.02222, 2503.16650, 4.70800, 1.5, -1000.0, -1000.0, -1000.0);
    return 1;
}

forward nggateclose();
public nggateclose()
{
    MoveDynamicObject(gateng, 135.2833, 1941.3331, 21.6932, 1.5, -1000.0, -1000.0, -1000.0);
    return 1;
}

forward lspdbarclose();
public lspdbarclose()
{
    MoveDynamicObject(lspdbar, 1544.7007, -1630.7527, 13.2983, 1.5,0.0000, 90.0200, 90.0000);
    return 1;
}

forward lvpdbarclose();
public lvpdbarclose()
{
    MoveDynamicObject(lvpdbar, 2238.22021, 2450.44312, 10.58781, 1.5,0.0000, 90.0200, 90.0000);
    return 1;
}
stock strvalEx( const string[] )
{
   if( strlen( string ) >= 50 ) return 0;
   return strval(string);
}

public OnVehicleDeath(vehicleid)
{
 	new engine,lights,alarm,doors,bonnet,boot,objective;
 	vehEngine[vehicleid] = 0;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
 	SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
    if(IsAnOwnableCar(vehicleid))
 	{
		foreach(new i : Player)
		{
			for(new v; v < MAX_PERSONAL_VEHICLES; v++)
			{
				if(PlayerInfo[i][pCarID][v] == vehicleid)
				{
					PlayerInfo[i][pCarHP][v] = 1000.0;
					PlayerInfo[i][pCarDamage1][v] = 0;
					PlayerInfo[i][pCarDamage2][v] = 0;
					PlayerInfo[i][pCarDamage3][v] = 0;
					PlayerInfo[i][pCarDamage4][v] = 0;
					UpdateVehicleDamageStatus(PlayerInfo[i][pCarID][v], PlayerInfo[i][pCarDamage1][v], PlayerInfo[i][pCarDamage2][v], PlayerInfo[i][pCarDamage3][v], PlayerInfo[i][pCarDamage4][v]);
					if(PlayerInfo[i][pCarIns][v] != 0)
					{
						PlayerInfo[i][pCarIns][v]--;
					}
					cUpdate(i, v, cInsurancecarx);
					cUpdate(i, v, cKMx);
					cUpdate(i, v, cHPx);
				}
			}
		}
 	}
 	if(Destroycar == 1)
 	{
		if(Carspawn[vehicleid] != 0)
		{
			DestroyVehicle(Carspawn[vehicleid]);
			Carspawn[vehicleid] = 0;
		}
	}
	StopAudioStreamForPlayersInCar(vehicleid);
 	return 1;
}

forward Float:GetDistance(playerid, Float:x, Float:y);
public Float:GetDistance(playerid, Float:x, Float:y)
{
	new Float:x2, Float:y2, Float:z2;
	GetPlayerPos(playerid, x2, y2, z2);
	x = x - x2;
	y = y - y2;
	return floatsqroot(x*x+y*y);
}

stock BanCheck(playerid)
{
	new playername[30],name[30],playerip[16],admin[30],reason[128],ip[16],permanent,string[256],qstr[612],time,date[6],banid;
	GetPlayerName(playerid, playername, sizeof(playername));
	GetPlayerIp(playerid, playerip, sizeof(playerip));
	format(qstr,sizeof(qstr),"SELECT * FROM bans WHERE `PlayerName`='%s' AND `Active`='1'",playername);
    new Cache: banuri = mysql_query(SQL,qstr);
    if(cache_get_row_count() > 0)
    {
        cache_get_field_content(0, "PlayerName", name, SQL, 30);
		cache_get_field_content(0, "AdminName", admin, SQL, 30);
		cache_get_field_content(0, "Reason", reason, SQL, 128);
    	cache_get_field_content(0, "IP", ip, SQL, 16);
    	permanent                    	= cache_get_field_content_int(0, "Permanent");
    	time                            = cache_get_field_content_int(0, "Time");
		banid							= cache_get_field_content_int(0, "ID");

		if(gettime() < time || permanent > 0)
		{
		    if(permanent > 0)
			{
				format(string,sizeof(string),"This account (%s) is banned!",playername);
				SendClientMessage(playerid, COLOR_RED, string);
				format(string,sizeof(string),"Banned by: %s, reason: %s.",admin,reason);
				SendClientMessage(playerid, COLOR_GENANNOUNCE, string);
				SendClientMessage(playerid, COLOR_GENANNOUNCE, "This is a permanent ban.");
				SS(playerid, COLOR_GENANNOUNCE, "Poti posta o cerere de unban pe (bluffs.ga/panel) daca consideri ca ai luat ban degeaba.","You can create a unban request on (bluffs.ga/panel) if you consider that ban is for nothing.");
				GameTextForPlayer(playerid, "Banned", 5000, 2);
				KickEx(playerid);
			}
			else
			{
				format(string,sizeof(string),"This account (%s) is banned!",playername);
				SendClientMessage(playerid, COLOR_RED, string);
				format(string,sizeof(string),"Banned by: %s, reason: %s.",admin,reason);
				SendClientMessage(playerid, COLOR_GENANNOUNCE, string);
				TimestampToDate(time,date[0],date[1],date[2],date[3],date[4],date[5],2);
				format(string,sizeof(string),"Ban will expire on %02d.%02d.%02d-%02d:%02d:%02d.",date[2],date[1],date[0],date[3],date[4],date[5]);
				SendClientMessage(playerid, COLOR_GENANNOUNCE, string);
				SS(playerid, COLOR_GENANNOUNCE, "Poti posta o cerere de unban pe (bluffs.ga/panel) daca consideri ca ai luat ban degeaba.","You can create a unban request on (bluffs.ga/panel) if you consider that ban is for nothing.");
				GameTextForPlayer(playerid, "Banned", 5000, 2);
				KickEx(playerid);
			}
		}
		else
		{
			new str2[128];
			mysql_format(SQL, str2, sizeof(str2), "UPDATE bans SET `Active`='0' WHERE `ID`='%d'",banid);
			mysql_tquery(SQL,str2,"","");
			IPBanCheck(playerid);
		}
	}
	else
	{
		IPBanCheck(playerid);
	}
	cache_delete(banuri);
	return 1;
}

stock IPBanCheck(playerid)
{
	new name[30],playerip[16],admin[30],reason[128],ip[16],permanent,string[256],qstr[612],ipban,time,date[6],banid;
	GetPlayerIp(playerid, playerip, sizeof(playerip));
	format(qstr,sizeof(qstr),"SELECT * FROM bans WHERE `IP`='%s' AND `Active`='1'",playerip);
    new Cache: banuri = mysql_query(SQL,qstr);
    if(cache_get_row_count() > 0)
    {
        cache_get_field_content(0, "PlayerName", name, SQL, 30);
		cache_get_field_content(0, "AdminName", admin, SQL, 30);
		cache_get_field_content(0, "Reason", reason, SQL, 128);
    	cache_get_field_content(0, "IP", ip, SQL, 16);
    	permanent                    	= cache_get_field_content_int(0, "Permanent");
    	ipban                           = cache_get_field_content_int(0, "IPBan");
    	time                          	= cache_get_field_content_int(0, "Time");
		banid							= cache_get_field_content_int(0, "ID");

		if(ipban == 1)
		{
			if(gettime() < time || permanent > 0)
			{
			    if(permanent > 0)
				{
		    		format(string,sizeof(string),"This IP (%s) is banned!",playerip);
		    		SendClientMessage(playerid, COLOR_RED, string);
		    		format(string,sizeof(string),"Banned by: %s, reason: %s.",admin,reason);
		    		SendClientMessage(playerid, COLOR_GENANNOUNCE, string);
		    		SendClientMessage(playerid, COLOR_GENANNOUNCE, "This is a permanent ban.");
		    		SS(playerid, COLOR_GENANNOUNCE, "Poti posta o cerere de unban pe (bluffs.ga/panel) daca consideri ca ai luat ban degeaba.","You can create a unban request on (bluffs.ga/panel) if you consider that ban is for nothing.");
            		GameTextForPlayer(playerid, "Banned", 5000, 2);
					KickEx(playerid);
				}
				else
				{
		    		format(string,sizeof(string),"This IP (%s) is banned!",playerip);
		    		SendClientMessage(playerid, COLOR_RED, string);
		    		format(string,sizeof(string),"Banned by: %s, reason: %s.",admin,reason);
		    		SendClientMessage(playerid, COLOR_GENANNOUNCE, string);
					TimestampToDate(time,date[0],date[1],date[2],date[3],date[4],date[5],2);
	   				format(string,sizeof(string),"Ban will expire on %02d.%02d.%02d-%02d:%02d:%02d.",date[2],date[1],date[0],date[3],date[4],date[5]);
	   				SendClientMessage(playerid, COLOR_GENANNOUNCE, string);
   					SS(playerid, COLOR_GENANNOUNCE, "Poti posta o cerere de unban pe (bluffs.ga/panel) daca consideri ca ai luat ban degeaba.","You can create a unban request on (bluffs.ga/panel) if you consider that ban is for nothing.");
            		GameTextForPlayer(playerid, "Banned", 5000, 2);
					KickEx(playerid);
				}
			}
			else
			{
		    	new str2[128];
		    	mysql_format(SQL, str2, sizeof(str2), "UPDATE bans SET `Active`='0' WHERE `ID`='%d'",banid);
      			mysql_tquery(SQL,str2,"","");
      			// PLAYER LOGIN
				new pnamee[25];
				GetPlayerName(playerid, pnamee, sizeof(pnamee));
				format(qstr,sizeof(qstr),"SELECT * FROM users WHERE `name`='%s'",pnamee);
				new Cache: abcd = mysql_query(SQL,qstr);
				if(cache_get_row_count() > 0)
				{
					gPlayerAccount[playerid] = 1;
				}
				else
				{
					gPlayerAccount[playerid] = 0;
				}
				cache_delete(abcd);
			}
		}
		else
		{
   			// PLAYER LOGIN
			new pnamee[25];
			GetPlayerName(playerid, pnamee, sizeof(pnamee));
			format(qstr,sizeof(qstr),"SELECT * FROM users WHERE `name`='%s'",pnamee);
			new Cache: abcd = mysql_query(SQL,qstr);
			if(cache_get_row_count() > 0)
			{
				gPlayerAccount[playerid] = 1;
			}
			else
			{
				gPlayerAccount[playerid] = 0;
			}
			cache_delete(abcd);
		}
	}
	else
	{
		// PLAYER LOGIN
		new pnamee[25];
		GetPlayerName(playerid, pnamee, sizeof(pnamee));
		format(qstr,sizeof(qstr),"SELECT * FROM users WHERE `name`='%s'",pnamee);
		new Cache: abcd = mysql_query(SQL,qstr);
		if(cache_get_row_count() > 0)
		{
			gPlayerAccount[playerid] = 1;
		}
		else
		{
			gPlayerAccount[playerid] = 0;
		}
		cache_delete(abcd);
	}
	cache_delete(banuri);
	return 1;
}

stock strtok2(const string[], &idx)
{
    new length = strlen(string);
	while ((idx < length) && (string[idx] <= ' '))
	{
		idx++;
	}
	new offset = idx;
	new result[128];
	while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	{
		result[idx - offset] = string[idx];
		idx++;
	}
	result[idx - offset] = EOS;
	return result;
}

// OnDialogResponse
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
	new sendername[30];
	new string[300];
	if(strfind(inputtext, "%", true) != -1)
	{
		SendClientMessage(playerid, COLOR_GENANNOUNCE, "SERVER: Invalid dialog input. You can't use %%.");
		ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Invalid dialog input", "Invalid dialog input", "OK", "Exit");
		return 1;
	}
	if(dialogid == DIALOG_CHOOSECLANNAME)
	{
	    if(response)
	    {
			if(strlen(inputtext) >= 3 && strlen(inputtext) <= 20)
			{
				new clanname[25],strings[128];
				mysql_real_escape_string(inputtext, clanname);
				strcpy(ClanInfo[PlayerInfo[playerid][pClan]][cClanName], clanname, sizeof(clanname));
				mysql_format(SQL, string, sizeof(string), "UPDATE clans SET `clanName`='%s' WHERE `clanID`='%d'", clanname, PlayerInfo[playerid][pClan]);
				mysql_tquery(SQL,string,"","");
				format(strings, sizeof(strings), "Clan name: %s.", clanname);
				SendClientMessage(playerid, COLOR_GENANNOUNCE, strings);
				ShowPlayerDialog(playerid, DIALOG_CHOOSECLANTAG, DIALOG_STYLE_INPUT, "Clan tag", "Insert clan tag in the box below:\n(You can't change it after that!)", "Ok", "");
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_CHOOSECLANNAME, DIALOG_STYLE_INPUT, "Clan name", "Insert clan name in the box below:\nMinimum 3 characters and maximum 20 characters.\n(You can't change it after that!)", "Ok", "");
				return 1;
			}
		}
	}
	if(dialogid == DIALOG_CHOOSECLANTAG)
	{
	    if(response)
	    {
			if(strlen(inputtext) >= 2 && strlen(inputtext) <= 15)
			{
				new clanname[25],strings[256];
				mysql_real_escape_string(inputtext, clanname);
				strcpy(ClanInfo[PlayerInfo[playerid][pClan]][cClanTag], clanname, sizeof(clanname));
				mysql_format(SQL, strings, sizeof(strings), "UPDATE clans SET `clanTag`='%s' WHERE `clanID`='%d'", clanname, PlayerInfo[playerid][pClan]);
				mysql_tquery(SQL,strings,"","");
				format(strings, sizeof(strings), "Clan tag: %s.", clanname);
				SendClientMessage(playerid, COLOR_GENANNOUNCE, strings);
				mysql_tquery(SQL, "SELECT * FROM `clans`", "LoadClanInfo", "");
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_CHOOSECLANTAG, DIALOG_STYLE_INPUT, "Clan tag", "Insert clan tag in the box below:\nMinimum 2 characters and maximum 15 characters.\n(You can't change it after that!)", "Ok", "");
				return 1;
			}
		}
	}
	if(dialogid == 6267)
	{
	    if(response)
		{
		    switch(listitem)
		    {
		        case 0:
		        {
		            PlayerInfo[playerid][pColors] = 0;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{CECECE}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
		        case 1:
		        {
		            PlayerInfo[playerid][pColors] = 1;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{4169E1}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
		        case 2:
		        {
		            PlayerInfo[playerid][pColors] = 2;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{662BBE}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 3:
		        {
		            PlayerInfo[playerid][pColors] = 3;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{FFE600}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 4:
		        {
		            PlayerInfo[playerid][pColors] = 4;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{FF00FF}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
		        case 5:
		        {
		            PlayerInfo[playerid][pColors] = 5;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{3FFF3F}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
		        case 6:
		        {
		            PlayerInfo[playerid][pColors] = 6;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{83D553}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 7:
		        {
		            PlayerInfo[playerid][pColors] = 7;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{187700}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 8:
		        {
		            PlayerInfo[playerid][pColors] = 8;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{FF9A00}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
		        case 9:
		        {
		            PlayerInfo[playerid][pColors] = 9;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{222222}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 10:
		        {
		            PlayerInfo[playerid][pColors] = 10;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{FF2C9D}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 11:
		        {
		            PlayerInfo[playerid][pColors] = 11;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{F4FA58}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 12:
		        {
		            PlayerInfo[playerid][pColors] = 12;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{00BFFF}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 13:
		        {
		            PlayerInfo[playerid][pColors] = 13;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{819FF7}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 14:
		        {
		            PlayerInfo[playerid][pColors] = 14;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{FE9A2E}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 15:
		        {
		            PlayerInfo[playerid][pColors] = 15;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{FA8258}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 16:
		        {
		            PlayerInfo[playerid][pColors] = 16;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{00FF40}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 17:
		        {
		            PlayerInfo[playerid][pColors] = 17;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{D358F7}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 18:
		        {
		            PlayerInfo[playerid][pColors] = 18;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{4169E1}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 19:
		        {
		            PlayerInfo[playerid][pColors] = 19;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{9ACD32}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 20:
		        {
		            PlayerInfo[playerid][pColors] = 20;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{F0E68C}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 21:
		        {
		            PlayerInfo[playerid][pColors] = 21;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{BDB76B}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 22:
		        {
		            PlayerInfo[playerid][pColors] = 22;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{FF1493}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 23:
		        {
		            PlayerInfo[playerid][pColors] = 23;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{9966CC}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 24:
		        {
		            PlayerInfo[playerid][pColors] = 24;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{F0B2B2}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
				case 25:
		        {
		            PlayerInfo[playerid][pColors] = 25;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{DB7093}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
		        }
		    }
		}
	}
	if(dialogid == 6268)
	{
		if(response)
		{
			switch(listitem)
		    {
		        case 0:
		        {
					PlayerInfo[playerid][pColors] = 0;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{CECECE}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
				}
				case 1:
		        {
					PlayerInfo[playerid][pColors] = 26;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{E70031}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
				}
				case 2:
		        {
					PlayerInfo[playerid][pColors] = 27;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{AB0000}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
				}
				case 3:
		        {
					PlayerInfo[playerid][pColors] = 28;
					Update(playerid, pColorsx);
		            SendClientMessage(playerid, COLOR_WHITE,"{FF6347}Server:{FFFFFF} Nick color changed! Hope you like the new color!");
				}
			}
		}
	}
	if(dialogid == 5551)
	{
		if(!response) return 1;

		if(strval(inputtext) < 1000 || strval(inputtext) > 500000) return SS(playerid,COLOR_ERROR,"(Error){FFFFFF} Poti paria intre 1.000$ si 500.000$","(Error){FFFFFF} You can bet minimum 1.000$ and maximum 500.000$.");//red
		if(betsumma[playerid] != 0) return NightBot(playerid, "Cheats (dialog spammer)");
		if(GetPlayerMoney(playerid) < strval(inputtext)) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
		betsumma[playerid] = strval(inputtext),GivePlayerCash(playerid,-betsumma[playerid]),totalbet[0] ++,totalsumma[0] +=betsumma[playerid];
		format(string,sizeof(string),"%s a pariat suma de $%s pe RED (WIN 2x)",GetName(playerid), FormatNumber(betsumma[playerid]));
		SendCasino(0xFF0000FF, string);
		zmidialog[playerid] = 1;
		format(string, sizeof(string), "%d bets~n~$%s", totalbet[0],FormatNumber(totalsumma[0]));
		TextDrawSetString(CasinoDraw[16], string);
		betplayer[playerid] = 14,TotalBet++,zmidialog[playerid] = 0;
		update_ruleta(playerid);
		return true;
	}
	if(dialogid == 5552) {
		if(!response) return 1;

		if(strval(inputtext) < 1000 || strval(inputtext) > 500000) return SS(playerid,COLOR_ERROR,"(Error){FFFFFF} Poti paria intre 1.000$ si 500.000$","(Error){FFFFFF} You can bet minimum 1.000$ and maximum 500.000$.");//green
		if(betsumma[playerid] != 0) return NightBot(playerid, "Cheats (dialog spammer) #2");
		if(GetPlayerMoney(playerid) < strval(inputtext)) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
		betsumma[playerid] = strval(inputtext),GivePlayerCash(playerid,-betsumma[playerid]),totalbet[1] ++,totalsumma[1] +=betsumma[playerid];

		format(string,sizeof(string),"%s a pariat suma de $%s pe GREEN (WIN 14x)",GetName(playerid), FormatNumber(betsumma[playerid]));
		SendCasino(0x009900FF, string);
		zmidialog[playerid] = 1;
		format(string, sizeof(string), "%d bets~n~$%s", totalbet[1],FormatNumber(totalsumma[1]));
		TextDrawSetString(CasinoDraw[17], string);
		betplayer[playerid] = 4,TotalBet++,zmidialog[playerid] = 0;
		update_ruleta(playerid);
		return true;
	}
	if(dialogid == 5553) {
		if(!response) return 1;

		if(strval(inputtext) < 1000 || strval(inputtext) > 500000) return SS(playerid,COLOR_ERROR,"(Error){FFFFFF} Poti paria intre 1.000$ si 500.000$","(Error){FFFFFF} You can bet minimum 1.000$ and maximum 500.000$.");//black
		if(betsumma[playerid] != 0) return NightBot(playerid, "Cheats (dialog spammer #3");
		if(GetPlayerMoney(playerid) < strval(inputtext)) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
		betsumma[playerid] = strval(inputtext),GivePlayerCash(playerid,-betsumma[playerid]),totalbet[2] ++,totalsumma[2] +=betsumma[playerid];
		format(string,sizeof(string),"%s a pariat suma de $%s pe BLACK (WIN 2x)",GetName(playerid), FormatNumber(betsumma[playerid]));
		SendCasino(0x4A4A4AFF, string);
		zmidialog[playerid] = 1;
		format(string, sizeof(string), "%d bets~n~$%s", totalbet[2],FormatNumber(totalsumma[2]));
		TextDrawSetString(CasinoDraw[18], string);
		betplayer[playerid] = 10,TotalBet++,zmidialog[playerid] = 0;
		update_ruleta(playerid);
		return true;
	}
	if(dialogid == DIALOG_VEHSPAWN)
	{
		if(response)
		{
			new vehicles;
			for(new v; v < PlayerInfo[playerid][pCarSlots]; v++)
			{
				if(PlayerInfo[playerid][pCar][v] != -1) vehicles++;
			}
			if(listitem < PlayerInfo[playerid][pCarSlots])
			{
				if(PlayerInfo[playerid][pCar][listitem] != -1)
				{
					new titlestring[128],s=listitem;
					format(titlestring,sizeof(titlestring),"Manage your %s (%d)",aVehicleNames[PlayerInfo[playerid][pCarModel][s] - 400],PlayerInfo[playerid][pCar][s]);
					SelectedCar[playerid] = s;
					ShowPlayerDialog(playerid,DIALOG_VEHSPAWNCAR,DIALOG_STYLE_LIST,titlestring,"{FFFFFF}Vehicle Info\nTow Vehicle (/park)\nTow Vehicle (last known location)\nFind Vehicle\nBuy Insurance\nUnstuck Vehicle\nVehicle upgrades","Select","Close");
				}
			}
			if(listitem == vehicles)
			{
				for(new id; id < PlayerInfo[playerid][pCarSlots]; id++)
				{
					if(PlayerInfo[playerid][pCar][id] != -1)
					{
						new i = id,engine,lights,alarm,doors,bonnet,boot,objective;
						if(PlayerInfo[playerid][pCarID][i] == 0) 
						{
							LoadCar(playerid);
							PlayerInfo[playerid][pCarID][i] = CreateVehicle(PlayerInfo[playerid][pCarModel][i],PlayerInfo[playerid][pCarLocX][i],PlayerInfo[playerid][pCarLocY][i],PlayerInfo[playerid][pCarLocZ][i],PlayerInfo[playerid][pCarAngle][i],PlayerInfo[playerid][pCarColor1][i],PlayerInfo[playerid][pCarColor2][i],-1);
							SetVehicleNumberPlate(PlayerInfo[playerid][pCarID][i], CarPlate[playerid][i]);
							vehRadio[PlayerInfo[playerid][pCarID][i]] = 0;
							if(PlayerInfo[playerid][pCarHP][i] <=300) { 
								SetVehicleHealth(PlayerInfo[playerid][pCarID][i], 1000); 
								UpdateVehicleDamageStatus(PlayerInfo[playerid][pCarID][i], 0, 0, 0, 0);
							}
							else 
							{
								SetVehicleHealth(PlayerInfo[playerid][pCarID][i], PlayerInfo[playerid][pCarHP][i]);
								UpdateVehicleDamageStatus(PlayerInfo[playerid][pCarID][i], PlayerInfo[playerid][pCarDamage1][i], PlayerInfo[playerid][pCarDamage2][i], PlayerInfo[playerid][pCarDamage3][i], PlayerInfo[playerid][pCarDamage4][i]);
							}
							Gas[PlayerInfo[playerid][pCarID][i]] = PlayerInfo[playerid][pCarGas][i];
							if(PlayerInfo[playerid][pCarLock][i] == 0)
							{
								GetVehicleParamsEx(PlayerInfo[playerid][pCarID][i],engine,lights,alarm,doors,bonnet,boot,objective);
						    	SetVehicleParamsEx(PlayerInfo[playerid][pCarID][i],VEHICLE_PARAMS_OFF,lights,alarm,0,bonnet,boot,objective);
							}
							else
							{
								GetVehicleParamsEx(PlayerInfo[playerid][pCarID][i],engine,lights,alarm,doors,bonnet,boot,objective);
						    	SetVehicleParamsEx(PlayerInfo[playerid][pCarID][i],VEHICLE_PARAMS_OFF,lights,alarm,1,bonnet,boot,objective);
							}
							for(new d; d < 17; d++)
							{
								if(CarMod[playerid][i][d] != 0) AddVehicleComponent(PlayerInfo[playerid][pCarID][i],CarMod[playerid][i][d]);
							}
							ChangeVehiclePaintjob(PlayerInfo[playerid][pCarID][i], PlayerInfo[playerid][pCarPaintJ][i]);
							vehEngine[PlayerInfo[playerid][pCarID][i]] = 0;
							SetVipText(playerid, i);
							AttachNeon(playerid, i);
						}
					}
				}
				GivePlayerCash(playerid, -15000);
				SendClientMessage(playerid, COLOR_JOB, "(Vehicle spawn) {FFFFFF}You paid $15.000 for spawn all your vehicles.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_ACCS) 
	{
		if(!response) return exit_accs(playerid), attach_objects(playerid);
		attach_objects(playerid);
		select_type(playerid, listitem);
	}
	if(dialogid == DIALOG_BUY_ACCS) {
		if(!response) return 1;
		new id = ObjectSlot[playerid][ObjectID[playerid]],str2[256];
		if(attachInfo[playerid][aModel][ObjectType[playerid]] != 0) SendClientMessage(playerid, COLOR_GREY, "The previous accesory lost.");
		switch(listitem) {
			case 0: {
				if(objectInfo[id][objPremium] != 0) {
					if(PlayerInfo[playerid][pPremiumPoints] < objectInfo[id][objPremium]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough premium points!");
					PlayerInfo[playerid][pPremiumPoints] -= objectInfo[id][objPremium];
					Update(playerid, pPremiumPointsx);	
					format(string, sizeof(string), "You bought accesory %d for %d premium points.", objectInfo[id][objModel], objectInfo[id][objPremium]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
				}
				else 
				{
					if(GetPlayerCash(playerid) < objectInfo[id][objMoney]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money!");
					GivePlayerCash(playerid, -objectInfo[id][objMoney]);
					format(string, sizeof(string), "You bought accesory %d for %s$.", objectInfo[id][objModel], FormatNumber(objectInfo[id][objMoney]));
					SendClientMessage(playerid, COLOR_YELLOW, string);
				}
			}
			case 1: {
				if(GetPlayerCash(playerid) < objectInfo[id][objMoney]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money!");
				GivePlayerCash(playerid, -objectInfo[id][objMoney]);
				format(string, sizeof(string), "You bought accesory %d for %s$.", objectInfo[id][objModel], FormatNumber(objectInfo[id][objMoney]));
				SendClientMessage(playerid, COLOR_YELLOW, string);
			}				
		}
		mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],string);
		mysql_tquery(SQL,str2,"","");
		buy_accs(playerid);	
	}
	if(dialogid == DIALOG_EDITACCS) {
		if(!response) return 1;
		//if(listitem == 8) return reset_player_accs(playerid), SendClientMessage(playerid, 0xFFADADFF, "Accesories deleted!");
		if(attachInfo[playerid][aModel][listitem] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Accesory slot is empty!");
		ShowPlayerDialog(playerid, DIALOG_EDITACCS+1, DIALOG_STYLE_MSGBOX, "Edit accesory", "What you want to modifiy?", "Position", "Status");
		SetPVarInt(playerid, "listitem", listitem);
		ObjectType[playerid] = listitem;
	}

	if(dialogid == DIALOG_EDITACCS+1) {
		listitem = GetPVarInt(playerid, "listitem");
		if(attachInfo[playerid][aModel][listitem] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Accesory slot is empty!");
		if(response) EditAttachedObject(playerid, listitem);
		else 
		{
			if(attachInfo[playerid][aStatus][listitem] == 0) {
				attachInfo[playerid][aStatus][listitem]	= 1;
				RemovePlayerAttachedObject(playerid, listitem);
				SendClientMessage(playerid, 0xFFADADFF, "Accesory dezactivated!");
			}	
			else 
			{
				attachInfo[playerid][aStatus][listitem]	= 0;
				attach_objects(playerid);
				SendClientMessage(playerid, 0xFFADADFF, "Accesory activated!");
			}
			save_player_accs(playerid, SAVE_STATUS);	
		}	
	}
	if(dialogid == DIALOG_VUPGRADES)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(PlayerInfo[playerid][pPremiumPoints] <= 19) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				ShowPlayerDialog(playerid, DIALOG_BUYCLEARKM2, DIALOG_STYLE_MSGBOX, "Clear KM & Days", "Do you want to pay 20 premium points to clear your car km and days?","Yes","No");
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pPremiumPoints] <= 99) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points.\nNu ai suficiente puncte premium.", "Ok", "");
				new idcar = SelectedCar[playerid];
				if(PlayerInfo[playerid][pCarVIP][idcar] == 1) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Acest vehicul este deja VIP.", "(Error){FFFFFF} This vehicle is already VIP.");
				if(PlayerInfo[playerid][pCarModel][idcar] == 481 || PlayerInfo[playerid][pCarModel][idcar] == 509 || PlayerInfo[playerid][pCarModel][idcar] == 510) 
					return SS(playerid, COLOR_LIGHTGREEN3, "Acest vehicul nu poate fi upgradat.", "This vehicle cannot be upgraded.");
				ShowPlayerDialog(playerid, DIALOG_BUYVIPCAR, DIALOG_STYLE_MSGBOX, "VIP Vehicle", "Do you want to pay 100 premium points to make this vehicle VIP?","Yes","No");
			}
			if(listitem == 2)
			{
				//new idcar = SelectedCar[playerid];
				//if(PlayerInfo[playerid][pCarModel][idcar] != 411 && PlayerInfo[playerid][pCarModel][idcar] != 541 && PlayerInfo[playerid][pCarModel][idcar] != 560 && PlayerInfo[playerid][pCarModel][idcar] != 451 && PlayerInfo[playerid][pCarModel][idcar] != 480 && PlayerInfo[playerid][pCarModel][idcar] != 562) 
				//return SS(playerid, COLOR_LIGHTGREEN3, "Momentan doar vehiculele Infernus, Turismo, Bullet, Sultan, Comet si Elegy pot fi upgradate.", "This option can only be used for Infernus, Turismo, Bullet, Sultan, Comet and Elegy vehicles.");
				new iString[256];
				format(iString, sizeof(iString), "Neon\tAvailable\n{E02121}Red\t%d\n{28E128}Green\t%d\n{DCE617}Yellow\t%d\n{E617CA}Pink\t%d\n{1E5EE0}Blue\t%d",PlayerInfo[playerid][pNeonR],PlayerInfo[playerid][pNeonV]
					,PlayerInfo[playerid][pNeonG],PlayerInfo[playerid][pNeonRZ],PlayerInfo[playerid][pNeonA]);
				ShowPlayerDialog(playerid, DIALOG_NEONS, DIALOG_STYLE_TABLIST_HEADERS, "Available neons", iString, "Add", "Cancel");
			}
			if(listitem == 3)
			{
				new idcar = SelectedCar[playerid];
				if(PlayerInfo[playerid][pCarNeon][idcar] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a neon on this car.");
				ShowPlayerDialog(playerid, DIALOG_REMOVENEON, DIALOG_STYLE_MSGBOX, "Neon remove", "Do you want to remove currently neon from this car?\nThe action is irreversible.","Yes","No");
			}
			if(listitem == 4)
			{
				new idcar = SelectedCar[playerid];
				if(PlayerInfo[playerid][pCarGasMax][idcar] == 500) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Max fuel capacity achieved (500L).");
				if(PlayerInfo[playerid][pPremiumPoints] < 25) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points.\nNu ai suficiente puncte premium.", "Ok", "");
				ShowPlayerDialog(playerid, DIALOG_VGASUP, DIALOG_STYLE_MSGBOX, "Fuel Capacity", "Do you want to add 50L to fuel capacity?\nThe action is irreversible.","Yes","No");
			}
			if(listitem == 5)
			{
				new idcar = SelectedCar[playerid];
				new actualstage = PlayerInfo[playerid][pCarStage][idcar];
				if(actualstage == 3) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have already max stage 3/3.");
				if(PlayerInfo[playerid][pPremiumPoints] < (actualstage+1)*100) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points.\nNu ai suficiente puncte premium.", "Ok", "");
				format(string, sizeof string, "Do you want to increase your stage from %d to %d. You will pay %d premium points to do that.", actualstage, actualstage+1, (actualstage+1)*100);
				ShowPlayerDialog(playerid, DIALOG_UPSTAGE, DIALOG_STYLE_MSGBOX, "Stage Upgrade", string,"Pay","Cancel");
			}
		}
	}
	if(dialogid == DIALOG_VEHSPAWNCAR)
	{
		if(response)
		{
			if(listitem == 0)
			{
				new i = SelectedCar[playerid],strings[256];
				new speed = MySQLCheckSpeed(PlayerInfo[playerid][pCarModel][i]);
				if(PlayerInfo[playerid][pCarBlock][i] > 0) format(strings,sizeof(strings),"Vehicle Model: %d\nDistance Traveled: %.0f KM\nVehicle Age: %d days\nInsurance Price: $%s\nInsurance Points: %d\nTop speed: %d km/h\nBlocked for: %d hours",PlayerInfo[playerid][pCarModel][i],PlayerInfo[playerid][pCarKM][i],GetDaysFromTimestamp(PlayerInfo[playerid][pCarBuyTime][i]),FormatNumber(PlayerInfo[playerid][pCarInsPrice][i]),PlayerInfo[playerid][pCarIns][i],speed,PlayerInfo[playerid][pCarBlock][i]);
				else format(strings,sizeof(strings),"Vehicle Model: %d\nDistance Traveled: %.0f KM\nVehicle Age: %d days\nInsurance Price: $%s\nInsurance Points: %d\nTop speed: %d km/h",PlayerInfo[playerid][pCarModel][i],PlayerInfo[playerid][pCarKM][i],GetDaysFromTimestamp(PlayerInfo[playerid][pCarBuyTime][i]),FormatNumber(PlayerInfo[playerid][pCarInsPrice][i]),PlayerInfo[playerid][pCarIns][i],speed);
				ShowPlayerDialog(playerid,DIALOG_VEHINFO,DIALOG_STYLE_MSGBOX,"Vehicle Info",strings,"Close","");
			}
			if(listitem == 1)
			{
				new i = SelectedCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective;
				if(IsTrailerAttachedToVehicle(PlayerInfo[playerid][pCarID][i])) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} On a mission right now, can't use this command.");
				if(!CarTow(PlayerInfo[playerid][pCarID][i]) && PlayerInfo[playerid][pCarID][i] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} The car is in use and it can't be towed.");
				if(PlayerInfo[playerid][pCarID][i] != 0) DestroyVehicle(PlayerInfo[playerid][pCarID][i]);
				LoadCar(playerid);
				PlayerInfo[playerid][pCarID][i] = CreateVehicle(PlayerInfo[playerid][pCarModel][i],PlayerInfo[playerid][pCarLocX][i],PlayerInfo[playerid][pCarLocY][i],PlayerInfo[playerid][pCarLocZ][i],PlayerInfo[playerid][pCarAngle][i],PlayerInfo[playerid][pCarColor1][i],PlayerInfo[playerid][pCarColor2][i],-1);
				SetVehicleNumberPlate(PlayerInfo[playerid][pCarID][i], CarPlate[playerid][i]);
				vehRadio[PlayerInfo[playerid][pCarID][i]] = 0;
				if(PlayerInfo[playerid][pCarHP][i] <=300) { 
					SetVehicleHealth(PlayerInfo[playerid][pCarID][i], 1000); 
					UpdateVehicleDamageStatus(PlayerInfo[playerid][pCarID][i], 0, 0, 0, 0);
				}
				else 
				{
					SetVehicleHealth(PlayerInfo[playerid][pCarID][i], PlayerInfo[playerid][pCarHP][i]);
					UpdateVehicleDamageStatus(PlayerInfo[playerid][pCarID][i], PlayerInfo[playerid][pCarDamage1][i], PlayerInfo[playerid][pCarDamage2][i], PlayerInfo[playerid][pCarDamage3][i], PlayerInfo[playerid][pCarDamage4][i]);
				}
				Gas[PlayerInfo[playerid][pCarID][i]] = PlayerInfo[playerid][pCarGas][i];
				if(PlayerInfo[playerid][pCarLock][i] == 0)
				{
					GetVehicleParamsEx(PlayerInfo[playerid][pCarID][i],engine,lights,alarm,doors,bonnet,boot,objective);
			    	SetVehicleParamsEx(PlayerInfo[playerid][pCarID][i],VEHICLE_PARAMS_OFF,lights,alarm,0,bonnet,boot,objective);
				}
				else
				{
					GetVehicleParamsEx(PlayerInfo[playerid][pCarID][i],engine,lights,alarm,doors,bonnet,boot,objective);
			    	SetVehicleParamsEx(PlayerInfo[playerid][pCarID][i],VEHICLE_PARAMS_OFF,lights,alarm,1,bonnet,boot,objective);
				}
				for(new d; d < 17; d++)
				{
					if(CarMod[playerid][i][d] != 0) AddVehicleComponent(PlayerInfo[playerid][pCarID][i],CarMod[playerid][i][d]);
				}
				ChangeVehiclePaintjob(PlayerInfo[playerid][pCarID][i], PlayerInfo[playerid][pCarPaintJ][i]);
				vehEngine[PlayerInfo[playerid][pCarID][i]] = 0;
				SetVipText(playerid, i);
				AttachNeon(playerid, i);
				SendClientMessage(playerid, COLOR_GREY, "Your car has been respawned.");
			}
			if(listitem == 2)
			{
				new i = SelectedCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective,Float:valoarea=1000;
				if(IsTrailerAttachedToVehicle(PlayerInfo[playerid][pCarID][i])) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} On a mission right now, can't use this command.");
				if(!CarTow(PlayerInfo[playerid][pCarID][i]) && PlayerInfo[playerid][pCarID][i] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} The car is in use and it can't be towed.");
				if(PlayerInfo[playerid][pCarID][i] != 0) DestroyVehicle(PlayerInfo[playerid][pCarID][i]);
				else GetVehicleHealth(PlayerInfo[playerid][pCarID][i],valoarea);
				LoadCar(playerid);
				if(valoarea > 450) 
					PlayerInfo[playerid][pCarID][i] = CreateVehicle(PlayerInfo[playerid][pCarModel][i],PlayerInfo[playerid][pCarLLocX][i],PlayerInfo[playerid][pCarLLocY][i],PlayerInfo[playerid][pCarLLocZ][i],PlayerInfo[playerid][pCarAngle2][i],PlayerInfo[playerid][pCarColor1][i],PlayerInfo[playerid][pCarColor2][i],-1);
				else 
				{
					PlayerInfo[playerid][pCarID][i] = CreateVehicle(PlayerInfo[playerid][pCarModel][i],PlayerInfo[playerid][pCarLocX][i],PlayerInfo[playerid][pCarLocY][i],PlayerInfo[playerid][pCarLocZ][i],PlayerInfo[playerid][pCarAngle][i],PlayerInfo[playerid][pCarColor1][i],PlayerInfo[playerid][pCarColor2][i],-1);
					SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Your vehicle was spawned at normal spawn because his HP is low.");
				}
				SetVehicleNumberPlate(PlayerInfo[playerid][pCarID][i], CarPlate[playerid][i]);
				vehRadio[PlayerInfo[playerid][pCarID][i]] = 0;
				if(PlayerInfo[playerid][pCarHP][i] <=300) { 
					SetVehicleHealth(PlayerInfo[playerid][pCarID][i], 1000); 
					UpdateVehicleDamageStatus(PlayerInfo[playerid][pCarID][i], 0, 0, 0, 0);
				}
				else 
				{
					SetVehicleHealth(PlayerInfo[playerid][pCarID][i], PlayerInfo[playerid][pCarHP][i]);
					UpdateVehicleDamageStatus(PlayerInfo[playerid][pCarID][i], PlayerInfo[playerid][pCarDamage1][i], PlayerInfo[playerid][pCarDamage2][i], PlayerInfo[playerid][pCarDamage3][i], PlayerInfo[playerid][pCarDamage4][i]);
				}
				Gas[PlayerInfo[playerid][pCarID][i]] = PlayerInfo[playerid][pCarGas][i];
				if(PlayerInfo[playerid][pCarLock][i] == 0)
				{
					GetVehicleParamsEx(PlayerInfo[playerid][pCarID][i],engine,lights,alarm,doors,bonnet,boot,objective);
			    	SetVehicleParamsEx(PlayerInfo[playerid][pCarID][i],VEHICLE_PARAMS_OFF,lights,alarm,0,bonnet,boot,objective);
				}
				else
				{
					GetVehicleParamsEx(PlayerInfo[playerid][pCarID][i],engine,lights,alarm,doors,bonnet,boot,objective);
			    	SetVehicleParamsEx(PlayerInfo[playerid][pCarID][i],VEHICLE_PARAMS_OFF,lights,alarm,1,bonnet,boot,objective);
				}
				for(new d; d < 17; d++)
				{
					if(CarMod[playerid][i][d] != 0) AddVehicleComponent(PlayerInfo[playerid][pCarID][i],CarMod[playerid][i][d]);
				}
				ChangeVehiclePaintjob(PlayerInfo[playerid][pCarID][i], PlayerInfo[playerid][pCarPaintJ][i]);
				vehEngine[PlayerInfo[playerid][pCarID][i]] = 0;
				SetVipText(playerid, i);
				AttachNeon(playerid, i);
				SendClientMessage(playerid, COLOR_GREY, "Your car has been respawned.");
			}
			if(listitem == 3)
			{
				new i = SelectedCar[playerid];
				if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} On a mission right now, can't use this command.");
				if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You can't use this while robbing the bank.");
			    if(CP[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && PlayerInfo[playerid][pJobVehicle] == 0 && BeeCar[playerid] == 0 && UsedFind[playerid] == 0 && InMinerJob[playerid] == 0  && InStrawberryJob[playerid] == 0 && PizzaCP[playerid] != 1 && busc[playerid] != 1 && Trucker[playerid] ==0)
				{
					if(PlayerInfo[playerid][pCarID][i] != 0)
					{
						LocateCar(PlayerInfo[playerid][pCarID][i],playerid);
					}
					else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This vehicle is not spawned.");
				}
				else
				{
	    			ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel checkpoint", "You are sure to cancel the current checkpoint?", "Yes", "No");
				}
			}
			if(listitem == 4)
			{
				new i = SelectedCar[playerid];
				new stringul[128];
			    if(PlayerInfo[playerid][pCarIns][i] < 5)
			    {
	  				format(stringul,sizeof(stringul),"Enter the number of insurance points that you want to buy. Now this vehicle have %d points.",PlayerInfo[playerid][pCarIns][i]);
	           	 	ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY, DIALOG_STYLE_INPUT, "Insurance", stringul, "Yes", "No");
				}
				else
				{
 			    	ShowPlayerDialog(playerid, DIALOG_INSURANCEBUY2, DIALOG_STYLE_MSGBOX, "Insurance", "You can't have more than 5 insurance", "OK", "");
				}
			}
			if(listitem == 5)
			{
				new i = SelectedCar[playerid];
				if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} On a mission right now, can't use this command.");
				if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You can't use this while robbing the bank.");
			    if(CP[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && CheckBus[playerid] < 1 && GotoMats[playerid] < 1 && PlayerInfo[playerid][pJobVehicle] == 0 && BeeCar[playerid] == 0 && UsedFind[playerid] == 0 && InMinerJob[playerid] == 0 && InStrawberryJob[playerid] == 0 && PizzaCP[playerid] != 1 && busc[playerid] != 1 && Trucker[playerid] ==0)
				{
					if(PlayerInfo[playerid][pCarID][i] != 0)
					{
						if(PlayerInfo[playerid][pLanguage] == 1) ShowPlayerDialog(playerid, DIALOG_UNSTUCK, DIALOG_STYLE_MSGBOX, "Unstuck car", "This option was created for those who can't find the car using /findcar.\nUsing this option your car will be spawned in a parking lot in LV.\n\nAre you sure you want to do this?", "Yes", "No");
						else if(PlayerInfo[playerid][pLanguage] == 2) ShowPlayerDialog(playerid, DIALOG_UNSTUCK, DIALOG_STYLE_MSGBOX, "Unstuck car", "Aceasta optiune a fost creata pentru cei care nu-si pot gasi masina folosind /findcar.\nFolosind aceasta optiune vei avea masina spawnata intr-o parcare din LV.\n\nEsti sigur ca vrei sa faci asta?", "Da", "Nu");
					}
					else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This vehicle is not spawned.");
				}
				else
				{
	    			ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel checkpoint", "You are sure to cancel the current checkpoint?", "Yes", "No");
				}
			}
			if(listitem == 6)
			{
				ShowPlayerDialog(playerid,DIALOG_VUPGRADES,DIALOG_STYLE_LIST,"Vehicle upgrades","{FFFFFF}Clear Age and KM - {FFFF00}20 premium points\nUpgrade to VIP vehicle - {FFFF00}100 premium points\nVehicle neon\nRemove vehicle neon\nFuel capacity (+50L - max 500L) - {FFFF00}25 premium points\nStage - {FFFF00}100*stage premium points","Select","Close");
			}
		}
	}
	if(dialogid == DIALOG_REMOVENEON)
	{
		if(response)
		{
			new idcar = SelectedCar[playerid];
			if(PlayerInfo[playerid][pCarNeon][idcar] == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a neon on this car.");
	   		PlayerInfo[playerid][pCarNeon][idcar] = 0;
	   		cUpdate(playerid, idcar, cCarNeonx);
	   		if(PlayerInfo[playerid][pCarID][idcar] != 0) AttachNeon(playerid, idcar);
	   		SendClientMessage(playerid, COLOR_ARENA, "(Info){FFFFFF} You removed the neon from this car.");

		}
		return 1;
	}
	if(dialogid == DIALOG_VGASUP)
	{
		if(response)
		{
			new idcar = SelectedCar[playerid];
			if(PlayerInfo[playerid][pCarGasMax][idcar] == 500) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already achieved the maximum fuel capacity (500L).");
	   		PlayerInfo[playerid][pCarGasMax][idcar] += 50;
	   		cUpdate(playerid, idcar, cGasMaxx);
	   		PlayerInfo[playerid][pPremiumPoints] -= 25;
	   		Update(playerid, pPremiumPointsx);
	   		new stringgas[128];
	   		format(stringgas,sizeof(stringgas), "(Info){FFFFFF} Fuel capacity extended, from %d to %d. (-25 premium points).", PlayerInfo[playerid][pCarGasMax][idcar]-50, PlayerInfo[playerid][pCarGasMax][idcar]);
	   		SendClientMessage(playerid, COLOR_ARENA, stringgas);

	   		new str[300],strings[200],stringss[200];
			format(strings, sizeof(strings), "%s[user:%d] paid 25 premium points to upgrade vehicle (%d) fuel to %d.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID], PlayerInfo[playerid][pCar][idcar], PlayerInfo[playerid][pCarGasMax][idcar]);
			ABroadCast(COLOR_YELLOW,strings,1);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str,sizeof(str), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_UPSTAGE)
	{
		if(response)
		{
			new idcar = SelectedCar[playerid];
		    new actualstage = PlayerInfo[playerid][pCarStage][idcar];
			if(actualstage == 3) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Your vehicle is already at 3/3 stage upgrades.");
	   		PlayerInfo[playerid][pCarStage][idcar]++;
	   		cUpdate(playerid, idcar, cStagex);
	   		PlayerInfo[playerid][pPremiumPoints] -= (actualstage+1)*100;
	   		Update(playerid, pPremiumPointsx);
	   		new stringgas[128];
	   		format(stringgas,sizeof(stringgas), "(Info){FFFFFF} Vehicle stage upgraded, from %d to %d. (-%d premium points).", actualstage, actualstage+1, (actualstage+1)*100);
	   		SendClientMessage(playerid, COLOR_ARENA, stringgas);

	   		new str[300],strings[200],stringss[200];
			format(strings, sizeof(strings), "%s[user:%d] paid %d premium points to upgrade vehicle (%d) stage to %d.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID], (actualstage+1)*100, PlayerInfo[playerid][pCar][idcar], actualstage+1);
			ABroadCast(COLOR_YELLOW,strings,1);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str,sizeof(str), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_NEONS)
	{
	    if(response)
		{
			new idcar = SelectedCar[playerid];
		  	if(listitem == 0)
		   	{
		   		if(PlayerInfo[playerid][pCarNeon][idcar] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already have a neon on this car.");
		   		if(PlayerInfo[playerid][pNeonR] == 0) return  SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a red neon.");
		   		PlayerInfo[playerid][pNeonR]--;
		   		Update(playerid, pNeonRx);
		   		PlayerInfo[playerid][pCarNeon][idcar] = 1;
		   		cUpdate(playerid, idcar, cCarNeonx);
		   		if(PlayerInfo[playerid][pCarID][idcar] != 0) AttachNeon(playerid, idcar);
		   		SendClientMessage(playerid, COLOR_ARENA, "(Info){FFFFFF} You attached a red neon on this car.");
		   		//red 
		   	}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pCarNeon][idcar] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already have a neon on this car.");
		   		if(PlayerInfo[playerid][pNeonV] == 0) return  SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a green neon.");
		   		PlayerInfo[playerid][pNeonV]--;
		   		Update(playerid, pNeonVx);
		   		PlayerInfo[playerid][pCarNeon][idcar] = 2;
		   		cUpdate(playerid, idcar, cCarNeonx);
		   		if(PlayerInfo[playerid][pCarID][idcar] != 0) AttachNeon(playerid, idcar);
		   		SendClientMessage(playerid, COLOR_ARENA, "(Info){FFFFFF} You attached a green neon on this car.");
				//green
			}
			if(listitem == 2)
			{
				if(PlayerInfo[playerid][pCarNeon][idcar] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already have a neon on this car.");
		   		if(PlayerInfo[playerid][pNeonG] == 0) return  SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a yellow neon.");
		   		PlayerInfo[playerid][pNeonG]--;
		   		Update(playerid, pNeonGx);
		   		PlayerInfo[playerid][pCarNeon][idcar] = 3;
		   		cUpdate(playerid, idcar, cCarNeonx);
		   		if(PlayerInfo[playerid][pCarID][idcar] != 0) AttachNeon(playerid, idcar);
		   		SendClientMessage(playerid, COLOR_ARENA, "(Info){FFFFFF} You attached a yellow neon on this car.");
				//yellow 
			}
			if(listitem == 3)
			{
				if(PlayerInfo[playerid][pCarNeon][idcar] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already have a neon on this car.");
		   		if(PlayerInfo[playerid][pNeonRZ] == 0) return  SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a pink neon.");
		   		PlayerInfo[playerid][pNeonRZ]--;
		   		Update(playerid, pNeonRZx);
		   		PlayerInfo[playerid][pCarNeon][idcar] = 4;
		   		cUpdate(playerid, idcar, cCarNeonx);
		   		if(PlayerInfo[playerid][pCarID][idcar] != 0) AttachNeon(playerid, idcar);
		   		SendClientMessage(playerid, COLOR_ARENA, "(Info){FFFFFF} You attached a pink neon on this car.");
				//pink 
			}
			if(listitem == 4)
			{
				if(PlayerInfo[playerid][pCarNeon][idcar] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already have a neon on this car.");
		   		if(PlayerInfo[playerid][pNeonA] == 0) return  SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a blue neon.");
		   		PlayerInfo[playerid][pNeonA]--;
		   		Update(playerid, pNeonAx);
		   		PlayerInfo[playerid][pCarNeon][idcar] = 5;
		   		cUpdate(playerid, idcar, cCarNeonx);
		   		if(PlayerInfo[playerid][pCarID][idcar] != 0) AttachNeon(playerid, idcar);
		   		SendClientMessage(playerid, COLOR_ARENA, "(Info){FFFFFF} You attached a blue neon on this car.");
				//blue	
			}
		}
	}
	if(dialogid == DIALOG_UNSTUCK2)
	{
		if(response)
		{
			new i = SelectedCar[playerid];
			ClanInfo[PlayerInfo[playerid][pClan]][cCarLocX][i] = 2350.6128;
			ClanInfo[PlayerInfo[playerid][pClan]][cCarLocY][i] = 1405.0007;
			ClanInfo[PlayerInfo[playerid][pClan]][cCarLocZ][i] = 42.5548;
			ClanInfo[PlayerInfo[playerid][pClan]][cCarAngle][i] = 90.0;
			ccUpdate(PlayerInfo[playerid][pClan], i, cLocationxx);
			ccUpdate(PlayerInfo[playerid][pClan], i, cLocationyx);
			ccUpdate(PlayerInfo[playerid][pClan], i, cLocationzx);
			ccUpdate(PlayerInfo[playerid][pClan], i, cAnglex);
			SetVehicleToRespawnEx(ClanInfo[PlayerInfo[playerid][pClan]][cCarID][i]);
			SetPlayerCheckpoint(playerid,2350.6128,1405.0007,42.5548,4.0);
			CP[playerid] = 1012;
			SS(playerid, COLOR_YELLOW, "Masina clanului a fost spawnata intr-o parcare din LV. Mergi la checkpoint pentru a o gasi.", "The clan car was respawned in a parking lot in LV. Go to checkpoint to find your car.");
			KillTimer(destroytimer[PlayerInfo[playerid][pClan]][i]);
			destroytimer[PlayerInfo[playerid][pClan]][i] = SetTimerEx("DestroyClanCar",600000,0,"d",ClanInfo[PlayerInfo[playerid][pClan]][cCarID][i]);
		}
		return 1;
	}
	if(dialogid == DIALOG_UNSTUCK)
	{
		if(response)
		{
			new i = SelectedCar[playerid];
			PlayerInfo[playerid][pCarLocX][i] = 2350.6128;
			PlayerInfo[playerid][pCarLocY][i] = 1405.0007;
			PlayerInfo[playerid][pCarLocZ][i] = 42.5548;
			PlayerInfo[playerid][pCarAngle][i] = 90.0;
			cUpdate(playerid, i, cLocationxx);
			cUpdate(playerid, i, cLocationyx);
			cUpdate(playerid, i, cLocationzx);
			cUpdate(playerid, i, cAnglex);
			SetVehicleToRespawnEx(PlayerInfo[playerid][pCarID][i]);
			SetPlayerCheckpoint(playerid,2350.6128,1405.0007,42.5548,4.0);
			CP[playerid] = 1012;
			SS(playerid, COLOR_YELLOW, "Masina ta a fost spawnata intr-o parcare din LV. Mergi la checkpoint pentru a o gasi.", "Your car was respawned in a parking lot in LV. Go to checkpoint to find your car.");

		}
		return 1;
	}
	if(dialogid == DIALOG_UNLOADTRASH)
	{
		if(response)
		{
			if(listitem == 0)
			{
				SetPlayerCheckpoint(playerid, 2781.27173, -2531.82104, 17.73810, 20.0);
				CP[playerid] = 10973;
				SS(playerid, COLOR_YELLOW, "Mergi la checkpoint pentru a descarca gunoiul.", "Follow the checkpoint to reach the unload trash.");
			}
			if(listitem == 1)
			{
				SetPlayerCheckpoint(playerid, 2523.44312, 2812.48975, 14.94440, 20.0);
				CP[playerid] = 10973;
				SS(playerid, COLOR_YELLOW, "Mergi la checkpoint pentru a descarca gunoiul.", "Follow the checkpoint to reach the unload trash.");
			}
			if(listitem == 2)
			{
				SetPlayerCheckpoint(playerid, -1899.72314, -1736.72607, 25.87010, 20.0);
				CP[playerid] = 10973;
				SS(playerid, COLOR_YELLOW, "Mergi la checkpoint pentru a descarca gunoiul.", "Follow the checkpoint to reach the unload trash.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_JOBULETES)
	{
	    if(response)
	    {
	        UsedFind[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			foreach(new i : Player)
			{
				if(IsACop(playerid))
				{
					if(caser[playerid] == i)
					{
						cased[i] --;
						caser[playerid] = 1001;
					}
				}

			}
			PlayerTextDrawHide(playerid, FindTXD[playerid][0]);
			PlayerTextDrawHide(playerid, FindTXD[playerid][1]);
			DisablePlayerCheckpoint(playerid);
 			DisablePlayerRaceCheckpoint(playerid);
			SendClientMessage(playerid,COLOR_DARKPINK,"Checkpoint anulat!");
			CP[playerid] = 0;
			if(PlayerInfo[playerid][pJobVehicle] != 0) CancelJob(playerid);
			if(BeeCar[playerid] != 0) BeeCancel(playerid);
			if(InMinerJob[playerid] != 0) MinerCancel(playerid);
			if(InStrawberryJob[playerid] != 0) StrawberryCancel(playerid);
			if(GotoMats[playerid] > 0)
			{
			    DisablePlayerCheckpoint(playerid);
			    GotoMats[playerid] = 0;
			}
    		if(TakingLesson[playerid] == 1 || examcar[playerid] != -1)
    		{
        		PlayerTextDrawHide(playerid, DMVexam[playerid]);
        		PlayerTextDrawHide(playerid, DMVcheck[playerid]);
				DestroyVehicle(examcar[playerid]);
				DisableRemoteVehicleCollisions(playerid, 0);
				examcar[playerid] = -1;
        		TakingLesson[playerid] = 0;
	    		DisablePlayerRaceCheckpoint(playerid);
    		}
			if(CarJacker[playerid] > 0)
			{
		    	DisablePlayerCheckpoint(playerid);
		    	CarJacker[playerid] = 0;
		    	JackAcc[playerid] = 0;
			}
			if(MatsHolding[playerid] > 0)
			{
			    MatsHolding[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			    DisablePlayerRaceCheckpoint(playerid);
			    CP[playerid] = 0;
			}
			if(CP[playerid] == 34)
			{
			    new towedcar = GetVehicleTrailer(GetPlayerVehicleID(playerid));
				SetVehicleToRespawn(towedcar);
				CP[playerid] = 0;
			}
			if(CP[playerid] == 340 || CP[playerid] == 341 || CP[playerid] == 342 || CP[playerid] == 343 || CP[playerid] == 344 || CP[playerid] == 345 || CP[playerid] == 346 || CP[playerid] == 347)
			{
 				DisablePlayerCheckpoint(playerid);
				CP[playerid] = 0;
			}

		}
		return 1;
	}
	if(dialogid == DIALOG_INSURANCEBUY)
	{
	    if(response)
	    {
            new text[50];
            mysql_real_escape_string(inputtext, text);
            if(IsNumeric(text))
            {
                new puncte = strval(text);
                new i = SelectedCar[playerid];
				if(PlayerInfo[playerid][pCarIns][i] == 5) return NightBot(playerid, "Cheats (dialog spammer) #4");
				new inscarpricee = PlayerInfo[playerid][pCarInsPrice][i]*puncte;
                if(GetPlayerCash(playerid) < inscarpricee) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enought money.");
                if(PlayerInfo[playerid][pCarIns][i]+puncte > 5) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You cannot have more than 5 insurance points.");
                PlayerInfo[playerid][pCarIns][i] += puncte;
                format(string, sizeof(string), "(Info){FFFFFF} You bought %d insurance points for $%s.",puncte, FormatNumber(inscarpricee));
                SCM(playerid, COLOR_ERROR, string);
                GivePlayerCash(playerid, - inscarpricee);
				cUpdate(playerid, i, cInsurancecarx);
            }
            else if(!IsNumeric(text))
            {
                SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to enter a number.");
            }
        }
		return 1;
	}
	if(dialogid == DIALOG_EMAILS)
	{
	    if(response)
	    {
	        new query[256],read,message[256],result[256],message2[500],timex[64];
			format(query, sizeof(query), "SELECT * FROM `emails` WHERE `ID` = '%d'", EmailId[playerid][listitem]);
			new Cache: emailresult = mysql_query(SQL, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
			    cache_get_field_content(i, "Message", result); format(message, sizeof(message), result);
			    cache_get_field_content(i, "Time", result); format(timex, sizeof(timex), result);
		    	read                    = cache_get_field_content_int(i, "EmailRead");
		    	if(read > 0 && PlayerInfo[playerid][pBlockedAcc] == 0)
		    	{
		    	    mysql_format(SQL, query, sizeof(query), "UPDATE `emails` SET `EmailRead`='0'");
					mysql_tquery(SQL,query,"","");
				}
			}
			cache_delete(emailresult);
			PlayerInfo[playerid][pNextNotification] = 0;
			format(message2, sizeof(message2), "%s\n\nSent at: %s", message, timex);
			ShowPlayerDialog(playerid,DIALOG_EMAILS2,DIALOG_STYLE_MSGBOX,"Read email",message2,"Back","Exit");
		}
		return 1;
	}
	if(dialogid == DIALOG_EMAILS2)
	{
	    if(response)
	    {
	        new result[300],message[300],stringy[5000],read,message2[100],finalmessage[100],query[500],emailid,idd=0;
	    	format(query, sizeof(query), "SELECT * FROM `emails` WHERE `playerid` = '%d' ORDER BY `ID` DESC LIMIT 10", PlayerInfo[playerid][pSQLID]);
			new Cache: emailresult = mysql_query(SQL, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
		    	cache_get_field_content(i, "Message", result); format(message, sizeof(message), result);
		    	read                    = cache_get_field_content_int(i, "EmailRead");
		    	emailid                 = cache_get_field_content_int(i, "ID");
		    	EmailId[playerid][idd] = emailid;
		    	idd++;
		    	if(strlen(message) > 49)
		    	{
		    		strmid(message2, message, 0, 50, sizeof(message2));
      				format(finalmessage,sizeof(finalmessage), "%s...",message2);
				}
		   	 	if(read > 0)
		    	{
		    		if(PlayerInfo[playerid][pLanguage] == 2)
		    		{
		    			format(stringy, sizeof(stringy), "%s[NECITIT]%s\n", stringy, finalmessage);
		    		}
		    		else
		    		{
		    			format(stringy, sizeof(stringy), "%s[UNREAD]%s\n", stringy, finalmessage);
		    		}
				}
				else
				{
			    	format(stringy, sizeof(stringy), "%s%s\n", stringy, finalmessage);
				}
			}
			cache_delete(emailresult);
       	 	ShowPlayerDialog(playerid,DIALOG_EMAILS,DIALOG_STYLE_LIST,"Emails",stringy,"Read","Exit");
		}
	}
	if(dialogid == DIALOG_NOSTOCK)
	{
	    if(response)
	    {
	        hidePlayerDialog(playerid);
	        BuyCar[playerid] = 0;
 		}
 		return 1;
	}
	if(dialogid == DIALOG_CARBUY5)
	{
	    if(response)
		{
		    new num = BuyCar[playerid];
		    if(GetPlayerCash(playerid) >= Stock[num][vPrice])
		    {
		        if(Stock[num][vStock] > 0)
		        {
		    		InsertCar(playerid,num,0);
				}
				else
				{
				    new stringg[MAX_STRING];
				    format(stringg,sizeof(stringg),"Aceasta masina numai este disponibila in Dealership. Stoc epuizat.\nYou can't buy this vehicle from the dealership. Out of stock.");
			 		ShowPlayerDialog(playerid, DIALOG_NOSTOCK, DIALOG_STYLE_MSGBOX, "Out of stock", stringg, "Close","");
				}
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money to purchase this vehicle.");
		}
		else
		{
			BuyCar[playerid] = -1;
			ShowPlayerDialog(playerid,DIALOG_CARBUY, DIALOG_STYLE_LIST, "Buy a car", "Cheap cars\nRegular cars\nExpensive cars\nPremium cars", "Select", "Close");
		}
	}
	if(dialogid == DIALOG_CARBUY2)
	{
	    if(response)
	    {
	    	new num = listitem + 1;
    		BuyCar[playerid] = num;
			new string33[256], stringtitle[256];
			format(stringtitle, sizeof(stringtitle), "%s ($%s) - %d available", Stock[num][vName], FormatNumber(Stock[num][vPrice]), Stock[num][vStock]);
			format(string33, sizeof(string33), "Vehicle name: %s\nVehicle price: %s\nNumber of cars available: %d\nTop speed: %s km/h", Stock[num][vName], FormatNumber(Stock[num][vPrice]), Stock[num][vStock], FormatNumber(Stock[num][vSpeed]));
			ShowPlayerDialog(playerid, DIALOG_CARBUY5, DIALOG_STYLE_MSGBOX, stringtitle, string33, "Buy car", "Back");
	    }
	    return 1;
	}
	if(dialogid == DIALOG_CARBUY3)
	{
	    if(response)
	    {
	        new cheapcars;
	        for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++)
			{
			    if(Stock[xf][vPrice] > 0 && Stock[xf][vPrice] < 10000000)
			    {
			        cheapcars = xf;
				}
			}
	    	new num = listitem + cheapcars + 1;
 	    	BuyCar[playerid] = num;
			new string33[256], stringtitle[256];
			format(stringtitle, sizeof(stringtitle), "%s ($%s) - %d available", Stock[num][vName], FormatNumber(Stock[num][vPrice]), Stock[num][vStock]);
			format(string33, sizeof(string33), "Vehicle name: %s\nVehicle price: %s\nNumber of cars available: %d\nTop speed: %s km/h", Stock[num][vName], FormatNumber(Stock[num][vPrice]), Stock[num][vStock], FormatNumber(Stock[num][vSpeed]));
			ShowPlayerDialog(playerid, DIALOG_CARBUY5, DIALOG_STYLE_MSGBOX, stringtitle, string33, "Buy car", "Back");
		}
		return 1;
	}
	if(dialogid == DIALOG_CARBUY4)
	{
	    if(response)
        {
	    	new regcheapcars;
	    	for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++)
			{
			    if(Stock[xf][vPrice] >= 10000000 && Stock[xf][vPrice] < 25000000)
			    {
       				regcheapcars = xf;
				}
			}
			new num = listitem + regcheapcars + 1;
   			BuyCar[playerid] = num;
			new string33[256], stringtitle[256];
			format(stringtitle, sizeof(stringtitle), "%s ($%s) - %d available", Stock[num][vName], FormatNumber(Stock[num][vPrice]), Stock[num][vStock]);
			format(string33, sizeof(string33), "Vehicle name: %s\nVehicle price: %s\nNumber of cars available: %d\nTop speed: %s km/h", Stock[num][vName], FormatNumber(Stock[num][vPrice]), Stock[num][vStock], FormatNumber(Stock[num][vSpeed]));
			ShowPlayerDialog(playerid, DIALOG_CARBUY5, DIALOG_STYLE_MSGBOX, stringtitle, string33, "Buy car", "Back");
		}
		return 1;
	}
	if(dialogid == DIALOG_CARBUY)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    new stringzz[MAX_STRING],stringy[MAX_STRING];
			    format(stringy, sizeof(stringy), "Vehicle\tPrice\tStock\n");
  				strcat(stringzz,stringy);
				for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++)
				{
				    if(Stock[xf][vPrice] > 0 && Stock[xf][vPrice] < 10000000)
				    {
						format(stringy, sizeof(stringy), "%s\t%s\t%d\n", Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
  						strcat(stringzz,stringy);
					}
				}
			    ShowPlayerDialog(playerid, DIALOG_CARBUY2, DIALOG_STYLE_TABLIST_HEADERS, "Buy a car", stringzz, "Select", "Close");
			}
	    	if(listitem == 1)
			{
				new stringzz[MAX_STRING],stringy[MAX_STRING];
				format(stringy, sizeof(stringy), "Vehicle\tPrice\tStock\n");
  				strcat(stringzz,stringy);
				for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++)
				{
				    if(Stock[xf][vPrice] >= 10000000 && Stock[xf][vPrice] < 25000000)
				    {
						format(stringy, sizeof(stringy), "%s\t%s\t%d\n", Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
  						strcat(stringzz,stringy);
					}
				}
			    ShowPlayerDialog(playerid, DIALOG_CARBUY3, DIALOG_STYLE_TABLIST_HEADERS, "Buy a car", stringzz, "Select", "Close");
			}
	    	if(listitem == 2)
			{
				new stringzz[MAX_STRING],stringy[MAX_STRING];
				format(stringy, sizeof(stringy), "Vehicle\tPrice\tStock\n");
  				strcat(stringzz,stringy);
				for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++)
				{
				    if(Stock[xf][vPrice] >= 25000000 && Stock[xf][vPrice] <= 80000000)
				    {
						format(stringy, sizeof(stringy), "%s\t%s\t%d\n", Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
  						strcat(stringzz,stringy);
					}
				}
			    ShowPlayerDialog(playerid, DIALOG_CARBUY4, DIALOG_STYLE_TABLIST_HEADERS, "Buy a car", stringzz, "Select", "Close");
			}
			if(listitem == 3)
			{
				new string2[MAX_STRING];
				format(string2,sizeof(string2),"Vehicle\tPrice\nSparrow\t220 premium points\nHotring Racer B\t250 premium points\nHotring Racer A\t250 premium points\nVortex\t250 premium points\nHotring Racer\t250 premium points\nMaverick\t300 premium points");
			    ShowPlayerDialog(playerid, DIALOG_CARBUY8, DIALOG_STYLE_TABLIST_HEADERS, "Buy a car", string2, "Select", "Close");
			}
	    }
	    return 1;
	}
	if(dialogid == DIALOG_CARBUY8)
	{
	    if(response)
        {
	    	new num = listitem + 98,price;
 	    	BuyCar[playerid] = num;
 	    	if(num == 98) price = 220;
			if(num == 99) price = 250;
			if(num == 100) price = 250;
			if(num == 101) price = 250;
			if(num == 102) price = 250;
			if(num == 103) price = 300;
			new string33[256], stringtitle[256];
			format(stringtitle, sizeof(stringtitle), "%s - unlimited stock", Stock[num][vName]);
			format(string33, sizeof(string33), "Vehicle name: %s\nVehicle price: %d premium points\nNumber of cars available: unlimited\nTop speed: %s km/h", Stock[num][vName], price, FormatNumber(Stock[num][vSpeed]));
			ShowPlayerDialog(playerid, DIALOG_CARBUY9, DIALOG_STYLE_MSGBOX, stringtitle, string33, "Buy car", "Back");
		}
		return 1;
	}
	if(dialogid == DIALOG_CARBUY9)
	{
		if(response)
		{
			new num = BuyCar[playerid],price;
			if(num == 98) price = 220;
			if(num == 99) price = 250;
			if(num == 100) price = 250;
			if(num == 101) price = 250;
			if(num == 102) price = 250;
			if(num == 103) price = 300;
		    if(PlayerInfo[playerid][pPremiumPoints] >= price)
		    {
		        if(Stock[num][vStock] > 0)
		        {
		    		InsertCar(playerid,num,1);
				}
				else
				{
				    new stringg[MAX_STRING];
				    format(stringg,sizeof(stringg),"Aceasta masina numai este disponibila in Dealership. Stoc epuizat.\nYou can't buy this vehicle from the dealership. Out of stock.");
			 		ShowPlayerDialog(playerid, DIALOG_NOSTOCK, DIALOG_STYLE_MSGBOX, "Out of stock", stringg, "Close","");
				}
			}
			else return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu ai suficiente puncte premium. Detalii despre punctele premium pe (bluffs.ga/panel)", "(Error){FFFFFF} You don't have enough premium points. Details about premium points here (bluffs.ga/panel)");
		}
		else
		{
			BuyCar[playerid] = -1;
			ShowPlayerDialog(playerid,DIALOG_CARBUY, DIALOG_STYLE_LIST, "Buy a car", "Cheap cars\nRegular cars\nExpensive cars\nPremium cars", "Select", "Close");
		}
	}
	if(dialogid == DIALOG_CARDAMAGE)
	{
	    if(response)
        {
        	new carid = GetPlayerVehicleID(playerid);
			if(carid == 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You are not in vehicle.");
			for(new v; v < 10; v++)
			{
				if(carid == PlayerInfo[playerid][pCarID][v])
        		{
					new inscarp = PlayerInfo[playerid][pCarInsPrice][v];
         			if(PlayerInfo[playerid][pCarIns][v] == 0)
  	        		{
         				if(GetPlayerCash(playerid) >= inscarp)
     			    	{
     		    			PlayerInfo[playerid][pCarIns][v] = 1;
      		    			GivePlayerCash(playerid, - inscarp);
							cUpdate(playerid, v, cInsurancecarx);
							SS(playerid, COLOR_GREEN3, "Asigurare platita. Acum iti poti folosi masina.", "Insurance paid. Now you can use your car.");
							return 1;
 						}
     					else
        				{
      	    				SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
         	    			RemovePlayerFromVehicle(playerid);
						}
 					}
     			}
			}
		}
		else return RemovePlayerFromVehicle(playerid);
		return 1;
    }
    if(dialogid == DIALOG_TRADEHOUSEHOUSE)
    {
    	if(response)
    	{
    		if(SellTradeID[playerid] == -1 || SellTradePrice[playerid] == 0) return NightBot(playerid, "Cheats (dialog spammer) #5");
    		new id = SellTradeID[playerid], price = SellTradePrice[playerid], stringe[128];
    		GetPlayerName(playerid, sendername, sizeof(sendername));
    		SS(playerid, COLOR_GREEN3, "Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban PERMANENT.", "Scamming is not allowed! Any attempt of scamming can result in gettin your account permanent banned.");
			SS(id, COLOR_GREEN3, "Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban PERMANENT.", "Scamming is not allowed! Any attempt of scamming can result in gettin your account permanent banned.");
			SS(playerid, COLOR_BLUE, "Oferta trimisa!", "The offer was sent!");
			format(string, sizeof(string), "%s iti ofera casa lui (%d) + $%s pentru casa ta (%d).", sendername, PlayerInfo[playerid][pPhousekey], FormatNumber(price), PlayerInfo[id][pPhousekey]);
			format(stringe, sizeof(stringe), "%s offer his house (%d) + $%s for your house (%d).", sendername, PlayerInfo[playerid][pPhousekey], FormatNumber(price), PlayerInfo[id][pPhousekey]);
			SS(id, COLOR_GREEN2, string, stringe);
			format(string, sizeof(string), "Scrie /accept tradehouseforhouse %d pentru a accepta aceasta oferta", playerid);
			format(stringe, sizeof(stringe), "Type /accept tradehouseforhouse %d to accept this offer", playerid);
			SS(id, COLOR_WHITE, string, stringe);

			tradediff[id] = price;
			tradeofferer[id] = playerid;
			tradecars[id] = PlayerInfo[playerid][pPhousekey];
			tradecars2[id] = PlayerInfo[id][pPhousekey];
			SellTradeID[playerid] = -1;
			SellTradePrice[playerid] = 0;
    	}
    	return 1;
    }
    if(dialogid == DIALOG_TRADEHOUSECAR)
    {
    	if(response)
    	{
    		if(SellTradeID[playerid] == -1 || SellTradePrice[playerid] == 0) return NightBot(playerid, "Cheats (dialog spammer) #6");
    		new id = SellTradeID[playerid], price = SellTradePrice[playerid], stringe[128], idcar = SelectedCar[playerid];
    		GetPlayerName(playerid, sendername, sizeof(sendername));
    		SS(playerid, COLOR_GREEN3, "Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban PERMANENT.", "Scamming is not allowed! Any attempt of scamming can result in gettin your account permanent banned.");
			SS(id, COLOR_GREEN3, "Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban PERMANENT.", "Scamming is not allowed! Any attempt of scamming can result in gettin your account permanent banned.");
			SS(playerid, COLOR_BLUE, "Oferta trimisa!", "The offer was sent!");
			format(string, sizeof(string), "%s iti ofera casa lui (%d) + $%s pentru masina ta (%s).", sendername, PlayerInfo[playerid][pPhousekey], FormatNumber(price), aVehicleNames[PlayerInfo[id][pCarModel][idcar] - 400]);
			format(stringe, sizeof(stringe), "%s offer his house (%d) + $%s for your car (%s).", sendername, PlayerInfo[playerid][pPhousekey], FormatNumber(price), aVehicleNames[PlayerInfo[id][pCarModel][idcar] - 400]);
			SS(id, COLOR_GREEN2, string, stringe);
			format(string, sizeof(string), "Scrie /accept tradehouseforcar %d pentru a accepta aceasta oferta", playerid);
			format(stringe, sizeof(stringe), "Type /accept tradehouseforcar %d to accept this offer", playerid);
			SS(id, COLOR_WHITE, string, stringe);

			tradecars[id] = PlayerInfo[playerid][pPhousekey];
			tradetype[id] = PlayerInfo[id][pCarID][idcar];
			tradetype2[id] = PlayerInfo[id][pCar][idcar];
			tradeofferer[id] = playerid;
			tradediff[id] = price;

			SellTradeID[playerid] = -1;
			SellTradePrice[playerid] = 0;
			SellTradeTimer[playerid] = 120;
    	}
    	return 1;
    }
    if(dialogid == DIALOG_SELLHIDDEN)
    {
    	if(response)
    	{
    		if(SellHiddenID[playerid] == -1 || SellHiddenPrice[playerid] == 0) return NightBot(playerid, "Cheats (dialog spammer) #7");
    		new id = SellHiddenID[playerid], price = SellHiddenPrice[playerid], stringe[128], giveplayer[30];
    		if(IsPlayerConnected(id))
    		{
    			GetPlayerName(playerid, sendername, sizeof(sendername));
    			GetPlayerName(id, giveplayer, sizeof(giveplayer));
    			hiddenoffer[id] = playerid;
				hiddenprice[id] = price;

				format(string, sizeof(string), "%s iti ofera o culoare hidden pentru $%s.", sendername, FormatNumber(price));
				format(stringe, sizeof(stringe), "%s has offered you a hidden color for $%s.", sendername, FormatNumber(price));
				SS(id, COLOR_BLUE2, string, stringe);
				format(string, sizeof(string), "Scrie /accept hidden %d pentru a accepta aceasta oferta", playerid);
				format(stringe, sizeof(stringe), "Type /accept hidden %d to accept this offer", playerid);
				SS(id, COLOR_WHITE, string, stringe);

				format(string, sizeof(string), "I-ai oferit o culoare hidden lui %s pentru $%s.", giveplayer, FormatNumber(price));
				format(stringe, sizeof(stringe), "You offered a hidden color to %s for $%s.", giveplayer, FormatNumber(price));
				SS(playerid, COLOR_BLUE2, string, stringe);

				SellHiddenID[playerid] = -1;
				SellHiddenPrice[playerid] = 0;
				SellTradeTimer[playerid] = 120;
    		}
    		else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
    	}
    	return 1;
    }
	if(dialogid == DIALOG_TRADECAR)
	{
		if(response)
		{
			if(SellTradeID[playerid] == -1 || SellTradePrice[playerid] == 0) return NightBot(playerid, "Cheats (dialog spammer) #8");
			new id = SellTradeID[playerid];
			new idcar1 = SelectedCar[playerid],idcar2 = SelectedCar[id],price = SellTradePrice[playerid],hidden[128],vip[128],stringe[256];

			if(PlayerInfo[playerid][pCarColor1][idcar1] >= 128 || PlayerInfo[playerid][pCarColor2][idcar1])
			{
				format(hidden, sizeof(hidden),"hidden colors: %d, %d",PlayerInfo[playerid][pCarColor1][idcar1],PlayerInfo[playerid][pCarColor2][idcar1]);
			}
			else
			{
				format(hidden, sizeof(hidden),"no hidden colors");
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
	   	    tradecars[id] = PlayerInfo[playerid][pCarID][idcar1];
			tradecars2[id] = PlayerInfo[id][pCarID][idcar2];

			tradetype[id] = PlayerInfo[playerid][pCar][idcar1];
			tradetype2[id] = PlayerInfo[id][pCar][idcar2];
			tradeofferer[id] = playerid;
			tradediff[id] = price;
			if(PlayerInfo[playerid][pCarVIP][idcar1] > 0) format(vip, sizeof(vip), "{FFFF00}vip{FFFFFF}");
			else format(vip, sizeof(vip), "{4DAD2B}no vip");
			SS(playerid, COLOR_GREEN3, "Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban PERMANENT.", "Scamming is not allowed! Any attempt of scamming can result in gettin your account permanent banned.");
			SS(id, COLOR_GREEN3, "Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban PERMANENT.", "Scamming is not allowed! Any attempt of scamming can result in gettin your account permanent banned.");
			SS(playerid, COLOR_BLUE, "Oferta trimisa!", "The offer was sent!");
			format(string, sizeof(string), "%s iti ofera masina lui {CCFF00}%s{4DAD2B} [age: %d, KM: %.0f, %s %s] + $%s pentru masina ta (%s).",sendername,aVehicleNames[PlayerInfo[playerid][pCarModel][idcar1] - 400],GetDaysFromTimestamp(PlayerInfo[playerid][pCarBuyTime][idcar1]),PlayerInfo[playerid][pCarKM][idcar1],hidden,vip,FormatNumber(price),aVehicleNames[PlayerInfo[id][pCarModel][idcar2] - 400]);
			format(stringe, sizeof(stringe), "%s offer his car {CCFF00}%s{4DAD2B} [age: %d, KM: %.0f, %s %s] + $%s for your car (%s).",sendername,aVehicleNames[PlayerInfo[playerid][pCarModel][idcar1] - 400],GetDaysFromTimestamp(PlayerInfo[playerid][pCarBuyTime][idcar1]),PlayerInfo[playerid][pCarKM][idcar1],hidden,vip,FormatNumber(price),aVehicleNames[PlayerInfo[id][pCarModel][idcar2] - 400]);
			SS(id, COLOR_GREEN2, string, stringe);
			format(string, sizeof(string), "Scrie /accept tradecar %d pentru a accepta aceasta oferta",playerid);
			format(stringe, sizeof(stringe), "Type /accept tradecar %d to accept this offer",playerid);
			SS(id, COLOR_WHITE, string, stringe);
			SellTradeID[playerid] = -1;
			SellTradePrice[playerid] = 0;
			SellTradeTimer[playerid] = 120;
		}
		return 1;
	}
	if(dialogid == DIALOG_VIPNAME)
	{
		if(response)
		{
			if(!IsPlayerInAnyVehicle(playerid)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu esti intr-un vehicul!", "(Error){FFFFFF} You are not in a vehicle!");
			if(listitem == 0) ShowPlayerDialog(playerid, DIALOG_VIPNAMETEXT, DIALOG_STYLE_INPUT, "VipName Text", "Enter text in the box below.", "Done", "");
			if(listitem == 1) ShowPlayerDialog(playerid, DIALOG_VIPNAMECOLOR, DIALOG_STYLE_LIST, "VipName Color", "{FFFFFF}White\n{FF0000}Red\n{640000}Dark Red\n{00FF00}Green\n{004B01}Dark Green\n{008DFF}Blue\n{001AFF}Dark Blue\n{FFFF00}Yellow\n{FF6B00}Orange\n{EB00FF}Purple\n{590056}Dark Purple\n{8A8A8A}Gray\n{000000}Black\n{28B2E0}Aqua\n{F20C9A}Pink", "Choose", "Cancel");
			if(listitem == 2)
			{
				new carid = GetPlayerVehicleID(playerid),idcar=-1;
				new Float:health2;
				GetVehicleHealth(carid, health2);
				if(health2 < 500.0 || (vehEngine[carid] == 1 && !IsABike(carid))) return SendClientMessage(playerid,COLOR_ERROR,"(Error){FFFFFF} You need to stop the engine first. Also, your car needs to be reapaired first (more than 500 car health).");
				for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
				{
					if(carid == PlayerInfo[playerid][pCarID][vv])
					{
						idcar = vv;
					}
				}
				if(carid == PlayerInfo[playerid][pCarID][idcar])
				{
					if(PlayerInfo[playerid][pCarVIP][idcar] > 0)
					{
						if(PlayerInfo[playerid][pCarVipColors][idcar] == 0) format(string, sizeof(string), "{FFFFFF}%s", CarVipName[playerid][idcar]);
						else if(PlayerInfo[playerid][pCarVipColors][idcar] == 1) format(string, sizeof(string), "{FF0000}%s", CarVipName[playerid][idcar]);
						else if(PlayerInfo[playerid][pCarVipColors][idcar] == 2) format(string, sizeof(string), "{640000}%s", CarVipName[playerid][idcar]);
						else if(PlayerInfo[playerid][pCarVipColors][idcar] == 3) format(string, sizeof(string), "{00FF00}%s", CarVipName[playerid][idcar]);
						else if(PlayerInfo[playerid][pCarVipColors][idcar] == 4) format(string, sizeof(string), "{004B01}%s", CarVipName[playerid][idcar]);
						else if(PlayerInfo[playerid][pCarVipColors][idcar] == 5) format(string, sizeof(string), "{008DFF}%s", CarVipName[playerid][idcar]);
						else if(PlayerInfo[playerid][pCarVipColors][idcar] == 6) format(string, sizeof(string), "{001AFF}%s", CarVipName[playerid][idcar]);
						else if(PlayerInfo[playerid][pCarVipColors][idcar] == 7) format(string, sizeof(string), "{FFFF00}%s", CarVipName[playerid][idcar]);
						else if(PlayerInfo[playerid][pCarVipColors][idcar] == 8) format(string, sizeof(string), "{FF6B00}%s", CarVipName[playerid][idcar]);
						else if(PlayerInfo[playerid][pCarVipColors][idcar] == 9) format(string, sizeof(string), "{EB00FF}%s", CarVipName[playerid][idcar]);
						else if(PlayerInfo[playerid][pCarVipColors][idcar] == 10) format(string, sizeof(string), "{590056}%s", CarVipName[playerid][idcar]);
						else if(PlayerInfo[playerid][pCarVipColors][idcar] == 11) format(string, sizeof(string), "{8A8A8A}%s", CarVipName[playerid][idcar]);
						else if(PlayerInfo[playerid][pCarVipColors][idcar] == 12) format(string, sizeof(string), "{000000}%s", CarVipName[playerid][idcar]); 
						else if(PlayerInfo[playerid][pCarVipColors][idcar] == 13) format(string, sizeof(string), "{28B2E0}%s", CarVipName[playerid][idcar]); 
						else if(PlayerInfo[playerid][pCarVipColors][idcar] == 14) format(string, sizeof(string), "{F20C9A}%s", CarVipName[playerid][idcar]); 

						new Float:fPos[3], Float:roz;
        
        				GetVehicleZAngle(GetPlayerVehicleID(playerid), roz);

					    GetVehiclePos(GetPlayerVehicleID(playerid), fPos[0], fPos[1], fPos[2]);    

					    PlayerInfo[playerid][pCarVipXPos][idcar] = PlayerInfo[playerid][pCarVipXPos][idcar]+fPos[0];
					    PlayerInfo[playerid][pCarVipYPos][idcar] = PlayerInfo[playerid][pCarVipYPos][idcar]+fPos[1];
					    PlayerInfo[playerid][pCarVipZPos][idcar] = PlayerInfo[playerid][pCarVipZPos][idcar]+fPos[2];

					    DestroyDynamicObject(vObject[PlayerInfo[playerid][pCarID][idcar]]);
					    vObject[PlayerInfo[playerid][pCarID][idcar]] = CreateDynamicObject(19327, PlayerInfo[playerid][pCarVipXPos][idcar], PlayerInfo[playerid][pCarVipYPos][idcar], PlayerInfo[playerid][pCarVipZPos][idcar], PlayerInfo[playerid][pCarVipRXPos][idcar], PlayerInfo[playerid][pCarVipRYPos][idcar], PlayerInfo[playerid][pCarVipRZPos][idcar]+roz);
					    SetDynamicObjectMaterialText(vObject[PlayerInfo[playerid][pCarID][idcar]], 0, string, OBJECT_MATERIAL_SIZE_256x128, "Arial", 20, 1, 0xFFFFFFFF, 0, 1);

					    EditDynamicObject(playerid, vObject[PlayerInfo[playerid][pCarID][idcar]]);
					}
					else return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Poti folosi aceasta comanda doar pe vehicule VIP.", "(Error){FFFFFF} You can add custom text on VIP vehicles.");
				}
				else return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Poti folosi aceasta comanda doar pe vehicule VIP.", "(Error){FFFFFF} You can add custom text on VIP vehicles.");
			}
			if(listitem == 3)
			{
				new carid = GetPlayerVehicleID(playerid),idcar=-1;
				new Float:health2;
				GetVehicleHealth(carid, health2);
				if(health2 < 500.0 || (vehEngine[carid] == 1 && !IsABike(carid))) return SendClientMessage(playerid,COLOR_ERROR,"(Error){FFFFFF} You need to stop the engine first. Also, your car needs to be reapaired first (more than 500 car health).");
				for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
				{
					if(carid == PlayerInfo[playerid][pCarID][vv])
					{
						idcar = vv;
					}
				}
				if(carid == PlayerInfo[playerid][pCarID][idcar])
				{
					if(PlayerInfo[playerid][pCarVIP][idcar] > 0)
					{
						PlayerInfo[playerid][pCarVipXPos][idcar] = 0;
				        PlayerInfo[playerid][pCarVipYPos][idcar] = 0;
				        PlayerInfo[playerid][pCarVipZPos][idcar] = 0;
				        PlayerInfo[playerid][pCarVipRXPos][idcar] = 0;
				        PlayerInfo[playerid][pCarVipRYPos][idcar] = 0;
				        PlayerInfo[playerid][pCarVipRZPos][idcar] = 0;

						cUpdate(playerid, idcar, cCarVipXPosx);
						cUpdate(playerid, idcar, cCarVipYPosx);
						cUpdate(playerid, idcar, cCarVipZPosx);
						cUpdate(playerid, idcar, cCarVipRXPosx);
						cUpdate(playerid, idcar, cCarVipRYPosx);
						cUpdate(playerid, idcar, cCarVipRZPosx);

						SetVipText(playerid, idcar);
						SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Vehicle text offsets was reseted.");
					}
					else return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Poti folosi aceasta comanda doar pe vehicule VIP.", "(Error){FFFFFF} You can add custom text on VIP vehicles.");
				}
				else return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Poti folosi aceasta comanda doar pe vehicule VIP.", "(Error){FFFFFF} You can add custom text on VIP vehicles.");
			}
			if(listitem == 4) ShowPlayerDialog(playerid, DIALOG_VIPWHEELS, DIALOG_STYLE_LIST, "VIP Wheels", "Gold Wheels\nDollar Wheels\nShadow Wheels", "Set", "Exit");
		}
		return 1;
	}
	if(dialogid == DIALOG_VIPNAMETEXT)
    {
        if(response)
        {
			if(strlen(inputtext) > 20 || strlen(inputtext) < 3)
			{
				ShowPlayerDialog(playerid, DIALOG_VIPNAMETEXT, DIALOG_STYLE_INPUT, "VipName Text", "Enter text in the box below. You can add minimum 3 and maximum 20 characters.", "Done", "");
				return 1;
			}
			if(strfind(inputtext, "{", true) != -1 || strfind(inputtext, "}", true) != -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use '{' or '}' in your text.");
	       	new carid = GetPlayerVehicleID(playerid),idcar=-1;
			for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
			{
				if(carid == PlayerInfo[playerid][pCarID][vv])
				{
					idcar = vv;
				}
			}
			if(carid == PlayerInfo[playerid][pCarID][idcar])
			{
				if(PlayerInfo[playerid][pCarVIP][idcar] > 0)
				{
					new query[256],test[20];
					format(CarVipName[playerid][idcar], 20, inputtext);
					SetVipText(playerid, idcar);
					mysql_real_escape_string(inputtext, test);
					mysql_format(SQL, query, sizeof(query), "UPDATE `cars` SET `VipText`='%s' WHERE `ID`='%d'", test, PlayerInfo[playerid][pCar][idcar]);
					mysql_tquery(SQL, query, "", "");
					format(query, sizeof(query), "Text pentru vehicul setat: %s", inputtext);
					SendClientMessage(playerid, COLOR_ADMCOMMANDS, query);
				}
				else return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Poti folosi aceasta comanda doar pe vehicule VIP.", "(Error){FFFFFF} You can add custom text on VIP vehicles.");
			}
			else return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Poti folosi aceasta comanda doar pe vehicule VIP.", "(Error){FFFFFF} You can add custom text on VIP vehicles.");
		}
		return 1;
    }
	if(dialogid == DIALOG_VIPNAMECOLOR)
	{
		if(response)
		{
			if(!IsPlayerInAnyVehicle(playerid)) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu esti intr-un vehicul!", "(Error){FFFFFF} You are not in a vehicle!");
			new carid = GetPlayerVehicleID(playerid),idcar=-1;
			for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
			{
				if(carid == PlayerInfo[playerid][pCarID][vv])
				{
					idcar = vv;
				}
			}
			if(idcar == -1) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Poti folosi aceasta comanda doar pe vehicule VIP.", "(Error){FFFFFF} You can add custom wheels on VIP vehicles.");
			if(carid == PlayerInfo[playerid][pCarID][idcar])
			{
				if(PlayerInfo[playerid][pCarVIP][idcar] > 0)
				{
					PlayerInfo[playerid][pCarVipColors][idcar] = listitem;
					cUpdate(playerid, idcar, cCarVipColorsx);
					SetVipText(playerid, idcar);
				}
				else return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Poti folosi aceasta comanda doar pe vehicule VIP.", "(Error){FFFFFF} You can add custom text on VIP vehicles.");
			}
			else return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Poti folosi aceasta comanda doar pe vehicule VIP.", "(Error){FFFFFF} You can add custom text on VIP vehicles.");
		}
		return 1;
	}
	if(dialogid == DIALOG_HIDDEN)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pHiddenColor] <= 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu ai o culoare hidden. Poti cumpara unul din /shop cu 20 puncte premium.", "(Error){FFFFFF} You don't have a hidden color. You can buy a hidden color on /shop for 20 premium points.");
			new i = SelectedCar[playerid], veh = GetPlayerVehicleID(playerid), colorid = SellTradeID[playerid], colorpart = SellTradePrice[playerid];
			SelectedCar[playerid] = -1;
			SellTradeID[playerid] = -1;
			SellTradePrice[playerid] = 0;
			if(veh == PlayerInfo[playerid][pCarID][i])
			{
				PlayerInfo[playerid][pHiddenColor] -= 1;
   				Update(playerid, pHiddenColorx);
       /*if(PlayerInfo[playerid][pCarBlock][i] <= 24) PlayerInfo[playerid][pCarBlock][i] += 24;
   				else PlayerInfo[playerid][pCarBlock][i] = 48;
   				cUpdate(playerid, i, cBlockx);*/
   				if(colorpart == 1)
   				{
   					PlayerInfo[playerid][pCarColor1][i] = colorid;
   					ChangeVehicleColor(PlayerInfo[playerid][pCarID][i], colorid, PlayerInfo[playerid][pCarColor2][i]);
   					cUpdate(playerid, i, cColorOnex);
   					SendClientMessage(playerid, COLOR_YELLOW, "Vehicle color changed for a hidden color!");
   				}
   				else if(colorpart == 2)
   				{
   					PlayerInfo[playerid][pCarColor2][i] = colorid;
   					ChangeVehicleColor(PlayerInfo[playerid][pCarID][i], PlayerInfo[playerid][pCarColor1][i], colorid);
   					cUpdate(playerid, i, cColorTwox);
   					SendClientMessage(playerid, COLOR_YELLOW, "Vehicle color changed for a hidden color!");
   				}
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your personal car.");
		}
		return 1;
	}
	if(dialogid == DIALOG_HIDDEN1)
	{
		if(response)
		{
			new i = SelectedCar[playerid], veh = GetPlayerVehicleID(playerid), colorid = SellTradeID[playerid], colorpart = SellTradePrice[playerid];
			SelectedCar[playerid] = -1;
			SellTradeID[playerid] = -1;
			SellTradePrice[playerid] = 0;
			if(veh == PlayerInfo[playerid][pCarID][i])
			{
				if(colorpart == 1)
				{
					if(colorid >= 128)
					{
						if(PlayerInfo[playerid][pPremiumPoints] >= 5 || SvarInfo[1][svValue] == 1)
						{
							PlayerInfo[playerid][pCarColor1][i] = colorid;
			   				ChangeVehicleColor(PlayerInfo[playerid][pCarID][i], colorid, PlayerInfo[playerid][pCarColor2][i]);
							cUpdate(playerid, i, cColorOnex);
							if(SvarInfo[1][svValue] == 0)
							{
								PlayerInfo[playerid][pPremiumPoints] -= 5;
								Update(playerid, pPremiumPointsx);
								SendClientMessage(playerid, COLOR_YELLOW, "Vehicle hidden color changed for 5 premium points!");
							}
							else return SendClientMessage(playerid, COLOR_YELLOW, "Vehicle hidden color changed for free!");
						}
						else return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu ai suficiente punte premium. Ai nevoie de 5 puncte premium pentru a schimba un hidden (127-256) pe masina.", "(Error){FFFFFF} You don't have enough premium points. You need 5 premium points to change a hidden on your car.");
					}
					else
					{
						PlayerInfo[playerid][pCarColor1][i] = colorid;
		   				ChangeVehicleColor(PlayerInfo[playerid][pCarID][i], colorid, PlayerInfo[playerid][pCarColor2][i]);
						cUpdate(playerid, i, cColorOnex);
						GivePlayerCash(playerid, -500);
						GameTextForPlayer(playerid, "~r~-$500", 5000, 1);
						SendClientMessage(playerid,COLOR_WHITE, "Vehicle color changed!");
					}
				}
				else if(colorpart == 2)
				{
					if(colorid >= 128)
					{
						if(PlayerInfo[playerid][pPremiumPoints] >= 5 || SvarInfo[1][svValue] == 1)
						{
							PlayerInfo[playerid][pCarColor2][i] = colorid;
		   					ChangeVehicleColor(PlayerInfo[playerid][pCarID][i], PlayerInfo[playerid][pCarColor1][i], colorid);
							cUpdate(playerid, i, cColorTwox);
							if(SvarInfo[1][svValue] == 0)
							{
								PlayerInfo[playerid][pPremiumPoints] -= 5;
								Update(playerid, pPremiumPointsx);
								SendClientMessage(playerid, COLOR_YELLOW, "Vehicle hidden color changed for 5 premium points!");
							}
							else return SendClientMessage(playerid, COLOR_YELLOW, "Vehicle hidden color changed for free!");
						}
						else return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu ai suficiente punte premium. Ai nevoie de 5 puncte premium pentru a schimba un hidden (127-256) pe masina.", "(Error){FFFFFF} You don't have enough premium points. You need 5 premium points to change a hidden on your car.");
					}
					else
					{
						PlayerInfo[playerid][pCarColor2][i] = colorid;
		   				ChangeVehicleColor(PlayerInfo[playerid][pCarID][i], PlayerInfo[playerid][pCarColor1][i], colorid);
						cUpdate(playerid, i, cColorTwox);
						GivePlayerCash(playerid, -500);
						GameTextForPlayer(playerid, "~r~-$500", 5000, 1);
						SendClientMessage(playerid,COLOR_WHITE, "Vehicle color changed!");
					}
				}
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your personal car.");
		}
		return 1;
	}
	if(dialogid == DIALOG_SELLCARTO)
	{
		if(response)
		{
			if(SellTradeID[playerid] == -1 || SellTradePrice[playerid] == 0) return NightBot(playerid, "Cheats (dialog spammer) #9");
			new idcar = SelectedCar[playerid],id = SellTradeID[playerid],price = SellTradePrice[playerid],giveplayer[30],hidden[128],vip[128],stringe[256];
			if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} That player is not connected.");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerName(id, giveplayer, sizeof(giveplayer));
			primesccar[id] = PlayerInfo[playerid][pCarID][idcar];
			cartype[id] = PlayerInfo[playerid][pCar][idcar];

			ofercar[id] = playerid;
   			carprice[id] = price;
			SS(id, COLOR_GREEN3, "Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban PERMANENT.", "Scamming is not allowed! Any attempt of scamming can result in gettin your account permanent banned.");
			SS(playerid, COLOR_GREEN3, "Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban PERMANENT.", "Scamming is not allowed! Any attempt of scamming can result in gettin your account permanent banned.");
			format(string, sizeof(string), "* You have offered your car(%s) to %s(%d) for $%s.", aVehicleNames[PlayerInfo[playerid][pCarModel][idcar] - 400],giveplayer,id,FormatNumber(price));
			SendClientMessage(playerid, COLOR_GREEN2, string);
			if(PlayerInfo[playerid][pCarColor1][idcar] >= 128 || PlayerInfo[playerid][pCarColor2][idcar] >= 128)
			{
				format(hidden, sizeof(hidden),"hidden colors: %d, %d",PlayerInfo[playerid][pCarColor1][idcar],PlayerInfo[playerid][pCarColor2][idcar]);
			}
			else
			{
				format(hidden, sizeof(hidden),"no hidden colors");
			}
			if(PlayerInfo[playerid][pCarVIP][idcar] > 0) format(vip, sizeof(vip), "{FFFF00}vip{FFFFFF}");
			else format(vip, sizeof(vip), "no vip");
			format(string, sizeof(string), "* %s vrea sa-ti vanda masina {CCFF00}%s{4DAD2B} [age: %d, km: %.0f, %s %s] pentru $%s.", sendername, aVehicleNames[PlayerInfo[playerid][pCarModel][idcar] - 400], GetDaysFromTimestamp(PlayerInfo[playerid][pCarBuyTime][idcar]), PlayerInfo[playerid][pCarKM][idcar], hidden,vip, FormatNumber(price));
			format(stringe, sizeof(stringe), "* %s want to sell his car {CCFF00}%s{4DAD2B} [age: %d, km: %.0f, %s %s] for $%s.", sendername, aVehicleNames[PlayerInfo[playerid][pCarModel][idcar] - 400], GetDaysFromTimestamp(PlayerInfo[playerid][pCarBuyTime][idcar]), PlayerInfo[playerid][pCarKM][idcar], hidden,vip, FormatNumber(price));
			SS(id, COLOR_GREEN2, string, stringe);
			format(string, sizeof(string), "Scrie /accept car %d pentru a accepta",playerid);
			format(stringe, sizeof(stringe), "Type /accept car %d to accept this offer",playerid);
			SS(id, COLOR_GREEN2, string, stringe);
			SellTradeID[playerid] = -1;
			SellTradePrice[playerid] = 0;
			SellTradeTimer[playerid] = 120;
		}
		return 1;
	}
	if(dialogid == DIALOG_VREMOVE)
	{
		if(response)
		{
			new strr[256], owner[30];
			format(strr, sizeof(strr), "SELECT * FROM `cars` WHERE `ID`='%d'", HOwnerID[playerid]);
			new Cache: xd = mysql_query(SQL, strr);
			cache_get_field_content(0, "Owner", owner);
			cache_delete(xd);
			mysql_format(SQL, strr, sizeof(strr), "DELETE FROM `cars` WHERE `ID`='%d'", HOwnerID[playerid]);
			mysql_tquery(SQL, strr, "", "");
			foreach(new i : Player)
			{
				if(strcmp(PlayerInfo[i][pNormalName], owner, true) == 0)
				{
					DespawnCar(i);
					SetTimerEx("LoadCarID", 500, false, "i", i);
				}
			}
			format(strr, sizeof(strr), "Admin %s[admin:%d] has removed %s's car %d.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID], owner, HOwnerID[playerid]);
			ABroadCast(COLOR_RED2, strr, 5);
			Log(PlayerInfo[playerid][pSQLID], strr, "vremove");
		}
		return 1;
	}
	if(dialogid == DIALOG_VOWNER)
	{
		if(response)
		{
			new strr[256], owner[30];
			format(strr, sizeof(strr), "SELECT * FROM `cars` WHERE `ID`='%d'", HOwnerID[playerid]);
			new Cache: xd = mysql_query(SQL, strr);
			cache_get_field_content(0, "Owner", owner);
			cache_delete(xd);
			mysql_format(SQL, strr, sizeof(strr), "UPDATE `cars` SET `Owner`='%s' WHERE `ID`='%d'", HOwnerName[playerid], HOwnerID[playerid]);
			mysql_tquery(SQL, strr, "", "");
			foreach(new i : Player)
			{
				if(strcmp(PlayerInfo[i][pNormalName], owner, true) == 0)
				{
					DespawnCar(i);
					SetTimerEx("LoadCarID", 500, false, "i", i);
				}
			}
			foreach(new i : Player)
			{
				if(strcmp(PlayerInfo[i][pNormalName], HOwnerName[playerid], true) == 0)
				{
					DespawnCar(i);
					SetTimerEx("LoadCarID", 500, false, "i", i);
				}
			}
			format(strr, sizeof(strr), "Admin %s[admin:%d] has set %s owner for car %d.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID], HOwnerName[playerid], HOwnerID[playerid]);
			ABroadCast(COLOR_RED2, strr, 5);
			Log(PlayerInfo[playerid][pSQLID], strr, "vowner");
		}
		return 1;
	}
	if(dialogid == DIALOG_BOWNER)
	{
		if(response)
		{
			new strr[256], pid, oldbid;
			format(strr, sizeof(strr), "SELECT * FROM `users` WHERE `Bizz`='%d'", HOwnerID[playerid]);
			new Cache: xd = mysql_query(SQL, strr);
			if(cache_get_row_count() > 0)
			{
				pid = cache_get_field_content_int(0, "id");
			}
			cache_delete(xd);
			if(pid != 0)
			{
				mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `Bizz`='255' WHERE `id`='%d'", pid);
				mysql_tquery(SQL, strr, "", "");
			}
			format(strr, sizeof(strr), "SELECT * FROM `users` WHERE `name`='%s'", HOwnerName[playerid]);
			new Cache: ddr = mysql_query(SQL, strr);
			if(cache_get_row_count() > 0)
			{
				oldbid = cache_get_field_content_int(0, "Bizz");
			}
			cache_delete(ddr);
			if(oldbid != 255)
			{
				mysql_format(SQL, strr, sizeof(strr), "UPDATE `bizz` SET `Owner`='AdmBot'  WHERE `ID`='%d'", oldbid);
				mysql_tquery(SQL, strr, "", "");
				strmid(BizzInfo[oldbid][bOwner], "AdmBot", 0, 25, 255);
				BizzInfo[oldbid][bOwned] = 1;
				mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `Bizz`='%d' WHERE `name`='AdmBot'", oldbid);
				mysql_tquery(SQL, strr, "", "");
				OnPropTextdrawUpdate(2, oldbid);
			}
			mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `Bizz`='%d' WHERE `name`='%s'", HOwnerID[playerid], HOwnerName[playerid]);
			mysql_tquery(SQL, strr, "", "");
			mysql_format(SQL, strr, sizeof(strr), "UPDATE `bizz` SET `Owner`='%s', `Owned`='1' WHERE `ID`='%d'", HOwnerName[playerid], HOwnerID[playerid]);
			mysql_tquery(SQL, strr, "", "");
			BizzInfo[HOwnerID[playerid]][bOwned] = 1;
			strmid(BizzInfo[HOwnerID[playerid]][bOwner], HOwnerName[playerid], 0, 25, 255);
			if(pid != 0)
			{
				foreach(new z : Player)
				{
					if(PlayerInfo[z][pSQLID] == pid)
					{
						PlayerInfo[z][pPbiskey] = 255;
					}
				}
			}
			foreach(new z : Player)
			{
				if(strcmp(PlayerInfo[z][pNormalName], HOwnerName[playerid], true) == 0)
				{
					PlayerInfo[z][pPbiskey] = HOwnerID[playerid];
				}
			}
			format(strr, sizeof(strr), "Admin %s[admin:%d] has set %s owner for business %d.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID], HOwnerName[playerid], HOwnerID[playerid]);
			ABroadCast(COLOR_RED2, strr, 5);
			Log(PlayerInfo[playerid][pSQLID], strr, "bowner");
			OnPropTextdrawUpdate(2, HOwnerID[playerid]);
			HOwnerID[playerid] = 0;
		}
		return 1;
	}
	if(dialogid == DIALOG_HOWNER)
	{
		if(response)
		{
			new strr[256], pid, oldhid;
			format(strr, sizeof(strr), "SELECT * FROM `users` WHERE `House`='%d'", HOwnerID[playerid]);
			new Cache: xd = mysql_query(SQL, strr);
			if(cache_get_row_count() > 0)
			{
				pid = cache_get_field_content_int(0, "id");
			}
			cache_delete(xd);
			if(pid != 0)
			{
				mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `House`='999' WHERE `id`='%d'", pid);
				mysql_tquery(SQL, strr, "", "");
			}
			format(strr, sizeof(strr), "SELECT * FROM `users` WHERE `name`='%s'", HOwnerName[playerid]);
			new Cache: ddr = mysql_query(SQL, strr);
			if(cache_get_row_count() > 0)
			{
				oldhid = cache_get_field_content_int(0, "House");
			}
			cache_delete(ddr);
			if(oldhid != 999)
			{
				mysql_format(SQL, strr, sizeof(strr), "UPDATE `houses` SET `Owner`='AdmBot', `Owned`='1', `Rentabil`='1', `Rent`='5' WHERE `ID`='%d'", oldhid);
				mysql_tquery(SQL, strr, "", "");
				strmid(HouseInfo[oldhid][hOwner], "AdmBot", 0, 25, 255);
				HouseInfo[oldhid][hOwned] = 1;
				HouseInfo[oldhid][hRentabil] = 1;
				HouseInfo[oldhid][hRent] = 5;
				mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `House`='%d' WHERE `name`='AdmBot'", oldhid);
				mysql_tquery(SQL, strr, "", "");
				OnPropTextdrawUpdate(1, oldhid);
			}
			mysql_format(SQL, strr, sizeof(strr), "UPDATE `users` SET `House`='%d', `Rented`='-1' WHERE `name`='%s'", HOwnerID[playerid], HOwnerName[playerid]);
			mysql_tquery(SQL, strr, "", "");
			mysql_format(SQL, strr, sizeof(strr), "UPDATE `houses` SET `Owner`='%s', `Owned`='1' WHERE `ID`='%d'", HOwnerName[playerid], HOwnerID[playerid]);
			mysql_tquery(SQL, strr, "", "");
			HouseInfo[HOwnerID[playerid]][hOwned] = 1;
			strmid(HouseInfo[HOwnerID[playerid]][hOwner], HOwnerName[playerid], 0, 25, 255);
			if(pid != 0)
			{
				foreach(new z : Player)
				{
					if(PlayerInfo[z][pSQLID] == pid)
					{
						PlayerInfo[z][pPhousekey] = 999;
					}
				}
			}
			foreach(new z : Player)
			{
				if(strcmp(PlayerInfo[z][pNormalName], HOwnerName[playerid], true) == 0)
				{
					PlayerInfo[z][pPhousekey] = HOwnerID[playerid];
					PlayerInfo[z][pRented] = -1;
				}
			}
			format(strr, sizeof(strr), "Admin %s[admin:%d] has set %s owner for house %d.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID], HOwnerName[playerid], HOwnerID[playerid]);
			ABroadCast(COLOR_RED2, strr, 5);
			Log(PlayerInfo[playerid][pSQLID], strr, "howner");
			OnPropTextdrawUpdate(1, HOwnerID[playerid]);
			HOwnerID[playerid] = 0;
		}
		return 1;
	}
    if(dialogid == DIALOG_PLATE)
    {
        if(response)
        {
			if(strlen(inputtext) > 10)
			{
				ShowPlayerDialog(playerid, DIALOG_PLATE, DIALOG_STYLE_INPUT, "License plate registration", "{FFFFFF}ERROR: Your license plate exceeded the limit of 10 characters.\n\nPlease enter a license plate for your vehicle.\n\nThere is only two conditions:\n- The license plate must be unique\n- The license can be alphanumerical, but it must consist of only 10 characters.", "Select", "");
				return 1;
			}
			if(strfind(inputtext, "{", true) != -1 || strfind(inputtext, "}", true) != -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti folosi caracterul '{' in /carplate.");
	        new idcar = -1;
			for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
			{
				if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pCarID][vv])
				{
					idcar = vv;
				}
			}
			if(idcar == -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your personal car.");
            SetVehicleNumberPlate(idcar,inputtext);
			new plate[25];
            mysql_real_escape_string(inputtext, plate);
            strmid(CarPlate[playerid][idcar], plate, 0, strlen(plate), 999);
       	    GivePlayerCash(playerid, -500);
            GameTextForPlayer(playerid, "~g~car plate changed~n~~r~-$500", 5000, 1);
			SS(playerid, COLOR_WHITE, "Placuta de inmatriculare va fi schimbata la urmatorul respawn al masinii.", "Car plate will change at next car respawn.");
			cUpdate(playerid, idcar, cLicensex);
		}
		return 1;
    }
    if(dialogid == DIALOG_CARSELL)
	{
		if(response)
		{
			if(listitem < PlayerInfo[playerid][pCarSlots])
			{
				if(PlayerInfo[playerid][pCar][listitem] != -1)
				{
					new query[256],value;
					new s = listitem;
					SelectedCar[playerid] = s;
					new v = SelectedCar[playerid];
					if(PlayerInfo[playerid][pCarBlock][v] > 0)
					{
						format(query, sizeof(query), "(Error){FFFFFF} Your vehicle is blocked for %d hours.", PlayerInfo[playerid][pCarBlock][v]);
						SendClientMessage(playerid, COLOR_ERROR, query);
						return 1;
					}
					format(query, sizeof(query), "SELECT * FROM `stock` WHERE `vid`='%d'", PlayerInfo[playerid][pCarModel][v]);
					new Cache: result = mysql_query(SQL, query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						value = cache_get_field_content_int(i, "Price");
					}
					cache_delete(result);
					if(PlayerInfo[playerid][pCarModel][v] == 539 || PlayerInfo[playerid][pCarModel][v] == 502 || PlayerInfo[playerid][pCarModel][v] == 503 || PlayerInfo[playerid][pCarModel][v] == 494 || PlayerInfo[playerid][pCarModel][v] == 487 || PlayerInfo[playerid][pCarModel][v] == 447 || PlayerInfo[playerid][pCarModel][v] == 409) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This car can't be sold to the DealerShip.");
					new cashveh;
					CarID[playerid] = PlayerInfo[playerid][pCarID][v];
					cashveh = floatround(floatmul(value,0.60),floatround_ceil);
					if(PlayerInfo[playerid][pCarEvent][v] != 0) cashveh = 5000000;
					format(string,sizeof(string),"Do you want to sell your car to the Dealership for $%s?",FormatNumber(cashveh));
					ShowPlayerDialog(playerid, DIALOG_SELLCARX, DIALOG_STYLE_MSGBOX, "Sell vehicle", string, "Yes", "No");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_SELLCARX)
	{
	    if(response)
	    {
			new v = SelectedCar[playerid];
			new strings[256],query[256],value;
			mysql_format(SQL, strings, sizeof(strings), "UPDATE `cars` SET `Active`='0' WHERE `ID`='%d'", PlayerInfo[playerid][pCar][v]);
			mysql_query(SQL,strings);
			PlayerInfo[playerid][pCar][v] = -1;

			format(query, sizeof(query), "SELECT * FROM `stock` WHERE `vid`='%d'", PlayerInfo[playerid][pCarModel][v]);
			new Cache: result = mysql_query(SQL, query);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				value = cache_get_field_content_int(i, "Price");
			}
			cache_delete(result);
			if(PlayerInfo[playerid][pCarID][v] != 0)
			{
				new idcar = PlayerInfo[playerid][pCarID][v];
				new engine,lights,alarm,doors,bonnet,boot,objective;
				vehEngine[idcar] = 0;
				GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(idcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
				SetPVarInt(playerid, "Engine", 0);
				DestroyDynamicObject(vObject[idcar]);
				vObject[idcar] = 0;
				DestroyObject(Neons[0][idcar]);
				DestroyObject(Neons[1][idcar]);
				Neons[0][idcar] = 0;
				Neons[1][idcar] = 0;
				DestroyVehicle(PlayerInfo[playerid][pCarID][v]);
			}
			TogglePlayerControllable(playerid, 1);
			new cashveh = floatround(floatmul(value,0.60),floatround_ceil);
			if(PlayerInfo[playerid][pCarEvent][v] != 0) cashveh = 5000000;
			GivePlayerCash(playerid, cashveh);
			format(string, sizeof(string), "You sold your car (%s) to the DealerShip for $%s!",aVehicleNames[PlayerInfo[playerid][pCarModel][v] - 400],FormatNumber(cashveh));
			SendClientMessage(playerid, COLOR_WHITE, string);
		    new var100[256];
			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','0','%s')", PlayerInfo[playerid][pSQLID],string);
			mysql_tquery(SQL,var100,"","");
			CarID[playerid] = -1;
			DespawnCar(playerid);
			SetTimerEx("LoadCarID", 500, false, "i", playerid);
		}
		return 1;
	}
	if(dialogid == DIALOG_JOBS)
	{
		if(response)
	    {
	    	new stringx[128];
	    	if(listitem == 0)
			{
				SetPlayerCheckpoint(playerid,607.8508,-1438.1113,14.0647,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, 607.8508, -1438.1113, 14.0647));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, 607.8508, -1438.1113, 14.0647));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			    SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} This job is only for find players, you can't get money with him.");
			}
	    	if(listitem == 1)
			{
				SetPlayerCheckpoint(playerid,2129.9590,-1700.0682,15.0784,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, 2129.9590, -1700.0682, 15.0784));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, 2129.9590, -1700.0682, 15.0784));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			}
	    	if(listitem == 2)
			{
				SetPlayerCheckpoint(playerid,2120.0132,-1786.2161,13.5608,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, 2120.0132, -1786.2161, 13.5608));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, 2120.0132, -1786.2161, 13.5608));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			}
	    	if(listitem == 3)
			{
				SetPlayerCheckpoint(playerid,1653.6558,-2238.0095,13.5201,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, 1653.6558, -2238.0095, 13.5201));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, 1653.6558, -2238.0095, 13.5201));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			}
	    	if(listitem == 4)
			{
				SetPlayerCheckpoint(playerid,1621.0037,2210.8643,15.1959,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, 1621.0037, 2210.8643, 15.1959));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, 1621.0037, 2210.8643, 15.1959));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			}
	    	if(listitem == 5)
			{
				SetPlayerCheckpoint(playerid,1366.9601,-1292.1105,13.5469,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, 1366.9601, -1292.1105, 13.5469));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, 1366.9601, -1292.1105, 13.5469));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			}
	    	if(listitem == 6)
			{
				SetPlayerCheckpoint(playerid,2510.2173,2794.8362,10.8203,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, 2510.2173, 2794.8362, 10.8203));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, 2510.2173, 2794.8362, 10.8203));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			}
	    	if(listitem == 7)
			{
				SetPlayerCheckpoint(playerid,372.0800,-2086.0505,7.8359,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, 372.0800, -2086.0505, 7.8359));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, 372.0800, -2086.0505, 7.8359));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			}
	    	if(listitem == 8)
			{
				SetPlayerCheckpoint(playerid,-76.8129,-1136.6630,1.0781,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, -76.8129, -1136.6630, 1.0781));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, -76.8129, -1136.6630, 1.0781));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			}
	    	if(listitem == 9)
			{
				SetPlayerCheckpoint(playerid,-366.4417,-1412.7061,25.7266,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, -366.4417, -1412.7061, 25.7266));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, -366.4417, -1412.7061, 25.7266));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			}
			if(listitem == 10)
			{
				SetPlayerCheckpoint(playerid,2849.8909,891.6392,10.7500,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, 2849.8909, 891.6392, 10.7500));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, 2849.8909, 891.6392, 10.7500));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			}
			if(listitem == 11)
			{
				SetPlayerCheckpoint(playerid,-375.0192,1174.9395,19.7422,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, -375.0192,1174.9395,19.7422));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, -375.0192,1174.9395,19.7422));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			}
			if(listitem == 12)
			{
				SetPlayerCheckpoint(playerid,-1212.0938,-118.2671,14.1440,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, -1212.0938,-118.2671,14.1440));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, -1212.0938,-118.2671,14.1440));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			    SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} You need flying license to work at this job.");
			}
			if(listitem == 13)
			{
				SetPlayerCheckpoint(playerid,-80.4875,83.1074,3.1096,4.0);
			    CP[playerid] = 43;
			    if(PlayerInfo[playerid][pLanguage] == 2) format(stringx, sizeof(stringx), "Mergi la checkpoint-ul de pe minimap pentru a lua jobul ales. Distanta: %.0fm.", GetPlayerDistanceFromPoint(playerid, -80.4875,83.1074,3.1096));
			    else format(stringx, sizeof(stringx), "A checkpoint has been placed on your map. Follow it to get the selected job. Distance: %.0fm.", GetPlayerDistanceFromPoint(playerid, -80.4875,83.1074,3.1096));
			    SendClientMessage(playerid, COLOR_YELLOW, stringx);
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_QUITCLAN)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pClan] == 0) return NightBot(playerid, "Cheats (dialog spammer) #10");
			new szMessage[256],str1[300];
			if(PlayerInfo[playerid][pCRank] != 7)
			{
				GetPlayerName(playerid,sendername,sizeof(sendername));
				format(szMessage, sizeof(szMessage), "%s has left the clan (quit clan).", sendername);
				SendToClan(PlayerInfo[playerid][pClan], COLOR_YELLOW, szMessage);
				format(szMessage,sizeof(szMessage), "You have left the %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanName]);
				SendClientMessage(playerid,COLOR_WHITE,szMessage);
				format(string, sizeof(string), "%s", PlayerInfo[playerid][pNormalName]);
				format(str1,sizeof(str1),"{%s}[CLAN] %s left the clan (using /quitclan).", ClanInfo[PlayerInfo[playerid][pClan]][cClanColor], sendername);
				SendToClan(PlayerInfo[playerid][pClan], COLOR_WHITE, str1);
				SetPlayerName(playerid,string);
				PlayerInfo[playerid][pClan] = 0;
				PlayerInfo[playerid][pCRank] = 0;
				PlayerInfo[playerid][pCWarns] = 0;
				mysql_format(SQL, str1, sizeof(str1), "UPDATE users SET `CRank`='0',`Clan`='0',`ClanJoin`='0',`ClanTag`='0',`ClanWarns`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str1,"","");
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't leave your clan because you are the leader.");
		}
	}
	if(dialogid == DIALOG_QUITGROUP)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pMember] == 0) return NightBot(playerid, "Cheats (dialog spammer) #11");
			new query[256],fhid,string2[256],string3[256];
			if(PlayerInfo[playerid][pMember] > 0 && PlayerInfo[playerid][pLeader] < 1)
			{
				format(query, 256, "SELECT * FROM `users` WHERE `Member` = '%d' AND `Rank` = '7'", PlayerInfo[playerid][pMember]);
				new Cache: masta = mysql_query(SQL, query);
				if(cache_get_row_count() >= 1)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(query, sizeof(query), "SELECT * FROM `faction_logs` WHERE `player`='%d' ORDER BY `id` DESC LIMIT 1", PlayerInfo[playerid][pSQLID]);
					new Cache: abx = mysql_query(SQL, query);
					fhid = cache_get_field_content_int(0, "id");
					cache_delete(abx);
					format(string2, sizeof(string2), "* You have left faction %s (rank %d) after %d days, with 20 FP.", NumeFactiune(PlayerInfo[playerid][pMember]), PlayerInfo[playerid][pRank], GetDaysFromTimestamp(PlayerInfo[playerid][pFactionJoin]));
					SendClientMessage(playerid, COLOR_YELLOW, string2);
					format(string2, sizeof(string2), "%s left faction %s (rank %d) after %d days using /quitgroup, with 20 FP.", PlayerInfo[playerid][pNormalName],DynamicFactions[PlayerInfo[playerid][pMember]][fName],PlayerInfo[playerid][pRank],GetDaysFromTimestamp(PlayerInfo[playerid][pFactionJoin]));
					mysql_real_escape_string(string2, string3);
					mysql_format(SQL, query, sizeof(query), "DELETE FROM `faction_logs` WHERE `id`='%d'", fhid);
					mysql_tquery(SQL,query,"","");
					mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','0')", string3, PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,query,"","");
					format(string,sizeof(string),"%s left faction %s (rank %d) after %d days using /quitgroup, WITH 20 FP.",sendername,DynamicFactions[PlayerInfo[playerid][pMember]][fName],PlayerInfo[playerid][pRank],GetDaysFromTimestamp(PlayerInfo[playerid][pFactionJoin]));
					SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, string);
					if(InWar[PlayerInfo[playerid][pMember]] != 0) PlayerTextDrawHide(playerid, TimeLeftWar1[playerid]);
					gTeam[playerid] = 3;
					PlayerInfo[playerid][pTeam] = 3;
					PlayerInfo[playerid][pMember] = 0;
					PlayerInfo[playerid][pRank] = 0;
					PlayerInfo[playerid][pLeader] = 0;
					PlayerInfo[playerid][pFACWarns] = 0;
					PlayerInfo[playerid][pFpunish] = 20;
					PlayerInfo[playerid][pFactionJoin] = 0;
					tazer[playerid] = 0;
					OnDuty[playerid] = 0;
					SetPlayerArmourEx(playerid, 0);
					ResetPlayerWeaponsEx(playerid);
		    		ResetPlayerWeapons(playerid);
		    		if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicleEx(playerid);
					SetPlayerSkin(playerid,PlayerInfo[playerid][pModel]);
					SpawnPlayer(playerid);
					mysql_format(SQL,query,sizeof(query),"UPDATE users SET `Team`='3',`Member`='0',`Leader`='0',`Rank`='0',`FPunish`='20',`FWarn`='0', `FactionJoin`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,query,"","");
				}
				else
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(query, sizeof(query), "SELECT * FROM `faction_logs` WHERE `player`='%d' ORDER BY `id` DESC LIMIT 1", PlayerInfo[playerid][pSQLID]);
					new Cache: abx = mysql_query(SQL, query);
					fhid = cache_get_field_content_int(0, "id");
					cache_delete(abx);
					format(string2, sizeof(string2), "* You have left faction %s (rank %d) after %d days, without FP. The faction had no leader when you left.", NumeFactiune(PlayerInfo[playerid][pMember]), PlayerInfo[playerid][pRank], GetDaysFromTimestamp(PlayerInfo[playerid][pFactionJoin]));
					SendClientMessage(playerid, COLOR_YELLOW, string2);
					format(string2, sizeof(string2), "%s left faction %s (rank %d) after %d days using /quitgroup, without FP. The faction had no leader when he/she left.", PlayerInfo[playerid][pNormalName],DynamicFactions[PlayerInfo[playerid][pMember]][fName],PlayerInfo[playerid][pRank],GetDaysFromTimestamp(PlayerInfo[playerid][pFactionJoin]));
					mysql_real_escape_string(string2, string3);
					mysql_format(SQL, query, sizeof(query), "DELETE FROM `faction_logs` WHERE `id`='%d'", fhid);
					mysql_tquery(SQL,query,"","");
					mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','0')", string3, PlayerInfo[playerid][pSQLID]);
					mysql_tquery(SQL,query,"","");
					format(string,sizeof(string),"%s left faction %s (rank %d) after %d days using /quitgroup, without FP.",sendername,DynamicFactions[PlayerInfo[playerid][pMember]][fName],PlayerInfo[playerid][pRank],GetDaysFromTimestamp(PlayerInfo[playerid][pFactionJoin]));
					SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, string);
					if(InWar[PlayerInfo[playerid][pMember]] != 0) PlayerTextDrawHide(playerid, TimeLeftWar1[playerid]);
					gTeam[playerid] = 3;
					PlayerInfo[playerid][pTeam] = 3;
					PlayerInfo[playerid][pMember] = 0;
					PlayerInfo[playerid][pRank] = 0;
					PlayerInfo[playerid][pLeader] = 0;
					PlayerInfo[playerid][pFACWarns] = 0;
					PlayerInfo[playerid][pFpunish] = 0;
					PlayerInfo[playerid][pFactionJoin] = 0;
					tazer[playerid] = 0;
					OnDuty[playerid] = 0;
					ResetPlayerWeaponsEx(playerid);
		    		ResetPlayerWeapons(playerid);
					SetPlayerArmourEx(playerid, 0);
					if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicleEx(playerid);
					SetPlayerSkin(playerid,PlayerInfo[playerid][pModel]);
					SpawnPlayer(playerid);
					mysql_format(SQL,query,sizeof(query),"UPDATE users SET `Team`='3',`Member`='0',`Leader`='0',`Rank`='0',`FPunish`='0',`FWarn`='0', `FactionJoin`='0' WHERE `name`='%s'",PlayerInfo[playerid][pNormalName]);
					mysql_tquery(SQL,query,"","");
				}
				cache_delete(masta);
			}
			if(UsedFind[playerid] == 1)
			{
				UsedFind[playerid] = 0;
				targetfind[playerid] = -1;
				DisablePlayerCheckpoint(playerid);
			}
		}
	}
	if(dialogid == DIALOG_FRIENDS)
	{
		if(response)
		{
			if(listitem == 0)
			{
				ShowPlayerDialog(playerid, DIALOG_ADDFRIENDS, DIALOG_STYLE_INPUT, "Add friend", "Type ID of the player you want to add as a friend:", "Add Friend", "Exit");
			}
			if(listitem > 0)
			{
				new query[256],name[30],result[30],idd,status,title[50];
				format(query, sizeof(query), "SELECT name, id, Status FROM `users` WHERE `id`='%d'",Selected[playerid][listitem]);
				new Cache: membresult = mysql_query(SQL,query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					cache_get_field_content(i, "name", result); format(name, 30, result);
					idd = cache_get_field_content_int(i, "id");
					status = cache_get_field_content_int(i, "Status");
					Selected2[playerid] = idd;
					if(status > 0)
					{
						format(title, sizeof(title), "[online] %s", name);
					}
					else if(status == 0)
					{
						format(title, sizeof(title), "[offline] %s", name);
					}
				}
				cache_delete(membresult);
				ShowPlayerDialog(playerid, DIALOG_FRIENDS2, DIALOG_STYLE_LIST, title, "Remove Friend\nView phone number", "Select", "Exit");
			}
		}
	}
	if(dialogid == DIALOG_FRIENDS2)
	{
		if(response)
		{
			if(listitem == 0)
			{
				new str1[200];
				mysql_format(SQL,str1, sizeof(str1), "DELETE FROM `friends` WHERE `FriendID`='%d'", Selected2[playerid]);
	       		mysql_tquery(SQL,str1,"","");
				SendClientMessage(playerid, COLOR_YELLOW, "Friend removed.");
			}
			if(listitem == 1)
			{
				new phone,query[256],name[30],result[30],strings[128];
				format(query, sizeof(query), "SELECT name, PhoneNr FROM `users` WHERE `id`='%d'",Selected2[playerid]);
				new Cache: membresult = mysql_query(SQL,query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					phone = cache_get_field_content_int(i, "PhoneNr");
					cache_get_field_content(i, "name", result); format(name, 30, result);
					if(phone != 0)
					{
						format(strings, sizeof(strings), "Name: {CECECE}%s {FFFFFF}| Number: {CECECE}%d",name,phone);
					}
					else
					{
						format(strings, sizeof(strings), "Name: {CECECE}%s {FFFFFF}| Number: {CECECE}None",name,phone);
					}
					SendClientMessage(playerid, COLOR_WHITE, strings);
				}
				cache_delete(membresult);
			}
		}
	}
	if(dialogid == DIALOG_ADDFRIENDS)
	{
		if(response)
		{
			new text[50];
			mysql_real_escape_string(inputtext, text);
			if(IsNumeric(text))
			{
				new str1[256],id = strval(text);
				if(id == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu te poti adauga singur in lista de prieteni.");
				format(str1, sizeof(str1), "SELECT * FROM `friends` WHERE `FriendID`='%d' AND `PlayerID`='%d'",PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID]);
				new Cache: membresult = mysql_query(SQL,str1);
				if(cache_get_row_count () > 0)
				{
					SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Acel jucator este deja in lista ta de prieteni.","(Error){FFFFFF} This player is already in your friends list.");
					return 1;
				}
				cache_delete(membresult);
				mysql_format(SQL, str1, sizeof(str1), "INSERT INTO `friends` (`PlayerID`,`FriendID`,`FriendName`) VALUES('%d','%d','%s')",PlayerInfo[playerid][pSQLID],PlayerInfo[id][pSQLID],PlayerInfo[id][pNormalName]);
				mysql_tquery(SQL,str1,"","");
				SS(playerid, COLOR_YELLOW, "Prieten adaugat!","Friend added!");
			}
			else if(!IsNumeric(text))
			{
				new find = 0;
				foreach(new i : Player)
				{
					if(IsPlayerConnected(i))
					{
						if(find == 0)
						{
							new name[30],str1[256];
							GetPlayerName(i, name, sizeof(name));
							if(strfind(name, text) != -1)
							{
								find = 1;
								if(i == playerid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu te poti adauga singur in lista de prieteni.");
								format(str1, sizeof(str1), "SELECT * FROM `friends` WHERE `FriendID`='%d' AND `PlayerID`='%d'",PlayerInfo[i][pSQLID],PlayerInfo[playerid][pSQLID]);
								new Cache: membresult = mysql_query(SQL,str1);
								if(cache_get_row_count () > 0)
								{
									SS(playerid, COLOR_WHITE, "Acel jucator este deja in lista ta de prieteni.","This player is already in your friends list.");
									return 1;
								}
								cache_delete(membresult);
								mysql_format(SQL, str1, sizeof(str1), "INSERT INTO `friends` (`PlayerID`,`FriendID`,`FriendName`) VALUES('%d','%d','%s')",PlayerInfo[playerid][pSQLID],PlayerInfo[i][pSQLID],PlayerInfo[i][pNormalName]);
								mysql_tquery(SQL,str1,"","");
								SS(playerid, COLOR_YELLOW, "Prieten adaugat!","Friend added!");
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} ID invalid. You can ad only online player in your friends list.");
				}
				if(find == 0)
				{
					SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} ID invalid. You can ad only online player in your friends list.");
				}
			}
		}
	}
	if(dialogid == DIALOG_CLEARSALARIES)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pRank] >= 6)
			{
				new query[256],payday,paydays,suma,nume[30];
				format(query, sizeof(query), "SELECT * FROM `users` WHERE `Member` = '%d' AND `PaydayON` > '0'", PlayerInfo[playerid][pMember]);
				new Cache: result = mysql_query(SQL, query);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					payday = cache_get_field_content_int(i, "PaydayON");
					paydays += payday;
				}
				cache_delete(result);
				mysql_format(SQL,query,sizeof(query),"UPDATE `users` SET `PaydayON` = '0' WHERE `Member` = '%d'", PlayerInfo[playerid][pMember]);
				mysql_tquery(SQL,query,"","");
				foreach(new s : Player)
				{
					if(PlayerInfo[s][pMember] == PlayerInfo[playerid][pMember])
					{
						PlayerInfo[s][pPaydayON] = 0;
					}
				}
				suma = paydays * 1000;
				DynamicFactions[PlayerInfo[playerid][pMember]][fBank] += suma;
				mysql_format(SQL,query,sizeof(query),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'",DynamicFactions[PlayerInfo[playerid][pMember]][fBank],PlayerInfo[playerid][pMember]);
				mysql_tquery(SQL,query,"","");
				GetPlayerName(playerid, nume, sizeof(nume));
				format(query,sizeof(query),"Faction manager %s has deposited $%s in the faction vault (%d salary points).",nume,FormatNumber(suma),paydays);
				SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_LIGHTBLUE, query);
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_MEMBERS)
	{
		if(response)
		{
			if(listitem >= 0)
			{
				if(PlayerInfo[playerid][pRank] >= 6)
				{
					new name[30],result[30],query[300],test[5],strings[300];
					format(query, sizeof(query), "SELECT * FROM `users` WHERE `id`='%d'",Selected[playerid][listitem]);
					new Cache: membresult = mysql_query(SQL,query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "name", result); format(name, 30, result);
						cache_get_field_content(i, "Rank", result); format(test, 5, result);
					}
					cache_delete(membresult);
					Selected2[playerid] = Selected[playerid][listitem];
					format(strings, sizeof(strings),"%s - %s",test,name);
					ShowPlayerDialog(playerid, DIALOG_MEMBERS2, DIALOG_STYLE_LIST, strings, "Change Rank\nFaction Warn\nClear FW\nUninvite - 20 FP\nUninvite - 0 FP", "OK", "Exit");
				}
			}
		}
	}
	if(dialogid == DIALOG_MEMBERS2)
	{
		if(response)
		{
			if(listitem == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Usage: /changerank <id> <rank>");
			}
			if(listitem == 1)
			{
				new string1[256],rank;
				if(PlayerInfo[playerid][pSQLID] == Selected2[playerid]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't give a fw to yourself.");
				foreach(new i : Player)
				{
					if(PlayerInfo[i][pSQLID] == Selected2[playerid])
					{
						if(PlayerInfo[playerid][pRank] == 6 && PlayerInfo[i][pRank] == 7 || PlayerInfo[playerid][pRank] == 6 && PlayerInfo[i][pRank] == 6) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't give a FW to a member with rank 6-7.");
					}
				}
				format(string1, sizeof(string1), "SELECT * FROM `users` WHERE `id`='%d'",Selected2[playerid]);
				new Cache: membresult = mysql_query(SQL,string1);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					rank = cache_get_field_content_int(i, "Rank");
				}
				cache_delete(membresult);
				if(PlayerInfo[playerid][pRank] == 6 && rank == 6 || PlayerInfo[playerid][pRank] == 6 && rank == 7) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't give a FW to a member with rank 6-7.");
				ShowPlayerDialog(playerid, DIALOG_FWARN, DIALOG_STYLE_MSGBOX, "You are sure?", "You are sure to give FW to this member?", "Yes", "No");
			}
			if(listitem == 2)
			{
				if(PlayerInfo[playerid][pRank] != 7) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Only leaders have acces to fw clear.");
				ShowPlayerDialog(playerid, DIALOG_FUNWARN, DIALOG_STYLE_MSGBOX, "You are sure?", "You are sure to delete FW from this member?", "Yes", "No");
			}
			if(listitem == 3)
			{
				if(PlayerInfo[playerid][pRank] != 7) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Only leaders can uninvite a member.");
				if(PlayerInfo[playerid][pSQLID] == Selected2[playerid]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't uninvite yourself.");
				new stringtotal[500],string1[256],ftime,result[30],name[30],frank;
				format(string1, sizeof(string1), "SELECT * FROM `users` WHERE `id`='%d'",Selected2[playerid]);
				new Cache: membresult = mysql_query(SQL,string1);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					ftime = cache_get_field_content_int(i, "FactionJoin");
					frank = cache_get_field_content_int(i, "Rank");
					cache_get_field_content(i, "name", result); format(name, 30, result);
				}
				cache_delete(membresult);
				if(frank == 7) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't uninvite a leader.");
				format(string1, sizeof(string1),"Esti pe cale sa-i dai uninvite lui %s CU 20 FP.\nAcesta are %d zile in factiune.\nScrie motivul pentru uninvite mai jos:", name, GetDaysFromTimestamp(ftime));
				format(stringtotal, sizeof(stringtotal),"Atentie!!! Playerii ce au peste 14 zile se vor da afara fara FP, cu exceptia cazurilor in care acesta incalca regulile factiunii.\n%s", string1);
				ShowPlayerDialog(playerid, DIALOG_FPUNINVITE, DIALOG_STYLE_INPUT, "Uninvite - 20 FP", stringtotal, "Uninvite", "Exit");
			}
			if(listitem == 4)
			{
				if(PlayerInfo[playerid][pRank] != 7) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Only leaders can uninvite a member.");
				if(PlayerInfo[playerid][pSQLID] == Selected2[playerid]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't uninvite yourself.");
				new stringtotal[500],string1[256],ftime,result[30],name[30],frank;
				format(string1, sizeof(string1), "SELECT * FROM `users` WHERE `id`='%d'",Selected2[playerid]);
				new Cache: membresult = mysql_query(SQL,string1);
				for(new i, j = cache_get_row_count (); i != j; ++i)
				{
					ftime = cache_get_field_content_int(i, "FactionJoin");
					frank = cache_get_field_content_int(i, "Rank");
					cache_get_field_content(i, "name", result); format(name, 30, result);
				}
				cache_delete(membresult);
				if(frank == 7) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't uninvite a leader.");
				format(string1, sizeof(string1),"Esti pe cale sa-i dai uninvite lui %s FARA FP.\nAcesta are %d zile in factiune.\nScrie motivul pentru uninvite mai jos:", name, GetDaysFromTimestamp(ftime));
				format(stringtotal, sizeof(stringtotal),"Atentie!!! Playerii ce au sub 14 zile in factiune se vor da afara cu FP, cu exceptia cazurilor in care un owner iti spune ca e ok sa dai uninvite fara FP.\n%s", string1);
				ShowPlayerDialog(playerid, DIALOG_NOUNINVITE, DIALOG_STYLE_INPUT, "Uninvite - 0 FP", stringtotal, "Uninvite", "Exit");
			}
		}
	}
	if(dialogid == DIALOG_FPUNINVITE)
	{
		if(response)
		{
			new string1[300],result[30],name[30],rank,ftime,reason[128],idd,fhid,language,test;
			format(string1, sizeof(string1), "SELECT * FROM `users` WHERE `id`='%d'",Selected2[playerid]);
			new Cache: membresult = mysql_query(SQL,string1);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				cache_get_field_content(i, "name", result); format(name, 30, result);
				ftime = cache_get_field_content_int(i, "FactionJoin");
				rank = cache_get_field_content_int(i, "Rank");
				idd = cache_get_field_content_int(i, "id");
				language = cache_get_field_content_int(i, "Language");
			}
			cache_delete(membresult);
			format(string1, sizeof(string1), "SELECT * FROM `faction_logs` WHERE `player`='%d' ORDER BY `id` DESC LIMIT 1", idd);
			new Cache: abx = mysql_query(SQL, string1);
			fhid = cache_get_field_content_int(0, "id");
			cache_delete(abx);
			mysql_real_escape_string(inputtext, reason);
			new string2[300],query[300],string3[300];
			format(string2, sizeof(string2), "%s was uninvited by %s from faction %s (rank %d) after %d days, with FP. Reason: %s.", name,PlayerInfo[playerid][pNormalName],DynamicFactions[PlayerInfo[playerid][pMember]][fName],rank,GetDaysFromTimestamp(ftime),reason);
			mysql_real_escape_string(string2, string3);
			mysql_format(SQL, query, sizeof(query), "DELETE FROM `faction_logs` WHERE `id`='%d'", fhid);
			mysql_tquery(SQL,query,"","");
			mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string3, idd, PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,query,"","");
			mysql_format(SQL,string1,sizeof(string1),"UPDATE users SET `Team`='3',`Member`='0',`Leader`='0',`Rank`='0',`FPunish`='20',`FWarn`='0',`FactionJoin`='0' WHERE `id`='%d'",Selected2[playerid]);
			mysql_tquery(SQL,string1,"","");
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pSQLID] == Selected2[playerid])
				{
					if(InWar[PlayerInfo[i][pMember]] != 0) PlayerTextDrawHide(i, TimeLeftWar1[i]);
					gTeam[i] = 3;
					PlayerInfo[i][pTeam] = 3;
					PlayerInfo[i][pMember] = 0;
					PlayerInfo[i][pRank] = 0;
      				PlayerInfo[i][pLeader] = 0;
					PlayerInfo[i][pFACWarns] = 0;
					PlayerInfo[i][pFpunish] = 20;
					PlayerInfo[i][pFactionJoin] = 0;
					SetPlayerArmourEx(i, 0);
					tazer[i] = 0;
					ResetPlayerWeaponsEx(i);
		    		ResetPlayerWeapons(i);
		    		if(IsPlayerInAnyVehicle(i)) RemovePlayerFromVehicleEx(i);
					OnDuty[i] = 0;
					if(Undercover[i] == 1)
					{
						Undercover[i] = 0;
						foreach(new xs : Player)
			 			{
			  				ShowPlayerNameTagForPlayer(xs, playerid, 1);
			       		}
					}
					SetPlayerSkin(i,PlayerInfo[i][pModel]);
					if(PlayerInfo[i][pLanguage] == 2)
					{
						format(string1, sizeof(string1), "Ai fost demis de %s din factiunea din care faceai parte dupa %d zile, cu FP. Motiv: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
						ShowPlayerDialog(i, DIALOG_GETUNINVITE, DIALOG_STYLE_MSGBOX, "Uninvite", string1, "Inchide", "");
					}
					else
					{
						format(string1, sizeof(string1), "You were uninvited by %s from your faction after %d days, with FP. Reason: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
						ShowPlayerDialog(i, DIALOG_GETUNINVITE, DIALOG_STYLE_MSGBOX, "Uninvite", string1, "Close", "");
					}
					test++;
				}
			}
			format(string1, sizeof(string1),"%s was uninvited by %s from faction %s (rank %d) after %d days, with FP. Reason: %s.",name,PlayerInfo[playerid][pNormalName],DynamicFactions[PlayerInfo[playerid][pMember]][fName],rank,GetDaysFromTimestamp(ftime),reason);
            Factionlog(PlayerInfo[playerid][pMember],idd,PlayerInfo[playerid][pSQLID],string1);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, string1);
			if(test == 0)
			{
				if(language == 2) format(string1, sizeof(string1), "Ai fost demis de %s din factiunea din care faceai parte dupa %d zile, cu FP. Motiv: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
				else format(string1, sizeof(string1), "You were uninvited by %s from your faction after %d days, with FP. Reason: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
				mysql_format(SQL,query, sizeof(query), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')", idd, string1);
				mysql_tquery(SQL,query,"","");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_NOUNINVITE)
	{
		if(response)
		{
			new string1[300],result[30],name[30],rank,ftime,reason[128],idd,fhid,language,test;
			format(string1, sizeof(string1), "SELECT * FROM `users` WHERE `id`='%d'",Selected2[playerid]);
			new Cache: membresult = mysql_query(SQL,string1);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				cache_get_field_content(i, "name", result); format(name, 30, result);
				ftime = cache_get_field_content_int(i, "FactionJoin");
				rank = cache_get_field_content_int(i, "Rank");
				idd = cache_get_field_content_int(i, "id");
				language = cache_get_field_content_int(i, "Language");
			}
			cache_delete(membresult);
			format(string1, sizeof(string1), "SELECT * FROM `faction_logs` WHERE `player`='%d' ORDER BY `id` DESC LIMIT 1", idd);
			new Cache: abx = mysql_query(SQL, string1);
			fhid = cache_get_field_content_int(0, "id");
			cache_delete(abx);
			mysql_real_escape_string(inputtext, reason);
			new string2[300],query[300],string3[300];
			format(string2, sizeof(string2), "%s was uninvited by %s from faction %s (rank %d) after %d days, without FP. Reason: %s.", name,PlayerInfo[playerid][pNormalName],DynamicFactions[PlayerInfo[playerid][pMember]][fName],rank,GetDaysFromTimestamp(ftime),reason);
			mysql_real_escape_string(string2, string3);
			mysql_format(SQL, query, sizeof(query), "DELETE FROM `faction_logs` WHERE `id`='%d'", fhid);
			mysql_tquery(SQL,query,"","");
			mysql_format(SQL, query, sizeof(query), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string3, idd, PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,query,"","");
			mysql_format(SQL,string1,sizeof(string1),"UPDATE users SET `Team`='3',`Member`='0',`Leader`='0',`Rank`='0',`FPunish`='0',`FWarn`='0',`FactionJoin`='0' WHERE `id`='%d'",Selected2[playerid]);
			mysql_tquery(SQL,string1,"","");
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pSQLID] == Selected2[playerid])
				{
					if(InWar[PlayerInfo[i][pMember]] != 0) PlayerTextDrawHide(i, TimeLeftWar1[i]);
					gTeam[i] = 3;
					PlayerInfo[i][pTeam] = 3;
					PlayerInfo[i][pMember] = 0;
					PlayerInfo[i][pRank] = 0;
      				PlayerInfo[i][pLeader] = 0;
					PlayerInfo[i][pFACWarns] = 0;
					if(IsPlayerInAnyVehicle(i)) RemovePlayerFromVehicleEx(i);
					PlayerInfo[i][pFpunish] = 0;
					PlayerInfo[i][pFactionJoin] = 0;
					SetPlayerArmourEx(i, 0);
					ResetPlayerWeaponsEx(i);
		    		ResetPlayerWeapons(i);
					tazer[i] = 0;
					OnDuty[i] = 0;
					if(Undercover[i] == 1)
					{
						Undercover[i] = 0;
						foreach(new xs : Player)
			 			{
			  				ShowPlayerNameTagForPlayer(xs, playerid, 1);
			       		}
					}
					SetPlayerSkin(i,PlayerInfo[i][pModel]);
					if(PlayerInfo[i][pLanguage] == 2)
					{
						format(string1, sizeof(string1), "Ai fost demis de %s din factiunea din care faceai parte dupa %d zile, fara FP. Motiv: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
						ShowPlayerDialog(i, DIALOG_GETUNINVITE, DIALOG_STYLE_MSGBOX, "Uninvite", string1, "Inchide", "");
					}
					else
					{
						format(string1, sizeof(string1), "You were uninvited by %s from your faction after %d days, without FP. Reason: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
						ShowPlayerDialog(i, DIALOG_GETUNINVITE, DIALOG_STYLE_MSGBOX, "Uninvite", string1, "Close", "");
					}
					test++;
				}
			}
			format(string1, sizeof(string1),"%s was uninvited by %s from faction %s (rank %d) after %d days, without FP. Reason: %s.",name,PlayerInfo[playerid][pNormalName],DynamicFactions[PlayerInfo[playerid][pMember]][fName],rank,GetDaysFromTimestamp(ftime),reason);
            Factionlog(PlayerInfo[playerid][pMember],idd,PlayerInfo[playerid][pSQLID],string1);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, string1);
			if(test == 0)
			{
				if(language == 2) format(string1, sizeof(string1), "Ai fost demis de %s din factiunea din care faceai parte dupa %d zile, fara FP. Motiv: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
				else format(string1, sizeof(string1), "You were uninvited by %s from your faction after %d days, without FP. Reason: %s.", PlayerInfo[playerid][pNormalName], GetDaysFromTimestamp(ftime), reason);
				mysql_format(SQL,query, sizeof(query), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')", idd, string1);
				mysql_tquery(SQL,query,"","");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_FWARN)
	{
		if(response)
		{
			new str[256],stringg[128],fwarn,name[30],name2[30],result[30],idd,fcttime;
			format(stringg, sizeof(stringg), "SELECT * FROM `users` WHERE `id`='%d'",Selected2[playerid]);
			new Cache: membresult = mysql_query(SQL,stringg);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				idd = cache_get_field_content_int(i, "id");
				cache_get_field_content(i, "name", result); format(name2, 30, result);
				fwarn = cache_get_field_content_int(i, "FWarn");
				fcttime = cache_get_field_content_int(i, "FactionTime");
			}
			cache_delete(membresult);
			if(fwarn >= 2) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Poti da maxim 2 FW unui membru, la al 3-lea FW se da uninvite.");
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `FWarn`='%d',`FactionTime`='%d' WHERE `id`='%d'",fwarn+1,fcttime + 7*86400,Selected2[playerid]);
			mysql_tquery(SQL,str,"","");
			GetPlayerName(playerid, name, sizeof(name));
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pSQLID] == Selected2[playerid])
				{
					PlayerInfo[i][pFACWarns]++;
					PlayerInfo[i][pFactionTime] += 7*86400;
					format(stringg, sizeof(stringg),"%s gived you a FW (faction warn). Your rank up date was changed (+7 days from now)",name);
					SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
				}
			}
			format(str,sizeof(str),"%s received a faction warn from %s. FW: %d/3.",name2,name,(fwarn+1));
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
			Factionlog(PlayerInfo[playerid][pMember],idd,PlayerInfo[playerid][pSQLID],str);
		}
		return 1;
	}
	if(dialogid == DIALOG_FUNWARN)
	{
		if(response)
		{
			new str[256],stringg[128],fwarn,name[30],name2[30],result[30],idd,fcttime;
			format(stringg, sizeof(stringg), "SELECT * FROM `users` WHERE `id`='%d'",Selected2[playerid]);
			new Cache: membresult = mysql_query(SQL,stringg);
			for(new i, j = cache_get_row_count (); i != j; ++i)
			{
				idd = cache_get_field_content_int(i, "id");
				cache_get_field_content(i, "name", result); format(name2, 30, result);
				fwarn = cache_get_field_content_int(i, "FWarn");
				fcttime = cache_get_field_content_int(i, "FactionTime");
			}
			cache_delete(membresult);
			if(fwarn == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Acel membru nu are niciun FW.");
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `FWarn`='%d',`FactionTime`='%d' WHERE `id`='%d'",fwarn-1,fcttime-7*86400,Selected2[playerid]);
			mysql_tquery(SQL,str,"","");
			GetPlayerName(playerid, name, sizeof(name));
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pSQLID] == Selected2[playerid])
				{
					PlayerInfo[i][pFACWarns]--;
					PlayerInfo[i][pFactionTime] -= 7*86400;
					format(stringg, sizeof(stringg),"%s cleared a FW (faction warn).",name);
					SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
				}
			}
			format(str,sizeof(str),"%s got a FW clear from %s.",name2,name);
			SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, str);
			Factionlog(PlayerInfo[playerid][pMember],idd,PlayerInfo[playerid][pSQLID],str);
		}
		return 1;
	}
	if(dialogid == DIALOG_CLAN)
	{
			if(!response)
			{
				hidePlayerDialog(playerid);
			}
			else
			{
				if(PlayerInfo[playerid][pClan] >= 1)
				{
					switch(listitem)
					{
						case 0:
						{
							SendClientMessage(playerid, COLOR_GENANNOUNCE, "Clan help:");
							SendClientMessage(playerid, COLOR_GREY, "/clan - clan menu, /c - clan chat, /cinvite - invite member to clan, /quitclan - quit the clan");
						}
						case 1:
						{
							new aim[569],query[300],warns[5],test[5],result[300],idd,mid=1,aim2[600],clandep;
							format(query, sizeof(query), "SELECT * FROM `users` WHERE `Clan` = '%d' ORDER BY `CRank` DESC LIMIT 100",PlayerInfo[playerid][pClan]);
							new Cache: membresult = mysql_query(SQL,query);
							for(new i, j = cache_get_row_count (); i != j; ++i)
							{
								cache_get_field_content(i, "name", result); format(query, 30, result);
								cache_get_field_content(i, "CRank", result); format(test, 5, result);
								cache_get_field_content(i, "ClanWarns", result); format(warns, 5, result);
								idd = cache_get_field_content_int(i, "id");
								clandep = cache_get_field_content_int(i, "ClanDep");
								Selected[playerid][mid] = idd;
								format(aim, sizeof(aim), "%s%s\t%s\t%s/3\t%s$\n",aim, query, test, warns, FormatNumber(clandep));
								mid++;
							}
							cache_delete(membresult);
							format(aim2,sizeof(aim2),"Name\tRank\tWarns\tDeposited\n%s",aim);
							ShowPlayerDialog(playerid, DIALOG_CLANMEMBERS, DIALOG_STYLE_TABLIST_HEADERS, "Clan Members", aim2, "Select", "Back");
						}
						case 2:
						{
							ShowPlayerDialog(playerid, DIALOG_CLANSETTINGS, DIALOG_STYLE_LIST, "Clan settings", "Clan Rank Names\nChange Clan Chat Color", "Select", "Back");
						}
						case 3:
						{
							new strings[256];
							format(strings,sizeof(strings),"Remove Clan Tag: %s\nUse Clan Tag #1: %s%s\nUse Clan Tag #2: %s%s",PlayerInfo[playerid][pNormalName],ClanInfo[PlayerInfo[playerid][pClan]][cClanTag],PlayerInfo[playerid][pNormalName],PlayerInfo[playerid][pNormalName],ClanInfo[PlayerInfo[playerid][pClan]][cClanTag]);
							ShowPlayerDialog(playerid, DIALOG_CLAN_TAG, DIALOG_STYLE_LIST, "Clan Tag",strings, "Select", "Back");
						}
						case 4:
						{
							new strings[512],string2[256];
							format(strings,sizeof(strings),"{FFFFFF}For deposit money in clan safe is necessary to work at server's jobs.\n{FFFFFF}10 percent of the money you earn will be deposited in clan safe.\n");
							format(string2,sizeof(string2),"{FFFFFF}You don't loose money, the money added in clan safe are the server's money.\n{FFFFFF}Current balance: %s$.\n{FF0000}Nobody can take money from the safe box.",FormatNumber(ClanInfo[PlayerInfo[playerid][pClan]][cClanSeif]));
							strcat(strings, string2);
							ShowPlayerDialog(playerid, DIALOG_CLAN_SAFE, DIALOG_STYLE_MSGBOX, "Clan Safe Box",strings, "Ok", "Back");
						}
						case 5:
						{
							ShowPlayerDialog(playerid, DIALOG_CLAN_VEHICLES, DIALOG_STYLE_LIST, "Clan vehicles","Owned vehicles\nBuy a new vehicle", "Select", "Back");
						}
					}
				}
				else
				{
					hidePlayerDialog(playerid);
				}
			}
		}
	if(dialogid == DIALOG_CLAN_VEHICLES)
	{
		if(!response) ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag\nClan Safebox\nClan Vehicles", "Select", "Close");
		else 
		{
			switch(listitem)
			{
				case 0:
				{
					new masina1[256],masina[1000],count=0;
					for(new id; id < 5; id++)
					{
						if(ClanInfo[PlayerInfo[playerid][pClan]][cCar][id] != -1) count++;
					}
					if(count == 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This clan don't own any cars.");
					format(masina1, sizeof(masina1), "Vehicle\tSqlID\tStatus\n");
					strcat(masina, masina1);
					for(new id; id < 5; id++)
					{
						if(ClanInfo[PlayerInfo[playerid][pClan]][cCar][id] != -1)
						{
							if(ClanInfo[PlayerInfo[playerid][pClan]][cCarID][id] != 0)
							{
								format(masina1, sizeof(masina1), "{FFFFFF}%s\t%d\t{0C370A}(spawned) \n",aVehicleNames[ClanInfo[PlayerInfo[playerid][pClan]][cCarModel][id] - 400],ClanInfo[PlayerInfo[playerid][pClan]][cCar][id]);
								strcat(masina, masina1);
							}
							else
							{
								format(masina1, sizeof(masina1), "{FFFFFF}%s\t%d\t{FB0404}(despawned)\n",aVehicleNames[ClanInfo[PlayerInfo[playerid][pClan]][cCarModel][id] - 400],ClanInfo[PlayerInfo[playerid][pClan]][cCar][id]);
								strcat(masina, masina1);
							}
							count++;
						}
					}
					ShowPlayerDialog(playerid,DIALOG_CLAN_VEHSPW,DIALOG_STYLE_TABLIST_HEADERS,"Manage clan vehicles",masina,"Select","Exit");
				}
				case 1:
				{
					if(PlayerInfo[playerid][pCRank] < 7) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be rank 7 in this clan.");
					ShowPlayerDialog(playerid, DIALOG_CLAN_VEHBUY,  DIALOG_STYLE_TABLIST_HEADERS, "Clan vehicle buy","Vehicle\tPrice\nTurismo\t250.000$\nSultan\t500.000$\nBullet\t1.000.000$\nInfernus\t1.500.000$", "Select", "Back");
				}
			}
		}
	}
	if(dialogid == DIALOG_CLAN_VEHBUY)
	{
		if(!response) ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag\nClan Safebox\nClan Vehicles", "Select", "Close");
		else 
		{
			
			switch(listitem)
			{
				case 0:
				{
					InsertClanCar(PlayerInfo[playerid][pClan],451,250000);
				}
				case 1:
				{
					InsertClanCar(PlayerInfo[playerid][pClan],560,500000);
				}
				case 2:
				{
					InsertClanCar(PlayerInfo[playerid][pClan],541,1000000);
				}
				case 3:
				{
					InsertClanCar(PlayerInfo[playerid][pClan],411,1500000);
				}
			}
		}
	}
	if(dialogid == DIALOG_CLAN_VEHSPW)
	{
		if(response)
		{
			if(listitem < 5)
			{
				if(ClanInfo[PlayerInfo[playerid][pClan]][cCar][listitem] != -1)
				{
					new titlestring[128],s=listitem;
					format(titlestring,sizeof(titlestring),"Manage clan %s (%d)",aVehicleNames[ClanInfo[PlayerInfo[playerid][pClan]][cCarModel][s] - 400],ClanInfo[PlayerInfo[playerid][pClan]][cCar][s]);
					SelectedCar[playerid] = s;
					ShowPlayerDialog(playerid,DIALOG_CLAN_VEHSPW+1,DIALOG_STYLE_LIST,titlestring,"{FFFFFF}Tow Vehicle (/park)\nFind Vehicle\nUnstuck Vehicle(rank 6+)\nSell vehicle(rank 7)","Select","Close");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_CLAN_VEHSPW+1)
	{
		if(response)
		{
			if(listitem == 0)
			{
				new i = SelectedCar[playerid];
				if(IsTrailerAttachedToVehicle(ClanInfo[PlayerInfo[playerid][pClan]][cCarID][i])) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} On a mission right now, can't use this command.");
				if(!CarTow(ClanInfo[PlayerInfo[playerid][pClan]][cCarID][i]) && ClanInfo[PlayerInfo[playerid][pClan]][cCarID][i] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} The car is in use and it can't be towed.");
				if(ClanInfo[PlayerInfo[playerid][pClan]][cCarID][i] != 0) DestroyVehicle(ClanInfo[PlayerInfo[playerid][pClan]][cCarID][i]);
				LoadClanCar(PlayerInfo[playerid][pClan]);
				ClanInfo[PlayerInfo[playerid][pClan]][cCarID][i] = CreateVehicle(ClanInfo[PlayerInfo[playerid][pClan]][cCarModel][i],ClanInfo[PlayerInfo[playerid][pClan]][cCarLocX][i],ClanInfo[PlayerInfo[playerid][pClan]][cCarLocY][i],ClanInfo[PlayerInfo[playerid][pClan]][cCarLocZ][i],ClanInfo[PlayerInfo[playerid][pClan]][cCarAngle][i],ClanInfo[PlayerInfo[playerid][pClan]][cCarColor1][i],ClanInfo[PlayerInfo[playerid][pClan]][cCarColor2][i],-1);
				SetVehicleNumberPlate(ClanInfo[PlayerInfo[playerid][pClan]][cCarID][i], cCarPlate[PlayerInfo[playerid][pClan]][i]);
				vehRadio[ClanInfo[PlayerInfo[playerid][pClan]][cCarID][i]] = 0;
				Gas[ClanInfo[PlayerInfo[playerid][pClan]][cCarID][i]] = 100;
				SendClientMessage(playerid, COLOR_GREY, "Clan car has been respawned.");
				KillTimer(destroytimer[PlayerInfo[playerid][pClan]][i]);
				destroytimer[PlayerInfo[playerid][pClan]][i] = SetTimerEx("DestroyClanCar",600000,0,"d",ClanInfo[PlayerInfo[playerid][pClan]][cCarID][i]);
			}
			if(listitem == 1)
			{
				new i = SelectedCar[playerid];
				if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} On a mission right now, can't use this command.");
				if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You can't use this while robbing the bank.");
			    if(CP[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && CheckBus[playerid] < 1 && GotoMats[playerid] < 1)
				{
					if(ClanInfo[PlayerInfo[playerid][pClan]][cCarID][i] != 0)
					{
						LocateCar(ClanInfo[PlayerInfo[playerid][pClan]][cCarID][i],playerid);
					}
					else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This vehicle is not spawned.");
				}
				else
				{
	    			ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel checkpoint", "You are sure to cancel the current checkpoint?", "Yes", "No");
				}
			}
			if(listitem == 2)
			{
				new i = SelectedCar[playerid];
				if(PlayerInfo[playerid][pCRank] < 6) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need minimum rank 6 to use this function.");
				if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} On a mission right now, can't use this command.");
				if(BusinessRob[playerid] > 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You can't use this while robbing the bank.");
			    if(CP[playerid] < 1 && !IsATruck(GetPlayerVehicleID(playerid)) && CheckBus[playerid] < 1 && GotoMats[playerid] < 1)
				{
					if(ClanInfo[PlayerInfo[playerid][pClan]][cCarID][i] != 0)
					{
						if(PlayerInfo[playerid][pLanguage] == 1) ShowPlayerDialog(playerid, DIALOG_UNSTUCK2, DIALOG_STYLE_MSGBOX, "Unstuck car", "This option was created for those who can't find the car using /findcar.\nUsing this option your car will be spawned in a parking lot in LV.\n\nAre you sure you want to do this?", "Yes", "No");
						else if(PlayerInfo[playerid][pLanguage] == 2) ShowPlayerDialog(playerid, DIALOG_UNSTUCK2, DIALOG_STYLE_MSGBOX, "Unstuck car", "Aceasta optiune a fost creata pentru cei care nu-si pot gasi masina folosind /findcar.\nFolosind aceasta optiune vei avea masina spawnata intr-o parcare din LV.\n\nEsti sigur ca vrei sa faci asta?", "Da", "Nu");
					}
					else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This vehicle is not spawned.");
				}
				else
				{
	    			ShowPlayerDialog(playerid, DIALOG_JOBULETES, DIALOG_STYLE_MSGBOX, "Cancel checkpoint", "You are sure to cancel the current checkpoint?", "Yes", "No");
				}
			}
			if(listitem == 3)
			{
				if(PlayerInfo[playerid][pCRank] < 7) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be the leader to use this function.");
				ShowPlayerDialog(playerid, DIALOG_SELLCLANCAR, DIALOG_STYLE_MSGBOX, "Sell clan car", "You are sure to sell clan vehicle for 4.000.000$?", "Yes", "No");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_SELLCLANCAR)
	{
		if(response){
			new i = SelectedCar[playerid];
			new strings[256];
			mysql_format(SQL, strings, sizeof(strings), "UPDATE `clancars` SET `Active`='0' WHERE `ID`='%d'", ClanInfo[PlayerInfo[playerid][pClan]][cCar][i]);
			mysql_query(SQL,strings);
			ClanInfo[PlayerInfo[playerid][pClan]][cCar][i] = -1;
			if(ClanInfo[PlayerInfo[playerid][pClan]][cCarID][i] != 0) {
				vehEngine[ClanInfo[PlayerInfo[playerid][pClan]][cCarID]] = 0;
				DestroyVehicle(ClanInfo[PlayerInfo[playerid][pClan]][cCarID][i]);
				ClanInfo[PlayerInfo[playerid][pClan]][cCarID][i] = 0;
			}
			TogglePlayerControllable(playerid, 1);

			ClanInfo[PlayerInfo[playerid][pClan]][cClanSeif] += 10000;
			format(strings, sizeof(strings), "{%s}Vehicle car (%s) was selled for $10.000!",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],aVehicleNames[ClanInfo[PlayerInfo[playerid][pClan]][cCarModel][i] - 400]);
			SendToClan(PlayerInfo[playerid][pClan], COLOR_WHITE, strings);
			ClanUpdate(PlayerInfo[playerid][pClan],ClanSafex);

			ClanInfo[PlayerInfo[playerid][pClan]][cCarModel][i] 		= 0;
			ClanInfo[PlayerInfo[playerid][pClan]][cCarLocX][i] 		= 0.0;
			ClanInfo[PlayerInfo[playerid][pClan]][cCarLocY][i] 		= 0.0;
			ClanInfo[PlayerInfo[playerid][pClan]][cCarLocZ][i] 		= 0.0;
			ClanInfo[PlayerInfo[playerid][pClan]][cCarAngle][i] 		= 0.0;
			ClanInfo[PlayerInfo[playerid][pClan]][cCarColor1][i] 	= 1;
			ClanInfo[PlayerInfo[playerid][pClan]][cCarColor2][i] 	= 1;
			cCarPlate[PlayerInfo[playerid][pClan]][i] = "";
			cCarOwner[PlayerInfo[playerid][pClan]][i] = "";

			LoadClanCar(PlayerInfo[playerid][pClan]);
			KillTimer(destroytimer[PlayerInfo[playerid][pClan]][i]);
		}
		return 1;
	}
	if(dialogid == DIALOG_CLAN_SAFE)
	{
		if(!response) ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag\nClan Safebox\nClan Vehicles", "Select", "Close");
	}
	if(dialogid == DIALOG_CLANMEMBERS)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pClan] >= 1)
			{
				listitem++;
				if(listitem > 0)
				{
					new name[30],result[30],query[300],test[5],warns[5],laston[64],clanjoin,strings[300],date[6];
					format(query, sizeof(query), "SELECT * FROM `users` WHERE `id`='%d'",Selected[playerid][listitem]);
					new Cache: membresult = mysql_query(SQL,query);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "name", result); format(name, 30, result);
						cache_get_field_content(i, "CRank", result); format(test, 5, result);
						cache_get_field_content(i, "ClanWarns", result); format(warns, 5, result);
						cache_get_field_content(i, "lastOn", result); format(laston, 64, result);
						clanjoin = cache_get_field_content_int(i, "ClanJoin");
					}
					cache_delete(membresult);
					TimestampToDate(clanjoin,date[0],date[1],date[2],date[3],date[4],date[5],2);
					Selected2[playerid] = Selected[playerid][listitem];
					format(strings,sizeof(strings),"User: %s\nRank: %s\nWarns: %s/3\nJoined: %02d-%02d-%02d %02d:%02d:%02d\nLast login: %s\nDays in clan: %d",name,test,warns,date[0],date[1],date[2],date[3],date[4],date[5],laston,GetDaysFromTimestamp(clanjoin));
					if(PlayerInfo[playerid][pCRank] > 5)
					{
						ShowPlayerDialog(playerid, DIALOG_CLANMEMBERS2, DIALOG_STYLE_MSGBOX, "Manage user", strings, "Options", "Back");
					}
					else
					{
						ShowPlayerDialog(playerid, DIALOG_CLANMEMBERS2, DIALOG_STYLE_MSGBOX, "Manage user", strings, "Back", "");
					}
				}
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag\nClan Safebox\nClan Vehicles", "Select", "Close");
	}
	if(dialogid == DIALOG_CLANMEMBERS2)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pCRank] > 5)
			{
				ShowPlayerDialog(playerid, DIALOG_CLANMEMBERS3, DIALOG_STYLE_LIST, "Manage user", "Set clan rank\nSet clan warn\nUninvite from clan", "Options", "Back");
			}
			else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag\nClan Safebox\nClan Vehicles", "Select", "Close");
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag\nClan Safebox\nClan Vehicles", "Select", "Close");
	}
	if(dialogid == DIALOG_CLAN_WARNS)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pCRank] >= 6)
			{
				if(listitem >= 0)
				{
					new name1[30],name2[30],rank,str1[300],result[30],clan = PlayerInfo[playerid][pClan],strings[128],str2[128],sqlid;
					format(str1, sizeof(str1), "SELECT name, CRank FROM `users` WHERE `id`='%d'",Selected2[playerid]);
					new Cache: membresult = mysql_query(SQL,str1);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "name", result); format(name2, 30, result);
						rank = cache_get_field_content_int(i, "CRank");
						sqlid = cache_get_field_content_int(i, "id");
					}
					cache_delete(membresult);
					if(PlayerInfo[playerid][pSQLID] == sqlid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti sa iti dai warn singur.");
					if(rank > 5 && PlayerInfo[playerid][pCRank] < 7) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Numai liderul (rank 7) poate seta warn levelul membrilor cu rank mai mare de 5.");
					foreach(new i : Player)
					{
						if(PlayerInfo[i][pSQLID] == Selected2[playerid])
						{
							PlayerInfo[i][pWarns] = (listitem);
						}
					}
					GetPlayerName(playerid, name1, sizeof(name1));
					format(str1,sizeof(str1),"{%s}[CLAN] %s changed %s's warn level to %d.", ClanInfo[clan][cClanColor], name1, name2, listitem);
					SendToClan(PlayerInfo[playerid][pClan], COLOR_WHITE, str1);
					mysql_format(SQL,str1, sizeof(str1), "UPDATE users SET `ClanWarns`='%d' WHERE `id`='%d'", listitem,Selected2[playerid]);
	       			mysql_tquery(SQL,str1,"","");
					format(str1, sizeof(str1), "%s changed %s's warn level to %d.",name1,name2,listitem);
					mysql_real_escape_string(str1, strings);
					mysql_format(SQL,str2,sizeof(str2),"INSERT INTO clan_logs (`action`,`clanid`) VALUES ('%s','%d')",strings,PlayerInfo[playerid][pClan]);
					mysql_tquery(SQL,str2,"","");
				}
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag\nClan Safebox\nClan Vehicles", "Select", "Close");
	}
	if(dialogid == DIALOG_CLAN_RANK)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pCRank] == 6)
			{
				if(listitem >= 0 && listitem <= 5)
				{
					new name1[30],name2[30],rank,str1[300],result[30],clan = PlayerInfo[playerid][pClan],strings[128],str2[128];
					format(str1, sizeof(str1), "SELECT name, CRank FROM `users` WHERE `id`='%d'",Selected2[playerid]);
					new Cache: membresult = mysql_query(SQL,str1);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "name", result); format(name2, 30, result);
						rank = cache_get_field_content_int(i, "CRank");
					}
					cache_delete(membresult);
					if(rank > 5 && PlayerInfo[playerid][pCRank] < 7) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Numai liderul (rank 7) poate seta rank-ul membrilor cu rank mai mare de 5.","(Error){FFFFFF} Only leader (rank 7) can set member rank above rank 5.");
					foreach(new i : Player)
					{
						if(PlayerInfo[i][pSQLID] == Selected2[playerid])
						{
							PlayerInfo[i][pCRank] = (listitem+1);
						}
					}
					GetPlayerName(playerid, name1, sizeof(name1));
					format(str1,sizeof(str1),"{%s}[CLAN] %s changed %s's rank to %d.", ClanInfo[clan][cClanColor], name1, name2, (listitem+1));
					SendToClan(PlayerInfo[playerid][pClan], COLOR_WHITE, str1);
					mysql_format(SQL,str1, sizeof(str1), "UPDATE users SET `CRank`='%d' WHERE `id`='%d'", (listitem+1),Selected2[playerid]);
	       			mysql_tquery(SQL,str1,"","");
					format(str2, sizeof(str2), "%s changed %s's rank to %d.",name1,name2,(listitem+1));
					mysql_real_escape_string(str2, strings);
					mysql_format(SQL,str1,sizeof(str1),"INSERT INTO clan_logs (`action`,`clanid`) VALUES ('%s','%d')",strings,PlayerInfo[playerid][pClan]);
					mysql_tquery(SQL,str1,"","");
				}
				if(listitem > 5) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Numai liderul clanului (rank 7) poate acorda rank 6 sau 7.","(Error){FFFFFF} Only leader (rank 7) can set member rank to 6 or 7.");
			}
			else if(PlayerInfo[playerid][pCRank] == 7)
			{
				if(listitem >= 0 && listitem <= 5)
				{
					new name1[30],name2[30],str1[300],result[30],clan = PlayerInfo[playerid][pClan],str2[128],strings[128];
					mysql_format(SQL,str1, sizeof(str1), "UPDATE users SET `CRank`='%d' WHERE `id`='%d'", (listitem+1),Selected2[playerid]);
	       			mysql_tquery(SQL,str1,"","");
					format(str1, sizeof(str1), "SELECT name FROM `users` WHERE `id`='%d'",Selected2[playerid]);
					new Cache: membresult = mysql_query(SQL,str1);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "name", result); format(name2, 30, result);
					}
					cache_delete(membresult);
					foreach(new i : Player)
					{
						if(PlayerInfo[i][pSQLID] == Selected2[playerid])
						{
							PlayerInfo[i][pCRank] = (listitem+1);
						}
					}
					GetPlayerName(playerid, name1, sizeof(name1));
					format(str1,sizeof(str1),"{%s}[CLAN] %s changed %s's rank to %d.", ClanInfo[clan][cClanColor], name1, name2, (listitem+1));
					SendToClan(PlayerInfo[playerid][pClan], COLOR_WHITE, str1);
					format(str2, sizeof(str2), "%s changed %s's rank to %d.",name1,name2,(listitem+1));
					mysql_real_escape_string(str2, strings);
					mysql_format(SQL,str1,sizeof(str1),"INSERT INTO clan_logs (`action`,`clanid`) VALUES ('%s','%d')",strings,PlayerInfo[playerid][pClan]);
					mysql_tquery(SQL,str1,"","");
				}
				if(listitem == 6)
				{
					new name1[30],name2[30],str1[300],result[30],clan = PlayerInfo[playerid][pClan],str2[128],strings[128];
					mysql_format(SQL,str1, sizeof(str1), "UPDATE users SET `CRank`='7' WHERE `id`='%d'", Selected2[playerid]);
	       			mysql_tquery(SQL,str1,"","");
					mysql_format(SQL,str1, sizeof(str1), "UPDATE users SET `CRank`='6' WHERE `id`='%d'", PlayerInfo[playerid][pSQLID]);
	       			mysql_tquery(SQL,str1,"","");
					format(str1, sizeof(str1), "SELECT name FROM `users` WHERE `id`='%d'",Selected2[playerid]);
					new Cache: membresult = mysql_query(SQL,str1);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "name", result); format(name2, 30, result);
					}
					cache_delete(membresult);
					foreach(new i : Player)
					{
						if(PlayerInfo[i][pSQLID] == Selected2[playerid])
						{
							PlayerInfo[i][pCRank] = 7;
						}
					}
					PlayerInfo[playerid][pCRank] = 6;
					GetPlayerName(playerid, name1, sizeof(name1));
					format(str1,sizeof(str1),"{%s}[CLAN] %s changed %s's rank to 7.", ClanInfo[clan][cClanColor], name1, name2);
					SendToClan(PlayerInfo[playerid][pClan], COLOR_WHITE, str1);
					format(str2, sizeof(str2), "%s changed %s's rank to 7.",name1,name2);
					mysql_real_escape_string(str2, strings);
					mysql_format(SQL,str1,sizeof(str1),"INSERT INTO clan_logs (`action`,`clanid`) VALUES ('%s','%d')",strings,PlayerInfo[playerid][pClan]);
					mysql_tquery(SQL,str1,"","");
				}
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag\nClan Safebox\nClan Vehicles", "Select", "Close");
	}
	if(dialogid == DIALOG_CLANMEMBERS3)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(PlayerInfo[playerid][pCRank] == 6)
				{
					ShowPlayerDialog(playerid, DIALOG_CLAN_RANK, DIALOG_STYLE_LIST, "Set user rank", "Set rank 1\nSet rank 2\nSet rank 3\nSet rank 4\nSet rank 5", "Select", "Back");
				}
				else if(PlayerInfo[playerid][pCRank] == 7)
				{
					ShowPlayerDialog(playerid, DIALOG_CLAN_RANK, DIALOG_STYLE_LIST, "Set user rank", "Set rank 1\nSet rank 2\nSet rank 3\nSet rank 4\nSet rank 5\nSet rank 6\nSet rank 7 - you will get demoted to rank 6", "Select", "Back");
				}
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pCRank] > 5)
				{
					ShowPlayerDialog(playerid, DIALOG_CLAN_WARNS, DIALOG_STYLE_LIST, "Set user warns", "Warns: 0/3\nWarns: 1/3\nWarns: 2/3", "Select", "Back");
				}
			}
			if(listitem == 2)
			{
				if(PlayerInfo[playerid][pCRank] > 5)
				{
					new str1[300],name1[30],name2[30],rank,clan = PlayerInfo[playerid][pClan],result[30],strings[300],str2[128],sqlid;
					format(str1, sizeof(str1), "SELECT name, CRank FROM `users` WHERE `id`='%d'",Selected2[playerid]);
					new Cache: membresult = mysql_query(SQL,str1);
					for(new i, j = cache_get_row_count (); i != j; ++i)
					{
						cache_get_field_content(i, "name", result); format(name2, 30, result);
						rank = cache_get_field_content_int(i, "CRank");
						sqlid = cache_get_field_content_int(i, "id");
					}
					cache_delete(membresult);
					if(PlayerInfo[playerid][pSQLID] == sqlid) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu poti sa iti dai warn singur.");
					if(rank > 5 && PlayerInfo[playerid][pCRank] < 7) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Numai liderul (rank 7) poate da afara membrii cu rank mai mare de 5.","(Error){FFFFFF} Only leader can uninvite member with rank above 5.");
					GetPlayerName(playerid, name1, sizeof(name1));
					foreach(new userID : Player)
					{
						if(PlayerInfo[userID][pSQLID] == Selected2[playerid])
						{
							format(str1,sizeof(str1),"{%s}[CLAN] %s left the clan (uninvited by %s).", ClanInfo[clan][cClanColor], name2, name1);
							SendClientMessage(playerid, COLOR_WHITE, str1);
							SetPlayerName(userID, PlayerInfo[userID][pNormalName]);
							PlayerInfo[userID][pClan] = 0;
							PlayerInfo[userID][pCRank] = 0;
							PlayerInfo[userID][pCWarns] = 0;
						}
					}
					format(str2, sizeof(str2), "%s left the clan (uninvited by %s).",name2,name1);
					mysql_real_escape_string(str2, strings);
					mysql_format(SQL,str1,sizeof(str1),"INSERT INTO clan_logs (`action`,`clanid`) VALUES ('%s','%d')",strings,PlayerInfo[playerid][pClan]);
					mysql_tquery(SQL,str1,"","");
					GetPlayerName(playerid, name1, sizeof(name1));
					mysql_format(SQL, str1, sizeof(str1), "UPDATE users SET `CRank`='0',`Clan`='0',`ClanJoin`='0',`ClanTag`='0',`ClanWarns`='0' WHERE `id`='%d'", Selected2[playerid]);
					mysql_tquery(SQL,str1,"","");
					format(strings,sizeof(strings),"%s uninvited you from clan %s.", name1, ClanInfo[PlayerInfo[playerid][pClan]][cClanName]);
					new stringg[300];
					mysql_real_escape_string(strings, stringg);
					mysql_format(SQL, str1, sizeof(str1), "INSERT INTO `emails` (`playerid`,`Message`) VALUES('%d','%s')",Selected2[playerid],stringg);
					mysql_tquery(SQL,str1,"","");
					format(str1,sizeof(str1),"{%s}[CLAN] %s left the clan (uninvited by %s).", ClanInfo[clan][cClanColor], name2, name1);
					SendToClan(PlayerInfo[playerid][pClan], COLOR_WHITE, str1);
				}
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag\nClan Safebox\nClan Vehicles", "Select", "Close");
	}
	if(dialogid == DIALOG_CLANSETTINGS)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(PlayerInfo[playerid][pCRank] > 5)
				{
					new strings[500],i = PlayerInfo[playerid][pClan];
					format(strings,sizeof(string),"Rank 1: %s\nRank 2: %s\nRank 3: %s\nRank 4: %s\nRank 5: %s\nRank 6: %s\nRank 7: %s",ClanInfo[i][cClanRankName1],ClanInfo[i][cClanRankName2],ClanInfo[i][cClanRankName3],ClanInfo[i][cClanRankName4],ClanInfo[i][cClanRankName5],ClanInfo[i][cClanRankName6],ClanInfo[i][cClanRankName7]);
					ShowPlayerDialog(playerid, DIALOG_CLAN_CHANGERANK, DIALOG_STYLE_LIST, "Change clan ranks", strings, "Change", "Back");
				}
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pCRank] > 5)
				{
					new strings[500];
					format(strings,sizeof(string),"You can go to https://htmlcolorcodes.com/ to get html color codes\nEnter the HTML code for the clan color (default FFCC99):");
					ShowPlayerDialog(playerid, DIALOG_CLAN_COLOR, DIALOG_STYLE_INPUT, "Clan color", strings, "Change", "Back");
				}
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag\nClan Safebox\nClan Vehicles", "Select", "Close");
	}
	if(dialogid == DIALOG_CLAN_CHANGERANK)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pCRank] > 5)
			{
				new strings[256];
				if(listitem == 0)
				{
					format(strings,sizeof(strings),"Current clan rank 1: %s\n\nSet a new clan rank:",ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName1]);
					Selected2[playerid] = 1;
				}
				if(listitem == 1)
				{
					format(strings,sizeof(strings),"Current clan rank 2: %s\n\nSet a new clan rank:",ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName2]);
					Selected2[playerid] = 2;
				}
				if(listitem == 2)
				{
					format(strings,sizeof(strings),"Current clan rank 3: %s\n\nSet a new clan rank:",ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName3]);
					Selected2[playerid] = 3;
				}
				if(listitem == 3)
				{
					format(strings,sizeof(strings),"Current clan rank 4: %s\n\nSet a new clan rank:",ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName4]);
					Selected2[playerid] = 4;
				}
				if(listitem == 4)
				{
					format(strings,sizeof(strings),"Current clan rank 5: %s\n\nSet a new clan rank:",ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName5]);
					Selected2[playerid] = 5;
				}
				if(listitem == 5)
				{
					format(strings,sizeof(strings),"Current clan rank 6: %s\n\nSet a new clan rank:",ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName6]);
					Selected2[playerid] = 6;
				}
				if(listitem == 6)
				{
					format(strings,sizeof(strings),"Current clan rank 7: %s\n\nSet a new clan rank:",ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName7]);
					Selected2[playerid] = 7;
				}
				ShowPlayerDialog(playerid, DIALOG_CLAN_CHANGERANK2, DIALOG_STYLE_INPUT, "Change clan rank", strings, "Change", "Back");
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag\nClan Safebox\nClan Vehicles", "Select", "Close");
	}
	if(dialogid == DIALOG_CLAN_CHANGERANK2)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pCRank] > 5)
			{
				if(strlen(inputtext) < 31)
				{
					new ranktext[40],str1[300],strings[128],strings2[128],namex[30];
					GetPlayerName(playerid, namex, sizeof(namex));
					mysql_real_escape_string(inputtext, ranktext);
					if(Selected2[playerid] == 1)
					{
						strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName1], ranktext, 0, strlen(ranktext), 40);
						mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanRankName1`='%s' WHERE `clanID`='%d'", ranktext,PlayerInfo[playerid][pClan]);
						mysql_tquery(SQL,str1,"","");
						format(strings,sizeof(strings),"{%s}Clan rank 1: %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],inputtext);
						format(strings2, sizeof(strings2), "%s changed clan rank 1 to %s.", namex, inputtext);
					}
					else if(Selected2[playerid] == 2)
					{
						strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName2], ranktext, 0, strlen(ranktext), 40);
						mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanRankName2`='%s' WHERE `clanID`='%d'", ranktext,PlayerInfo[playerid][pClan]);
						mysql_tquery(SQL,str1,"","");
						format(strings,sizeof(strings),"{%s}Clan rank 2: %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],inputtext);
						format(strings2, sizeof(strings2), "%s changed clan rank 2 to %s.", namex, inputtext);
					}
					else if(Selected2[playerid] == 3)
					{
						strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName3], ranktext, 0, strlen(ranktext), 40);
						mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanRankName3`='%s' WHERE `clanID`='%d'", ranktext,PlayerInfo[playerid][pClan]);
						mysql_tquery(SQL,str1,"","");
						format(strings,sizeof(strings),"{%s}Clan rank 3: %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],inputtext);
						format(strings2, sizeof(strings2), "%s changed clan rank 3 to %s.", namex, inputtext);
					}
					else if(Selected2[playerid] == 4)
					{
						strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName4], ranktext, 0, strlen(ranktext), 40);
						mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanRankName4`='%s' WHERE `clanID`='%d'", ranktext,PlayerInfo[playerid][pClan]);
						mysql_tquery(SQL,str1,"","");
						format(strings,sizeof(strings),"{%s}Clan rank 4: %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],inputtext);
						format(strings2, sizeof(strings2), "%s changed clan rank 4 to %s.", namex, inputtext);
					}
					else if(Selected2[playerid] == 5)
					{
						strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName5], ranktext, 0, strlen(ranktext), 40);
						mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanRankName5`='%s' WHERE `clanID`='%d'", ranktext,PlayerInfo[playerid][pClan]);
						mysql_tquery(SQL,str1,"","");
						format(strings,sizeof(strings),"{%s}Clan rank 5: %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],inputtext);
						format(strings2, sizeof(strings2), "%s changed clan rank 5 to %s.", namex, inputtext);
					}
					else if(Selected2[playerid] == 6)
					{
						strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName6], ranktext, 0, strlen(ranktext), 40);
						mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanRankName6`='%s' WHERE `clanID`='%d'", ranktext,PlayerInfo[playerid][pClan]);
						mysql_tquery(SQL,str1,"","");
						format(strings,sizeof(strings),"{%s}Clan rank 6: %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],inputtext);
						format(strings2, sizeof(strings2), "%s changed clan rank 6 to %s.", namex, inputtext);
					}
					else if(Selected2[playerid] == 7)
					{
						strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanRankName7], ranktext, 0, strlen(ranktext), 40);
						mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanRankName7`='%s' WHERE `clanID`='%d'", ranktext,PlayerInfo[playerid][pClan]);
						mysql_tquery(SQL,str1,"","");
						format(strings,sizeof(strings),"{%s}Clan rank 7: %s.",ClanInfo[PlayerInfo[playerid][pClan]][cClanColor],inputtext);
						format(strings2, sizeof(strings2), "%s changed clan rank 7 to %s.", namex, inputtext);
					}
					SendClientMessage(playerid, COLOR_WHITE, strings);
				}
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag\nClan Safebox\nClan Vehicles", "Select", "Close");
	}
	if(dialogid == DIALOG_CLAN_COLOR)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pCRank] > 5)
			{
				new len = strlen(inputtext),str1[300],colortext[7],strings[128];
				if(len == 6)
				{
					for(new i=0;i<len;i++)
					{
						if((inputtext[i] >= 'A' && inputtext[i] <= 'F') || (inputtext[i] >= '0' && inputtext[i] <= '9'))
						{
							mysql_real_escape_string(inputtext, colortext);
							strmid(ClanInfo[PlayerInfo[playerid][pClan]][cClanColor], colortext, 0, strlen(colortext), 64);
							mysql_format(SQL,str1, sizeof(str1), "UPDATE `clans` SET `clanColor`='%s' WHERE `clanName`='%s'", colortext, ClanInfo[PlayerInfo[playerid][pClan]][cClanName]);
							mysql_tquery(SQL,str1,"","");
							format(strings,sizeof(strings),"Clan color changed to {%s}%s{FFFFFF}.",colortext,colortext);
						}
						else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid color.");
					}
					SendClientMessage(playerid, COLOR_WHITE, strings);
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid color.");
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag\nClan Safebox\nClan Vehicles", "Select", "Close");
	}
	if(dialogid == DIALOG_CLAN_TAG)
	{
		if(!response)
		{
			ShowPlayerDialog(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan", "Clan Help\nClan Members\nClan Settings\nClan Tag\nClan Safebox\nClan Vehicles", "Select", "Close");
		}
		else
		{
			if(PlayerInfo[playerid][pClan] >= 1)
			{
				new szName[25],str111[256],str222[256],str333[256],strings[128];
				switch(listitem)
				{
					case 0:
					{
						format(szName, sizeof(szName), "%s", PlayerInfo[playerid][pNormalName]);
						SetPlayerName(playerid, PlayerInfo[playerid][pNormalName]);
						PlayerInfo[playerid][pClanTag] = 0;
                        mysql_format(SQL, str111, sizeof(str111), "UPDATE users SET `ClanTag`='0' WHERE `name`='%s'", PlayerInfo[playerid][pNormalName]);
       				 	mysql_tquery(SQL,str111,"","");
					}
					case 1:
					{
						format(szName, sizeof(szName), "%s%s", ClanInfo[PlayerInfo[playerid][pClan]][cClanTag], PlayerInfo[playerid][pNormalName]);
                        SetPlayerName(playerid, szName);
						PlayerInfo[playerid][pClanTag] = 1;
                        mysql_format(SQL,str222, sizeof(str222), "UPDATE users SET `ClanTag`='1' WHERE `name`='%s'", PlayerInfo[playerid][pNormalName]);
       				 	mysql_tquery(SQL,str222,"","");
					}
					case 2:
					{
						format(szName, sizeof(szName), "%s%s", PlayerInfo[playerid][pNormalName], ClanInfo[PlayerInfo[playerid][pClan]][cClanTag]);
                        SetPlayerName(playerid, szName);
						PlayerInfo[playerid][pClanTag] = 2;
                        mysql_format(SQL,str333, sizeof(str333), "UPDATE users SET `ClanTag`='2' WHERE `name`='%s'", PlayerInfo[playerid][pNormalName]);
       				 	mysql_tquery(SQL,str333,"","");
					}
				}
				format(strings,sizeof(strings),"Your nickname is now: %s",szName);
				SendClientMessage(playerid, COLOR_GENANNOUNCE, strings);
			}
			else
			{
				hidePlayerDialog(playerid);
			}
		}
	}
    
	if(dialogid == DIALOG_REGISTER2)
	{
	    if(response)
		{
		    if(listitem == 0)
			{
				RegSex[playerid] = 1;
				SendClientMessage(playerid, COLOR_LIGHTRED, "(Register){FFFFFF} Gender set to: Male.");
			}
			if(listitem == 1)
			{
				RegSex[playerid] = 2;
				SendClientMessage(playerid, COLOR_LIGHTRED, "(Register){FFFFFF} Gender set to: Woman.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_REGISTER3)
	{
        if(response)
	    {
			new tmppass[64];
			mysql_real_escape_string(inputtext, tmppass);
			new age = strval(tmppass);
			if(age > 1 && age < 100 && response)
			{
				RegAge[playerid] = age;
				new text[64];
				format(text,sizeof(text), "(Register){FFFFFF} Age setted to: %d years", age);
				SendClientMessage(playerid, COLOR_LIGHTRED, text);
			}
        }
        return 1;
 	}
	if(dialogid == DIALOG_PAINTBALLWEAPON)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            new stringg[128],sendernamee[30];
	            if(paintrs[PlayerInfo[playerid][pPaintBallG]] < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use this command now.");
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvoteg[PlayerInfo[playerid][pPaintBallG]][0]++;
				gunvoted[PlayerInfo[playerid][pPaintBallG]]++;
				PlayerInfo[playerid][pPaintBallVoted2] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for the weapon set that includes the weapons deagle, m4, grenade & spray.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
			}
			if(listitem == 1)
	        {
	            new stringg[128],sendernamee[30];
	            if(paintrs[PlayerInfo[playerid][pPaintBallG]] < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use this command now.");
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvoteg[PlayerInfo[playerid][pPaintBallG]][1]++;
				gunvoted[PlayerInfo[playerid][pPaintBallG]]++;
				PlayerInfo[playerid][pPaintBallVoted2] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for weapon baseball bat.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
			}
			if(listitem == 2)
	        {
	            new stringg[128],sendernamee[30];
	            if(paintrs[PlayerInfo[playerid][pPaintBallG]] < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use this command now.");
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvoteg[PlayerInfo[playerid][pPaintBallG]][2]++;
				gunvoted[PlayerInfo[playerid][pPaintBallG]]++;
				PlayerInfo[playerid][pPaintBallVoted2] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for weapon chainsaw.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_RACEVOTEMAP)
	{
		if(response)
		{
			if(listitem == 0)
			{
				new stringg[128],sendernamee[30],strings[600];
	            if(racers < 0) return 1;
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				racevotem[0]++;
				rmapvoted++;
				PlayerInfo[playerid][pRaceVoted] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for map Auto LS-LV.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
				format(strings, sizeof(strings),"Buffalo\nInfernus\nCheetah\nBanshee\nTurismo\nSanchez\nQuad\nZR-350\nComet\nHotring Racer\nSandking\nBlista Compact\nSuper GT\nNRG-500\nBullet\nMonster A\nMonster B\nSultan\nBandito\nKart\nMower\nClub");
				ShowPlayerDialog(playerid, DIALOG_RACEVOTECAR, DIALOG_STYLE_LIST, "Vote Race Car", strings, "Vote", "");
			}
			if(listitem == 1)
			{
				new stringg[128],sendernamee[30],strings[600];
	            if(racers < 0) return 1;
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				racevotem[1]++;
				rmapvoted++;
				PlayerInfo[playerid][pRaceVoted] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for map Chiliad.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
				format(strings, sizeof(strings),"Buffalo\nInfernus\nCheetah\nBanshee\nTurismo\nSanchez\nQuad\nZR-350\nComet\nHotring Racer\nSandking\nBlista Compact\nSuper GT\nNRG-500\nBullet\nMonster A\nMonster B\nSultan\nBandito\nKart\nMower\nClub");
				ShowPlayerDialog(playerid, DIALOG_RACEVOTECAR, DIALOG_STYLE_LIST, "Vote Race Vehicle", strings, "Vote", "");
			}
			if(listitem == 2)
			{
				new stringg[128],sendernamee[30],strings[600];
	            if(racers < 0) return 1;
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				racevotem[2]++;
				rmapvoted++;
				PlayerInfo[playerid][pRaceVoted] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for map The Forest.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
				format(strings, sizeof(strings),"Buffalo\nInfernus\nCheetah\nBanshee\nTurismo\nSanchez\nQuad\nZR-350\nComet\nHotring Racer\nSandking\nBlista Compact\nSuper GT\nNRG-500\nBullet\nMonster A\nMonster B\nSultan\nBandito\nKart\nMower\nClub");
				ShowPlayerDialog(playerid, DIALOG_RACEVOTECAR, DIALOG_STYLE_LIST, "Vote Race Vehicle", strings, "Vote", "");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_RACEVOTECAR)
	{
		if(response)
		{
			new stringg[128],sendernamee[30];
	        if(racers < 0) return 1;
			GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
			racevotec[listitem]++;
			carvoted++;
			PlayerInfo[playerid][pRaceVoted] = 1;
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
				{
					format(stringg,sizeof(stringg),"[VOTE] %s voted for car %s.", sendernamee, aVehicleNames[RaceCar[listitem][0] - 400]);
					SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
				}
			}
			ShowPlayerDialog(playerid, DIALOG_RACEVOTECOL, DIALOG_STYLE_MSGBOX, "Vote Race Collision", "Enable vehicle collisions?", "Yes", "No");
		}
		return 1;
	}
	if(dialogid == DIALOG_RACEVOTECOL)
	{
		if(response)
		{
			new stringg[128],sendernamee[30];
	        if(racers < 0) return 1;
			GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
			racevotecol[0]++;
			if(racevotecol[0] > racevotecol[1])
			{
				racecol = 0;
			}
			PlayerInfo[playerid][pRaceVoted] = 1;
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
				{
					format(stringg,sizeof(stringg),"[VOTE] %s voted for collisions on.", sendernamee);
					SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
				}
			}
		}
		else
		{
			new stringg[128],sendernamee[30];
	        if(racers < 0) return 1;
			GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
			racevotecol[1]++;
			if(racevotecol[1] > racevotecol[0])
			{
				racecol = 1;
			}
			PlayerInfo[playerid][pRaceVoted] = 1;
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pRaceG] == PlayerInfo[playerid][pRaceG])
				{
					format(stringg,sizeof(stringg),"[VOTE] %s voted for collisions off.", sendernamee);
					SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
				}
			}
		}
	}
	if(dialogid == DIALOG_PAINTBALLMAP)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            new stringg[128],sendernamee[30];
	            if(paintrs[PlayerInfo[playerid][pPaintBallG]] < 1) return 1;
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvotem[PlayerInfo[playerid][pPaintBallG]][0]++;
				mapvoted[PlayerInfo[playerid][pPaintBallG]]++;
				PlayerInfo[playerid][pPaintBallVoted] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for map rc_arena.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
			}
			if(listitem == 1)
	        {
	            new stringg[128],sendernamee[30];
	            if(paintrs[PlayerInfo[playerid][pPaintBallG]] < 1) return 1;
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvotem[PlayerInfo[playerid][pPaintBallG]][1]++;
				mapvoted[PlayerInfo[playerid][pPaintBallG]]++;
				PlayerInfo[playerid][pPaintBallVoted] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for map tennis.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
			}
			if(listitem == 2)
	        {
	            new stringg[128],sendernamee[30];
	            if(paintrs[PlayerInfo[playerid][pPaintBallG]] < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use this command now.");
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvotem[PlayerInfo[playerid][pPaintBallG]][2]++;
				mapvoted[PlayerInfo[playerid][pPaintBallG]]++;
				PlayerInfo[playerid][pPaintBallVoted] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for map farm.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
			}
			if(listitem == 3)
	        {
	            new stringg[128],sendernamee[30];
	            if(paintrs[PlayerInfo[playerid][pPaintBallG]] < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use this command now.");
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvotem[PlayerInfo[playerid][pPaintBallG]][3]++;
				mapvoted[PlayerInfo[playerid][pPaintBallG]]++;
				PlayerInfo[playerid][pPaintBallVoted] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for map beach.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
			}
			if(listitem == 4)
	        {
	            new stringg[128],sendernamee[30];
	            if(paintrs[PlayerInfo[playerid][pPaintBallG]] < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't use this command now.");
				GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
				paintvotem[PlayerInfo[playerid][pPaintBallG]][4]++;
				mapvoted[PlayerInfo[playerid][pPaintBallG]]++;
				PlayerInfo[playerid][pPaintBallVoted] = 1;
				foreach(new i : Player)
				{
				    if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
				    {
						format(stringg,sizeof(stringg),"[VOTE] %s voted for map lspd.", sendernamee);
						SendClientMessage(i, COLOR_GENANNOUNCE, stringg);
					}
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_PAINTBALL)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            new stringg[128],sendernamee[30];
				if(PlayerInfo[playerid][pGunLic] < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a weapon licence.");
	            if(paintp[1] >= 20) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This arena is full.");
				if(OnDuty[playerid] == 1)
				{
					OnDuty[playerid] = 0;
					SetPlayerArmourEx(playerid, 0);
				}
	            PlayerInfo[playerid][pPaintBallG] = 1;
	            foreach(new i : Player)
	            {
	                if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
	                {
	                    GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
	                    format(stringg,sizeof(stringg),"(Paint){FFFFFF} %s has joined the paintball arena.", sendernamee);
	                    SendClientMessage(i, COLOR_ARENA, stringg);
					 }
				}
	            paintp[1]++;
	            if(paintp[1] == 1)
	            {
	                PlayerTextDrawShow(playerid, PaintBallText[playerid]);
					PlayerTextDrawSetString(playerid, PaintBallText[playerid], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   					GameTextForPlayer(playerid, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
				}
	            if(paintp[1] == 2)
				{
					paintrs[1] = 31;
					paintt[1] = 0;
					preparepaint1 = SetTimer("PrepareRoundPaintBall1", 1000, 1);
				}
	            SpawnPlayer(playerid);
			}
			if(listitem == 1)
	        {
	            new stringg[128],sendernamee[30];
				if(PlayerInfo[playerid][pGunLic] < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a weapon licence.");
	            if(paintp[2] >= 20) return SendClientMessage(playerid, COLOR_ARENA, "(Paint){FFFFFF} This arena is full.");
                if(OnDuty[playerid] == 1)
				{
					OnDuty[playerid] = 0;
					SetPlayerArmourEx(playerid, 0);
				}
				PlayerInfo[playerid][pPaintBallG] = 2;
	            foreach(new i : Player)
	            {
	                if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
	                {
	                    GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
	                    format(stringg,sizeof(stringg),"(Paint){FFFFFF} %s has joined the paintball arena.", sendernamee);
	                    SendClientMessage(i, COLOR_ARENA, stringg);
					 }
				}
	            paintp[2]++;
	            if(paintp[2] == 1)
	            {
	                PlayerTextDrawShow(playerid, PaintBallText[playerid]);
					PlayerTextDrawSetString(playerid, PaintBallText[playerid], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   					GameTextForPlayer(playerid, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
				}
	            if(paintp[2] == 2)
				{
					paintrs[2] = 31;
					paintt[2] = 0;
					preparepaint2 = SetTimer("PrepareRoundPaintBall2", 1000, 1);
				}
	            SpawnPlayer(playerid);
			}
			if(listitem == 2)
	        {
	            new stringg[128],sendernamee[30];
				if(PlayerInfo[playerid][pGunLic] < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a weapon licence.");
	            if(paintp[3] >= 20) return SendClientMessage(playerid, COLOR_ARENA, "(Paint){FFFFFF} This arena is full.");
                if(OnDuty[playerid] == 1)
				{
					OnDuty[playerid] = 0;
					SetPlayerArmourEx(playerid, 0);
				}
				PlayerInfo[playerid][pPaintBallG] = 3;
	            foreach(new i : Player)
	            {
	                if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
	                {
	                    GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
	                    format(stringg,sizeof(stringg),"(Paint){FFFFFF} %s has joined the paintball arena.", sendernamee);
	                    SendClientMessage(i, COLOR_ARENA, stringg);
					 }
				}
	            paintp[3]++;
	            if(paintp[3] == 1)
	            {
	                PlayerTextDrawShow(playerid, PaintBallText[playerid]);
					PlayerTextDrawSetString(playerid, PaintBallText[playerid], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   					GameTextForPlayer(playerid, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
				}
	            if(paintp[3] == 2)
				{
					paintrs[3] = 31;
					paintt[3] = 0;
					preparepaint3 = SetTimer("PrepareRoundPaintBall3", 1000, 1);
				}
	            SpawnPlayer(playerid);
			}
			if(listitem == 3)
	        {
	            new stringg[128],sendernamee[30];
				if(PlayerInfo[playerid][pGunLic] < 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have a weapon licence.");
	            if(paintp[4] >= 20) return SendClientMessage(playerid, COLOR_ARENA, "(Paint){FFFFFF} This arena is full.");
                if(OnDuty[playerid] == 1)
				{
					OnDuty[playerid] = 0;
					SetPlayerArmourEx(playerid, 0);
				}
				PlayerInfo[playerid][pPaintBallG] = 4;
	            foreach(new i : Player)
	            {
	                if(PlayerInfo[i][pPaintBallG] == PlayerInfo[playerid][pPaintBallG])
	                {
	                    GetPlayerName(playerid, sendernamee, sizeof(sendernamee));
	                    format(stringg,sizeof(stringg),"(Paint){FFFFFF} %s has joined the paintball arena.", sendernamee);
	                    SendClientMessage(i, COLOR_ARENA, stringg);
					 }
				}
	            paintp[4]++;
	            if(paintp[4] == 1)
	            {
	                PlayerTextDrawShow(playerid, PaintBallText[playerid]);
					PlayerTextDrawSetString(playerid, PaintBallText[playerid], "~g~WAITING FOR MORE PLAYERS TO JOIN...");
   					GameTextForPlayer(playerid, "~y~NOT ENOUGH PLAYERS TO START...", 5000, 5);
				}
	            if(paintp[4] == 2)
				{
					paintrs[4] = 31;
					paintt[4] = 0;
					preparepaint4 = SetTimer("PrepareRoundPaintBall4", 1000, 1);
				}
	            SpawnPlayer(playerid);
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_CLOTHES)
	{
		if(response)
		{
			new size;
			for(new cs; cs < 10; cs++)
			{
				if(FactionSkin[PlayerInfo[playerid][pMember]][cs] != 0) size++;
			}
			if(SkinSelect[playerid] >= size) { SetPlayerSkin(playerid, FactionSkin[PlayerInfo[playerid][pMember]][0]); SkinSelect[playerid] = 0; }
			if(SkinSelect[playerid] < size) { SetPlayerSkin(playerid, FactionSkin[PlayerInfo[playerid][pMember]][SkinSelect[playerid]]); SkinSelect[playerid] += 1; }
			ShowPlayerDialog(playerid, DIALOG_CLOTHES, DIALOG_STYLE_MSGBOX, "Skin selection", "Choose a skin", "Next", "Done");
		}
		else
		{
			PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
			new query[184];
			mysql_format(SQL,query, sizeof(query), "UPDATE users SET `Model`='%d' WHERE `name`='%s'",GetPlayerSkin(playerid),PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,query,"","");
			SkinSelect[playerid] = 1;
			SpawnPlayer(playerid);
		}
		return 1;
	}
    if(dialogid == DIALOG_NEWPASS)
	{
		if(response)
    	{
	 		new length = strlen(inputtext);
			if(length == 0 || length > 15)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Please enter another password (maximum 15 characters).");
				ShowPlayerDialog(playerid, DIALOG_NEWPASS,DIALOG_STYLE_INPUT, "Change password:","Type in box your new password:","Done","Close");
				return 1;
			}
	        if(strlen(inputtext) > 1 && strlen(inputtext) < 16)
			{
				new tmppass[64],namee[30],playerip[16];
				mysql_real_escape_string(MD5_Hash(inputtext), tmppass);
				strmid(PlayerInfo[playerid][pKey], tmppass, 0, strlen(tmppass), 255);
				format(string,sizeof(string),"Your new password is %s.",inputtext);
				SendClientMessage(playerid, COLOR_YELLOW,string);
				GetPlayerName(playerid, namee, sizeof(namee));
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(string,sizeof(string),"%s[user:%d] changed his password. IP: %s",namee,PlayerInfo[playerid][pSQLID],playerip);
				ABroadCast(COLOR_YELLOW, string,1);
				GetPlayerName(playerid,sendername,sizeof(sendername));
				new str2[240];
		        mysql_format(SQL, str2, sizeof(str2), "UPDATE users SET `password`='%s' WHERE `name`='%s'",PlayerInfo[playerid][pKey], PlayerInfo[playerid][pNormalName]);
		        mysql_tquery(SQL,str2,"","");
				return 1;
			}
			else
			{
			    ShowPlayerDialog(playerid, DIALOG_NEWPASS,DIALOG_STYLE_INPUT, "Change password:","Type in box your new password:","Done","Close");
				return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_TRANSFER)
	{
		if(response)
    	{
    		new giveplayer[30];
			GetPlayerName(TransferOffer[playerid],giveplayer,sizeof(giveplayer));
			GetPlayerName(playerid,sendername,sizeof(sendername));
			PlayerInfo[playerid][pAccount] -= TransferMoney[playerid];
			PlayerInfo[TransferOffer[playerid]][pAccount] += TransferMoney[playerid];
			format(string, sizeof(string), "(-) You have transferred $%s into %s's account. Your account balance is now $%s.", FormatNumber(TransferMoney[playerid]), giveplayer, FormatNumber(PlayerInfo[playerid][pAccount]));
			SendClientMessage(playerid, COLOR_GREEN, string);
		    format(string, sizeof(string), "(+) %s has transferred $%s into your account. Your account balance is now $%s.", sendername, FormatNumber(TransferMoney[playerid]), FormatNumber(PlayerInfo[TransferOffer[playerid]][pAccount]));
			SendClientMessage(TransferOffer[playerid], COLOR_GREEN, string);
			format(string, sizeof(string), "($) %s has transferd $%s to %s.", sendername, FormatNumber(TransferMoney[playerid]), giveplayer);
			ABroadCast(COLOR_YELLOW,string,1);
			new var100[256],string2[256],string3[256];
			format(string2,sizeof(string2),"%s[user:%d] /transfer-ed $%s to %s[user:%d].",sendername,PlayerInfo[playerid][pSQLID],FormatNumber(TransferMoney[playerid]),giveplayer,PlayerInfo[TransferOffer[playerid]][pSQLID]);
			mysql_real_escape_string(string2, string3);
			mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[TransferOffer[playerid]][pSQLID],PlayerInfo[playerid][pSQLID],string3);
			mysql_tquery(SQL,var100,"","");
			Update(playerid, pBank);
			Update(TransferOffer[playerid], pBank);
			TransferOffer[playerid] = 999;
			TransferMoney[playerid] = 0;
		}
		return 1;
	}
	if(dialogid == DIALOG_HQS)
	{
	    if(response)
	    {
			if(listitem == 0)
			{
				SetPlayerCheckpoint(playerid,1554.6610,-1675.6371,16.1953,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii Los Santos Police Department.", "Checkpoint set on faction Los Santos Police Department.");
			    return 1;
			}
			if(listitem == 1)
			{
				SetPlayerCheckpoint(playerid,200.766,1869.49,13.147,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii National Guard.", "Checkpoint set on faction National Guard.");
			    return 1;
			}
			if(listitem == 2)
			{
				SetPlayerCheckpoint(playerid,1081.0226,-345.1430,73.9839,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii Hitman Agency.", "Checkpoint set on faction Hitman Agency.");
			    return 1;
			}
			if(listitem == 3)
			{
				SetPlayerCheckpoint(playerid,627.1133,-572.6523,17.8707,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii FBI.", "Checkpoint set on faction FBI.");
			    return 1;
			}
			if(listitem == 4)
			{
				SetPlayerCheckpoint(playerid,-329.2862,1536.9629,76.6117,4.0);
			    CP[playerid] = 43;
			   	SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii News Reporters.", "Checkpoint set on faction News Reporters.");
			    return 1;
			}
			if(listitem == 5)
			{
				SetPlayerCheckpoint(playerid,2495.2554,-1689.8365,14.6800,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii Grove Street.", "Checkpoint set on faction Grove Street.");
			    return 1;
			}
			if(listitem == 6)
			{
				SetPlayerCheckpoint(playerid,1455.0133,750.8113,11.0234,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii Ballas.", "Checkpoint set on faction Ballas.");
			    return 1;
			}
			if(listitem == 7)
			{
				SetPlayerCheckpoint(playerid,1457.4807,2772.9023,10.8203,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii Los Aztecas.", "Checkpoint set on faction Los Aztecas.");
			    return 1;
			}
   /*if(listitem == 8)
			{
				SetPlayerCheckpoint(playerid,2435.5708,1671.8771,10.8203,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii School Instructors.", "Checkpoint set on faction School Instructors.");
			    return 1;
			}*/
			if(listitem == 8)
			{
				SetPlayerCheckpoint(playerid,1614.92480, 1816.09631, 10.91310,4.0);
			    CP[playerid] = 43;
			   	SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii Paramedic Department.", "Checkpoint set on faction Paramedic Department.");
			    return 1;
			}
			if(listitem == 9)
			{
				SetPlayerCheckpoint(playerid,725.1876,-1439.7456,13.5318,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii Los Vagos.", "Checkpoint set on faction Los Vagos.");
			    return 1;
			}
			if(listitem == 10)
			{
				SetPlayerCheckpoint(playerid,1753.2,-1903.28,13.5633,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii Taxi LS.", "Checkpoint set on faction Taxi LS.");
			    return 1;
			}
			if(listitem == 11)
			{
				SetPlayerCheckpoint(playerid,2286.9487,2431.9595,10.8203,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul factiunii Las Venturas Police Department.", "Checkpoint set on faction Las Venturas Police Department.");
			    return 1;
			}
			if(listitem == 12)
			{
				SetPlayerCheckpoint(playerid,1479.5220,-1771.9636,18.7958,4.0);
			    CP[playerid] = 43;
			    SS(playerid, COLOR_YELLOW, "Urmareste checkpoint-ul de pe minimap pentru a ajunge la HQ-ul primariei.", "Checkpoint set on city hall hq's.");
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == Dialog_gunshop)
	{
	    if(response)
	    {
	        GetPlayerName(playerid, sendername, sizeof(sendername));
	        new infostring[512];
	        if(listitem == 0)
			{
				if(GetPlayerCash(playerid) < 1000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enought money.");
				if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 0)
				{
					format(infostring, 256, "* %s bought a baseball bat.",sendername);
					ProxDetector(50.0, playerid, infostring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 1000);
					BizzInfo[2][bTill] += 1000;
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='2'",BizzInfo[2][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 5, 1);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 1)
				{
			    	format(infostring, 256, "* %s bought a baseball bat.",sendername);
					ProxDetector(30.0, playerid, infostring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 1000);
					BizzInfo[9][bTill] += 1000;
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='9'",BizzInfo[9][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 5, 1);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 2)
				{
			    	format(infostring, 256, "* %s bought a baseball bat.",sendername);
					ProxDetector(50.0, playerid, infostring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 1000);
					BizzInfo[22][bTill] += 1000;
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='22'",BizzInfo[22][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 5, 1);
				}
			}
			else if(listitem == 1)
			{
				if(GetPlayerCash(playerid) < 2000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enought money.");
			    if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 0)
				{
					format(infostring, 256, "* %s bought a SD Pistol.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 2000);
					BizzInfo[2][bTill] += 2000;
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='2'",BizzInfo[2][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 23, 100);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 1)
				{
			    	format(infostring, 256, "* %s bought a SD Pistol.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 2000);
					BizzInfo[9][bTill] += 200;
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='9'",BizzInfo[9][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 23, 100);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 2)
				{
			    	format(infostring, 256, "* %s bought a SD Pistol.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 2000);
					BizzInfo[22][bTill] += 2000;
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='22'",BizzInfo[22][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 23, 100);
				}
			}
			else if(listitem == 2)
			{
				if(GetPlayerCash(playerid) < 3000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enought money.");
			    if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 0)
				{
					format(infostring, 256, "* %s bought a Desert eagle.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 3000);
					BizzInfo[2][bTill] += 3000;
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='2'",BizzInfo[2][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 24, 100);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 1)
				{
			    	format(infostring, 256, "* %s bought a Desert eagle.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 3000);
					BizzInfo[9][bTill] += 3000;
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='9'",BizzInfo[9][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 24, 100);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 2)
				{
			    	format(infostring, 256, "* %s bought a Desert eagle.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 3000);
					BizzInfo[22][bTill] += 3000;
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='22'",BizzInfo[22][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 24, 100);
				}
			}
			else if(listitem == 3)
			{
				if(GetPlayerCash(playerid) < 4200) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enought money.");
			    if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 0)
				{
					format(infostring, 256, "* %s bought a Shotgun.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 4200);
					BizzInfo[2][bTill] += 4200;
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='2'",BizzInfo[2][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 25, 100);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 1)
				{
			    	format(infostring, 256, "* %s bought a Shotgun.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 4200);
					BizzInfo[9][bTill] += 4200;
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='9'",BizzInfo[9][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 25, 100);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 2)
				{
			    	format(infostring, 256, "* %s bought a Shotgun.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 4200);
					BizzInfo[22][bTill] += 4200;
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='22'",BizzInfo[22][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 25, 100);
				}
			}
			else if(listitem == 4)
			{
				if(GetPlayerCash(playerid) < 4600) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enought money.");
			    if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 0)
				{
					format(infostring, 256, "* %s bought a MP5.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 4600);
					BizzInfo[2][bTill] += 4600;
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='2'",BizzInfo[2][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 29, 150);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 1)
				{
			    	format(infostring, 256, "* %s bought a MP5.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 4600);
					BizzInfo[9][bTill] += 4600;
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='9'",BizzInfo[9][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 29, 150);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 2)
				{
			    	format(infostring, 256, "* %s bought a MP5.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 4600);
					BizzInfo[22][bTill] += 4600;
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='22'",BizzInfo[22][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 29, 150);
				}
			}
			else if(listitem == 5)
			{
				if(GetPlayerCash(playerid) < 7000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enought money.");
			    if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 0)
				{
					format(infostring, 256, "* %s bought a AK47.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 7000);
					BizzInfo[2][bTill] += 7000;
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='2'",BizzInfo[2][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 30, 200);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 1)
				{
			    	format(infostring, 256, "* %s bought a AK47.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 7000);
					BizzInfo[9][bTill] += 7000;
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='9'",BizzInfo[9][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 30, 200);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 2)
				{
			    	format(infostring, 256, "* %s bought a AK47.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 7000);
					BizzInfo[22][bTill] += 7000;
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='22'",BizzInfo[22][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 30, 200);
				}
			}
			else if(listitem == 6)
			{
				if(GetPlayerCash(playerid) < 7000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enought money.");
			    if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 0)
				{
					format(infostring, 256, "* %s bought a M4.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 7000);
					BizzInfo[2][bTill] += 7000;
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='2'",BizzInfo[2][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 31, 200);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 1)
				{
			    	format(infostring, 256, "* %s bought a M4.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 7000);
					BizzInfo[9][bTill] += 7000;
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='9'",BizzInfo[9][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 31, 200);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 150.0, 313.7856,-134.1924,1004.0625) && GetPlayerVirtualWorld(playerid) == 2)
				{
			    	format(infostring, 256, "* %s bought a M4.",sendername);
					ProxDetector(50.0, playerid, infostring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerCash(playerid, - 7000);
					BizzInfo[22][bTill] += 7000;
					mysql_format(SQL,string,sizeof(string),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='22'",BizzInfo[22][bTill]);
					mysql_tquery(SQL,string,"","");
					GivePlayerWeaponEx(playerid, 31, 200);
				}
			}
		}
	}
    if(dialogid == DIALOG_RADIO)
	{
	    if(response)
	    {
			new strings[128],name[30],so;
			GetPlayerName(playerid, name, sizeof(name));
            if(listitem == 0)
			{
				StopAudioStreamForPlayersInCar(vehicleid);
                vehRadio[vehicleid] = 0;
				format(strings, sizeof(strings), "* %s turned off radio.",name);
            }
			if(listitem == 1)
			{
				StopAudioStreamForPlayersInCar(vehicleid);
                PlayAudioStreamForPlayersInCar(vehicleid, "http://stream.profm.ro:8012/profm.mp3");
                vehRadio[vehicleid] = 1;
				format(strings, sizeof(strings), "* %s changed the radio station to Pro FM Romania.",name);
            }
			if(listitem == 2)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
                PlayAudioStreamForPlayersInCar(vehicleid, "http://live.radiobandit.ro:8000");
                vehRadio[vehicleid] = 2;
				format(strings, sizeof(strings), "* %s changed the radio station to Radio Bandit Romania.",name);
            }
			if(listitem == 3)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
                PlayAudioStreamForPlayersInCar(vehicleid, "http://radiotaraf.com/live.m3u");
                vehRadio[vehicleid] = 3;
				format(strings, sizeof(strings), "* %s changed the radio station to Radio Taraf Romania.",name);
            }
			if(listitem == 4)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
                PlayAudioStreamForPlayersInCar(vehicleid, "http://live.radiohot.ro:8000/");
                vehRadio[vehicleid] = 4;
				format(strings, sizeof(strings), "* %s changed the radio station to Radio Hot Romania.",name);
            }
			if(listitem == 5)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
                PlayAudioStreamForPlayersInCar(vehicleid, "http://dance.radiogangsta.ro:8800");
                vehRadio[vehicleid] = 5;
				format(strings, sizeof(strings), "* %s changed the radio station to Radio Gangsta Dance.",name);
            }
            if(listitem == 6)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
                PlayAudioStreamForPlayersInCar(vehicleid, "http://live.radiogangsta.ro:8800");
                vehRadio[vehicleid] = 6;
				format(strings, sizeof(strings), "* %s changed the radio station to Radio Gangsta Manele.",name);
            }
			if(listitem == 7)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://7619.live.streamtheworld.com:80/977_HITS_SC");
                vehRadio[vehicleid] = 7;
				format(strings, sizeof(strings), "* %s changed the radio station to .977 Hitz.",name);
            }
			if(listitem == 8)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://7639.live.streamtheworld.com:80/977_MIX_SC");
                vehRadio[vehicleid] = 8;
				format(strings, sizeof(strings), "* %s changed the radio station to .977 Mix.",name);
            }
			if(listitem == 9)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://7579.live.streamtheworld.com:80/977_ALTERN_SC");
                vehRadio[vehicleid] = 9;
				format(strings, sizeof(strings), "* %s changed the radio station to .977 Alternative.",name);
            }
			if(listitem == 10)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://www.listenlive.eu/bbcradio1.m3u");
                vehRadio[vehicleid] = 10;
				format(strings, sizeof(strings), "* %s changed the radio station to Radio BBC One UK.",name);
            }
			if(listitem == 11)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://dubstep.fm/128.pls");
                vehRadio[vehicleid] = 11;
				format(strings, sizeof(strings), "* %s changed the radio station to Dubstep.fm.",name);
            }
			if(listitem == 12)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://www.radio-hit.ro/asculta.m3u");
                vehRadio[vehicleid] = 12;
				format(strings, sizeof(strings), "* %s changed the radio station to Radio Hit Romania.",name);
            }
			if(listitem == 13)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://live.radioclubmix.ro:9999");
                vehRadio[vehicleid] = 13;
				format(strings, sizeof(strings), "* %s changed the radio station to Radio ClubMix Romania.",name);
            }
			if(listitem == 14)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://80.86.106.136/listen.pls");
                vehRadio[vehicleid] = 14;
				format(strings, sizeof(strings), "* %s changed the radio station to Kiss FM Romania [Audio Plugin].",name);
            }
			if(listitem == 15)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://www.radiozu.ro/live.m3u");
                vehRadio[vehicleid] = 15;
				format(strings, sizeof(strings), "* %s changed the radio station to Radio Zu Romania [Audio Plugin].",name);
            }
			if(listitem == 16)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://livemp3.radiopopular.ro:7777");
                vehRadio[vehicleid] = 16;
				format(strings, sizeof(strings), "* %s changed the radio station to Radio Popular.",name);
            }
			if(listitem == 17)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://radio.trap.fm/listen128.pls");
                vehRadio[vehicleid] = 17;
				format(strings, sizeof(strings), "* %s changed the radio station to Trap.FM.",name);
            }
            if(listitem == 18)
			{
                StopAudioStreamForPlayersInCar(vehicleid);
				PlayAudioStreamForPlayersInCar(vehicleid, "http://radiotequila.ro/hiphop.m3u");
                vehRadio[vehicleid] = 18;
				format(strings, sizeof(strings), "* %s changed the radio station to Radio Tequila Hip Hop.",name);
            }
   /*if(listitem == 19)
			{
                ShowPlayerDialog(playerid, DIALOG_CUSTOMRADIO, DIALOG_STYLE_INPUT, "Custom Url", "Enter a URL:", "Play", "Cancel");
				so = 1;
            }*/
			if(so != 1)
			{
				ProxDetector(20.0, playerid, strings, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Listening[playerid] = listitem-1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_MP32)
	{
	    if(response)
	    {
			new strings[128],name[30],so;
			GetPlayerName(playerid, name, sizeof(name));
            if(listitem == 0)
			{
				StopAudioStreamForPlayer(playerid);
				format(strings, sizeof(strings), "* %s turned off mp3.",name);
            }
			if(listitem == 1)
			{
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://stream.profm.ro:8012/profm.mp3");
				format(strings, sizeof(strings), "* %s changed the mp3 station to Pro FM Romania.",name);
            }
			if(listitem == 2)
			{
				StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://live.radiobandit.ro:8000");
				format(strings, sizeof(strings), "* %s changed the mp3 station to Radio Bandit Romania.",name);
            }
			if(listitem == 3)
			{
				StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://radiotaraf.com/live.m3u");
				format(strings, sizeof(strings), "* %s changed the mp3 station to Radio Taraf Romania.",name);
            }
			if(listitem == 4)
			{
				StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://live.radiohot.ro:8000/");
				format(strings, sizeof(strings), "* %s changed the mp3 station to Radio Hot Romania.",name);
            }
			if(listitem == 5)
			{
				StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://dance.radiogangsta.ro:8800");
				format(strings, sizeof(strings), "* %s changed the mp3 station to Radio Gangsta Dance.",name);
            }
            if(listitem == 6)
			{
				StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://live.radiogangsta.ro:8800");
				format(strings, sizeof(strings), "* %s changed the mp3 station to Radio Gangsta Manele.",name);
            }
			if(listitem == 7)
			{
				StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://7619.live.streamtheworld.com:80/977_HITS_SC");
				format(strings, sizeof(strings), "* %s changed the mp3 station to .977 Hitz.",name);
            }
			if(listitem == 8)
			{
				StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://7639.live.streamtheworld.com:80/977_MIX_SC");
				format(strings, sizeof(strings), "* %s changed the mp3 station to .977 Mix.",name);
            }
			if(listitem == 9)
			{
				StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, "http://7579.live.streamtheworld.com:80/977_ALTERN_SC");
				format(strings, sizeof(strings), "* %s changed the mp3 station to .977 Alternative.",name);
            }
			if(listitem == 10)
			{
                StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://www.listenlive.eu/bbcradio1.m3u");
				format(strings, sizeof(strings), "* %s changed the mp3 station to Radio BBC One UK.",name);
            }
			if(listitem == 11)
			{
                StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://dubstep.fm/128.pls");
				format(strings, sizeof(strings), "* %s changed the mp3 station to Dubstep.fm.",name);
            }
			if(listitem == 12)
			{
                StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://www.radio-hit.ro/asculta.m3u");
				format(strings, sizeof(strings), "* %s changed the mp3 station to Radio Hit Romania.",name);
            }
			if(listitem == 13)
			{
                StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://live.radioclubmix.ro:9999");
				format(strings, sizeof(strings), "* %s changed the mp3 station to Radio ClubMix Romania.",name);
            }
			if(listitem == 14)
			{
                StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://80.86.106.136/listen.pls");
				format(strings, sizeof(strings), "* %s changed the mp3 station to Kiss FM Romania [Audio Plugin].",name);
            }
			if(listitem == 15)
			{
                StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://www.radiozu.ro/live.m3u");
				format(strings, sizeof(strings), "* %s changed the mp3 station to Radio Zu Romania [Audio Plugin].",name);
            }
			if(listitem == 16)
			{
                StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://livemp3.radiopopular.ro:7777");
				format(strings, sizeof(strings), "* %s changed the mp3 station to Radio Popular.",name);
            }
			if(listitem == 17)
			{
                StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://radio.trap.fm/listen128.pls");
				format(strings, sizeof(strings), "* %s changed the mp3 station to Trap.FM.",name);
            }
            if(listitem == 18)
			{
                StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://radiotequila.ro/hiphop.m3u");
				format(strings, sizeof(strings), "* %s changed the mp3 station to Radio Tequila Hip Hop.",name);
            }
   /*if(listitem == 19)
			{
                ShowPlayerDialog(playerid, DIALOG_CUSTOMRADIO, DIALOG_STYLE_INPUT, "Custom Url", "Enter a URL:", "Play", "Cancel");
				so = 1;
            }*/
			if(so != 1)
			{
				ProxDetector(20.0, playerid, strings, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Listening[playerid] = listitem-1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_CUSTOMRADIO)
	{
		if(response)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				new stringg[128],length,name[30];
				if(strfind(inputtext, "youtube.com", true) != -1)
				{
					length = strlen(inputtext)-11;
					strdel(inputtext, 0, length);
					format(stringg, sizeof(stringg), "http://music.ksenon.ro/play/%s",inputtext);
					StopAudioStreamForPlayersInCar(vehicleid);
					PlayAudioStreamForPlayersInCar(vehicleid, stringg);
					format(customRadio[GetPlayerVehicleID(playerid)], 128, stringg);
					vehRadio[GetPlayerVehicleID(playerid)] = 19;
					GetPlayerName(playerid, name, sizeof(name));
					format(stringg, sizeof(stringg), "* %s changed the radio station to Custom URL.",name);
					ProxDetector(20.0, playerid, stringg, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					Listening[playerid] = 18;
				}
				else
				{
					StopAudioStreamForPlayersInCar(vehicleid);
					PlayAudioStreamForPlayersInCar(vehicleid, inputtext);
					format(customRadio[GetPlayerVehicleID(playerid)], 128, inputtext);
					vehRadio[GetPlayerVehicleID(playerid)] = 19;
					GetPlayerName(playerid, name, sizeof(name));
					format(stringg, sizeof(stringg), "* %s changed the radio station to Custom URL.",name);
					ProxDetector(20.0, playerid, stringg, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					Listening[playerid] = 18;
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONS)
	{
	  	if(response)
	    {
			if(listitem == 0)
			{
				SetPlayerCheckpoint(playerid,1219.1234,-1812.3678,16.5938,4.0);
			    CP[playerid] = 43;			
			}
			if(listitem == 1)
			{
			    new string1[MAX_STRING],string2[MAX_STRING],allstring[MAX_STRING];
			    format(string1, sizeof(string1), "24/7 Store (4 businesses)\nClothing Store (3 businesses)\nBar (3 businesses)\nBank (2 businesses)\nRent car (1 business)\nGym (1 business)\nBurger Shot (2 businesses)\nPizza Stack (1 business)");
			    format(string2, sizeof(string2), "Gun Shop (2 businesses)\nCNN (1 business)\nGas Station (4 businesses)\nSex Shop (1 business)\nPay N Spray (4 businesses)\nCar Mod Shop (2 businesses)");
			    format(allstring, sizeof(allstring), "%s\n%s", string1, string2);
				ShowPlayerDialog(playerid, DIALOG_LOCATIONSLS, DIALOG_STYLE_LIST, "Los Santos Locations", allstring, "Find", "Back");
			}
			if(listitem == 2)
			{
			    new string1[MAX_STRING],string2[MAX_STRING],allstring[MAX_STRING];
			    format(string1, sizeof(string1), "24/7 Store (1 business)\nClothing Store (1 business)\nBank (1 business)\nCluckin' Bell (2 businesses)\nBurger Shot (4 businesses)\nGun Shop (1 business)\nCNN (1 business)");
			    format(string2, sizeof(string2), "Gas Station (6 businesses)\nCasino (1 business)\nSex Shop (1 business)\nPay N Spray (2 businesses)\nCar Mod Shop (1 business)");
			    format(allstring, sizeof(allstring), "%s\n%s", string1, string2);
				ShowPlayerDialog(playerid, DIALOG_LOCATIONSLV, DIALOG_STYLE_LIST, "Las Venturas Locations", allstring, "Find", "Back");
			}
			if(listitem == 3)
			{
			    new string1[MAX_STRING];
			    format(string1, sizeof(string1), "24/7 Store (2 business)\nGas Station (1 business)\nBank (1 business)\nClothing Store (1 businesses)\nPizza Stack (1 businesses)\nBurger Shot (1 business)");
				ShowPlayerDialog(playerid, DIALOG_LOCATIONSSF, DIALOG_STYLE_LIST, "San Fierro Locations", string1, "Find", "Back");
			}
			if(listitem == 4)
			{
			    ShowPlayerDialog(playerid, DIALOG_HQS, DIALOG_STYLE_LIST, "SERVER: HQ Locations", "Los Santos Police Department\nNational Guard\nHitman Agency\nFBI\nNews Reporters\nGrove Street\nBallas\nLos Aztecas\nParamedic Department\nLos Vagos\nTaxi LS\nLas Venturas Police Department\nMayor", "Checkpoint", "Back");
			}
			if(listitem == 5)
			{
			    ShowPlayerDialog(playerid, DIALOG_LOCATIONSMODS, DIALOG_STYLE_LIST, "SERVER: Vehicle Mod Shop Locations", "Tuning LS\nTuning LV\nLowrider Tuning", "Checkpoint", "Back");
			}
			if(listitem == 6) // PaintBall LS
			{
			    SetPlayerCheckpoint(playerid,1154.7026,-1440.1458,15.7969,4.0);
			    CP[playerid] = 43;
			}
			if(listitem == 7)
			{
			    SetPlayerCheckpoint(playerid,326.4294,-1517.0165,36.0391,4.0);
			    CP[playerid] = 43;
			}
			if(listitem == 8)
			{
			    SetPlayerCheckpoint(playerid,1102.4310,-1458.1349,15.7969,4.0);
			    CP[playerid] = 43;
			}
			if(listitem == 9)
			{
			    SetPlayerCheckpoint(playerid,1902.8530,99.2951,33.5180,4.0);
			    CP[playerid] = 43;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            new Float: Position[3];
    			new Float: Distance[5];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[10][bEntranceX], BizzInfo[10][bEntranceY], BizzInfo[10][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[11][bEntranceX], BizzInfo[11][bEntranceY], BizzInfo[11][bEntranceZ]);
	            Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[13][bEntranceX], BizzInfo[13][bEntranceY], BizzInfo[13][bEntranceZ]);
	            Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[14][bEntranceX], BizzInfo[14][bEntranceY], BizzInfo[14][bEntranceZ]);
	           	format(string1,sizeof(string1),"24/7 Store (%.1fm away)\n24/7 Store (%.1fm away)\n24/7 Store (%.1fm away)\n24/7 Store (%.1fm away)",Distance[1],Distance[2],Distance[3],Distance[4]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONS247LS, DIALOG_STYLE_LIST, "24/7 Store (4 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 1)
	        {
	            new Float: Position[3];
    			new Float: Distance[4];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[30][bEntranceX], BizzInfo[30][bEntranceY], BizzInfo[30][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[32][bEntranceX], BizzInfo[32][bEntranceY], BizzInfo[32][bEntranceZ]);
	            Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[53][bEntranceX], BizzInfo[53][bEntranceY], BizzInfo[53][bEntranceZ]);
	            format(string1,sizeof(string1),"Clothing Store (%.1fm away)\nClothing Store (%.1fm away)\nClothing Store (%.1fm away)",Distance[1],Distance[2],Distance[3]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSCLOTHINGLS, DIALOG_STYLE_LIST, "Clothing Store (3 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 2)
	        {
	            new Float: Position[3];
    			new Float: Distance[4];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[3][bEntranceX], BizzInfo[3][bEntranceY], BizzInfo[3][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[5][bEntranceX], BizzInfo[5][bEntranceY], BizzInfo[5][bEntranceZ]);
	            Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[7][bEntranceX], BizzInfo[7][bEntranceY], BizzInfo[7][bEntranceZ]);
	            format(string1,sizeof(string1),"Bar (%.1fm away)\nBar (%.1fm away)\nBar (%.1fm away)",Distance[1],Distance[2],Distance[3]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSBARLS, DIALOG_STYLE_LIST, "Bar (3 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 3)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[1][bEntranceX], BizzInfo[1][bEntranceY], BizzInfo[1][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[27][bEntranceX], BizzInfo[27][bEntranceY], BizzInfo[27][bEntranceZ]);
	            format(string1,sizeof(string1),"Bank (%.1fm away)\nBank (%.1fm away)",Distance[1],Distance[2]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSBANKLS, DIALOG_STYLE_LIST, "Bank (2 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 4)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[31][bEntranceX], BizzInfo[31][bEntranceY], BizzInfo[31][bEntranceZ]);
	            format(string1,sizeof(string1),"Rent car (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSRENTLS, DIALOG_STYLE_LIST, "Rent car (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 5)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[25][bEntranceX], BizzInfo[25][bEntranceY], BizzInfo[25][bEntranceZ]);
	            format(string1,sizeof(string1),"Gym (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSGYMLS, DIALOG_STYLE_LIST, "Gym (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 6)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[15][bEntranceX], BizzInfo[15][bEntranceY], BizzInfo[15][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[16][bEntranceX], BizzInfo[16][bEntranceY], BizzInfo[16][bEntranceZ]);
	            format(string1,sizeof(string1),"Burger Shot (%.1fm away)\nBurger Shot (%.1fm away)",Distance[1],Distance[2]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSBURGERLS, DIALOG_STYLE_LIST, "Burger Shot (2 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 7)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[26][bEntranceX], BizzInfo[26][bEntranceY], BizzInfo[26][bEntranceZ]);
	            format(string1,sizeof(string1),"Pizza Stack (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSPIZZALS, DIALOG_STYLE_LIST, "Pizza Stack (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 8)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[2][bEntranceX], BizzInfo[2][bEntranceY], BizzInfo[2][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[9][bEntranceX], BizzInfo[9][bEntranceY], BizzInfo[9][bEntranceZ]);
	            format(string1,sizeof(string1),"Gun Shop (%.1fm away)\nGun Shop (%.1fm away)",Distance[1],Distance[2]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSGSLS, DIALOG_STYLE_LIST, "Gun Shop (2 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 9)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[28][bEntranceX], BizzInfo[28][bEntranceY], BizzInfo[28][bEntranceZ]);
	            format(string1,sizeof(string1),"CNN (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSCNNLS, DIALOG_STYLE_LIST, "CNN (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 10)
	        {
	            new Float: Position[3];
    			new Float: Distance[5];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[33][bEntranceX], BizzInfo[33][bEntranceY], BizzInfo[33][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[42][bEntranceX], BizzInfo[42][bEntranceY], BizzInfo[42][bEntranceZ]);
	            Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[43][bEntranceX], BizzInfo[43][bEntranceY], BizzInfo[43][bEntranceZ]);
	            Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[44][bEntranceX], BizzInfo[44][bEntranceY], BizzInfo[44][bEntranceZ]);
	            format(string1,sizeof(string1),"Gas Station (%.1fm away)\nGas Station (%.1fm away)\nGas Station (%.1fm away)\nGas Station (%.1fm away)",Distance[1],Distance[2],Distance[3],Distance[4]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSGASLS, DIALOG_STYLE_LIST, "Gas Station (4 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 11)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[7][bEntranceX], BizzInfo[7][bEntranceY], BizzInfo[7][bEntranceZ]);
	            format(string1,sizeof(string1),"Sex Shop (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSSEXLS, DIALOG_STYLE_LIST, "Sex Shop (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 12)
	        {
	            new Float: Position[3];
    			new Float: Distance[5];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[34][bEntranceX], BizzInfo[34][bEntranceY], BizzInfo[34][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[35][bEntranceX], BizzInfo[35][bEntranceY], BizzInfo[35][bEntranceZ]);
	            Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[36][bEntranceX], BizzInfo[36][bEntranceY], BizzInfo[36][bEntranceZ]);
	            Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[37][bEntranceX], BizzInfo[37][bEntranceY], BizzInfo[37][bEntranceZ]);
	            format(string1,sizeof(string1),"Pay N Spray (%.1fm away)\nPay N Spray (%.1fm away)\nPay N Spray (%.1fm away)\nPay N Spray (%.1fm away)",Distance[1],Distance[2],Distance[3],Distance[4]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSPNSLS, DIALOG_STYLE_LIST, "Pay N Spray (4 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 13)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[38][bEntranceX], BizzInfo[38][bEntranceY], BizzInfo[38][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[39][bEntranceX], BizzInfo[39][bEntranceY], BizzInfo[39][bEntranceZ]);
	            format(string1,sizeof(string1),"Car Mod Shop (%.1fm away)\nCar Mod Shop (%.1fm away)",Distance[1],Distance[2]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSMODLS, DIALOG_STYLE_LIST, "Car Mod Shop (2 businesses) Locations", string1, "Find", "Back");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[24][bEntranceX], BizzInfo[24][bEntranceY], BizzInfo[24][bEntranceZ]);
	            format(string1,sizeof(string1),"24/7 Store (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONS247LV, DIALOG_STYLE_LIST, "24/7 Store (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 1)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[29][bEntranceX], BizzInfo[29][bEntranceY], BizzInfo[29][bEntranceZ]);
	            format(string1,sizeof(string1),"Clothing Store (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSCLOTHINGLV, DIALOG_STYLE_LIST, "Clothing Store (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 2)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[21][bEntranceX], BizzInfo[21][bEntranceY], BizzInfo[21][bEntranceZ]);
	            format(string1,sizeof(string1),"Bank (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSBANKLV, DIALOG_STYLE_LIST, "Bank (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 3)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[4][bEntranceX], BizzInfo[4][bEntranceY], BizzInfo[4][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[54][bEntranceX], BizzInfo[54][bEntranceY], BizzInfo[54][bEntranceZ]);
	            format(string1,sizeof(string1),"Cluckin' Bell (%.1fm away)\nCluckin' Bell (%.1fm away)",Distance[1],Distance[2]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSCLUCKINLV, DIALOG_STYLE_LIST, "Cluckin' Bell (2 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 4)
	        {
	            new Float: Position[3];
    			new Float: Distance[5];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[17][bEntranceX], BizzInfo[17][bEntranceY], BizzInfo[17][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[18][bEntranceX], BizzInfo[18][bEntranceY], BizzInfo[18][bEntranceZ]);
	            Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[19][bEntranceX], BizzInfo[19][bEntranceY], BizzInfo[19][bEntranceZ]);
	            Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[20][bEntranceX], BizzInfo[20][bEntranceY], BizzInfo[20][bEntranceZ]);
	            format(string1,sizeof(string1),"Burger Shot (%.1fm away)\nBurger Shot (%.1fm away)\nBurger Shot (%.1fm away)\nBurger Shot (%.1fm away)",Distance[1],Distance[2],Distance[3],Distance[4]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSBURGERLV, DIALOG_STYLE_LIST, "Burger Shot (4 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 5)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[22][bEntranceX], BizzInfo[22][bEntranceY], BizzInfo[22][bEntranceZ]);
	            format(string1,sizeof(string1),"Gun Shop (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSGSLV, DIALOG_STYLE_LIST, "Gun Shop (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 6)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[52][bEntranceX], BizzInfo[52][bEntranceY], BizzInfo[52][bEntranceZ]);
	            format(string1,sizeof(string1),"CNN (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSCNNLV, DIALOG_STYLE_LIST, "CNN (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 7)
	        {
	            new Float: Position[3];
    			new Float: Distance[7];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[45][bEntranceX], BizzInfo[45][bEntranceY], BizzInfo[45][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[46][bEntranceX], BizzInfo[46][bEntranceY], BizzInfo[46][bEntranceZ]);
	            Distance[3] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[47][bEntranceX], BizzInfo[47][bEntranceY], BizzInfo[47][bEntranceZ]);
	            Distance[4] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[48][bEntranceX], BizzInfo[48][bEntranceY], BizzInfo[48][bEntranceZ]);
	            Distance[5] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[49][bEntranceX], BizzInfo[49][bEntranceY], BizzInfo[49][bEntranceZ]);
	            Distance[6] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[50][bEntranceX], BizzInfo[50][bEntranceY], BizzInfo[50][bEntranceZ]);
	            format(string1,sizeof(string1),"Gas Station (%.1fm away)\nGas Station (%.1fm away)\nGas Station (%.1fm away)\nGas Station (%.1fm away)\nGas Station (%.1fm away)\nGas Station (%.1fm away)",Distance[1],Distance[2],Distance[3],Distance[4],Distance[5],Distance[6]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSGASLV, DIALOG_STYLE_LIST, "Gas Station (6 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 8)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[8][bEntranceX], BizzInfo[8][bEntranceY], BizzInfo[8][bEntranceZ]);
	            format(string1,sizeof(string1),"Casino (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSCASINOLV, DIALOG_STYLE_LIST, "Casino (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 9)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[23][bEntranceX], BizzInfo[23][bEntranceY], BizzInfo[23][bEntranceZ]);
	            format(string1,sizeof(string1),"Sex Shop (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSSEXLV, DIALOG_STYLE_LIST, "Sex Shop (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 10)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[40][bEntranceX], BizzInfo[40][bEntranceY], BizzInfo[40][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[41][bEntranceX], BizzInfo[41][bEntranceY], BizzInfo[41][bEntranceZ]);
	            format(string1,sizeof(string1),"Pay N Spray (%.1fm away)\nPay N Spray (%.1fm away)",Distance[1],Distance[2]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSPNSLV, DIALOG_STYLE_LIST, "Pay N Spray (2 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 11)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[51][bEntranceX], BizzInfo[51][bEntranceY], BizzInfo[51][bEntranceZ]);
	            format(string1,sizeof(string1),"Car Mod Shop (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSMODLV, DIALOG_STYLE_LIST, "Car Mod Shop (1 business) Locations", string1, "Find", "Back");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSSF)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            new Float: Position[3];
    			new Float: Distance[3];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[12][bEntranceX], BizzInfo[12][bEntranceY], BizzInfo[12][bEntranceZ]);
	            Distance[2] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[60][bEntranceX], BizzInfo[60][bEntranceY], BizzInfo[60][bEntranceZ]);
	            format(string1,sizeof(string1),"24/7 (%.1fm away)\n24/7 (%.1fm away)",Distance[1],Distance[2]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONS247SF, DIALOG_STYLE_LIST, "24/7 Store (2 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 1)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[55][bEntranceX], BizzInfo[55][bEntranceY], BizzInfo[55][bEntranceZ]);
	            format(string1,sizeof(string1),"Gas Station (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSGASSF, DIALOG_STYLE_LIST, "Gas Station (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 2)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[56][bEntranceX], BizzInfo[56][bEntranceY], BizzInfo[56][bEntranceZ]);
	            format(string1,sizeof(string1),"Bank (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSBANKSF, DIALOG_STYLE_LIST, "Bank (1 business) Locations", string1, "Find", "Back");
			}
			if(listitem == 3)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[57][bEntranceX], BizzInfo[57][bEntranceY], BizzInfo[57][bEntranceZ]);
	            format(string1,sizeof(string1),"Clothing Store (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSCLOTHINGSF, DIALOG_STYLE_LIST, "Clothing Store (1 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 4)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[58][bEntranceX], BizzInfo[58][bEntranceY], BizzInfo[58][bEntranceZ]);
	           	format(string1,sizeof(string1),"Pizza Stack (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSPIZZASF, DIALOG_STYLE_LIST, "Pizza Stack (1 businesses) Locations", string1, "Find", "Back");
			}
			if(listitem == 5)
	        {
	            new Float: Position[3];
    			new Float: Distance[2];
	            new string1[MAX_STRING];
	            GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	            Distance[1] = GetDistanceBetweenPoints(Position[0],Position[1], Position[2], BizzInfo[59][bEntranceX], BizzInfo[59][bEntranceY], BizzInfo[59][bEntranceZ]);
	            format(string1,sizeof(string1),"Burger Shot (%.1fm away)",Distance[1]);
	            ShowPlayerDialog(playerid, DIALOG_LOCATIONSBURGERSF, DIALOG_STYLE_LIST, "Burger Shot (1 business) Locations", string1, "Find", "Back");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSBURGERSF)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[59][bEntranceX],BizzInfo[59][bEntranceY],BizzInfo[59][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSPIZZASF)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[58][bEntranceX],BizzInfo[58][bEntranceY],BizzInfo[58][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSCLOTHINGSF)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[57][bEntranceX],BizzInfo[57][bEntranceY],BizzInfo[57][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSBANKSF)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[56][bEntranceX],BizzInfo[56][bEntranceY],BizzInfo[56][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONS247SF)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[12][bEntranceX],BizzInfo[12][bEntranceY],BizzInfo[12][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[60][bEntranceX],BizzInfo[60][bEntranceY],BizzInfo[60][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSGASSF)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[55][bEntranceX],BizzInfo[55][bEntranceY],BizzInfo[55][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONS247LS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[10][bEntranceX],BizzInfo[10][bEntranceY],BizzInfo[10][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[11][bEntranceX],BizzInfo[11][bEntranceY],BizzInfo[11][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[12][bEntranceX],BizzInfo[12][bEntranceY],BizzInfo[12][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 3)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[13][bEntranceX],BizzInfo[13][bEntranceY],BizzInfo[13][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 4)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[14][bEntranceX],BizzInfo[14][bEntranceY],BizzInfo[14][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSCLOTHINGLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[30][bEntranceX],BizzInfo[30][bEntranceY],BizzInfo[30][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[32][bEntranceX],BizzInfo[32][bEntranceY],BizzInfo[32][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[53][bEntranceX],BizzInfo[53][bEntranceY],BizzInfo[53][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSRENTLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[31][bEntranceX],BizzInfo[31][bEntranceY],BizzInfo[31][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSSEXLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[7][bEntranceX],BizzInfo[7][bEntranceY],BizzInfo[7][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSMODLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[38][bEntranceX],BizzInfo[38][bEntranceY],BizzInfo[38][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[39][bEntranceX],BizzInfo[39][bEntranceY],BizzInfo[39][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSCLOTHINGLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[29][bEntranceX],BizzInfo[29][bEntranceY],BizzInfo[29][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSCLUCKINLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[4][bEntranceX],BizzInfo[4][bEntranceY],BizzInfo[4][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[54][bEntranceX],BizzInfo[54][bEntranceY],BizzInfo[54][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSCASINOLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[8][bEntranceX],BizzInfo[8][bEntranceY],BizzInfo[8][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSSEXLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[23][bEntranceX],BizzInfo[23][bEntranceY],BizzInfo[23][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSMODLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[51][bEntranceX],BizzInfo[51][bEntranceY],BizzInfo[51][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSBARLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[3][bEntranceX],BizzInfo[3][bEntranceY],BizzInfo[3][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[5][bEntranceX],BizzInfo[5][bEntranceY],BizzInfo[5][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[7][bEntranceX],BizzInfo[7][bEntranceY],BizzInfo[7][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSBANKLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[1][bEntranceX],BizzInfo[1][bEntranceY],BizzInfo[1][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[27][bEntranceX],BizzInfo[27][bEntranceY],BizzInfo[27][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSGYMLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[25][bEntranceX],BizzInfo[25][bEntranceY],BizzInfo[25][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSBURGERLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[15][bEntranceX],BizzInfo[15][bEntranceY],BizzInfo[15][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[16][bEntranceX],BizzInfo[16][bEntranceY],BizzInfo[16][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSPIZZALS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[26][bEntranceX],BizzInfo[26][bEntranceY],BizzInfo[26][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSGSLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[2][bEntranceX],BizzInfo[2][bEntranceY],BizzInfo[2][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[9][bEntranceX],BizzInfo[9][bEntranceY],BizzInfo[9][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSCNNLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[28][bEntranceX],BizzInfo[28][bEntranceY],BizzInfo[28][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSGASLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[33][bEntranceX],BizzInfo[33][bEntranceY],BizzInfo[33][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[42][bEntranceX],BizzInfo[42][bEntranceY],BizzInfo[42][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[43][bEntranceX],BizzInfo[43][bEntranceY],BizzInfo[43][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 3)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[44][bEntranceX],BizzInfo[44][bEntranceY],BizzInfo[44][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSPNSLS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[34][bEntranceX],BizzInfo[34][bEntranceY],BizzInfo[34][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[35][bEntranceX],BizzInfo[35][bEntranceY],BizzInfo[35][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[36][bEntranceX],BizzInfo[36][bEntranceY],BizzInfo[36][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 3)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[37][bEntranceX],BizzInfo[37][bEntranceY],BizzInfo[37][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONS247LV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[24][bEntranceX],BizzInfo[24][bEntranceY],BizzInfo[24][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSBANKLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[21][bEntranceX],BizzInfo[21][bEntranceY],BizzInfo[21][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSBURGERLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[17][bEntranceX],BizzInfo[17][bEntranceY],BizzInfo[17][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[18][bEntranceX],BizzInfo[18][bEntranceY],BizzInfo[18][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[19][bEntranceX],BizzInfo[19][bEntranceY],BizzInfo[19][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 3)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[20][bEntranceX],BizzInfo[20][bEntranceY],BizzInfo[20][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSGSLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[22][bEntranceX],BizzInfo[22][bEntranceY],BizzInfo[22][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSCNNLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[52][bEntranceX],BizzInfo[52][bEntranceY],BizzInfo[52][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSGASLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[45][bEntranceX],BizzInfo[45][bEntranceY],BizzInfo[45][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[46][bEntranceX],BizzInfo[46][bEntranceY],BizzInfo[46][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[47][bEntranceX],BizzInfo[47][bEntranceY],BizzInfo[47][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 3)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[48][bEntranceX],BizzInfo[48][bEntranceY],BizzInfo[48][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 4)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[49][bEntranceX],BizzInfo[49][bEntranceY],BizzInfo[49][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 5)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[50][bEntranceX],BizzInfo[50][bEntranceY],BizzInfo[50][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSPNSLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[40][bEntranceX],BizzInfo[40][bEntranceY],BizzInfo[40][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[41][bEntranceX],BizzInfo[41][bEntranceY],BizzInfo[41][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_LOCATIONSMODS)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[38][bEntranceX],BizzInfo[38][bEntranceY],BizzInfo[38][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[51][bEntranceX],BizzInfo[51][bEntranceY],BizzInfo[51][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,BizzInfo[39][bEntranceX],BizzInfo[39][bEntranceY],BizzInfo[39][bEntranceZ],4.0);
			    CP[playerid] = 43;
			    return 1;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_FACTIONS)
	{
	    if(response)
		{
			new f = listitem+1;
			if(f >= 12) f++;
			SelFac[playerid] = f;
			new szDialogs[512], titledialog[512], lead[MAX_PLAYER_NAME], query[256], result[100];
			format(lead, MAX_PLAYER_NAME, "None");
			format(query, 256, "SELECT * FROM `users` WHERE `Member` = '%d' AND `Rank` = '7'", f);
			new Cache: masta = mysql_query(SQL, query);
			if(cache_get_row_count() >= 1)
			{
				cache_get_field_content(0, "name", result);
				format(lead, MAX_PLAYER_NAME, result);
			}
			cache_delete(masta);
			new onmembers;
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pMember] == f)
				{
					onmembers++;
				}
			}
			if(strlen(lead) >= 1 && strcmp(lead, "None", true))
			{
				format(szDialogs, 512, "ID: %d\nFaction name: %s\nFaction leader: %s\n\nTotal members: %d\nMaximum members: %d\nOnline members: %d", f, DynamicFactions[f][fName], lead, GetFactionMembers(f), DynamicFactions[f][fMaxMembers], onmembers);
			}
			else
			{
				format(szDialogs, 512, "ID: %d\nFaction name: %s\nLeader: None\n\nTotal members: %d\nMaximum members: %d\nOnline members: %d", f, DynamicFactions[f][fName], GetFactionMembers(f), DynamicFactions[f][fMaxMembers], onmembers);
			}
			format(titledialog,sizeof(titledialog),"%s", DynamicFactions[f][fName]);
			ShowPlayerDialog(playerid, DIALOG_FACTIONS2, DIALOG_STYLE_MSGBOX, titledialog, szDialogs, "Back", "Exit");
		}
		else
		{
		    hidePlayerDialog(playerid);
			SelFac[playerid] = 0;
		}
	}
	if(dialogid == DIALOG_FACTIONS2)
	{
	    if(response)
	    {
	        SelFac[playerid] = 0;
	        ShowFactions(playerid);
		}
		else
		{
		    hidePlayerDialog(playerid);
			SelFac[playerid] = 0;
		}
	}
	if(dialogid == DIALOG_GMX)
	{
		if(response)
		{
		    SendClientMessageToAll(COLOR_YELLOW, "---- SERVER RESTART ----");
			ABroadCast(COLOR_RED2, "(AdmCmd){FFFFFF} Restarting timer activated.", 1);
			SendClientMessageToAll(COLOR_RED2, "The server will be restarted in 60 seconds.");
		    foreach(new x : Player)
			{
				Update(x, pPayDayx);
				Update(x, pFpunishx);
				Update(x, pConnectTimex);
				Update(x, pBank);
				Update(x, pCashx);
				Update(x, pExpx);
				Update(x, pJailTimex);
				Update(x, pLevelx);
				Update(x, pOnlineTimeTodayx);
			}
			iGMXTick = 60;
			iGMXTimer = SetTimer("restartTimer", 1000, true);
			new text1[128];
			format(text1, sizeof(text1), "Admin %s initiated a server restart timer.", PlayerInfo[playerid][pNormalName]);
			Log(PlayerInfo[playerid][pSQLID], text1, "gmx");
		}
		else if(!response)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Restart attempt canned.");
		}
		return 1;
	}
	if(dialogid == DIALOG_UPDATERR)
	{
		if(response)
		{
			RestartTimer = 1;
			SendClientMessageToAll(COLOR_GENANNOUNCE, "SERVER: The server restart is scheduled for the next payday.");
			SendClientMessageToAll(COLOR_GENANNOUNCE, "SERVER: If nothing posted on panel, probabily nothing new has been added..");
			new text1[128];
			format(text1, sizeof(text1), "Admin %s initiated a server restart timer after payday.", PlayerInfo[playerid][pNormalName]);
			Log(PlayerInfo[playerid][pSQLID], text1, "updaterr");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Restart attempt canned.");
		}
	}
	if(dialogid == DIALOG_VCREATE)
	{
		if(response)
		{
			if(IsPlayerConnected(CreateVEHID[playerid]))
			{
				if(CreateVEHID[playerid] != INVALID_PLAYER_ID)
				{
					new idcar,total,queryy[256],player = CreateVEHID[playerid],model = CreateVEH[playerid],sname[30],gname[30];
					new Float: plX, Float: plY, Float: plZ;
					for(new v; v < MAX_PERSONAL_VEHICLES; v++)
					{
						if(PlayerInfo[player][pCar][v] != -1) total++;
					}
					if(total+1 > PlayerInfo[player][pCarSlots])
					{
						SendClientMessage(playerid, COLOR_GREY, "This player have all vehicle slots full.");
						return 1;
					}
					for(new v; v < MAX_PERSONAL_VEHICLES; v++)
					{
						if(PlayerInfo[player][pCar][v] == -1)
						{
							idcar = v;
							break;
						}
					}
					mysql_format(SQL, queryy, sizeof(queryy), "INSERT INTO cars (Model) VALUES (%d)", model);
    				new Cache:ids = mysql_query(SQL, queryy);
					new idd = cache_insert_id();
					cache_delete(ids);

					PlayerInfo[player][pCar][idcar] = idd;
					GetPlayerPos(playerid, plX, plY, plZ);

					PlayerInfo[player][pCarLocX][idcar] = plX;
					PlayerInfo[player][pCarLocY][idcar] = plY;
					PlayerInfo[player][pCarLocZ][idcar] = plZ;
					PlayerInfo[player][pCarAngle][idcar] = 45.0;
					PlayerInfo[player][pCarLLocX][idcar] = plX;
					PlayerInfo[player][pCarLLocY][idcar] = plY;
					PlayerInfo[player][pCarLLocZ][idcar] = plZ;
					PlayerInfo[player][pCarAngle2][idcar] = 45.0;
					PlayerInfo[player][pCarModel][idcar] = model;
					PlayerInfo[player][pCarColor1][idcar] = 1;
					PlayerInfo[player][pCarColor2][idcar] = 1;
					strmid(CarOwner[player][idcar], PlayerInfo[player][pNormalName], 0, 50, 255);
					PlayerInfo[player][pCarLock][idcar] = 0;
					PlayerInfo[player][pCarInsPrice][idcar] = 5000;
					PlayerInfo[player][pCarIns][idcar] = 5;
					PlayerInfo[player][pCarKM][idcar] = 0.0;
					PlayerInfo[player][pCarKMLast][idcar] = 0;
					PlayerInfo[player][pCarVIP][idcar] = 0;
					PlayerInfo[player][pCarNeon][idcar] = 0;
					PlayerInfo[player][pCarVipColors][idcar] = 0;
					PlayerInfo[player][pCarHP][idcar] = 1000.0;
					PlayerInfo[player][pCarDamage1][idcar] = 0;
					PlayerInfo[player][pCarDamage2][idcar] = 0;
					PlayerInfo[player][pCarDamage3][idcar] = 0;
					PlayerInfo[player][pCarDamage4][idcar] = 0;
					PlayerInfo[player][pCarGas][idcar] = 100;
					PlayerInfo[player][pCarGasMax][idcar] = 100;
					PlayerInfo[player][pCarPaintJ][idcar] = 6;
					PlayerInfo[player][pCarBlock][idcar] = 0;
					PlayerInfo[player][pCarEvent][idcar] = 0;
					for(new s; s < 17; s++)
					{
						CarMod[player][idcar][s] = 0;
					}
					PlayerInfo[player][pCarBuyTime][idcar] = gettime();

					cUpdate(player, idcar, cModsx);
					cUpdate(player, idcar, cPaintJx);
					cUpdate(player, idcar, cLocationxx);
					cUpdate(player, idcar, cLocationyx);
					cUpdate(player, idcar, cLocationzx);
					cUpdate(player, idcar, cAnglex);
					cUpdate(player, idcar, cLocationx2x);
					cUpdate(player, idcar, cLocationy2x);
					cUpdate(player, idcar, cLocationz2x);
					cUpdate(player, idcar, cAngle2x);
					cUpdate(player, idcar, cColorOnex);
					cUpdate(player, idcar, cColorTwox);
					cUpdate(player, idcar, cValuex);
					cUpdate(player, idcar, cLicensex);
					cUpdate(player, idcar, cLockx);
					cUpdate(player, idcar, cInscarpricex);
					cUpdate(player, idcar, cInsurancecarx);
					cUpdate(player, idcar, cKMx);
					cUpdate(player, idcar, cDaysx);
					cUpdate(player, idcar, cHPx);
					cUpdate(player, idcar, cKMLastx);
					cUpdate(player, idcar, cDamage1x);
					cUpdate(player, idcar, cDamage2x);
					cUpdate(player, idcar, cDamage3x);
					cUpdate(player, idcar, cDamage4x);
					cUpdate(player, idcar, cGasx);
					cUpdate(player, idcar, cOwnerx);
					cUpdate(player, idcar, cCarVIPx);

					PlayerInfo[player][pCarID][idcar] = CreateVehicle(PlayerInfo[player][pCarModel][idcar],PlayerInfo[player][pCarLocX][idcar],PlayerInfo[player][pCarLocY][idcar],PlayerInfo[player][pCarLocZ][idcar],PlayerInfo[player][pCarAngle][idcar],1,1,-1);
					vehRadio[PlayerInfo[player][pCarID][idcar]] = 0;
    				GetPlayerName(playerid, sname, sizeof(sname));
    				GetPlayerName(player, gname, sizeof(gname));
    				format(queryy, sizeof(queryy), "Admin %s has created for you a %s.", sname, aVehicleNames[model - 400]);
    				SendClientMessage(player, COLOR_RED2, queryy);

    				format(queryy, sizeof(queryy), "Admin %s[admin:%d] created vehicle %s[car:%d] for %s[user:%d].", sname, PlayerInfo[playerid][pSQLID], aVehicleNames[model - 400], idd, gname, PlayerInfo[player][pSQLID]);
    				ABroadCast(COLOR_RED2, queryy, 5);
    				Log(PlayerInfo[playerid][pSQLID], queryy, "vcreate");

    				new var100[256],string2[256];
					mysql_real_escape_string(queryy, string2);
					mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s')", PlayerInfo[player][pSQLID], PlayerInfo[playerid][pSQLID], string2);
					mysql_tquery(SQL, var100, "", "");
					masini++;
				}
			}
		}
		else
		{
			CreateVEH[playerid] = -1;
			CreateVEHID[playerid] = -1;
			SendClientMessage(playerid, COLOR_WHITE, "Vehicle creation canceled.");
			return 1;
		}
	}
	if(dialogid == DIALOG_HUD)
	{
	    if(response)
		{
		    new stringg[256];
		    if(listitem == 0)
		    {
		        format(stringg,sizeof(stringg),"Disable\n{C0C0C0}Grey\n{FF0000}Red\n{00FF00}Green\n{0000FF}Blue\n{FFFF00}Yellow");
		        ShowPlayerDialog(playerid,DIALOG_HUD1,DIALOG_STYLE_LIST, "HUD Options: HP", stringg, "Select","Close");
			}
			if(listitem == 1)
		    {
		        format(stringg,sizeof(stringg),"Disable\n{C0C0C0}Grey\n{FF0000}Red\n{00FF00}Green\n{0000FF}Blue\n{FFFF00}Yellow");
		        ShowPlayerDialog(playerid,DIALOG_HUD2,DIALOG_STYLE_LIST, "HUD Options: Armour", stringg, "Select","Close");
			}
			if(listitem == 2)
		    {
		        format(stringg,sizeof(stringg),"Disable\n{00FF00}Enable");
		        ShowPlayerDialog(playerid,DIALOG_HUD3,DIALOG_STYLE_LIST, "HUD Options: FPS", stringg, "Select","Close");
			}
			if(listitem == 3)
		    {
		        format(stringg,sizeof(stringg),"Disable\n{00FF00}Enable");
		        ShowPlayerDialog(playerid,DIALOG_HUD4,DIALOG_STYLE_LIST, "HUD Options: Damage informer", stringg, "Select","Close");
			}
		}
	}
	if(dialogid == DIALOG_HUD1)
	{
	    if(response)
		{
		    if(listitem == 0)
		    {
		        PlayerInfo[playerid][pHUD1] = 0;
		        PlayerTextDrawHide(playerid, HUD[1][playerid]);
			}
			if(listitem == 1)
			{
			    PlayerInfo[playerid][pHUD1] = 1;
			}
			if(listitem == 2)
			{
			    PlayerInfo[playerid][pHUD1] = 2;
			}
			if(listitem == 3)
			{
			    PlayerInfo[playerid][pHUD1] = 3;
			}
			if(listitem == 4)
			{
			    PlayerInfo[playerid][pHUD1] = 4;
			}
			if(listitem == 5)
			{
			    PlayerInfo[playerid][pHUD1] = 5;
			}
			Update(playerid, pHUD1x);
      		SendClientMessage(playerid, COLOR_DARKPINK, "HUD options updated!");
		}
	}
	if(dialogid == DIALOG_HUD2)
	{
	    if(response)
		{
		    if(listitem == 0)
		    {
		        PlayerInfo[playerid][pHUD2] = 0;
		        PlayerTextDrawHide(playerid, HUD[2][playerid]);
			}
			if(listitem == 1)
			{
			    PlayerInfo[playerid][pHUD2] = 1;
			}
			if(listitem == 2)
			{
			    PlayerInfo[playerid][pHUD2] = 2;
			}
			if(listitem == 3)
			{
			    PlayerInfo[playerid][pHUD2] = 3;
			}
			if(listitem == 4)
			{
			    PlayerInfo[playerid][pHUD2] = 4;
			}
			if(listitem == 5)
			{
			    PlayerInfo[playerid][pHUD2] = 5;
			}
			Update(playerid, pHUD2x);
      		SendClientMessage(playerid, COLOR_DARKPINK, "HUD options updated!");
		}
	}
	if(dialogid == DIALOG_HUD3)
	{
	    if(response)
		{
		    if(listitem == 0)
		    {
		        PlayerInfo[playerid][pHUD3] = 0;
		        PlayerTextDrawHide(playerid, HUD[3][playerid]);
			}
			if(listitem == 1)
			{
			    PlayerInfo[playerid][pHUD3] = 1;
			}
			Update(playerid, pHUD3x);
      		SendClientMessage(playerid, COLOR_DARKPINK, "FPS options updated!");
		}
	}
	if(dialogid == DIALOG_HUD4)
	{
	    if(response)
		{
		    if(listitem == 0) PlayerInfo[playerid][pHUD4] = 0;
			if(listitem == 1) PlayerInfo[playerid][pHUD4] = 1;
			Update(playerid, pHUD4x);
      		SendClientMessage(playerid, COLOR_DARKPINK, "Damage informer options updated!");
		}
	}
	if(dialogid == DIALOG_HELP)
	{
	    if(response)
		{
  			new stringy[MAX_STRING];
		  	if(listitem == 0)
	   		{
 	    		ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: General Commands", "/stats /accept /eject /ad /admins\n/helpers /time /id /changepass /pay /tie\n/buylevel /fill /fillgascan /gps /shop /unrentvehicle\n/contract /service /buydrink /licenses /ringbell","Back","Exit");
			}
			if(listitem == 1)
			{
   				format(stringy, sizeof(stringy), "/o (global OOC message)\n/n (newbie chat message)\n/sms (OOCly SMS another player)\n/b (local OOC message)\n/w(hisper)\n/low (quiet message)\n/me (action)\n/do (action)\n/wt (walkie talkie)");
  	    		ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Chat Commands", stringy, "Back", "Exit");
			}
			if(listitem == 2)
  			{
				if(PlayerInfo[playerid][pMember] == 0)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", "You're not in a group.", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 1)
				{
					format(stringy, sizeof(stringy), "/raport /m /duty /r /d /confiscate /mdc /su /wanted /find\n /so /free /clear /arrest /untie /ticket /ta /cuff /uncuff /frisk /per /casca /nos /permis /faruri");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 2)
				{
					format(stringy, sizeof(stringy), "/raport /m /duty /r /d /confiscate /mdc /su /wanted /find\n /so /free /clear /arrest /untie /ticket /ta /cuff /uncuff /frisk /per");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 3)
				{
					format(stringy, sizeof(stringy), "/raport /m /duty /r /d /confiscate /mdc /su /wanted /find\n /so /free /clear /arrest /untie /ticket /ta /cuff /uncuff /frisk /per");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 4)
				{
				    format(stringy, sizeof(stringy), "/raport /order /attack /f /tie /untie");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 5)
				{
				    format(stringy, sizeof(stringy), "/raport /order /attack /f /tie /untie");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 6)
				{
				    format(stringy, sizeof(stringy), "/raport /order /attack /f /tie /untie");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 7)
				{
				    format(stringy, sizeof(stringy), "/economy /fvr /announce /ab /cb /svar");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 8)
				{
				    format(stringy, sizeof(stringy), "/raport /m /duty /r /d /confiscate /mdc /su /wanted /find\n /so /free /clear /arrest /untie /ticket /ta /cuff /uncuff /frisk /per /casca /nos /permis /faruri");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 9)
				{
    				format(stringy, sizeof(stringy), "/raport /live /endlive /news /startq /stopq /aq");
    				ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 10)
				{
				    format(stringy, sizeof(stringy), "/raport /order /attack /f /tie /untie");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 11)
				{
    				format(stringy, sizeof(stringy), "/raport /undercover /gethit /mycontract /find /checkcontract /cancelhit /contracts");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 12)
				{
    				format(stringy, sizeof(stringy), "/raport /givelicense /startlesson /stoplesson /f");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 13)
				{
    				format(stringy, sizeof(stringy), "/raport /taxi /fare /f");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
				if(PlayerInfo[playerid][pMember] == 14)
				{
    				format(stringy, sizeof(stringy), "/raport /heal /f /medic");
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", stringy, "Back", "Exit");
				}
			}
			if(listitem == 3)
  			{ 
			    format(stringy, sizeof(stringy), "/bat /signal /nobreath /fallover /pedmove /getjiggy /stripclub /dj /reload\n /tag /cheer /bar /showoff /goggles /cry /throw /robbed /hurt /handwash\n /stop /robman /finger /blob /opendoor /wavedown /cpr");
				strcat(stringy, "\n/dive /box /laugh /lookout /crossarms /lay /hide /vomit /wave\n/salute /slapass /deal /crack /wank /gro /rap /pee /crabs /sit /siteat /drunk /bomb /chat /taichi /dance\n/smoke /gesture ");
    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Animations Commands", stringy, "Back", "Exit");
			}
			if(listitem == 4)
  			{
				if(PlayerInfo[playerid][pLanguage] == 1)
				{
					format(stringy, sizeof(stringy), "{FFFFFF}General Commands:\n/home - checkpoint to your house\n/buyhouse - buy a house\n\nHouse Owner Commands\n/sellhouse - set the house for sale (anyone can buy it!)\n/sellhouseto <playerid> - sells the house to a specific player\n/lockhouse - locks the house");
					strcat(stringy, "\n/houserent - sets the rent price\n/sellhousetostate - sell house to the state\n/tradehouseforcar - trade your house for a car\n/tenants - list of the online players that pay rent to you\n/evict <playerid> - evicts a tenant from your house\n/evictall - evict all the tenants");
					strcat(stringy, "\n/hwithdraw - withdraws money from your house safe\n/hbalance - displays how much money you have in your house safe");
				}
				else if(PlayerInfo[playerid][pLanguage] == 2)
				{
					format(stringy, sizeof(stringy), "{FFFFFF}Comenzi Generale:\n/home - pune un checkpoint pe minimap catre casa detinuta sau casa unde ai rent\n/buyhouse - cumpara o casa\n\nComenzi pentru detinatorii de case:\n/sellhouseto <playerid> - vinzi casa catre un anumit player");
					strcat(stringy, "\n/lockhouse - inchide/deschide casa\n/houserent - seteaza pretul chiriei\n/sellhousetostate - vinzi casa statului(cu 70 la suta din pret)\n/tenants - afiseaza playerii ce au chirie(rent) la casa ta\n/evict <playerid> - da un player afara din casa ta");
					strcat(stringy, "\n/evictall - da afara toti playerii din casa ta(care au chirie)\n/housewithdraw - retrage bani din seiful casei\n/housename - setezi numele casei\n/setrent - setezi daca se poate/nu se poate inchiria casa\n/heal - iti incarci viata si armura(daca are casa)\n/hu - cumperi viata/armura care se ia cu comanda /heal");
    			}
				ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: House Commands", stringy, "Back", "Exit");
			}
			if(listitem == 5)
  			{
				if(PlayerInfo[playerid][pJob] == 0)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "You don't have a public job or your job does not have any commands.", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 1)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "/find /cancel find", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 2)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "/dropcar", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 3)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "/work", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 4)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "/selldrugs /getdrugs", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 5)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "/work", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 6)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "/work", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 7)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "/work", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 8)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "/refill /repair /tow", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 9)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "/creategun /sellgun /sellmaterials /getmats", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 10)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "/collecttrash /unloadtrash", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 13)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "/fish", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 14)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "/work", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 15)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "/work", "Back", "Exit");
				}
				if(PlayerInfo[playerid][pJob] == 16)
				{
  	    			ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Job Commands", "/work", "Back", "Exit");
				}
			}
			if(listitem == 6)
  			{
 				ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Business Commands", "/bizname /sellbizto /sellbiztostate /sellbusiness /bwithdraw /bbalance", "Back", "Exit");
			}
			if(listitem == 7)
  			{
				if(PlayerInfo[playerid][pLanguage] == 1)
				{
					format(stringy, sizeof(stringy), "{FFFFFF}You need level 3 to buy a car. To buy a car you can go to the car dealership. If you don't know where the dealership is located, use /where.");
					strcat(stringy, "\n\nGeneral Commands:\n/lock - locks/unlocks the car doors\n/findcar - places a checkpoint on the minimap to help you find your car\n/park - sets the place where your car will be respawned\n/towcar - respawns your car in the place you have last /park-ed it");
					strcat(stringy, "\n/engine (key 2) - starts/stops the engine of a vehicle\n/trunk, /hood (keys: NUMPAD 2 and NUMPAD 8) - opens and closes the hood and the trunk of a vehicle\n/carradio (key R) - sets a radio station for a vehicle\n/eject - ejects someone from your vehicle");
					strcat(stringy, "\n/carcolor - changes the color of your vehicle. use /colors to see a list of colors that can be used\n/removetunning - removes the tuning of your vehicle\n/carplate - changes the number plate of your vehicle\n/Car selling commands:\n{FF0000}(scamming is NOT allowed on our server){FFFFFF}");
					strcat(stringy, "\n/sellcar - sells the car to the dealership for 60%% of the initial price\n/sellcarto <playerid> <price> - sells the car to a player\n/tradecar <playerid> <difference> - trade cars with other another player\n/tradehouseforcar - can be used by house owners. trades a house for a car");
					strcat(stringy, "\n\nOther commands:\n/givekey - gives the key to your car to another player. the key is lost when the player leaves the game or when you use /changelock\n/cars - displays a list of your cars. you can tow and find your cars from this menu\nInsurance, Vehicle Age, Distance Traveled:");
					strcat(stringy, "\nEvery time your car gets destroyed (explodes or falls in water) the car loses one insurance point.\nWhen the car reaches 0 insurance points, you must pay the insurance to be able to drive it.\nYou can buy insurance for your car using /cars\n\nWhen you buy the car, one insurance point costs %5.000.");
					strcat(stringy, "\nFor every 1000km traveled by your car, the insurance price increases by $100. For every day, the insurance increases by $50.\nSo if you buy a car and travel 2000km with it, the insurance price will be $5200.\nIf you have a car with 2000km traveled that is 3 days old, the insurance price will be $5500.");
					strcat(stringy, "\n\nHidden colors:\nHidden colors are colors that look nicer than regular colors and can only be bought with premium points (for more info about premium points, use /shop -> info).\nYou can see a list of the premium colors using /colors.");
				}
				else if(PlayerInfo[playerid][pLanguage] == 2)
				{
					format(stringy, sizeof(stringy), "{FFFFFF}Ai nevoie de level 3 pentru a cumpara o masina. Masinile pot fi cumparate de la Dealership. Poti folosi /where daca nu stii unde e dealership-ul.");
					strcat(stringy, "\n\nComenzi generale:\n/lock - inchide/deschide usile masinii\n/findcar - este setat un checkpoint pe minimap in locul unde iti poti gasi masina\n/park - seteaza locul unde masina ta se va spawna(unde va aparea) dupa ce va fi distrusa\n/towcar - respawneaza masina in locul unde ai parcat-o (/park)");
					strcat(stringy, "\n/engine (tasta 2) - porneste/opreste motorul masinii\n/trunk, /hood (NUMPAD 2, NUMPAD 8) - deschide/inchide capota/portbagajul masinii\n/carradio (tasta R) - seteaza post de radio pentru masina\n/eject - da un player afara din masina");
					strcat(stringy, "\n/carcolor - schimba culoarea masinii. foloseste /colors pentru a vedea o lista cu culorile ce pot fi folosite\n/removetunning - scoate modificarile facute la masina(tunning)\n/carplate - schimba placuta de inmatriculare a masinii\n\nComenzi pentru vanzari/schimburi de vehicule:");
					strcat(stringy, "\n{FF0000}(inselatoriile sunt interzise pe server)\n{FFFFFF}/sellcar - vinde masina la dealership pentru 60%% din pretul initial\n/sellcarto <playerid> <price> - vinde masina unui player\n/tradecar <playerid> <difference> - comanda folosita pentru schimb de masini cu un player");
					strcat(stringy, "\n/tradehouseforcar - comanda folosita de cei ce au case. schimba o casa pentru o masina cu un player.\n\nAlte comenzi:\n/givekey - oferi cheia masinii unui alt player. cheia este pierduta cand playerul iese din joc sau cand folosesti /changelock.\n/cars - afiseaza o lista cu masinile tale.");
					strcat(stringy, "\n\nAsigurare (insurance), Vechime, KM parcusi:\nDe fiecare data cand masina ta este distrusa (explodeaza sau cade in apa), masina pierde 1 insurance point (punct de asigurare).\nCand masina ajunge la 0 insurance points, trebuie sa platesti asigurarea pentru a o putea conduce in continuare.");
					strcat(stringy, "\nPoti cumpara insurance points folosind /cars.\n\nCand cumperi masina, un punct de asigurare costa $5.000.\nPentru fiecare 1000km parcursi de masina ta, pretul asigurarii creste cu $100. Pentru fiecare zi, pretul asigurarii creste cu $50.\nDe ex. daca ai o masina cu 2000km parcursi, pretul asigurarii va fi $5200.");
					strcat(stringy, "\nDaca ai o masina cu 2000km parcursi care are o vechime de 3 zile, asigurarea va costa $5500.\n\nCulori hidden:\nCulorile 'hidden' sunt culori ce arata mai bine decat culorile normale.\nCulorile hidden pot fi cumparate doar cu puncte premium (foloseste /shop > info pentru informatii despre punctele premium)");
 				}
				ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Vehicle Commands", stringy,"Back","Exit");
			}
			if(listitem == 8)
			{
 				ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Bank Commands", "/balance /withdraw /deposit", "Back", "Exit");
			}
			if(listitem == 9)
			{
				if(PlayerInfo[playerid][pLanguage] == 1)
				{
					format(stringy, sizeof(stringy), "You can use /rob starting at level 3. To rob, you need to go inside a business and use command /rob.\n\nYour rob skill increases with the number of successful robs.\nSkill 1: 0-25 robs\nSkill 2: 26-60 robs\nSkill 3: 61-110 robs\nSkill 4: 111-200 robs\nSkill 5: 201-300 robs");
					strcat(stringy, "\nSkill 6: 300+ robs\n\nMoney earned from a rob: 51.000$ - 66.000$.\nFor each skill you get $1.000 extra.");
				}
				else if(PlayerInfo[playerid][pLanguage] == 2)
				{
					format(stringy, sizeof(stringy), "Se poate da /rob incepand cu level 3. Pentru a da rob va trebui sa mergi in banca si sa folosesti comanda /rob.\nSkill-ul la rob este calculat in functie de rob-uri date cu succes.\nSkill 1: 0-25 roburi\nSkill 2: 26-60 roburi\nSkill 3: 61-110 roburi\nSkill 4: 111-200 roburi\nSkill 5: 201-300 roburi");
					strcat(stringy, "\nSkill 6: 300+ roburi\n\nBanii la rob se sunt cuprinsi intre: 51.000$ - 66.000$.\nPentru fiecare skill se primesc $1.000 in plus.");
				}
				ShowPlayerDialog(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Rob", stringy, "Back", "Exit");
			}
		}
	}
	if(dialogid == DIALOG_HELP2)
	{
	    if(response)
			{
			    ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_LIST, "SERVER: Commands", "General\nChat\nGroups\nAnimations\nHouses\nJobs\nBusinesses\nVehicles\nBank\nRob", "Select","Exit");
		}
		return 1;
	}
	if(dialogid == DIALOG_CMEMBERS)
		return 1;
	if(dialogid == DIALOG_WANTEDON)
	{
		if(response)
		{
			if(IsACop(playerid))
			{
				new id = Selectat[listitem][playerid];
				UsedFind[playerid] = 1;
				new Float:X,Float:Y,Float:Z;
				new galciala[MAX_PLAYER_NAME];
				GetPlayerName(id, galciala, sizeof(galciala));
				GetPlayerPos(id, X,Y,Z);
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, X,Y,Z, 3.5);
				targetfind[playerid] = id;
				foreach(new i : Player)
				{
					if(IsACop(playerid))
					{
						if(caser[playerid] == i)
						{
							cased[i] --;
						}
					}
				}
				if(IsACop(playerid))
				{
					cased[id] ++;
					caser[playerid] = id;
				}
				format(string,sizeof(string),"{FFFF00}Checkpoint-ul va afisa locatia playerului %s. Distanta pana la player: %.0f.",galciala,GetDistanceBetweenPlayers(playerid, id));
				SendClientMessage(playerid,COLOR_WHITE,string);
				GetPlayerName(id, sendername, sizeof(sendername));
				format(string, sizeof(string), "-- MDC [ID %d - %s][{FFFF00}W:%d{FFFFFF}][Chased by %d cops][Wanted expires in %d mins]",id, galciala, PlayerInfo[id][pWantedLevel], cased[id], wantedlost[id]/60+1);
				SendClientMessage(playerid, COLOR_WHITE,string);
				if(strcmp(PlayerInfo[id][pCrime1],  "Fara Crima", false) == 0) { }
				else
				{
					format(string, sizeof(string), "%s", PlayerInfo[id][pCrime1]);
					SendClientMessage(playerid,COLOR_WHITE,string);
				}
				if(strcmp(PlayerInfo[id][pCrime2],  "Fara Crima", false) == 0) { }
				else
				{
					format(string, sizeof(string), "%s", PlayerInfo[id][pCrime2]);
					SendClientMessage(playerid, COLOR_WHITE,string);
				}
				if(strcmp(PlayerInfo[id][pCrime3], "Fara Crima", false) == 0) { }
				else
				{
					format(string, sizeof(string), "%s", PlayerInfo[id][pCrime3]);
					SendClientMessage(playerid, COLOR_WHITE,string);
				}
			}
		}
	}
	if(dialogid == DIALOG_BUYSLOT)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 19) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu ai suficiente puncte premium.", "(Error){FFFFFF} You don't have enough premium points.");
			if(PlayerInfo[playerid][pCarSlots] >= 10) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't buy more than 10 vehicle slots.");
			PlayerInfo[playerid][pPremiumPoints] -= 20;
			PlayerInfo[playerid][pCarSlots] += 1;
			new str2[300],strings[200],stringss[200];
			mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d',`CarSlots`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pCarSlots],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str2,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 20 puncte premium pentru a primi un slot pentru masini.", "You paid 20 premium points to get a vehicle slot.");
			format(strings, sizeof(strings), "%s[user:%d] paid 20 premium points to buy a vehicle slot.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,1);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str2,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYPREMIUM)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 59) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			if(PlayerInfo[playerid][pPremiumAccount] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have already a premium account.");
			PlayerInfo[playerid][pPremiumPoints] -= 60;
			PlayerInfo[playerid][pPremiumAccount] = 1;
			if(PlayerInfo[playerid][pCarSlots] <= 8)
			{
				PlayerInfo[playerid][pCarSlots] += 2;
			}
			if(PlayerInfo[playerid][pCarSlots] == 9)
			{
				PlayerInfo[playerid][pCarSlots] += 1;
			}
			new str[300],strings[200],name[30],stringss[200];
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Premium`='1',`PremiumPoints`='%d',`CarSlots`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pCarSlots],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
			SS(playerid, COLOR_COOLRED, "Acum ai cont premium!", "Now you have premium account!");
			SS(playerid, COLOR_YELLOW, "Daca vrei sa primesti cont premium si pe forum, mergi pe (bluffs.ga/panel)!", "If you want to get premium account on forum, go to (bluffs.ga/panel)!");
			GetPlayerName(playerid, name, sizeof(name));
			format(strings, sizeof(strings), "%s[user:%d] paid 60 premium points to buy a premium account.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,1);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str,sizeof(str), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYCLEARFP)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 14) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			if(PlayerInfo[playerid][pFpunish] <= 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have faction punish.");
			new strings[200],stringss[200];
			format(strings, sizeof(strings), "%s[user:%d] paid 15 premium points to clear his FP.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,1);
			PlayerInfo[playerid][pPremiumPoints] -= 15;
			PlayerInfo[playerid][pFpunish] = 0;
			new str[300];
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `FPunish`='%d',`PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pFpunish],PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 15 puncte premium pentru a sterge FP-ul.", "You paid 15 premium points to clear your FP.");
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str,sizeof(str), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYCLEARWARNS)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 19) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			if(PlayerInfo[playerid][pWarns] <= 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have any warn.");
			PlayerInfo[playerid][pPremiumPoints] -= 20;
			PlayerInfo[playerid][pWarns] = 0;
			new str[300],strings[200],stringss[200];
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Warnings`='0',`PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 20 puncte premium pentru a sterge warn-urile.", "You paid 20 premium points to clear your warns.");
			format(strings, sizeof(strings), "%s[user:%d] paid 20 premium points to clear his warns.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,1);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str,sizeof(str), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYCLEARKM)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 19) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			new idcar=-1;
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your personal car.");
			for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
			{
				if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pCarID][vv])
				{
					idcar = vv;
				}
			}
			if(idcar == -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your personal car.");
			PlayerInfo[playerid][pPremiumPoints] -= 20;
			PlayerInfo[playerid][pCarKM][idcar] = 0.0;
			PlayerInfo[playerid][pCarKMLast][idcar] = 0;
			PlayerInfo[playerid][pCarBuyTime][idcar] = gettime();
			cUpdate(playerid, idcar, cKMx);
			cUpdate(playerid, idcar, cKMLastx);
			cUpdate(playerid, idcar, cDaysx);
			new str[300],strings[200],stringss[200];
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 20 puncte premium pentru a sterge KM si zilele masinii.", "You paid 20 premium points to clear your car KM & days.");
			format(strings, sizeof(strings), "%s[user:%d] paid 20 premium points to clear his car KM & days.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,1);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str,sizeof(str), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYCLEARKM2)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 19) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			new idcar = SelectedCar[playerid];
			PlayerInfo[playerid][pPremiumPoints] -= 20;
			PlayerInfo[playerid][pCarKM][idcar] = 0.0;
			PlayerInfo[playerid][pCarKMLast][idcar] = 0;
			PlayerInfo[playerid][pCarBuyTime][idcar] = gettime();
			cUpdate(playerid, idcar, cKMx);
			cUpdate(playerid, idcar, cKMLastx);
			cUpdate(playerid, idcar, cDaysx);
			new str[300],strings[200],stringss[200];
			mysql_format(SQL,str,sizeof(str),"UPDATE users SET `PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 20 puncte premium pentru a sterge KM si zilele masinii.", "You paid 20 premium points to clear your car KM & days.");
			format(strings, sizeof(strings), "%s[user:%d] paid 20 premium points to clear his car KM & days.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,1);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str,sizeof(str), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYVIPCAR)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 99) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points.\nNu ai suficiente puncte premium.", "Ok", "");
			new idcar = SelectedCar[playerid];
			new str2[256], strings[128], stringss[128];
			if(PlayerInfo[playerid][pCarVIP][idcar] == 1) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Acest vehicul este deja VIP.", "(Error){FFFFFF} This vehicle is already VIP.");
			if(PlayerInfo[playerid][pCarModel][idcar] == 481 || PlayerInfo[playerid][pCarModel][idcar] == 509 || PlayerInfo[playerid][pCarModel][idcar] == 510) 
					return SS(playerid, COLOR_LIGHTGREEN3, "Acest vehicul nu poate fi upgradat.", "This vehicle cannot be upgraded.");
			PlayerInfo[playerid][pPremiumPoints] -= 100;
			PlayerInfo[playerid][pCarVIP][idcar] = 1;
			SS(playerid, COLOR_YELLOW, "Ai platit 100 puncte premium pentru a face acest vehicul VIP. (/vipcar)", "You paid 100 premium points to make this vehicle VIP. (/vipcar)");
			format(strings, sizeof(strings), "%s[user:%d] paid 100 premium points to make his car VIP.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW, strings, 1);
			mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pPremiumPoints], PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str2,"","");
			mysql_format(SQL,str2,sizeof(str2),"UPDATE cars SET `VIP`='1' WHERE `ID`='%d'", PlayerInfo[playerid][pCar][idcar]);
			mysql_tquery(SQL,str2,"","");
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')", PlayerInfo[playerid][pSQLID], stringss);
			mysql_tquery(SQL,str2,"","");

		}
		return 1;
	}
	if(dialogid == DIALOG_BUYHIDDEN)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 19) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			PlayerInfo[playerid][pPremiumPoints] -= 20;
			PlayerInfo[playerid][pHiddenColor] += 1;
			Update(playerid, pHiddenColorx);
			new str2[300],strings[200],stringss[200];
			mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str2,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 20 puncte premium pentru a cumpara o culoare hidden.", "You paid 20 premium points to buy a hidden color.");
			format(strings, sizeof(strings), "%s[user:%d] paid 20 premium points to buy a hidden color.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,1);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str2,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYFIREWORKS)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 0) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			PlayerInfo[playerid][pPremiumPoints] -= 1;
			PlayerInfo[playerid][pFWorks] += 5;
			new str2[300],strings[200],stringss[200];
			mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d',`FWorks`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pPremiumPoints], PlayerInfo[playerid][pFWorks], PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str2,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 1 punct premium pentru a cumpara 5 artificii.", "You paid 1 premium point to buy 5 fireworks.");
			format(strings, sizeof(strings), "%s[user:%d] paid 1 premium point to buy 5 fireworks.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,1);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str2,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYMONEY1)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 0) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			PlayerInfo[playerid][pPremiumPoints] -= 1;
			GivePlayerCash(playerid, 300000);
			new str2[300],strings[200],stringss[200];
			mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str2,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 1 punct premium pentru a cumpara $300.000.", "You paid 1 premium point to buy $300.000.");
			format(strings, sizeof(strings), "%s[user:%d] paid 1 premium point to buy $300.000.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,1);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str2,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYMONEY2)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 9) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			PlayerInfo[playerid][pPremiumPoints] -= 10;
			GivePlayerCash(playerid, 3000000);
			new str2[300],strings[200],stringss[200];
			mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str2,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 10 puncte premium pentru a cumpara $3.000.000.", "You paid 10 premium points to buy $3.000.000.");
			format(strings, sizeof(strings), "%s[user:%d] paid 10 premium points to buy $3.000.000.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,1);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str2,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYMONEY3)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 49) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			PlayerInfo[playerid][pPremiumPoints] -= 50;
			GivePlayerCash(playerid, 15000000);
			new str2[300],strings[200],stringss[200];
			mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str2,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 50 puncte premium pentru a cumpara $15.000.000.", "You paid 50 premium points to buy $15.000.000.");
			format(strings, sizeof(strings), "%s[user:%d] paid 50 premium points to buy $15.000.000.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,1);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str2,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYMONEY4)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 99) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			PlayerInfo[playerid][pPremiumPoints] -= 100;
			GivePlayerCash(playerid, 30000000);
			new str2[300],strings[200],stringss[200];
			mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str2,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 100 puncte premium pentru a cumpara $30.000.000.", "You paid 100 premium points to buy $30.000.000.");
			format(strings, sizeof(strings), "%s[user:%d] paid 100 premium points to buy $30.000.000.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,1);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str2,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_BUYCLEARFH)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 49) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			if(PlayerInfo[playerid][pMember] != 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Trebuie sa fi civil.", "(Error){FFFFFF} You need to be a civilian.");
			PlayerInfo[playerid][pPremiumPoints] -= 50;
			new str2[256],strings[200],stringss[200];
			mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pPremiumPoints], PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,str2,"","");
			mysql_format(SQL,str2,sizeof(str2),"UPDATE faction_logs SET `deleted`='1' WHERE `player`='%d'", PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,str2,"","");
			SS(playerid, COLOR_YELLOW, "Ai platit 50 puncte premium pentru a sterge FH-ul.", "You paid 50 premium points to clear your FH.");
			format(strings, sizeof(strings), "%s[user:%d] paid 50 premium points to buy clear FH.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
			ABroadCast(COLOR_YELLOW,strings,1);
			mysql_real_escape_string(strings, stringss);
			mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
			mysql_tquery(SQL,str2,"","");
		}
		return 1;
	}
	if(dialogid == DIALOG_VIPWHEELS)
	{
		if(response)
		{
			if(listitem == 0)
			{
				new idcar=-1, carid = GetPlayerVehicleID(playerid);
				for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
				{
					if(carid == PlayerInfo[playerid][pCarID][vv])
					{
						idcar = vv;
					}
				}
				if(idcar == -1) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Poti folosi aceasta comanda doar pe vehicule VIP.", "(Error){FFFFFF} You can add custom wheels on VIP vehicles.");
				if(carid == PlayerInfo[playerid][pCarID][idcar])
				{
					if(PlayerInfo[playerid][pCarVIP][idcar] > 0)
					{
						AddVehicleComponent(GetPlayerVehicleID(playerid), 1080); CarMod[playerid][idcar][15] = 1080;
						cUpdate(playerid, idcar, cModsx);
					}
				}
			}
			if(listitem == 1)
			{
				new idcar=-1, carid = GetPlayerVehicleID(playerid);
				for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
				{
					if(carid == PlayerInfo[playerid][pCarID][vv])
					{
						idcar = vv;
					}
				}
				if(idcar == -1) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Poti folosi aceasta comanda doar pe vehicule VIP.", "(Error){FFFFFF} You can add custom wheels on VIP vehicles.");
				if(carid == PlayerInfo[playerid][pCarID][idcar])
				{
					if(PlayerInfo[playerid][pCarVIP][idcar] > 0)
					{
						AddVehicleComponent(GetPlayerVehicleID(playerid), 1083); CarMod[playerid][idcar][15] = 1083;
						cUpdate(playerid, idcar, cModsx);
					}
				}
			}
			if(listitem == 2)
			{
				new idcar=-1, carid = GetPlayerVehicleID(playerid);
				for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
				{
					if(carid == PlayerInfo[playerid][pCarID][vv])
					{
						idcar = vv;
					}
				}
				if(idcar == -1) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Poti folosi aceasta comanda doar pe vehicule VIP.", "(Error){FFFFFF} You can add custom wheels on VIP vehicles.");
				if(carid == PlayerInfo[playerid][pCarID][idcar])
				{
					if(PlayerInfo[playerid][pCarVIP][idcar] > 0)
					{
						AddVehicleComponent(GetPlayerVehicleID(playerid), 1073); CarMod[playerid][idcar][15] = 1073;
						cUpdate(playerid, idcar, cModsx);
					}
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_PET)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(PlayerInfo[playerid][pPetStatus] == 0) AttachPet(playerid);
				else RemovePet(playerid);
			}
			if(listitem == 1)
			{
				format(string, sizeof string, "Pet Name: %s\n If you want to change his name, type in box below the name:", PlayerInfo[playerid][pPetName]);
                ShowPlayerDialog(playerid, DIALOG_PETx, DIALOG_STYLE_INPUT, "Pet name change", string, "Change", "Exit");
			}
			if(listitem == 2) ViewPet(playerid);
			if(listitem == 3)
			{
				if(PlayerInfo[playerid][pPetPoints] < PlayerInfo[playerid][pPetLevel]*100) return SendClientMessage(playerid, COLOR_PET, "(Pet){FFFFFF} You don't have enought pet points.");
				if(GetPlayerCash(playerid) < PlayerInfo[playerid][pPetLevel]*100)
				{
					format(string,sizeof(string),"(Pet){FFFFFF} You need %s$ for upgrade the pet.");
					SendClientMessage(playerid, COLOR_PET, string);
					return 1;
				}
				GivePlayerCash(playerid, -PlayerInfo[playerid][pPetLevel]*1000);
				PlayerInfo[playerid][pPetPoints] -= PlayerInfo[playerid][pPetLevel]*100;
				PlayerInfo[playerid][pPetLevel] += 1;
				Update(playerid, pPetPointsx);
				Update(playerid, pPetLevelx);
				format(string,sizeof(string),"(Pet){FFFFFF} Congratulations! Your pet is now of level %d.", PlayerInfo[playerid][pPetLevel]);
				SendClientMessage(playerid, COLOR_PET, string);
				AttachPet(playerid);
			}
			if(listitem == 4)
			{
				format(string, sizeof string, "Parrot\nDolphin\nTurtle\nShark\nHippo", PlayerInfo[playerid][pPetName]);
                ShowPlayerDialog(playerid, DIALOG_PETSKIN, DIALOG_STYLE_LIST, "Pet name change", string, "Change", "Exit");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_PETSKIN)
	{
		if(response)
		{
			if(listitem == 0)
			{
				//parrot - 19079
				PlayerInfo[playerid][pPetSkin] = 19079;
				Update(playerid, pPetSkinx);
				format(string,sizeof(string),"(Pet){FFFFFF} Congratulations! Your pet skin is now a Parrot (%d).", PlayerInfo[playerid][pPetSkin]);
				SendClientMessage(playerid, COLOR_PET, string);
				AttachPet(playerid);
			}
			if(listitem == 1)
			{
				//dolphin - 1607
				PlayerInfo[playerid][pPetSkin] = 1607;
				Update(playerid, pPetSkinx);
				format(string,sizeof(string),"(Pet){FFFFFF} Congratulations! Your pet skin is now a Dolphin (%d).", PlayerInfo[playerid][pPetSkin]);
				SendClientMessage(playerid, COLOR_PET, string);
				AttachPet(playerid);
			}
			if(listitem == 2) 
			{
				//turtle - 1609
				PlayerInfo[playerid][pPetSkin] = 1609;
				Update(playerid, pPetSkinx);
				format(string,sizeof(string),"(Pet){FFFFFF} Congratulations! Your pet skin is now a Turtle (%d).", PlayerInfo[playerid][pPetSkin]);
				SendClientMessage(playerid, COLOR_PET, string);
				AttachPet(playerid);
			}
			if(listitem == 3)
			{
				//shark - 1608
				PlayerInfo[playerid][pPetSkin] = 1608;
				Update(playerid, pPetSkinx);
				format(string,sizeof(string),"(Pet){FFFFFF} Congratulations! Your pet skin is now a Shark (%d).", PlayerInfo[playerid][pPetSkin]);
				SendClientMessage(playerid, COLOR_PET, string);
				AttachPet(playerid);
			}
			if(listitem == 4)
			{
				//hippo - 1371
				PlayerInfo[playerid][pPetSkin] = 1371;
				Update(playerid, pPetSkinx);
				format(string,sizeof(string),"(Pet){FFFFFF} Congratulations! Your pet skin is now a Hippo (%d).", PlayerInfo[playerid][pPetSkin]);
				SendClientMessage(playerid, COLOR_PET, string);
				AttachPet(playerid);
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_PETx) {
			if(!response) return 1;
			if(!isnull(inputtext))
			{
				if(strlen(inputtext) >= 5 && strlen(inputtext) <= 15) {
                   	format(PlayerInfo[playerid][pPetName], 30, inputtext);
                   	Update(playerid, pPetNamex);
					format(string, sizeof string, "(Pet){FFFFFF} Your personal pet name was changed, new name is %s.", inputtext);
					SendClientMessage(playerid, COLOR_PET, string);
					RemovePet(playerid);
					AttachPet(playerid);
				}
				else 
				{
					SendClientMessage(playerid, COLOR_GREY, "Invalid pet name. (5 - 15 letters)");
					format(string, sizeof string, "Pet Name: %s\n If you want to change his name, type in box below the name:", PlayerInfo[playerid][pPetName]);
                    ShowPlayerDialog(playerid, DIALOG_PETx, DIALOG_STYLE_INPUT, "Pet name change", string, "Change", "Exit");
				}
			}
			else 
			{
                SendClientMessage(playerid, COLOR_GREY, "Invalid pet name. (5 - 15 letters)");
				format(string, sizeof string, "Pet Name: %s\n If you want to change his name, type in box below the name:", PlayerInfo[playerid][pPetName]);
                ShowPlayerDialog(playerid, DIALOG_PETx, DIALOG_STYLE_INPUT, "Pet name change", string, "Change", "Exit");
			}
		}	
	if(dialogid == DIALOG_BUYWALKIE)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPremiumPoints] <= 14) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			if(IsNumeric(inputtext))
			{
			    if(strlen(inputtext) == 3)
				{
				    new numb = strval(inputtext);
					if((inputtext[0] != '0'))
					{
						new str2[256],strings[200],stringss[200];
						format(str2, sizeof(str2), "SELECT * FROM `frequencies` WHERE `freqid`='%d'", numb);
						new Cache: xd = mysql_query(SQL, str2);
						if(cache_get_row_count() > 0)
						{
							cache_delete(xd);
							SendClientMessage(playerid, COLOR_LIGHTGREEN3, "This frequency number exist.");
							return 1;
						}
						cache_delete(xd);
						PlayerInfo[playerid][pPremiumPoints] -= 15;
						mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pPremiumPoints], PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,str2,"","");
						mysql_format(SQL, str2, sizeof(str2),"INSERT INTO `frequencies` (`freqid`,`ownerid`) VALUES ('%d','%d')", numb, PlayerInfo[playerid][pSQLID]);
						mysql_tquery(SQL, str2, "", "");
						if(PlayerInfo[playerid][pLanguage] == 2) format(strings, sizeof(strings), "Ai cumparat frecventa #%d pentru 15 puncte premium.", numb);
						else format(strings, sizeof(strings), "You bought frequency #%d for 15 premium points.", numb);
						SendClientMessage(playerid, COLOR_YELLOW, strings);
						format(strings, sizeof(strings), "You are now broadcasting at the frequency of #%d khz.", numb);
					    SendClientMessage(playerid, COLOR_WHITE, strings);
						WTChannel[playerid] = numb;
						mysql_format(SQL,str2,sizeof(str2),"UPDATE `users` SET `WTChannel` = '%d' WHERE `name` = '%s'", WTChannel[playerid], PlayerInfo[playerid][pNormalName]);
						mysql_tquery(SQL,str2,"","");
						format(strings, sizeof(strings), "%s[user:%d] paid 15 premium points to buy a private walkie-talkie frequency.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
						ABroadCast(COLOR_YELLOW,strings,1);
						mysql_real_escape_string(strings, stringss);
						mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
						mysql_tquery(SQL,str2,"","");
					}
					else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Frequency number must be between 100 and 999.");
				}
				else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} Frequency number must be between 100 and 999.");
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Frequency number must be between 100 and 999.");
		}
		return 1;
	}
	if(dialogid == DIALOG_SHOP)
	{
	    if(response)
		{
		  	if(listitem == 0)
		   	{
				new string1[MAX_STRING],string2[MAX_STRING],string3[MAX_STRING],string4[MAX_STRING],string5[2400];
		        format(string1, sizeof(string1), "Playerii ce vor sa ajute comunitatea pot cumpara puncte premium (cu bani reali).");
		        format(string2, sizeof(string2), "Se pot cumpara puncte premium folosind paysafecard sau paypal.");
		        format(string3, sizeof(string3), "Pretul punctelor premium se calculeaza in felul urmator: 1 punct = 0.1 lei, 10 puncte = 1 lei.");
		        format(string4, sizeof(string4), "Cu punctele premium se pot cumpara unele chestii din /shop si unele masini premium din Dealership. Pentru detalii acceseaza (bluffs.ga/panel).");
		        format(string5, sizeof(string5), "%s\n%s\n\n%s\n%s", string1, string2, string3, string4);
		        ShowPlayerDialog(playerid, DIALOG_SHOP2, DIALOG_STYLE_MSGBOX, "Info", string5, "Close", "");
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pPremiumPoints] <= 59) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			    if(PlayerInfo[playerid][pPremiumAccount] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have already a premium account.");
				ShowPlayerDialog(playerid, DIALOG_BUYPREMIUM, DIALOG_STYLE_MSGBOX, "Premium", "Do you want to pay 60 premium points to get Premium Account status?","Yes","No");
			}
			if(listitem == 2)
			{
			    if(PlayerInfo[playerid][pPremiumPoints] <= 14) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				ShowPlayerDialog(playerid, DIALOG_CHANGENAME, DIALOG_STYLE_INPUT, "Change name:", "Please enter your desired name below:", "Ok", "Cancel");
			}
			if(listitem == 3)
			{
				if(PlayerInfo[playerid][pPremiumPoints] <= 14) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			    if(PlayerInfo[playerid][pFpunish] <= 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have faction punish.");
			    ShowPlayerDialog(playerid, DIALOG_BUYCLEARFP, DIALOG_STYLE_MSGBOX, "Clear FP", "Do you want to pay 15 premium points to clear your FP?","Yes","No");
			}
			if(listitem == 4)
			{
				if(PlayerInfo[playerid][pPremiumPoints] <= 19) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			    if(PlayerInfo[playerid][pWarns] <= 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have any warn.");
			    ShowPlayerDialog(playerid, DIALOG_BUYCLEARWARNS, DIALOG_STYLE_MSGBOX, "Clear Warns", "Do you want to pay 20 premium points to clear your warns?","Yes","No");
			}
			if(listitem == 5)
			{
				if(PlayerInfo[playerid][pPremiumPoints] <= 19) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				new idcar=-1;
				if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your personal car.");
				for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
				{
					if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pCarID][vv])
					{
						idcar = vv;
					}
				}
				if(idcar == -1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are not in your personal car.");
				ShowPlayerDialog(playerid, DIALOG_BUYCLEARKM, DIALOG_STYLE_MSGBOX, "Clear KM & Days", "Do you want to pay 20 premium points to clear your car km and days?","Yes","No");
			}
			if(listitem == 6)
			{
				if(PlayerInfo[playerid][pPremiumPoints] <= 19) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				ShowPlayerDialog(playerid, DIALOG_BUYHIDDEN, DIALOG_STYLE_MSGBOX, "Hidden color", "Do you want to pay 20 premium points to buy a hidden color?","Yes","No");
			}
			if(listitem == 7)
			{
				if(PlayerInfo[playerid][pPremiumPoints] <= 0) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				ShowPlayerDialog(playerid, DIALOG_BUYFIREWORKS, DIALOG_STYLE_MSGBOX, "Fireworks", "Do you want to pay 1 premium point to buy 5 fireworks?","Yes","No");
			}
			if(listitem == 8)
			{
				if(PlayerInfo[playerid][pPremiumPoints] <= 19) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				if(PlayerInfo[playerid][pCarSlots] >= 10) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You can't buy more than 10 vehicle slots.");
				ShowPlayerDialog(playerid, DIALOG_BUYSLOT, DIALOG_STYLE_MSGBOX, "Vehicle slot", "Do you want to pay 20 premium points to buy a vehicle slot?","Yes","No");
			}
			if(listitem == 9)
			{
				if(PlayerInfo[playerid][pPremiumPoints] <= 14) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				ShowPlayerDialog(playerid, DIALOG_BUYWALKIE, DIALOG_STYLE_INPUT, "Buy frequency", "Type the frequency that you want to buy bellow. You can only buy a frequency 3 number frequency (100-999).\nYou'll be able to set a password for your frequency.\nPrice: 15 premium points.", "Buy", "Close");
			}
			if(listitem == 10)
			{
				if(PlayerInfo[playerid][pPremiumPoints] <= 9) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				if(PlayerInfo[playerid][pPhone] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have already an iPhone.");
				new strings[500];
				format(strings,sizeof(strings),"Avantaje iPhone:\n- numar de telefon din 4 cifre la alegere.\n- poti dezactiva apelurile daca vrei sa primesti doar SMS-uri.\n- in chat va aparea `* Player turns of his iPhone`.\n- optiune de /reply raspunde la ultimul SMS primit.\n- optiune /block pentru a bloca temporar un numar de telefon.\n\nChoose a phone number:");
				ShowPlayerDialog(playerid, DIALOG_IPHONE, DIALOG_STYLE_INPUT, "iPhone", strings, "Ok", "Cancel");
			}
			if(listitem == 11)
			{
				if(PlayerInfo[playerid][pPremiumPoints] <= 0) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				ShowPlayerDialog(playerid, DIALOG_BUYMONEY1, DIALOG_STYLE_MSGBOX, "Money", "Do you want to pay 1 premium point to buy $300,000?","Yes","No");
			}
			if(listitem == 12)
			{
				if(PlayerInfo[playerid][pPremiumPoints] <= 9) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				ShowPlayerDialog(playerid, DIALOG_BUYMONEY2, DIALOG_STYLE_MSGBOX, "Money", "Do you want to pay 10 premium points to buy $3,000,000?","Yes","No");
			}
			if(listitem == 13)
			{
				if(PlayerInfo[playerid][pPremiumPoints] <= 49) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				ShowPlayerDialog(playerid, DIALOG_BUYMONEY3, DIALOG_STYLE_MSGBOX, "Money", "Do you want to pay 50 premium points to buy $15,000,000?","Yes","No");
			}
			if(listitem == 14)
			{
				if(PlayerInfo[playerid][pPremiumPoints] <= 99) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				ShowPlayerDialog(playerid, DIALOG_BUYMONEY4, DIALOG_STYLE_MSGBOX, "Money", "Do you want to pay 100 premium points to buy $30,000,000?","Yes","No");
			}
	    	if(listitem == 15)
			{
				if(PlayerInfo[playerid][pPremiumPoints] <= 49) return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
				if(PlayerInfo[playerid][pMember] != 0) return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Trebuie sa fi civil.", "(Error){FFFFFF} You need to be a civilian.");
				ShowPlayerDialog(playerid, DIALOG_BUYCLEARFH, DIALOG_STYLE_MSGBOX, "Clear FH", "Do you want to pay 50 premium points to clear your faction history?","Yes","No");
            }
        	if(listitem == 16)
			{
				
				if(PlayerInfo[playerid][pPremiumPoints] >= 100)
				{
					if(PlayerInfo[playerid][pClan] == 0)
					{
						ShowPlayerDialog(playerid, DIALOG_CLANBUY, DIALOG_STYLE_MSGBOX, "Buy clan", "Are you sure?\nIf you go to the next step, you can't break the action and you will lose premium points.","Yes","No");
					}
					else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You already are in a clan! Use /quitclan first.");
				}
				else return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			}
			if(listitem == 17)
			{
				if(PlayerInfo[playerid][pPremiumPoints] >= 300)
				{
					if(PlayerInfo[playerid][pPet] != 0) return SendClientMessage(playerid,COLOR_PET,"(Pet){FFFFFF} You already have a pet!");
					ShowPlayerDialog(playerid, DIALOG_PETSHOP, DIALOG_STYLE_MSGBOX, "Buy Personal Pet", "Are you sure?\nIf you go to the next step, you can't break the action and you will lose premium points.","Yes","No");
				}
				else return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			}
			if(listitem == 18)
			{
				if(PlayerInfo[playerid][pPremiumPoints] >= 20)
				{
					if(PlayerInfo[playerid][pMp3] != 0) return SendClientMessage(playerid,COLOR_ERROR,"(Error){FFFFFF} You already have a mp3!");
					ShowPlayerDialog(playerid, DIALOG_MP3SHOP, DIALOG_STYLE_MSGBOX, "Buy Mp3 Player", "Are you sure?\nIf you go to the next step, you can't break the action and you will lose premium points.","Yes","No");
				}
				else return ShowPlayerDialog(playerid, DIALOG_NOPP, DIALOG_STYLE_MSGBOX, "Not enough points", "You don't have enough premium points to do this.", "Close", "");
			}
		}
	}
	if(dialogid == DIALOG_BILLBOARDS)
	{
	    if(response)
		{
			BillSelected[playerid] = listitem + 1;
			new titlestring[64];
			format(titlestring, sizeof(titlestring), "Manage billboard #%d", BillSelected[playerid]);
			format(string, sizeof(string), "Locate billboard\nRent billboard ($50.000 - 7hrs)");
			ShowPlayerDialog(playerid,DIALOG_BILLBOARDS2,DIALOG_STYLE_LIST, titlestring, string, "Select","Exit");
		}
	}
	if(dialogid == DIALOG_BILLBOARDS2)
	{
	    if(response)
		{
			if(listitem == 0)
			{
				SendClientMessage(playerid, COLOR_ERROR, "(Info){FFFFFF} An checkpoint was set at this billboard.");
			  	SetPlayerCheckpoint(playerid,bBill[BillSelected[playerid]][bBillXPos],bBill[BillSelected[playerid]][bBillYPos],bBill[BillSelected[playerid]][bBillZPos],4.0);
				CP[playerid] = 43;
			}
			if(listitem == 1)
			{
				if(GetPlayerCash(playerid) < 50000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enought money.");
				if(PlayerInfo[playerid][pLevel] < 5) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need level 5.");
				if(strcmp(bBill[BillSelected[playerid]][bBillOwner],"Admbot",true) != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} This billboard is already rented.");
				if(PlayerInfo[playerid][pBillboard] != 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already have a billboard rented.");
				ShowPlayerDialog(playerid,DIALOG_BILLRENT,DIALOG_STYLE_MSGBOX, "Are you sure?", "Are you sure that you want to rent this billboard for $50.000?", "Yes","No");
			}
		}
	}
	if(dialogid == DIALOG_BILLMENU)
	{
	    if(response)
		{
			if(listitem == 0) ShowPlayerDialog(playerid,DIALOG_BILLMENUTEXT,DIALOG_STYLE_INPUT, "Enter text", "The text must be between 4 - 128 characters.", "Done","Exit");
			if(listitem == 1) ShowPlayerDialog(playerid,DIALOG_BILLMENUSIZE,DIALOG_STYLE_INPUT, "Enter text size", "The text size must be between 5-25.", "Done","Exit");
		}
	}
	if(dialogid == DIALOG_BILLMENUTEXT)
	{
		if(response)
		{
			if(!isnull(inputtext))
			{
				new lungime = strlen(inputtext);
				if(lungime >= 4 && lungime <= 128)
				{
					new escape[128],mesaj[256];
					mysql_real_escape_string(inputtext, escape);
					format(WantBillName[playerid], 128, escape);
					format(mesaj, sizeof(mesaj),"(Billboards){FFFFFF} %s [%d] wants to change billboard text to (/ab or /cb):", PlayerInfo[playerid][pNormalName], playerid);
					ABroadCast(COLOR_JOB, mesaj, 1);
					HLChat(COLOR_JOB,mesaj);
					SendFamilyMessage(7, COLOR_JOB, mesaj);
					format(mesaj, sizeof(mesaj),"(Billboards){FFFFFF} %s",escape);
					ABroadCast(COLOR_JOB, mesaj, 1);
					HLChat(COLOR_JOB,mesaj);
					SendFamilyMessage(7, COLOR_JOB, mesaj);
					SendClientMessage(playerid, COLOR_JOB, "(Billboards){FFFFFF} Wait for an admin to accept the billboard text change request.");
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid text, minimum 4 characters, maximum 128.");
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid text.");
		}
	}
	if(dialogid == DIALOG_BILLMENUSIZE)
	{
		if(response)
		{
			new number = strval(inputtext);
			if(number < 5 || number > 25) return ShowPlayerDialog(playerid,DIALOG_BILLMENUSIZE,DIALOG_STYLE_INPUT, "Enter text size", "The text size must be between 5-25.", "Done","Exit");
			bBill[PlayerInfo[playerid][pBillboard]][bBillTextSize] = number;
			DestroyBillBoard(PlayerInfo[playerid][pBillboard]);
			new var100[256];
			mysql_format(SQL,var100, sizeof(var100), "UPDATE `billboards` SET `BillTextSize`='%d' WHERE `ID`='%d'", bBill[PlayerInfo[playerid][pBillboard]][bBillTime], PlayerInfo[playerid][pBillboard]);
			mysql_tquery(SQL,var100,"","");
			SendClientMessage(playerid, COLOR_JOB, "(Info){FFFFFF} Your billboard text's size was updated.");
		}
	}
	if(dialogid == DIALOG_BILLRENT)
	{
	    if(response)
		{
			if(GetPlayerCash(playerid) < 50000) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enought money.");
			new var100[256],date[6];
			GivePlayerCash(playerid, -50000);
			PlayerInfo[playerid][pBillboard] = BillSelected[playerid];
			Update(playerid, pBillboardx);
			format(bBill[BillSelected[playerid]][bBillOwner], 64, PlayerInfo[playerid][pNormalName]);
			bBill[BillSelected[playerid]][bBillTime]						= gettime() + (3600*7);
			mysql_format(SQL,var100, sizeof(var100), "UPDATE `billboards` SET `time`='%d',`BillOwner`='%s' WHERE `ID`='%d'", bBill[BillSelected[playerid]][bBillTime], bBill[BillSelected[playerid]][bBillOwner], BillSelected[playerid]);
			mysql_tquery(SQL,var100,"","");
			TimestampToDate(bBill[BillSelected[playerid]][bBillTime],date[0],date[1],date[2],date[3],date[4],date[5],2);
			format(string, sizeof(string), "(Info){FFFFFF} Congratulations, you rented the billboard #%d for $50.000 up to %02d.%02d.%02d-%02d:%02d:%02d.",BillSelected[playerid],date[0],date[1],date[2],date[3],date[4],date[5]);
			SendClientMessage(playerid, COLOR_JOB, string);
		}
	}
	if(dialogid == DIALOG_CLANBUY)
	{
		if(response)
		{
			new i,stringyy[500];
			PlayerInfo[playerid][pPremiumPoints] -= 100;
			format(stringyy, sizeof(stringyy), "You have bought a clan! (-100 premium points)");
			SendClientMessage(playerid, COLOR_YELLOW, stringyy);
			PlayerInfo[playerid][pCRank] = 7;

			new Cache: resultoccc = mysql_query(SQL,  "INSERT INTO `clans` (`clanName`) VALUES('New Clan')");

			i = cache_insert_id();
			cache_delete(resultoccc);

			ClanInfo[i][cClanExpire] = gettime() + (90*86400);
			ClanInfo[i][cClanSlots] = 25;

			PlayerInfo[playerid][pClan] = i;

			mysql_format(SQL, stringyy, sizeof(stringyy), "UPDATE `clans` SET `clanExpire`='%d' WHERE `clanID`='%d'",ClanInfo[i][cClanExpire],i);
			mysql_tquery(SQL, stringyy, "", "");


			mysql_format(SQL, stringyy, sizeof(stringyy), "UPDATE users SET `CRank`='7',`Clan`='%d',`PremiumPoints`='%d',`ClanJoin`='%d' WHERE `name`='%s'", PlayerInfo[playerid][pClan], PlayerInfo[playerid][pPremiumPoints], gettime(), PlayerInfo[playerid][pNormalName]);
			mysql_tquery(SQL,stringyy,"","");



			new strings[200],str2[128];
			format(strings, sizeof(strings), "/shop: %s created a new clan.", GetName(playerid));
			ABroadCast(COLOR_YELLOW, strings, 1);
			mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],strings);
			mysql_tquery(SQL,str2,"","");
			ShowPlayerDialog(playerid, DIALOG_CHOOSECLANNAME, DIALOG_STYLE_INPUT, "Clan name", "Insert clan name in the box below:\n(You can't change it after that!)", "Ok", "");
		}
	}
	if(dialogid == DIALOG_PETSHOP)
	{
		if(response)
		{
			new stringyy[500];
			PlayerInfo[playerid][pPremiumPoints] -= 300;
			format(stringyy, sizeof(stringyy), "You have bought a personal pet! (-300 premium points)");
			SendClientMessage(playerid, COLOR_YELLOW, stringyy);
			PlayerInfo[playerid][pPet] = 1;
			Update(playerid, pPetx);
			Update(playerid, pPremiumPointsx);
			new strings[200],str2[128];
			format(strings, sizeof(strings), "/shop: %s bought a personal pet.", GetName(playerid));
			ABroadCast(COLOR_YELLOW, strings, 1);
			mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],strings);
			mysql_tquery(SQL,str2,"","");
		}
	}
	if(dialogid == DIALOG_MP3SHOP)
	{
		if(response)
		{
			new stringyy[256];
			PlayerInfo[playerid][pPremiumPoints] -= 20;
			format(stringyy, sizeof(stringyy), "You have bought a mp3 player! (-20 premium points)");
			SendClientMessage(playerid, COLOR_YELLOW, stringyy);
			PlayerInfo[playerid][pMp3] = 1;
			Update(playerid, pMp3x);
			Update(playerid, pPremiumPointsx);
			new strings[200],str2[128];
			format(strings, sizeof(strings), "/shop: %s bought a mp3 player.", GetName(playerid));
			ABroadCast(COLOR_YELLOW, strings, 1);
			mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],strings);
			mysql_tquery(SQL,str2,"","");
		}
	}
	if(dialogid == DIALOG_SAVEVEHICLE)
	{
		if(response)
		{
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be in a vehicle to save it.");
			new Float:vPos[4],strquery[300],i;

			GetVehiclePos(GetPlayerVehicleID(playerid), vPos[0], vPos[1], vPos[2]);
		    GetVehicleZAngle(GetPlayerVehicleID(playerid), vPos[3]);

			format(strquery, sizeof(strquery), "INSERT INTO vehicles (Model, PosX, PosY, PosZ, Rotation) VALUES('%d', '%f', '%f', '%f', '%f')", GetVehicleModel(GetPlayerVehicleID(playerid)), vPos[0], vPos[1], vPos[2], vPos[3]);
		    new Cache: ab = mysql_query(SQL, strquery);

			i = cache_insert_id();
			cache_delete(ab);
			SendClientMessage(playerid, COLOR_YELLOW, "Vehicle saved.");

			VehicleInfo[i][vehModel] = GetVehicleModel(GetPlayerVehicleID(playerid));
			VehicleInfo[i][vehPosX] = vPos[0];
			VehicleInfo[i][vehPosY] = vPos[1];
			VehicleInfo[i][vehPosZ] = vPos[2];
			VehicleInfo[i][vehRotation] = vPos[3];
			VehicleInfo[i][vehGroup] = 0;
			VehicleInfo[i][vehRank] = 0;
			VehicleInfo[i][vehJob] = 0;
			VehicleInfo[i][vehCarID] = GetPlayerVehicleID(playerid);
			VehicleInfo[i][vehCarIDD] = i;
			for(new x = 0; x < MAX_VEHICLES; x++)
			{
		    	if(Carspawn[x] == GetPlayerVehicleID(playerid))
				{
		    	    Carspawn[x] = 0;
		    	}
		    }
			VehicleInfo[i][vehCarID] = GetPlayerVehicleID(playerid);
			Vehicless++;
		}
	}
	if(dialogid == DIALOG_DELETEVEHICLE)
	{
		if(response)
		{
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You need to be in a vehicle to save it.");
			for(new x; x < Vehicless; x++)
			{
				if(VehicleInfo[x][vehCarID] == GetPlayerVehicleID(playerid))
				{
					new strx[256];
					mysql_format(SQL, strx, sizeof(strx), "UPDATE `vehicles` SET `Active`='0' WHERE `ID`='%d'", VehicleInfo[x][vehCarIDD]);
					mysql_tquery(SQL, strx, "", "");


					DestroyVehicle(VehicleInfo[x][vehCarID]);

					SendClientMessage(playerid, COLOR_WHITE, "Vehicle deleted.");
					VehicleInfo[x][vehModel] = 0;
					VehicleInfo[x][vehPosX] = 0;
					VehicleInfo[x][vehPosY] = 0;
					VehicleInfo[x][vehPosZ] = 0;
					VehicleInfo[x][vehRotation] = 0;
					VehicleInfo[x][vehGroup] = 0;
					VehicleInfo[x][vehJob] = 0;
					VehicleInfo[x][vehRank] = 0;
					VehicleInfo[x][vehCarID] = 0;
					VehicleInfo[x][vehCarIDD] = 0;
					Vehicless--;
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_GO)
	{
	    if(response)
	    {
			if(listitem == 0)
			{
                ShowPlayerDialog(playerid, DIALOG_GO1, DIALOG_STYLE_LIST, "City Location", "Los Santos\nLas Venturas\nSan Fierro\nCNN LS\nCNN LV\nDealership\nCasino LV\nPNS Central\nMountain chilliad\nSpawn Civils\nBank", "Select", "Cancel");
				return 1;
			}
			if(listitem == 1)
			{
			    new prealung[200];
			    new prealung2[200];
			    new prealung3[200];
			    new prealung4[200];
			    new prealung5[200];
			    new prealung6[500];
			    new prealung7[500];
			    new prealung8[500];
			    new prealung9[500];
			    new finallung[10000];
			    format(prealung,  sizeof(prealung),"24/7 1\n24/7 2\n24/7 3\n24/7 4\n24/7 5\n24/7 6");
			    format(prealung2, sizeof(prealung2),"Francis Intn l Airport - Ticket sales\nFrancis Intn l Airport - Baggage claim\nShamal cabin\nAndromada cargo hold");
			    format(prealung3, sizeof(prealung3),"Ammunation 1\nAmmunation 2\nAmmunation 3\nAmmunation 4\nAmmunation 5\nBooth\nRange");
			    format(prealung4, sizeof(prealung4),"House 1\nHouse 2\nHouse 3\nHouse 4\nHouse 5\nHouse 6\nHouse 7");
			    format(prealung5, sizeof(prealung5),"Atrium\nBig Smoke s Crack Palace\nBloodbowl Stadium\nBurning Desire House\nColonel Furhberger s\nDillimore Gas Station\nDonut Shop\nFrancis International Airport");
			    format(prealung6, sizeof(prealung6),"Jefferson Motel\nKickstart Stadium\nLiberty City\nLos Santos Airport, Baggage Reclaim\nPleasures Dome/Jizzy s\nRC Battlefield\nRyders House\nSan Fierro Garage Interior");
			    format(prealung7, sizeof(prealung7),"Sweets House\nWelcome Pump\nWoozies Apartment\n8 Track Stadium\nDirt Bike Stadium\nCrack Den\nGolden Bed Motel Room\nHashbury House\nJohnsons House\nThe Madd Doggs Mansion");
			    format(prealung8, sizeof(prealung8),"Red Bed Motel Room\nVerdant bluffs Safehouse\nZeros RC Shop\nSF Police Department\nUnused Safe House\nTattoos\nBurger Shot\nWell Stacked Pizza\nCluckin Bell\nCaligulas Casino");
			    format(prealung9, sizeof(prealung9),"Casino\n4 Dragons Casino\nRusty Brown s Donuts\nLoco Low\nWheel Arch Angels\nTransfender");
			    format(finallung, sizeof(finallung),"%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s",prealung,prealung2,prealung3,prealung4,prealung5,prealung6,prealung7,prealung8,prealung9);
                ShowPlayerDialog(playerid, DIALOG_GO2, DIALOG_STYLE_LIST, "Other Location", finallung, "Select", "Cancel");
                return 1;
			}
         }
	}
	if(dialogid == DIALOG_GO1)
	{
		if(response)
		{
			if(listitem == 0)
			{
                 SetPlayerPos(playerid, 1529.6722,-1674.1904,13.3828);
                 SetPlayerInterior(playerid, 0);
                 SCM(playerid, COLOR_GREY, "You has been teleported");
                 return 1;
			}
			if(listitem == 1)
			{
                 SetPlayerPos(playerid, 1699.2000,1435.1000,10.7023);
                 SetPlayerInterior(playerid, 0);
                 SCM(playerid, COLOR_GREY, "You has been teleported");
                 return 1;
			}
			if(listitem == 2)
			{
                 SetPlayerPos(playerid, -1417.0000,-295.8000,14.1484);
                 SetPlayerInterior(playerid, 0);
                 SCM(playerid, COLOR_GREY, "You has been teleported");
                 return 1;
			}
			if(listitem == 3)
			{
                 SetPlayerPos(playerid, 1145.1075,-1400.4978,13.5225);
                 SetPlayerInterior(playerid, 0);
                 SCM(playerid, COLOR_GREY, "You has been teleported");
                 return 1;
			}
			if(listitem == 4)
			{
                 SetPlayerPos(playerid, 2096.6892,2037.7404,10.8203);
                 SetPlayerInterior(playerid, 0);
                 SCM(playerid, COLOR_GREY, "You has been teleported");
                 return 1;
			}
			if(listitem == 5)
			{
                 SetPlayerPos(playerid, 335.5106,-1519.5459,35.8672);
                 SetPlayerInterior(playerid, 0);
                 SCM(playerid, COLOR_GREY, "You has been teleported");
                 return 1;
			}
			if(listitem == 6)
			{
                 SetPlayerPos(playerid, 2026.9579,1007.5141,10.8203);
                 SetPlayerInterior(playerid, 0);
                 SCM(playerid, COLOR_GREY, "You has been teleported");
                 return 1;
			}
			if(listitem == 7)
			{
                 SetPlayerPos(playerid, 1046.3944,-1058.0892,46.5573);
                 SetPlayerInterior(playerid, 0);
                 SCM(playerid, COLOR_GREY, "You has been teleported");
                 return 1;
			}
			if(listitem == 8)
			{
                 SetPlayerPos(playerid, -2320.5964,-1626.7246,483.7052);
                 SetPlayerInterior(playerid, 0);
                 SCM(playerid, COLOR_GREY, "You has been teleported");
                 return 1;
			}
			if(listitem == 9)
			{
                 SetPlayerPos(playerid, 1782.5072,-1874.8694,30.5174);
                 SetPlayerInterior(playerid, 0);
                 SCM(playerid, COLOR_GREY, "You has been teleported");
                 return 1;
			}
			if(listitem == 10)
			{
                 SetPlayerPos(playerid, 1462.2047,-1023.9133,23.8331);
                 SetPlayerInterior(playerid, 0);
                 SCM(playerid, COLOR_GREY, "You has been teleported");
                 return 1;
			}

		}
	}
	if(dialogid == DIALOG_GO2)
	{
		if(response)
		{
		   if(listitem == 0)
		   {
			    SCM(playerid, COLOR_GREY, "Eroare: acesta locatie este inacesibila.");
			   	return 1;
		   }
		   if(listitem == 1)
		   {
				SCM(playerid, COLOR_GREY, "Eroare: acesta locatie este inacesibila.");
			   	return 1;
		   }
           if(listitem == 2)
		   {
				SCM(playerid, COLOR_GREY, "Eroare: acesta locatie este inacesibila.");
			   	return 1;
		   }
		   if(listitem == 3)
		   {
				SCM(playerid, COLOR_GREY, "Eroare: acesta locatie este inacesibila.");
			   	return 1;
		   }
		   if(listitem == 4)
		   {
				SCM(playerid, COLOR_GREY, "Eroare: acesta locatie este inacesibila.");
			   	return 1;
		   }
		   if(listitem == 5)
		   {
				SCM(playerid, COLOR_GREY, "Eroare: acesta locatie este inacesibila.");
			   	return 1;
		   }
		   if(listitem == 6)
		   {
				SCM(playerid, COLOR_GREY, "Eroare: acesta locatie este inacesibila.");
			   	return 1;
		   }
		   if(listitem == 7)
		   {
				SCM(playerid, COLOR_GREY, "Eroare: acesta locatie este inacesibila.");
			   	return 1;
		   }
		   if(listitem == 8)
		   {
				SetPlayerInterior(playerid, 1);
			    SetPlayerPos(playerid, 	2.384830,33.103397,1199.849976);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 9)
		   {
				SetPlayerInterior(playerid, 9);
			    SetPlayerPos(playerid, 	315.856170,1024.496459,1949.797363);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 10)
		   {
				SetPlayerInterior(playerid, 1);
			    SetPlayerPos(playerid, 	286.148987,-40.644398,1001.569946);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 11)
		   {
				SetPlayerInterior(playerid, 4);
			    SetPlayerPos(playerid, 	286.800995,-82.547600,1001.539978);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 12)
		   {
				SetPlayerInterior(playerid, 6);
			    SetPlayerPos(playerid, 		296.919983,-108.071999,1001.569946	);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 13)
		   {
				SetPlayerInterior(playerid, 7);
			    SetPlayerPos(playerid, 314.820984,-141.431992,999.661987);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 14)
		   {
				SetPlayerInterior(playerid, 6);
			    SetPlayerPos(playerid, 	316.524994,-167.706985,999.661987);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 15)
		   {
				SetPlayerInterior(playerid, 7);
			    SetPlayerPos(playerid, 	302.292877,-143.139099,1004.062500);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 16)
		   {
				SetPlayerInterior(playerid, 7);
			    SetPlayerPos(playerid, 280.795104,-135.203353,1004.062500);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 17)
		   {
				SetPlayerInterior(playerid, 3);
			    SetPlayerPos(playerid, 235.508994,1189.169897,1080.339966);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 18)
		   {
				SetPlayerInterior(playerid, 2);
			    SetPlayerPos(playerid, 	225.756989,1240.000000,1082.149902);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 19)
		   {
				SetPlayerInterior(playerid, 1);
			    SetPlayerPos(playerid, 	223.043991,1289.259888,1082.199951);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 20)
		   {
				SetPlayerInterior(playerid, 7);
			    SetPlayerPos(playerid, 	225.630997,1022.479980,1084.069946);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 21)
		   {
				SetPlayerInterior(playerid, 15);
			    SetPlayerPos(playerid, 295.138977,1474.469971,1080.519897);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 22)
		   {
				SetPlayerInterior(playerid, 15);
			    SetPlayerPos(playerid,328.493988,1480.589966,1084.449951);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 23)
		   {
				SetPlayerInterior(playerid, 15);
			    SetPlayerPos(playerid,385.803986,1471.769897,1080.209961);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 24)
		   {
				SetPlayerInterior(playerid, 18);
			    SetPlayerPos(playerid,1726.18,-1641.00,20.23);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 25)
		   {
				SetPlayerInterior(playerid, 2);
			    SetPlayerPos(playerid,2567.52,-1294.59,1063.25);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 26)
		   {
				SetPlayerInterior(playerid, 15);
			    SetPlayerPos(playerid,-1394.20,987.62,1023.96);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 27)
		   {
				SetPlayerInterior(playerid, 5);
			    SetPlayerPos(playerid,2338.32,-1180.61,1027.98);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 28)
		   {
				SetPlayerInterior(playerid, 8);
			    SetPlayerPos(playerid,2807.63,-1170.15,1025.57);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 29)
		   {
				SetPlayerInterior(playerid, 0);
			    SetPlayerPos(playerid,664.19,-570.73,16.34);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 30)
		   {
				SetPlayerInterior(playerid, 17);
			    SetPlayerPos(playerid,376.99,-191.21,1000.63);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 31)
		   {
				SetPlayerInterior(playerid, 14);
			    SetPlayerPos(playerid,1830.81,16.83,1061.14);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 32)
		   {
				SetPlayerInterior(playerid, 15);
			    SetPlayerPos(playerid,2220.26,-1148.01,1025.80	);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 33)// kickstar stadion
		   {
				SetPlayerInterior(playerid, 14);
			    SetPlayerPos(playerid,	-1410.72,1591.16,1052.53);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 34)// liberty city
		   {
				SetPlayerInterior(playerid, 1);
			    SetPlayerPos(playerid,	-750.80,491.00,1371.70);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 35)// aero
		   {
				SetPlayerInterior(playerid, 14);
			    SetPlayerPos(playerid,-1870.80,59.81,1056.25);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 36)// jizzy
		   {
				SetPlayerInterior(playerid, 3);
			    SetPlayerPos(playerid,	-2637.69,1404.24,906.46);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 37)// rc arena
		   {
				SetPlayerInterior(playerid, 10);
			    SetPlayerPos(playerid,-1079.99,1061.58,1343.04);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 38)// ryder house
		   {
				SetPlayerInterior(playerid, 2);
			    SetPlayerPos(playerid,	2451.77,-1699.80,1013.51);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 39)// sf garaj
		   {
				SetPlayerInterior(playerid, 1);
			    SetPlayerPos(playerid,-2042.42,178.59,28.84);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 40)// sweet
		   {
				SetPlayerInterior(playerid, 1);
			    SetPlayerPos(playerid,2535.83,-1674.32,1015.50);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 41)//pump
		   {
				SetPlayerInterior(playerid, 1);
			    SetPlayerPos(playerid,	681.66,-453.32,-25.61);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 42)// woozie
		   {
				SetPlayerInterior(playerid, 1);
			    SetPlayerPos(playerid,	-2158.72,641.29,1052.38);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 43)// stadium
		   {
				SetPlayerInterior(playerid, 7);
			    SetPlayerPos(playerid,-1395.958,-208.197,1051.170);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 44)
		   {
				SetPlayerInterior(playerid, 4);
			    SetPlayerPos(playerid,	-1424.9319,-664.5869,1059.8585);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 45)
		   {
				SetPlayerInterior(playerid, 5);
			    SetPlayerPos(playerid,	318.565,1115.210,1082.98);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 46)
		   {
				SetPlayerInterior(playerid, 9);
			    SetPlayerPos(playerid,2251.85,-1138.16,1050.63);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 47)
		   {
				SetPlayerInterior(playerid, 10);
			    SetPlayerPos(playerid,2260.76,-1210.45,1049.02);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 48)
		   {
				SetPlayerInterior(playerid, 3);
			    SetPlayerPos(playerid,2496.65,-1696.55,1014.74);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 49)
		   {
				SetPlayerInterior(playerid, 5);
			    SetPlayerPos(playerid,	1299.14,-794.77,1084.00);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 50)
		   {
				SetPlayerInterior(playerid, 10);
			    SetPlayerPos(playerid,	2262.83,-1137.71,1050.63);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 51)
		   {
				SetPlayerInterior(playerid, 8);
			    SetPlayerPos(playerid,2365.42,-1131.85,1050.88	);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 52)
		   {
				SetPlayerInterior(playerid, 6);
			    SetPlayerPos(playerid,-2240.00,131.00,1035.40);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 53)
		   {
				SetPlayerInterior(playerid, 10);
			    SetPlayerPos(playerid,	246.40,110.84,1003.22);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 54)
		   {
				SetPlayerInterior(playerid, 12);
			    SetPlayerPos(playerid,	2324.33,-1144.79,1050.71);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 55)
		   {
				SetPlayerInterior(playerid, 16);
			    SetPlayerPos(playerid,-203.0764,-24.1658,1002.2734);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 56)
		   {
				SetPlayerInterior(playerid, 10);
			    SetPlayerPos(playerid,	363.4129,-74.5786,1001.5078);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 57)
		   {
				SetPlayerInterior(playerid, 5);
			    SetPlayerPos(playerid,	372.3520,-131.6510,1001.4922);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 58)
		   {
				SetPlayerInterior(playerid, 9);
			    SetPlayerPos(playerid,		365.7158,-9.8873,1001.8516);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 59)
		   {
				SetPlayerInterior(playerid, 1);
			    SetPlayerPos(playerid,		2233.8032,1712.2303,1011.7632);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 60)
		   {
				SetPlayerInterior(playerid, 12);
			    SetPlayerPos(playerid,	1118.887,-10.2737,1002.0859);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 61)
		   {
				SetPlayerInterior(playerid, 10);
			    SetPlayerPos(playerid,		2016.2699,1017.7790,996.8750);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 62)
		   {
				SetPlayerInterior(playerid, 17);
			    SetPlayerPos(playerid,		378.026,-190.5155,1000.6328);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 63)
		   {
				SetPlayerInterior(playerid, 2);
			    SetPlayerPos(playerid,		616.7820,-74.8151,997.6350);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 64)
		   {
				SetPlayerInterior(playerid, 3);
			    SetPlayerPos(playerid,		615.2851,-124.2390,997.6350);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		   if(listitem == 65)
		   {
				SetPlayerInterior(playerid, 1);
			    SetPlayerPos(playerid,		617.5380,-1.9900,1000.6829);
			    SCM(playerid, COLOR_GREY, "You has been teleported");
			   	return 1;
		   }
		}
	}
	if(dialogid == DIALOG_RAMHQ)
	{
		if(response)
		{
			new name[30], string2[128], fid = BreachID[playerid];
			GetPlayerName(playerid, name, sizeof(name));
			format(string2, sizeof(string2), "* %s breaks down the door and enters the building.", name);
			ProxDetector(30.0, playerid, string2, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPlayerPosEx(playerid, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]);
	        SetPlayerInterior(playerid, DynamicFactions[fid][fInterior]);
	        SetPlayerVirtualWorld(playerid, DynamicFactions[fid][fVirtual]);
	        InHQ[playerid] = fid;
	        if(PlayerInfo[playerid][pMember] == 11)
		   	{
		   		if(PlayerInfo[playerid][pWantedLevel] < 6)
		   		{
		   			WantedPoints[playerid] += 2;
		   		}
		   		if(WantedPoints[playerid] > 13)
				{
					WantedPoints[playerid] = 13;
				}
				SetPlayerCriminal(playerid, -1, "breaking the door");
				ClearWanted(playerid);
		   	}
		}
		return 1;
	}
	if(dialogid == DIALOG_RAMHOUSE)
	{
		if(response)
		{
			new name[30], string2[128], i = BreachID[playerid];
			GetPlayerName(playerid, name, sizeof(name));
			format(string2, sizeof(string2), "* %s breaks down the door and enters the house.", name);
			ProxDetector(30.0, playerid, string2, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPlayerInterior(playerid,HouseInfo[i][hInterior]);
		   	SetPlayerPosEx(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
			PlayerInfo[playerid][pInt] = HouseInfo[i][hInterior];
			PlayerInfo[playerid][pLocal] = i;
		   	SetPlayerVirtualWorld(playerid,HouseInfo[i][hVirtual]);
		  	InHouse[playerid] = i;
		   	if(strlen(housestring[InHouse[playerid]]) > 0)
		   	{
			 	StopAudioStreamForPlayer(playerid);
		       	PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
		   	}
		   	if(PlayerInfo[playerid][pMember] == 11)
		   	{
		   		if(PlayerInfo[playerid][pWantedLevel] < 6)
		   		{
		   			WantedPoints[playerid] += 2;
		   		}
		   		if(WantedPoints[playerid] > 13)
				{
					WantedPoints[playerid] = 13;
				}
				SetPlayerCriminal(playerid, -1, "breaking the door");
				ClearWanted(playerid);
		   	}
		}
		return 1;
	}
	if(dialogid == DIALOG_RAMBIZ)
	{
		if(response)
		{
			new name[30], string2[128], i = BreachID[playerid];
			GetPlayerName(playerid, name, sizeof(name));
			format(string2, sizeof(string2), "* %s breaks down the door and enters the business.", name);
			ProxDetector(30.0, playerid, string2, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPlayerInterior(playerid, BizzInfo[i][bInterior]);
		   	SetPlayerPosEx(playerid, BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]);
		   	PlayerInfo[playerid][pInt] = BizzInfo[i][bInterior];
		   	PlayerInfo[playerid][pLocal] = i+99;
	       	SetPlayerVirtualWorld(playerid, BizzInfo[i][bVirtual]);
		   	InBussines[playerid] = i;
		   	if(PlayerInfo[playerid][pMember] == 11)
		   	{
		   		if(PlayerInfo[playerid][pWantedLevel] < 6)
		   		{
		   			WantedPoints[playerid] += 2;
		   		}
		   		if(WantedPoints[playerid] > 13)
				{
					WantedPoints[playerid] = 13;
				}
				SetPlayerCriminal(playerid, -1, "breaking the door");
				ClearWanted(playerid);
		   	}
		}
		return 1;
	}
	if(dialogid == DIALOG_ATM_MENU)
	{
		if(response)
		{
			if(listitem == 0)
			{
				new strx[128];
				format(strx, sizeof(strx), "Your bank account balance is currently standing at $%s.", FormatNumber(PlayerInfo[playerid][pAccount]));
				ShowPlayerDialog(playerid, DIALOG_ATM_BALANCE, DIALOG_STYLE_MSGBOX, "SERVER: Automated Teller Machine", strx, "OK", "");
			}
			if(listitem == 1)
			{
				ShowPlayerDialog(playerid, DIALOG_ATM_WITHDRAW, DIALOG_STYLE_INPUT, "SERVER: ATM", "Please specify the amount of money that you'd like to withdraw.\n\nYou can withdraw up to $10,000 from this ATM.\n\nNote: This ATM charges $10 from any withdrawals you make.", "OK", "Cancel");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_ATM_WITHDRAW)
	{
		if(response)
		{
			new suma = strval(inputtext);
			if(suma < 2 || suma > 10000)
			{
				SendClientMessage(playerid, COLOR_GREY, "You do not have enough money to withdraw this amount.");
				ShowPlayerDialog(playerid, DIALOG_ATM_WITHDRAW, DIALOG_STYLE_INPUT, "SERVER: ATM", "Please specify the amount of money that you'd like to withdraw.\n\nYou can withdraw up to $10,000 from this ATM.\n\nNote: This ATM charges $2 from any withdrawals you make.", "OK", "Cancel");
				return 1;
			}
			GivePlayerCash(playerid, suma);
			PlayerInfo[playerid][pAccount] -= suma;
			Update(playerid, pBank);
			ShowPlayerDialog(playerid, DIALOG_ATM_BALANCE, DIALOG_STYLE_MSGBOX, "SERVER: Automated Teller Machine", "Your money has been withdrawn.\n\nThank you for using our ATM today!", "OK", "");
		}
		return 1;
	}
	if(dialogid == DIALOG_SELLHOUSETOSTATE)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPhousekey] != SellHouseID[playerid]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own this house anymore.");
			new house = PlayerInfo[playerid][pPhousekey];
			HouseInfo[house][hHel] = 0;
			HouseInfo[house][hMusic] = 0;
			HouseInfo[house][hLock] = 0;
			HouseInfo[house][hOwned] = 1;
			HouseInfo[house][hRentabil] = 1;
			HouseInfo[house][hRent] = 5;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			strmid(HouseInfo[house][hOwner], "AdmBot", 0, strlen("AdmBot"), 255);
			ConsumingMoney[playerid] = 1;
			GivePlayerCash(playerid, 4000000);
			SendClientMessage(playerid, COLOR_WHITE, "You have sold your house to state for $4.000.000.");
			PlayerInfo[playerid][pPhousekey] = 999;
			PlayerInfo[playerid][pRented] = -1;
			if(PlayerInfo[playerid][pLocal] == house)
			{
				SetPlayerInterior(playerid,0);
				SetPlayerPosEx(playerid,HouseInfo[house][hEntrancex],HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]);
				PlayerInfo[playerid][pInt] = 0;
			}
			Update(playerid,pRentedx);
			Update(playerid,pPhousekeyx);
			new str2[256];
			mysql_format(SQL, str2, sizeof(str2), "UPDATE `houses` SET `Hel`='0',`Arm`='0',`Lockk`='0',`Owned`='0',`Owner`='AdmBot',`Rentabil`='1',`Rent`='5' WHERE `ID`='%d'", HouseInfo[house][hID]);
			mysql_tquery(SQL, str2, "", "");
			mysql_format(SQL, str2, sizeof(str2), "UPDATE `users` SET `House`='%d' WHERE `name`='AdmBot'", house);
			mysql_tquery(SQL, str2, "", "");
			OnPropTextdrawUpdate(1,house);
		}
		return 1;
	}
	if(dialogid == DIALOG_SELLBIZTOSTATE)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPbiskey] != SellHouseID[playerid]) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own this business anymore.");
			new bouse = PlayerInfo[playerid][pPbiskey];
			BizzInfo[bouse][bLocked] = 0;
			BizzInfo[bouse][bOwned] = 0;
			strmid(BizzInfo[bouse][bOwner], "AdmBot", 0, strlen("AdmBot"), 255);
			GivePlayerCash(playerid, 6000000);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			SendClientMessage(playerid, COLOR_WHITE, "You have sold your business for $6.000.000.");
			PlayerInfo[playerid][pPbiskey] = 255;
            new str1[184];
			mysql_format(SQL, str1, sizeof(str1), "UPDATE `bizz` SET `Locked`='0',`Owned`='0',`Till`='0',`Owner`='AdmBot' WHERE `ID`='%d'", bouse);
			mysql_tquery(SQL, str1, "", "");
			mysql_format(SQL, str1, sizeof(str1), "UPDATE `users` SET `Bizz`='%d' WHERE `name`='AdmBot'", bouse);
			Update(playerid,pPbiskeyx);
			OnPropTextdrawUpdate(2,bouse);
		}
		return 1;
	}
	if(dialogid == DIALOG_HUPGRADE)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
				{
					if(HouseInfo[PlayerInfo[playerid][pPhousekey]][hHel] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have already this house upgrade.");
					if(GetPlayerCash(playerid) >= 5000)
					{
						if(PlayerInfo[playerid][pLanguage] == 2) ShowPlayerDialog(playerid, DIALOG_HUPGRADE1, DIALOG_STYLE_MSGBOX, "Esti sigur?", "Vrei sa platesti $50,000 pentru a putea folosi /eat in casa?\n{FF0000}Atentie! {FFFFFF}Upgrade-ul va fi pierdut la vanzarea casei.", "Da", "Nu");
						else ShowPlayerDialog(playerid, DIALOG_HUPGRADE1, DIALOG_STYLE_MSGBOX, "Are you sure?", "Do you want to pay $5,000 to use /eat in your house?\n{FF0000}Atention! {FFFFFF}The upgrade will be lost when you sell the house.", "Yes", "No");
					}
					else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own a house.");
			}
			if(listitem == 1)
			{
				if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
				{
					if(HouseInfo[PlayerInfo[playerid][pPhousekey]][hMusic] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have already this house upgrade.");
					if(PlayerInfo[playerid][pPremiumPoints] >= 15)
					{
						if(PlayerInfo[playerid][pLanguage] == 2) ShowPlayerDialog(playerid, DIALOG_HUPGRADE2, DIALOG_STYLE_MSGBOX, "Esti sigur?", "Vrei sa platesti 15 puncte premium pentru a putea folosi /hmusic in casa?\n{FF0000}Atentie! {FFFFFF}Upgrade-ul va fi pierdut la vanzarea casei.", "Da", "Nu");
						else ShowPlayerDialog(playerid, DIALOG_HUPGRADE2, DIALOG_STYLE_MSGBOX, "Are you sure?", "Do you want to pay 15 premium points to use /hmusic in your house?\n{FF0000}Atention! {FFFFFF}The upgrade will be lost when you sell the house.", "Yes", "No");
					}
					else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough premium points.");
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own a house.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_HUPGRADE1)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				if(GetPlayerCash(playerid) >= 5000)
				{
					HouseInfo[PlayerInfo[playerid][pPhousekey]][hHel] = 1;
					GivePlayerCash(playerid,-5000);
					new str2[128];
					mysql_format(SQL, str2, sizeof(str2), "UPDATE `houses` SET `Hel`='1' WHERE `ID`='%d'", PlayerInfo[playerid][pPhousekey]);
					mysql_tquery(SQL, str2, "", "");
					SendClientMessage(playerid, COLOR_YELLOW, "You bought the house food upgrade for your house.");
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own a house.");
		}
		return 1;
	}
	if(dialogid == DIALOG_HUPGRADE2)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				if(PlayerInfo[playerid][pPremiumPoints] >= 15)
				{
					HouseInfo[PlayerInfo[playerid][pPhousekey]][hMusic] = 1;
					PlayerInfo[playerid][pPremiumPoints] -= 15;
					Update(playerid, pPremiumPointsx);
					new str2[128];
					mysql_format(SQL, str2, sizeof(str2), "UPDATE `houses` SET `Music`='1' WHERE `ID`='%d'", PlayerInfo[playerid][pPhousekey]);
					mysql_tquery(SQL, str2, "", "");
					SendClientMessage(playerid, COLOR_YELLOW, "You bought the music upgrade for your house.");
					format(str2, sizeof(str2), "%s[user:%d] has paid 15 premium points for house music upgrade.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID]);
					ABroadCast(COLOR_YELLOW, str2, 1);
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough premium points.");
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't own a house.");
		}
		return 1;
	}
	if(dialogid == DIALOG_HMUSIC)
	{
		if(response)
		{
			new strings[128],name[30],so,link[128];
			GetPlayerName(playerid, name, sizeof(name));
            if(listitem == 0)
			{
				format(link, sizeof(link), "off");
				format(strings, sizeof(strings), "* %s turned off the stereo.", name);
            }
			if(listitem == 1)
			{
				format(link, sizeof(link), "http://stream.profm.ro:8012/profm.mp3");
				format(strings, sizeof(strings), "* %s set the stereo to play Pro FM Romania.",name);
            }
			if(listitem == 2)
			{
				format(link, sizeof(link), "http://live.radiobandit.ro:8000");
				format(strings, sizeof(strings), "* %s set the stereo to play Radio Bandit Romania.",name);
            }
			if(listitem == 3)
			{
                format(link, sizeof(link), "http://radiotaraf.com/live.m3u");
				format(strings, sizeof(strings), "* %s set the stereo to play Radio Taraf Romania.",name);
            }
			if(listitem == 4)
			{
				format(link, sizeof(link), "http://live.radiohot.ro:8000/");
				format(strings, sizeof(strings), "* %s set the stereo to play Radio Hot Romania.",name);
            }
			if(listitem == 5)
			{
				format(link, sizeof(link), "http://dance.radiogangsta.ro:8800");
				format(strings, sizeof(strings), "* %s set the stereo to play Radio Gangsta Dance.",name);
            }
            if(listitem == 6)
			{
                format(link, sizeof(link), "http://live.radiogangsta.ro:8800");
				format(strings, sizeof(strings), "* %s set the stereo to play Radio Gangsta Manele.",name);
            }
			if(listitem == 7)
			{
				format(link, sizeof(link), "http://7619.live.streamtheworld.com:80/977_HITS_SC");
				format(strings, sizeof(strings), "* %s set the stereo to .977 Hitz.",name);
            }
			if(listitem == 8)
			{
				format(link, sizeof(link), "http://7639.live.streamtheworld.com:80/977_MIX_SC");
				format(strings, sizeof(strings), "* %s set the stereo to .977 Mix.",name);
            }
			if(listitem == 9)
			{
				format(link, sizeof(link), "http://7579.live.streamtheworld.com:80/977_ALTERN_SC");
				format(strings, sizeof(strings), "* %s set the stereo to .977 Alternative.",name);
            }
			if(listitem == 10)
			{
				format(link, sizeof(link), "http://www.listenlive.eu/bbcradio1.m3u");
				format(strings, sizeof(strings), "* %s set the stereo to Radio BBC One UK.",name);
            }
			if(listitem == 11)
			{
				format(link, sizeof(link), "http://dubstep.fm/128.pls");
				format(strings, sizeof(strings), "* %s set the stereo to Dubstep.fm.",name);
            }
			if(listitem == 12)
			{
				format(link, sizeof(link), "http://www.radio-hit.ro/asculta.m3u");
				format(strings, sizeof(strings), "* %s set the stereo to Radio Hit Romania.",name);
            }
			if(listitem == 13)
			{
				format(link, sizeof(link), "http://live.radioclubmix.ro:9999");
				format(strings, sizeof(strings), "* %s set the stereo to Radio ClubMix Romania.",name);
            }
			if(listitem == 14)
			{
				format(link, sizeof(link), "http://80.86.106.136/listen.pls");
				format(strings, sizeof(strings), "* %s set the stereo to Kiss FM Romania [Audio Plugin].",name);
            }
			if(listitem == 15)
			{
				format(link, sizeof(link), "http://www.radiozu.ro/live.m3u");
				format(strings, sizeof(strings), "* %s set the stereo to Radio Zu Romania [Audio Plugin].",name);
            }
			if(listitem == 16)
			{
				format(link, sizeof(link), "http://livemp3.radiopopular.ro:7777");
				format(strings, sizeof(strings), "* %s set the stereo to Radio Popular.",name);
            }
			if(listitem == 17)
			{
				format(link, sizeof(link), "http://radio.trap.fm/listen128.pls");
				format(strings, sizeof(strings), "* %s set the stereo to Trap.FM.",name);
            }
            if(listitem == 18)
			{
				format(link, sizeof(link), "http://radiotequila.ro/hiphop.m3u");
				format(strings, sizeof(strings), "* %s set the stereo to Radio Tequila Hip Hop.",name);
            }
   /*if(listitem == 19)
			{
                ShowPlayerDialog(playerid, DIALOG_CUSTOMRADIOH, DIALOG_STYLE_INPUT, "Custom Url", "Enter a URL:", "Play", "Cancel");
				so = 1;
            }*/
            format(housestring[InHouse[playerid]], 256, "%s", link);
			if(so != 1)
			{
				foreach(new i : Player)
				{
				    if(InHouse[playerid] == InHouse[i])
				    {
				        StopAudioStreamForPlayer(i);
						PlayAudioStreamForPlayer(i, link);
					}
				}
				ProxDetector(20.0, playerid, strings, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BJ_BET)
		{
			if(response)
			{
				if(IsNumeric(inputtext))
				{
					new sum = strval(inputtext), suma[30];
					if(GetPlayerCash(playerid) >= sum)
					{
						if(sum >= 1000 && sum <= 250000)
						{
							BDeal[playerid] = sum;
							format(suma, sizeof(suma), "DEAL:~n~%s$", FormatNumber(BDeal[playerid]));
							PlayerTextDrawSetString(playerid, BJDealText[playerid], suma);
						}
						else ShowPlayerDialog(playerid, DIALOG_BJ_BET, DIALOG_STYLE_INPUT, "Blackjack: Introdu suma", "Nu poti depasi suma minima sau maxima!\nIntrodu in casuta de mai jos suma pe care vrei sa o pariezi inainte de a incepe jocul\nMinim 1.000$ - Maxim 250.000$", "Bet", "Close");
					}
					else ShowPlayerDialog(playerid, DIALOG_BJ_BET, DIALOG_STYLE_INPUT, "Blackjack: Introdu suma", "Nu ai aceasta suma de bani!\nIntrodu in casuta de mai jos suma pe care vrei sa o pariezi inainte de a incepe jocul\nMinim 1.000$ - Maxim 250.000$", "Bet", "Close");
				}
				else ShowPlayerDialog(playerid, DIALOG_BJ_BET, DIALOG_STYLE_INPUT, "Blackjack: Introdu suma", "Foloseste doar cifre!\nIntrodu in casuta de mai jos suma pe care vrei sa o pariezi inainte de a incepe jocul\nMinim 1.000$ - Maxim 250.000$", "Bet", "Close");
			}
		}
	if(dialogid == DIALOG_CUSTOMRADIOH)
	{
		if(response)
		{
			new stringg[128],length,name[30];
			if(strfind(inputtext, "youtube.com", true) != -1)
			{
				length = strlen(inputtext)-11;
				strdel(inputtext, 0, length);
				format(stringg, sizeof(stringg), "http://youtubeplaylist-mp3.com/download/index/%s",inputtext);
				foreach(new i : Player)
				{
				    if(InHouse[playerid] == InHouse[i])
				    {
				        StopAudioStreamForPlayer(i);
						PlayAudioStreamForPlayer(i, stringg);
					}
				}
				GetPlayerName(playerid, name, sizeof(name));
				format(stringg, sizeof(stringg), "* %s set the stereo to Custom URL.",name);
				ProxDetector(20.0, playerid, stringg, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else
			{
				foreach(new i : Player)
				{
				    if(InHouse[playerid] == InHouse[i])
				    {
				        StopAudioStreamForPlayer(i);
						PlayAudioStreamForPlayer(i, inputtext);
					}
				}
				GetPlayerName(playerid, name, sizeof(name));
				format(stringg, sizeof(stringg), "* %s set the stereo to Custom URL.", name);
				ProxDetector(20.0, playerid, stringg, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BID)
	{
		if(response)
		{
			new countx, name[30], string2[128];
 			if(TogBid[playerid] == 0) TogBid[playerid] = 1;
 			if(WantToBid[playerid] <= BidAmount)
			{
				if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Trebuie sa licitezi minim %d milioane.", (BidAmount2+1));
				else format(string, sizeof(string), "You need to bid a minimum of %d millions.", (BidAmount2+1));
				SendClientMessage(playerid, COLOR_LIGHTGREEN3, string);
				return 1;
			}
			if(PlayerInfo[playerid][pAccount] >= WantToBid[playerid])
			{
				foreach(new i : Player)
				{
					if(PlayerInfo[i][pSQLID] == TopBidder)
					{
						PlayerInfo[i][pAccount] += BidAmount;
						Update(i, pBank);
						countx++;
					}
				}
				if(countx == 0)
				{
					if(TopBidder != -1)
					{
						mysql_format(SQL, string, sizeof(string), "UPDATE users SET Bank = Bank+%d WHERE id = %d", BidAmount, TopBidder);
						mysql_tquery(SQL, string, "", "");
					}
				}
				TopBidder = PlayerInfo[playerid][pSQLID];
				BidAmount = WantToBid[playerid];
				BidAmount2 = WantToBid2[playerid];
				PlayerInfo[playerid][pAccount] -= WantToBid[playerid];
				Update(playerid, pBank);
				GetPlayerName(playerid, name, sizeof(name));
				if(IsABid == 1)
				{
					format(string, sizeof(string), "> %s a licitat suma de $%s pentru casa (house) %d.", name, FormatNumber(BidAmount), IsAtBid);
					format(string2, sizeof(string2), "> %s placed a bid of $%s for casa (house) %d.", name, FormatNumber(BidAmount), IsAtBid);
				}
				else if(IsABid == 2)
				{
					format(string, sizeof(string), "> %s a licitat suma de $%s pentru BIZ %d.", name, FormatNumber(BidAmount), IsAtBid);
					format(string2, sizeof(string2), "> %s placed a bid of $%s for BIZ %d.", name, FormatNumber(BidAmount), IsAtBid);
				}
				foreach(new i : Player)
				{
					if(TogBid[i] == 1)
					{
						if(PlayerInfo[i][pLanguage] == 2) SendClientMessage(i, COLOR_BID, string);
						else return SendClientMessage(i, COLOR_BID, string2);
					}
				}
				BidTime = 3;
			}
			else return SS(playerid, COLOR_ERROR, "(Error){FFFFFF} Nu ai suficienti bani in banca pentru a licita.", "(Error){FFFFFF} You don't have enough money in bank to bid.");
		}
		return 1;
	}
	if(dialogid == DIALOG_IPHONE)
	{
	    if(response)
	    {
	        if(IsNumeric(inputtext))
			{
			    if(strlen(inputtext) == 4)
				{
				    new numb = strval(inputtext);
					if((inputtext[0] != '0'))
					{
						new query[256];
						format(query, 256, "SELECT * FROM `users` WHERE `PhoneNr` = '%d' ORDER BY `id` ASC", numb);
						new Cache: res = mysql_query(SQL, query);
						if(cache_get_row_count() != 0)
						{
							SendClientMessage(playerid, COLOR_WHITE, "Acel numar de telefon este folosit de un alt player. Alege altul.");
							return 1;
						}
						else
						{
							PlayerInfo[playerid][pPremiumPoints] -= 10;
							PlayerInfo[playerid][pPhone] = 1;
							PlayerInfo[playerid][pPnumber] = numb;
							new str2[300],stringss[200];
							mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PremiumPoints`='%d',`Phone`='1' WHERE `name`='%s'",PlayerInfo[playerid][pPremiumPoints],PlayerInfo[playerid][pNormalName]);
							mysql_tquery(SQL,str2,"","");
							if(PlayerInfo[playerid][pLanguage] == 2) format(string, sizeof(string), "Ai cumparat un iPhone pentru 10 puncte premium. Numarul tau de telefon e %d.", numb);
							else format(string, sizeof(string), "You bought an iPhone with 10 premium points. Your phone number is %d.", numb);
							SendClientMessage(playerid, COLOR_GREEN, string);
							SS(playerid, COLOR_GREEN, "Pentru a dezactiva apelurile si a primi doar SMS-uri, foloseste /turn off calls.", "To deactivate calls and receive only SMS, use /turn off calls.");
							SS(playerid, COLOR_GREEN, "Pentru a raspunde la ultimul SMS primit, foloseste /reply [text].", "To respond to last SMS received, use /reply [text].");
							mysql_format(SQL,str2,sizeof(str2),"UPDATE users SET `PhoneNr`='%d' WHERE `name`='%s'",PlayerInfo[playerid][pPnumber],PlayerInfo[playerid][pNormalName]);
							mysql_tquery(SQL,str2,"","");
							format(str2, sizeof(str2), "%s[user:%d] paid 10 premium points to buy an iPhone with number %d.", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pSQLID], PlayerInfo[playerid][pPnumber]);
							ABroadCast(COLOR_YELLOW,str2,1);
							mysql_real_escape_string(str2, stringss);
							mysql_format(SQL,str2,sizeof(str2), "INSERT INTO `shop_logs` (`playerid`,`Message`) VALUES('%d','%s')",PlayerInfo[playerid][pSQLID],stringss);
							mysql_tquery(SQL,str2,"","");
						}
						cache_delete(res);
					}
					else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Numar de telefon invalid. Poti alege un numar de telefon intre 1000 si 9999.");
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Numar de telefon invalid. Poti alege un numar de telefon intre 1000 si 9999.");
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Numar de telefon invalid. Poti alege un numar de telefon intre 1000 si 9999.");
		}
	}
	if(dialogid == DIALOG_CHANGENAME)
	{
	    if(response)
		{
		    if(!isnull(inputtext))
			{
				new lungime = strlen(inputtext);
				if(lungime >= 3 && lungime <= 25)
				{
					new newname = MySQLCheckAccount(inputtext),escape[30],mesaj[128];
					if(newname != 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} This name already exist.");
					mysql_real_escape_string(inputtext, escape);
					format(WantName[playerid], 30, escape);
					format(mesaj, sizeof(mesaj),"Namechange: %s [%d] wants to change his name to %s", PlayerInfo[playerid][pNormalName], playerid, escape);
					ABroadCast(COLOR_RED2, mesaj, 3);
					TypeName[playerid] = 2;
					SendClientMessage(playerid, COLOR_YELLOW, "Wait for an admin to accept your change name request.");
				}
				else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid new nickname, minimum 3 characters, maximum 25.");
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid new nickname.");
		}
	}
	if(dialogid == DIALOG_CHANGENAME2)
	{
	    if(response)
		{
		    if(!isnull(inputtext))
			{
				new lungime = strlen(inputtext);
				if(lungime >= 3 && lungime <= 25)
				{
					new newname = MySQLCheckAccount(inputtext),escape[30],mesaj[128];
					if(newname != 0) return ShowPlayerDialog(playerid, DIALOG_CHANGENAME2, DIALOG_STYLE_INPUT, "Change name:", "This name already exist.\n\nPlease enter your desired name below:", "Ok", "Cancel");
					mysql_real_escape_string(inputtext, escape);
					format(WantName[playerid], 30, escape);
					format(mesaj, sizeof(mesaj),"Namechange: %s [%d] wants to change his name to %s", PlayerInfo[playerid][pNormalName], playerid, escape);
					ABroadCast(COLOR_RED2, mesaj, 3);
					SendClientMessage(playerid, COLOR_YELLOW, "Wait for an admin to accept your change name request.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED,"Invalid new nickname, minimum 3 characters, maximum 25.");
					ShowPlayerDialog(playerid, DIALOG_CHANGENAME2, DIALOG_STYLE_INPUT, "Change name:", "An admin forced you to change your nickname.\n\nPlease enter your desired name below:", "Ok", "Cancel");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED,"Invalid new nickname.");
				ShowPlayerDialog(playerid, DIALOG_CHANGENAME2, DIALOG_STYLE_INPUT, "Change name:", "An admin forced you to change your nickname.\n\nPlease enter your desired name below:", "Ok", "Cancel");
			}
		}
		else return ShowPlayerDialog(playerid, DIALOG_CHANGENAME2, DIALOG_STYLE_INPUT, "Change name:", "An admin forced you to change your nickname.\n\nPlease enter your desired name below:", "Ok", "Cancel");
	}
	if(dialogid == DIALOG_SEXSHOP)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(GetPlayerCash(playerid) <= 99) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
				new str[184];
				GivePlayerCash(playerid,-100);
				BizzInfo[InBussines[playerid]][bTill] += 100;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$100", 3000, 1);
				GivePlayerWeaponEx(playerid, 10, 1);
			}
			if(listitem == 1)
			{
				if(GetPlayerCash(playerid) <= 99) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
				new str[184];
				GivePlayerCash(playerid,-100);
				BizzInfo[InBussines[playerid]][bTill] += 100;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$100", 3000, 1);
				GivePlayerWeaponEx(playerid, 11, 1);
			}
			if(listitem == 2)
			{
				if(GetPlayerCash(playerid) <= 99) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
				new str[184];
				GivePlayerCash(playerid,-100);
				BizzInfo[InBussines[playerid]][bTill] += 100;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$100", 3000, 1);
				GivePlayerWeaponEx(playerid, 13, 1);
			}
			if(listitem == 3)
			{
				if(GetPlayerCash(playerid) <= 99) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
				new str[184];
				GivePlayerCash(playerid,-100);
				BizzInfo[InBussines[playerid]][bTill] += 100;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$100", 3000, 1);
				GivePlayerWeaponEx(playerid, 12, 1);
			}
			if(listitem == 4)
			{
				if(GetPlayerCash(playerid) <= 149) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
				new str[184];
				GivePlayerCash(playerid,-150);
				BizzInfo[InBussines[playerid]][bTill] += 150;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$150", 3000, 1);
				GivePlayerWeaponEx(playerid, 14, 1);
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BAR)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(GetPlayerCash(playerid) <= 49) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
				new str[184];
				GivePlayerCash(playerid,-50);
				BizzInfo[InBussines[playerid]][bTill] += 50;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$50", 3000, 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
			}
			if(listitem == 1)
			{
				if(GetPlayerCash(playerid) <= 49) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
				new str[184];
				GivePlayerCash(playerid,-50);
				BizzInfo[InBussines[playerid]][bTill] += 50;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$50", 3000, 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}
			if(listitem == 2)
			{
				if(GetPlayerCash(playerid) <= 59) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
				if(PlayerDrunk[playerid] > 9) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are drunk.");
				new str[184];
				GivePlayerCash(playerid,-60);
				BizzInfo[InBussines[playerid]][bTill] += 60;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$60", 3000, 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
				PlayerDrunk[playerid] += 1;
				if(PlayerInfo[playerid][pQuest2] == 7 && PlayerInfo[playerid][pQuestProgress2] == 0)
				{
					PlayerInfo[playerid][pQuestProgress2] = 1;
					Update(playerid, pQuestProgress2x);
					FinishQuest2(playerid, 7);
				}
			}
			if(listitem == 3)
			{
				if(GetPlayerCash(playerid) <= 99) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
				if(PlayerDrunk[playerid] > 9) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are drunk.");
				new str[184];
				GivePlayerCash(playerid,-100);
				BizzInfo[InBussines[playerid]][bTill] += 100;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
				GameTextForPlayer(playerid, "~r~-$100", 3000, 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
				PlayerDrunk[playerid] += 1;
				if(PlayerInfo[playerid][pQuest2] == 7 && PlayerInfo[playerid][pQuestProgress2] == 0)
				{
					PlayerInfo[playerid][pQuestProgress2] = 1;
					Update(playerid, pQuestProgress2x);
					FinishQuest2(playerid, 7);
				}
			}
		}
		return 1;
	}
    if(dialogid == Dialog_24)
	{
	    if(response)
	    {
	        new bid = InBussines[playerid];
			if(listitem == 0)
			{
				if(GetPlayerCash(playerid) <= 499) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
				if(PlayerInfo[playerid][pPhone] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You have an iPhone.");
			    new str[184],randphone;
			    GivePlayerCash(playerid,-500);
				BizzInfo[bid][bTill] += 500;
    			mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
				mysql_tquery(SQL,str,"","");
			    GameTextForPlayer(playerid, "~r~-$500", 3000, 1);
				do
				{
					randphone = 10000 + random(89999);
					PlayerInfo[playerid][pPnumber] = randphone;
				}
				while(NumberUsed(playerid));
			    format(string, sizeof(string), "You have purchased a cell phone! Your number is %d.", randphone);
			    SendClientMessage(playerid, COLOR_WHITE, string);
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d',`PhoneNr`='%d' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pPnumber],PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
			    return 1;
            }
			if(listitem == 1)
			{
				if(GetPlayerCash(playerid) <= 49) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
				if(PlayerInfo[playerid][pPhoneBook] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already have a phone book.");
			    GivePlayerCash(playerid,-50);
				BizzInfo[bid][bTill] += 50;
			    GameTextForPlayer(playerid, "~r~-$50", 3000, 1);
                PlayerInfo[playerid][pPhoneBook] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "You have purchased a phonebook. Use /number to trace a number down!");
	 	 		new str[184];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d',`Phonebook`='%d' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pPhoneBook],PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
				mysql_tquery(SQL,str,"","");
			    return 1;
            }
			if(listitem == 2)
	    	{
				if(GetPlayerCash(playerid) <= 499) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
				if(PlayerInfo[playerid][pCredits] > 1000) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You have too many credits.");
				GivePlayerCash(playerid, - 500);
    		    BizzInfo[bid][bTill] += 500;
			    PlayerInfo[playerid][pCredits] += 300;
			    GameTextForPlayer(playerid, "~r~-$500", 3000, 1);
				SendClientMessage(playerid,COLOR_WHITE,"You have purchased a phone credit voucher.");
				Update(playerid, pCreditsx);
				new str[184];
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
				mysql_tquery(SQL,str,"","");
				return 1;
			}
	    	if(listitem == 3)
			{
				if(GetPlayerCash(playerid) <= 1999) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
				if(PlayerInfo[playerid][pWTalkie] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already have a walkie talkie.");
    		    GivePlayerCash(playerid, - 2000);
    		    BizzInfo[bid][bTill] += 2000;
		        PlayerInfo[playerid][pWTalkie] = 1;
			    GameTextForPlayer(playerid, "~r~-$2,000", 3000, 1);
			    SendClientMessage(playerid, COLOR_WHITE, "You have purchased a walkie talkie - use /setfrequency to tune it, and /wt to speak.");
	 	 		new str[184];
				mysql_format(SQL,str,sizeof(str),"UPDATE users SET `Money`='%d',`WTalkie`='1' WHERE `name`='%s'",GetPlayerCash(playerid),PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL,str,"","");
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
				mysql_tquery(SQL,str,"","");
			    return 1;
	    	}
			if(listitem == 4)
			{
				if(GetPlayerCash(playerid) <= 1999) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
    		    GivePlayerCash(playerid, - 2000);
    		    BizzInfo[bid][bTill] += 2000;
			    GameTextForPlayer(playerid, "~r~-$2,000", 3000, 1);
			    SendClientMessage(playerid, COLOR_WHITE, "You have purchased a digital camera.");
				GivePlayerWeaponEx(playerid, 43, 60);
	 	 		new str[184];
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
				mysql_tquery(SQL,str,"","");
			    return 1;
	    	}
			if(listitem == 5)
			{
				if(GetPlayerCash(playerid) <= 4999) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
				if(PlayerInfo[playerid][pGasCan] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You already have a gas can.");
    		    GivePlayerCash(playerid, - 5000);
    		    BizzInfo[bid][bTill] += 5000;
			    GameTextForPlayer(playerid, "~r~-$5,000", 3000, 1);
			    SendClientMessage(playerid, COLOR_WHITE, "You have purchased a gas can.");
				PlayerInfo[playerid][pGasCan] = 1;
				Update(playerid, pGasCanx);
	 	 		new str[184];
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bid][bTill],bid);
				mysql_tquery(SQL,str,"","");
			    return 1;
	    	}
			else
    		{
		    	SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
			}
		}
    	return 1;
	}
	if(dialogid == DIALOG_TRUCKSELECTX)
	{
	    if(response)
	    {
			if(Trucker4[playerid] == 1)
			{
                SetTimerEx("Truckerr1", 200, 0, "i",playerid);
			}
			else if(Trucker4[playerid] == 2)
			{
			    SetTimerEx("Truckerr2", 200, 0, "i",playerid);
			}
			else if(Trucker4[playerid] == 3)
			{
			    SetTimerEx("Truckerr3", 200, 0, "i",playerid);
			}
			else if(Trucker4[playerid] == 4)
			{
			    SetTimerEx("Truckerr4", 200, 0, "i",playerid);
			}
			Trucker4[playerid] = 0;
		}
		return 1;
	}
	if(dialogid == DIALOG_TRUCKSELECT)
	{
	    if(response)
	    {
	    	if(viddd[playerid] != 0) return NightBot(playerid, "Cheats (dialog spammer) #12");
	        new Float:pX,Float:pY,Float:pZ,Float:vA;
			GetPlayerPos(playerid,pX,pY,pZ);
			GetVehicleZAngle(GetPlayerVehicleID(playerid),vA);
			SetTimerEx("AttachTrailerrr", 1000, 0, "i", playerid);
			Trucker2[playerid] = 0;
			SendClientMessage(playerid, COLOR_BLUE, "Mergi la checkpointul de pe minimap pentru a livra marfa.");
			DisablePlayerCheckpoint(playerid);
	        if(Trucker3[playerid] == 1)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[2][0],CHKTruck[2][1],CHKTruck[2][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 1;
			}
			else if(Trucker3[playerid] == 2)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[4][0],CHKTruck[4][1],CHKTruck[4][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 2;
			}
			else if(Trucker3[playerid] == 3)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[11][0],CHKTruck[11][1],CHKTruck[11][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 3;
			}
			else if(Trucker3[playerid] == 4)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[10][0],CHKTruck[10][1],CHKTruck[10][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 4;
			}
			else if(Trucker3[playerid] == 5)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[7][0],CHKTruck[7][1],CHKTruck[7][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 5;
			}
			else if(Trucker3[playerid] == 6)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[6][0],CHKTruck[6][1],CHKTruck[6][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 6;
			}
			else if(Trucker3[playerid] == 7)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[8][0],CHKTruck[8][1],CHKTruck[8][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 7;
			}
			else if(Trucker3[playerid] == 8)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[9][0],CHKTruck[9][1],CHKTruck[9][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 8;
			}
			else if(Trucker3[playerid] == 9)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[3][0],CHKTruck[3][1],CHKTruck[3][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 9;
			}
			else if(Trucker3[playerid] == 10)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[5][0],CHKTruck[5][1],CHKTruck[5][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 10;
			}
			else if(Trucker3[playerid] == 11)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[12][0],CHKTruck[12][1],CHKTruck[12][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 11;
			}
			else if(Trucker3[playerid] == 12)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[13][0],CHKTruck[13][1],CHKTruck[13][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 12;
			}
			else if(Trucker3[playerid] == 13)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[17][0],CHKTruck[17][1],CHKTruck[17][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 13;
			}
			else if(Trucker3[playerid] == 14)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[15][0],CHKTruck[15][1],CHKTruck[15][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 14;
			}
			else if(Trucker3[playerid] == 15)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[16][0],CHKTruck[16][1],CHKTruck[16][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 15;
			}
			else if(Trucker3[playerid] == 16)
			{
			    SetPlayerCheckpoint(playerid,CHKTruck[14][0],CHKTruck[14][1],CHKTruck[14][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 16;
			}
			Trucker3[playerid] = 0;
		}
		else
		{
			SetTimerEx("Truckerr1", 200, 0, "i",playerid);
		}
	}
	if(dialogid == DIALOG_TRUCKSELECT2)
	{
	    if(response)
	    {
	    	if(viddd[playerid] != 0) return NightBot(playerid, "Cheats (dialog spammer) #12");
     		new Float:pX,Float:pY,Float:pZ,Float:vA;
			GetPlayerPos(playerid,pX,pY,pZ);
			GetVehicleZAngle(GetPlayerVehicleID(playerid),vA);
			SetTimerEx("AttachTrailerrr", 1000, 0, "i", playerid);
			Trucker2[playerid] = 0;
			SendClientMessage(playerid, COLOR_BLUE, "Mergi la checkpointul de pe minimap pentru a livra marfa.");
			DisablePlayerCheckpoint(playerid);
			if(Trucker3[playerid] == 1)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[11][0],CHKTruck[11][1],CHKTruck[11][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 3;
			}
			else if(Trucker3[playerid] == 2)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[10][0],CHKTruck[10][1],CHKTruck[10][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 4;
			}
			else if(Trucker3[playerid] == 3)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[7][0],CHKTruck[7][1],CHKTruck[7][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 5;
			}
			else if(Trucker3[playerid] == 4)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[6][0],CHKTruck[6][1],CHKTruck[6][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 6;
			}
			else if(Trucker3[playerid] == 5)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[8][0],CHKTruck[8][1],CHKTruck[8][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 7;
			}
			else if(Trucker3[playerid] == 6)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[9][0],CHKTruck[9][1],CHKTruck[9][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 8;
			}
			else if(Trucker3[playerid] == 7)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[0][0],CHKTruck[0][1],CHKTruck[0][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 17;
			}
			else if(Trucker3[playerid] == 8)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[12][0],CHKTruck[12][1],CHKTruck[12][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 11;
			}
			else if(Trucker3[playerid] == 9)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[13][0],CHKTruck[13][1],CHKTruck[13][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 12;
			}
			else if(Trucker3[playerid] == 10)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[17][0],CHKTruck[17][1],CHKTruck[17][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 13;
			}
			else if(Trucker3[playerid] == 11)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[15][0],CHKTruck[15][1],CHKTruck[15][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 14;
			}
			else if(Trucker3[playerid] == 12)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[16][0],CHKTruck[16][1],CHKTruck[16][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 15;
			}
			Trucker3[playerid] = 0;
		}
		else
		{
			SetTimerEx("Truckerr2", 200, 0, "i",playerid);
		}
	}
	if(dialogid == DIALOG_TRUCKSELECT3)
	{
	    if(response)
	    {
	    	if(viddd[playerid] != 0) return NightBot(playerid, "Cheats (dialog spammer) #12");
	        new Float:pX,Float:pY,Float:pZ,Float:vA;
			GetPlayerPos(playerid,pX,pY,pZ);
			GetVehicleZAngle(GetPlayerVehicleID(playerid),vA);
			SetTimerEx("AttachTrailerrr", 1000, 0, "i", playerid);
			Trucker2[playerid] = 0;
			SendClientMessage(playerid, COLOR_BLUE, "Mergi la checkpointul de pe minimap pentru a livra marfa.");
			DisablePlayerCheckpoint(playerid);
	        if(Trucker3[playerid] == 1)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[2][0],CHKTruck[2][1],CHKTruck[2][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 1;
			}
			else if(Trucker3[playerid] == 2)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[4][0],CHKTruck[4][1],CHKTruck[4][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 2;
			}
			else if(Trucker3[playerid] == 3)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[3][0],CHKTruck[3][1],CHKTruck[3][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 9;
			}
			else if(Trucker3[playerid] == 4)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[5][0],CHKTruck[5][1],CHKTruck[5][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 10;
			}
			else if(Trucker3[playerid] == 5)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[1][0],CHKTruck[1][1],CHKTruck[1][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 18;
			}
			else if(Trucker3[playerid] == 6)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[0][0],CHKTruck[0][1],CHKTruck[0][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 17;
			}
			else if(Trucker3[playerid] == 7)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[12][0],CHKTruck[12][1],CHKTruck[12][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 11;
			}
			else if(Trucker3[playerid] == 8)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[13][0],CHKTruck[13][1],CHKTruck[13][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 12;
			}
			else if(Trucker3[playerid] == 9)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[17][0],CHKTruck[17][1],CHKTruck[17][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 13;
			}
			else if(Trucker3[playerid] == 10)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[15][0],CHKTruck[15][1],CHKTruck[15][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 14;
			}
			else if(Trucker3[playerid] == 11)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[16][0],CHKTruck[16][1],CHKTruck[16][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 15;
			}
			else if(Trucker3[playerid] == 12)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[14][0],CHKTruck[14][1],CHKTruck[14][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 16;
			}
			Trucker3[playerid] = 0;
		}
		else
		{
			SetTimerEx("Truckerr3", 200, 0, "i",playerid);
		}
	}
	if(dialogid == DIALOG_TRUCKSELECT4)
	{
	    if(response)
	    {
	    	if(viddd[playerid] != 0) return NightBot(playerid, "Cheats (dialog spammer) #12");
	        new Float:pX,Float:pY,Float:pZ,Float:vA;
			GetPlayerPos(playerid,pX,pY,pZ);
			GetVehicleZAngle(GetPlayerVehicleID(playerid),vA);
			SetTimerEx("AttachTrailerrr", 1000, 0, "i", playerid);
			Trucker2[playerid] = 0;
			SendClientMessage(playerid, COLOR_BLUE, "Mergi la checkpointul de pe minimap pentru a livra marfa.");
			DisablePlayerCheckpoint(playerid);
	        if(Trucker3[playerid] == 1)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[2][0],CHKTruck[2][1],CHKTruck[2][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 1;
			}
			else if(Trucker3[playerid] == 2)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[4][0],CHKTruck[4][1],CHKTruck[4][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 2;
			}
			else if(Trucker3[playerid] == 3)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[11][0],CHKTruck[11][1],CHKTruck[11][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 3;
			}
			else if(Trucker3[playerid] == 4)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[10][0],CHKTruck[10][1],CHKTruck[10][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 4;
			}
			else if(Trucker3[playerid] == 5)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[7][0],CHKTruck[7][1],CHKTruck[7][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 5;
			}
			else if(Trucker3[playerid] == 6)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[6][0],CHKTruck[6][1],CHKTruck[6][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 6;
			}
			else if(Trucker3[playerid] == 7)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[8][0],CHKTruck[8][1],CHKTruck[8][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 7;
			}
			else if(Trucker3[playerid] == 8)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[9][0],CHKTruck[9][1],CHKTruck[9][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 8;
			}
			else if(Trucker3[playerid] == 9)
	        {
         		SetPlayerCheckpoint(playerid,CHKTruck[3][0],CHKTruck[3][1],CHKTruck[3][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 9;
			}
			else if(Trucker3[playerid] == 10)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[5][0],CHKTruck[5][1],CHKTruck[5][2],5.0);
				viddd[playerid] = CreateVehicle(450, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 10;
			}
			else if(Trucker3[playerid] == 11)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[1][0],CHKTruck[1][1],CHKTruck[1][2],5.0);
				viddd[playerid] = CreateVehicle(435, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				Trucker[playerid] = 18;
			}
			else if(Trucker3[playerid] == 12)
	        {
	            SetPlayerCheckpoint(playerid,CHKTruck[0][0],CHKTruck[0][1],CHKTruck[0][2],5.0);
				viddd[playerid] = CreateVehicle(584, pX+6, pY+6, pZ+6, vA, -1, -1, -1);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 315);
				Trucker[playerid] = 17;
			}
			Trucker3[playerid] = 0;
		}
		else
		{
			SetTimerEx("Truckerr4", 200, 0, "i",playerid);
		}
	}
	if(dialogid == DIALOG_TRUCKER1)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
	            Trucker3[playerid] = 1;
			}
			if(listitem == 1)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
					Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 2;
				}
			}
			if(listitem == 2)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 3;
				}
			}
			if(listitem == 3)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 4;
				}
			}
			if(listitem == 4)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 5;
			}
			if(listitem == 5)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 6;
				}
			}
			if(listitem == 6)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 7;
			}
			if(listitem == 7)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 8;
			}
			if(listitem == 8)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 9;
			}
			if(listitem == 9)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 10;
				}
			}
			if(listitem == 10)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 11;
			}
			if(listitem == 11)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 12;
				}
			}
			if(listitem == 12)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 13;
			}
			if(listitem == 13)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 14;
				}
			}
			if(listitem == 14)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 1;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 15;

				}
			}
			if(listitem == 15)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 16;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_TRUCKER2)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 1;

				}
			}
			if(listitem == 1)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 2;

				}
			}
			if(listitem == 2)
	        {
	           	format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 3;
			}
			if(listitem == 3)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 4;
				}
			}
			if(listitem == 4)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 5;
			}
			if(listitem == 5)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 6;
			}
			if(listitem == 6)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 7;
				}
			}
			if(listitem == 7)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 8;
			}
			if(listitem == 8)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 9;
				}
			}
			if(listitem == 9)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 10;
			}
			if(listitem == 10)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 11;

				}
			}
			if(listitem == 11)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 2;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT2, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 12;

				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_TRUCKER3)
	{
	    if(response)
	    {
			if(listitem == 0)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 1;
			}
			if(listitem == 1)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 2;

				}
			}
			if(listitem == 2)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 3;
			}
			if(listitem == 3)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 4;

				}
			}
			if(listitem == 4)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 5;
			}
			if(listitem == 5)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 6;
				}
			}
			if(listitem == 6)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 7;
			}
			if(listitem == 7)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 8;
				}
			}
			if(listitem == 8)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 9;
			}
			if(listitem == 9)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 10;

				}
			}
			if(listitem == 10)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 3;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 11;

				}
			}
			if(listitem == 11)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT3, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 12;
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_TRUCKER4)
	{
	    if(response)
	    {
			if(listitem == 0)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 1;
			}
			if(listitem == 1)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 2;

				}
			}
			if(listitem == 2)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 3;

				}
			}
			if(listitem == 3)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 4;

				}
			}
			if(listitem == 4)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 5;
			}
			if(listitem == 5)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 6;
				}
			}
			if(listitem == 6)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 7;
			}
			if(listitem == 7)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 8;
			}
			if(listitem == 8)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 9;
			}
			if(listitem == 9)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 2)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 2 la jobul trucker pentru a transporta marfuri ilegale.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 2.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 1)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa furata vei primi cu 25%% mai multi bani, dar poti fi arestat daca esti prins de politie.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 10;

				}
			}
			if(listitem == 10)
	        {
	            format(string,sizeof(string),"Daca nu vrei sa risti sa fi oprit de politie sau sa livrezi marfuri explozive, aceasta este cea mai buna alegere.");
	            ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                Trucker3[playerid] = 11;
			}
			if(listitem == 11)
	        {
	            if(PlayerInfo[playerid][pTruckSkill] < 3)
	            {
	                format(string,sizeof(string),"Ai nevoie de skill 3 la jobul trucker pentru a transporta marfuri explozive.\nFoloseste /skills pentru a vedea de cate ori mai trebuie sa livrezi marfa pentru skill 3.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECTX, DIALOG_STYLE_MSGBOX, "Trucker", string, "Inapoi", "");
                    Trucker4[playerid] = 4;
				}
				else if(PlayerInfo[playerid][pTruckSkill] > 2)
				{
				    format(string,sizeof(string),"Daca alegi sa livrezi marfa exploziva vei primi cu 50%% mai multi bani, dar poti exploda daca esti lovit.");
	            	ShowPlayerDialog(playerid, DIALOG_TRUCKSELECT4, DIALOG_STYLE_MSGBOX, "Trucker", string, "Alege", "Inapoi");
                    Trucker3[playerid] = 12;
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_SELLFISH)
	{
	    if(response)
	    {
	    	if(PlayerInfo[playerid][pFishes] == 0) return NightBot(playerid, "Cheats (dialog spammer) #13");
			GivePlayerCash(playerid, PlayerInfo[playerid][pFishPrice]);
			format(string,sizeof(string),"(Job){FFFFFF} You sold the fish for $%s.", FormatNumber(PlayerInfo[playerid][pFishPrice]));
			if(PlayerInfo[playerid][pClan]!=0) {
		    	new safestring[128];
				ClanInfo[PlayerInfo[playerid][pClan]][cClanSeif]+=PlayerInfo[playerid][pFishPrice]/10;
				ClanUpdate(PlayerInfo[playerid][pClan], ClanSafex);
				PlayerInfo[playerid][pClanDep]+=PlayerInfo[playerid][pFishPrice]/10;
				Update(playerid, pClanDepx);
				format(safestring,sizeof(safestring), "(Job){FFFFFF} After your work %s$ was added in {%s}clan safe{FFFFFF}.",FormatNumber(PlayerInfo[playerid][pFishPrice]/10),ClanInfo[PlayerInfo[playerid][pClan]][cClanColor]);
				SendClientMessage(playerid,COLOR_JOB,safestring);
			}
			SendClientMessage(playerid, COLOR_JOB, string);
			PlayerInfo[playerid][pFishPrice] = 0;
			PlayerInfo[playerid][pFishes] = 0;
			PlayerInfo[playerid][pFishTimes]++;
			PlayerInfo[playerid][pFishRem]--;
			Update(playerid,pFishTimesx);
			Update(playerid,pFishRemx);
			if(PlayerInfo[playerid][pQuest1] == 6)
			{
				if(PlayerInfo[playerid][pQuestNeed1] > PlayerInfo[playerid][pQuestProgress1])
				{
					PlayerInfo[playerid][pQuestProgress1]++;
					Update(playerid, pQuestProgress1x);
					if(PlayerInfo[playerid][pQuestProgress1] >= PlayerInfo[playerid][pQuestNeed1])
					{
						FinishQuest1(playerid, 6);
					}
					else
					{
						new str[128];
						if(PlayerInfo[playerid][pLanguage] == 1)
						{
							format(str, sizeof(str),"Quest [Catch and sell %d fish] progress: %d/%d",PlayerInfo[playerid][pQuestNeed1],PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
							SendClientMessage(playerid, COLOR_YELLOW, str);
						}
						else
						{
							format(str, sizeof(str),"Progres pentru misiunea [Vinde %d pesti]: %d/%d",PlayerInfo[playerid][pQuestNeed1],PlayerInfo[playerid][pQuestProgress1],PlayerInfo[playerid][pQuestNeed1]);
							SendClientMessage(playerid, COLOR_YELLOW, str);
						}
					}
				}
			}
			if(PlayerInfo[playerid][pFishSkill] <= 5)
			{
				if(PlayerInfo[playerid][pFishRem] <= 0)
				{
					PlayerInfo[playerid][pFishSkill]++;
					if(PlayerInfo[playerid][pFishSkill] == 2)
					{
						PlayerInfo[playerid][pFishRem] = 34;
					}
					else if(PlayerInfo[playerid][pFishSkill] == 3)
					{
						PlayerInfo[playerid][pFishRem] = 49;
					}
					else if(PlayerInfo[playerid][pFishSkill] == 4)
					{
						PlayerInfo[playerid][pFishRem] = 89;
					}
					else if(PlayerInfo[playerid][pFishSkill] == 5)
					{
						PlayerInfo[playerid][pFishRem] = 99;
					}
					Update(playerid,pFishSkillx);
					Update(playerid,pFishRemx);
					new stringe[128];
					format(string,sizeof(string),"Felicitari! Ai acum skill %d pentru acest job!",PlayerInfo[playerid][pFishSkill]);
					format(stringe,sizeof(stringe),"Congratulations! Now you have skill %d for this job!",PlayerInfo[playerid][pFishSkill]);
					SS(playerid, COLOR_YELLOW, string, stringe);
					SendClientMessage(playerid, COLOR_YELLOW, string);
				}
			}
		}
		return 1;
	}
    if(dialogid == Dialog_Gym)
	{
	    if(response)
	    {
	        new str[256];
			if(listitem == 0)
			{
				if(GetPlayerCash(playerid) <= 5999) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
                GivePlayerCash(playerid, -6000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
				SendClientMessage(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
				GameTextForPlayer(playerid, "~r~-$6,000", 3000, 1);
                PlayerInfo[playerid][pFightStyle] = 1;
				Update(playerid, pFightStylex);
				BizzInfo[InBussines[playerid]][bTill] += 6000;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
            }
			if(listitem == 1)
			{
				if(GetPlayerCash(playerid) <= 9999) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
                GivePlayerCash(playerid, -10000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
				SendClientMessage(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
				GameTextForPlayer(playerid, "~r~-$10,000", 3000, 1);
                PlayerInfo[playerid][pFightStyle] = 2;
				Update(playerid, pFightStylex);
				BizzInfo[InBussines[playerid]][bTill] += 10000;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
            }
			if(listitem == 2)
			{
				if(GetPlayerCash(playerid) <= 9999) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
                GivePlayerCash(playerid, -10000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
				SendClientMessage(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
				GameTextForPlayer(playerid, "~r~-$10,000", 3000, 1);
				PlayerInfo[playerid][pFightStyle] = 3;
				Update(playerid, pFightStylex);
				BizzInfo[InBussines[playerid]][bTill] += 10000;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
            }
			if(listitem == 3)
			{
				if(GetPlayerCash(playerid) <= 9999) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
                GivePlayerCash(playerid, -10000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
				SendClientMessage(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
				GameTextForPlayer(playerid, "~r~-$10,000", 3000, 1);
				PlayerInfo[playerid][pFightStyle] = 4;
				Update(playerid, pFightStylex);
				BizzInfo[InBussines[playerid]][bTill] += 10000;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
            }
			if(listitem == 4)
			{
				if(GetPlayerCash(playerid) <= 9999) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
                GivePlayerCash(playerid, -10000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
				SendClientMessage(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
				GameTextForPlayer(playerid, "~r~-$10,000", 3000, 1);
				PlayerInfo[playerid][pFightStyle] = 5;
				Update(playerid, pFightStylex);
				BizzInfo[InBussines[playerid]][bTill] += 10000;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
            }
			if(listitem == 5)
			{
				if(GetPlayerCash(playerid) <= 1999) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You don't have enough money.");
                GivePlayerCash(playerid, -2000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
				SendClientMessage(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
				GameTextForPlayer(playerid, "~r~-$2,000", 3000, 1);
				PlayerInfo[playerid][pFightStyle] = 0;
				Update(playerid, pFightStylex);
				BizzInfo[InBussines[playerid]][bTill] += 2000;
				mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
				mysql_tquery(SQL,str,"","");
            }
		}
    	return 1;
	}
    if(dialogid == DIALOG_LOGIN2)
	{
		if(response)
		{
			if(gPlayerLogged[playerid] != 0) return NightBot(playerid, "Cheats (dialog spammer) #14");
			if(strlen(inputtext)) 
			{
				mysql_real_escape_string(inputtext, KeepPassword[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTRED, "(Login){FFFFFF} Password added, press 'login' button to logging in.");
			}
			else
			{
				ShowPlayerDialog(playerid,DIALOG_LOGIN2,DIALOG_STYLE_PASSWORD,"Enter password","You will be kicked in 60 seconds if you don't logging in.","Ok","Cancel");
				SendClientMessage(playerid, COLOR_LIGHTRED, "(Login){FFFFFF} No password detected, empty text.");
			}
		}
		else return KickEx(playerid);
	}
    if(dialogid == DIALOG_LOGIN1)
	{
		if(response)
		{
			if(strlen(inputtext) > 3)
			{
				mysql_real_escape_string(inputtext, KeepPassword[playerid]);
				new text[64];
				format(text, sizeof(text), "(Register){FFFFFF} Password added: %s", KeepPassword[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTRED, text);
			}
			else ShowPlayerDialog(playerid,DIALOG_LOGIN1,DIALOG_STYLE_PASSWORD,"Enter password","Be careful when you enter the password, anyway, if you enter the password wrong, you can re-enter the password.","Ok","Cancel");
		}
	}
 	if(dialogid == DIALOG_REPORT1)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    new string1[256], string2[256], string3[256], string4[256], string5[256],  string6[256], string7[256], string8[256], string9[256], string10[256], string11[256], string12[1024];
			    format(string1, sizeof(string1), "Cont blocat");
			    format(string2, sizeof(string2), "Daca ai contul blocat automat va trebui sa astepti 72 de ore pana cand va fi deblocat.");
				format(string3, sizeof(string3), "Daca ai contul blocat de catre un admin, deschide un tichet pe (bluffs.ga/panel)");
			    format(string4, sizeof(string4), "De acolo vei putea deschide un ticket pentru a discuta cu adminii despre ce a cauzat blocarea contului tau.");
			    format(string5, sizeof(string5), "Adminii NU iti vor debloca contul din joc. Nu are rost sa intrebi pe /report cum poti sa iti deblochezi contul. Nu vei primi raspuns.");
			    format(string6, sizeof(string6), "Cont spart");
			    format(string7, sizeof(string7), "Daca ai contul spart, tot ce poti face e sa deschizi un ticket si sa astepti un raspuns. De obicei se primesc raspunsuri in mai putin de 24 ore.");
			    format(string8, sizeof(string8), "Daca ti-a fost spart contul e DOAR vina ta. Nu sunt adminii vinovati si nimeni nu are vreo obligatie de a te ajuta.");
			    format(string9, sizeof(string9), "Totusi, incercam sa ajutam playerii ce pot fi ajutati. Deci, deschide un ticket si asteapta un raspuns.");
			    format(string10, sizeof(string10), "Pentru a deschide un ticket, intra pe (bluffs.ga/panel) > Ticket > Deschide ticket nou.");
			    format(string11, sizeof(string11), "NU da /report pentru a zice adminilor sa raspunda mai repede la tickete. Vei primi suspend pe /report si atat.");
     			format(string12, sizeof(string12), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s",string1,string2,string3,string4,string5,string6,string7,string8,string9,string10,string11);
     			ShowPlayerDialog(playerid, DIALOG_REPORT2, DIALOG_STYLE_MSGBOX, "Cont blocat", string12, "Inchide","");
			}
			if(listitem == 1)
			{
   				ShowPlayerDialog(playerid, DIALOG_REPORTDM1, DIALOG_STYLE_LIST, "Raportare DM", "Nu stiu numele playerului care m-a atacat\nStiu ID-ul playerului care m-a atacat", "Selecteaza","Inapoi");
			}
			if(listitem == 2)
			{
   				ShowPlayerDialog(playerid, DIALOG_REPORTCH1, DIALOG_STYLE_LIST, "Raportare Cheater", "Nu stiu numele playerului ce foloseste cheat-uri\nStiu ID-ul playerului ce foloseste cheat-uri", "Selecteaza","Inapoi");
			}
			if(listitem == 3)
			{
			    new string1[256], string2[256], string3[512];
			    format(string1, sizeof(string1), "Singurele metode de plata sunt: Paysafecard si Paypal. Probabil in viitor vor fi adaugate mai multe metode de plata.\nNu se pot face plati prin SMS, coduri de reincarcare, conturi steam, webmoney sau alte metode, in afara de Paysafecard si Paypal.\nSingurele lucruri pe care le poti cumpara cu puncte premium pot fi gasite pe (bluffs.ga/panel).");
			    format(string2, sizeof(string2), "Contul premium costa 60 de puncte premium (25 de lei paysafecard). Detalii poti gasi pe (bluffs.ga/panel).\nDaca ai o problema cu platile, te rugam sa deschizi un tichet pe user panel (bluffs.ga/panel).");
     			format(string3, sizeof(string3), "%s\n%s",string1,string2);
     			ShowPlayerDialog(playerid, DIALOG_REPORT2, DIALOG_STYLE_MSGBOX, "Donatii/Plati", string3, "Inchide","");
			}
			if(listitem == 4)
			{
				new string1[128],playername[30];
				if(ReportTime[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Dupa un minut poti folosi aceasta actiune.");
				GetPlayerName(playerid, playername, sizeof(playername));
				SendClientMessage(playerid, COLOR_YELLOW, "Report submitted.");
   				format(string1,sizeof(string1),"%s [%d] is stuck.",playername,playerid);
				format(reporttext[playerid], sizeof(string1), string1);
				reportreason[playerid] = 1;
				ABroadCast(COLOR_REPORT,string1,1);
				HLChat(COLOR_REPORT,string1);
				ReportTime[playerid] = 1;
				timerreport[playerid] = SetTimerEx("Reportul", 60000, 0, "%d", playerid);
			}
			if(listitem == 5)
			{
				new string1[128],playername[30];
				if(ReportTime[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Dupa un minut poti folosi aceasta actiune.");
				GetPlayerName(playerid, playername, sizeof(playername));
				SendClientMessage(playerid, COLOR_YELLOW, "Report submitted.");
   				format(string1,sizeof(string1),"Report from %s [%d, level %d]: Am nevoie de un admin pt o afacere!",playername,playerid,PlayerInfo[playerid][pLevel]);
				format(reporttext[playerid], sizeof(string1), string1);
				ABroadCast(COLOR_REPORT,string1,1);
				HLChat(COLOR_REPORT,string1);
				ReportTime[playerid] = 1;
				timerreport[playerid] = SetTimerEx("Reportul", 60000, 0, "%d", playerid);
			}
			if(listitem == 6)
			{
   				ShowPlayerDialog(playerid, DIALOG_REPORT_AP1, DIALOG_STYLE_INPUT, "Alta problema", "Scrie mai jos problema pe care o ai.\nNu scrie 'am nevoie de un admin', scrie exact ce problema ai.", "Trimite","Close");
			}
		}
	}
	if(dialogid == DIALOG_REPORTDM1)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    ShowPlayerDialog(playerid, DIALOG_REPORTDM2, DIALOG_STYLE_INPUT, "Raportare player pentru DM", "Scrie mai jos in ce locatie sunt playerii care te-au atacat.", "Trimite","Inapoi");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, DIALOG_REPORTDM3, DIALOG_STYLE_INPUT, "Raportare player pentru DM", "Scrie mai jos ID-ul/numele playerului care te-a atacat.", "Trimite","Inapoi");
			}
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_REPORT1, DIALOG_STYLE_LIST, "Report", "Contul meu este spart sau blocat\nRaporteaza DM\nRaporteaza un cheater\nIntrebari despre donatii\nSunt blocat/Cad prin mapa\nVreau sa fac o afacere si am nevoie de ajutor\nAlta problema", "OK", "Inchide");
		}
	}
	if(dialogid == DIALOG_REPORTCH1)
	{
	    if(response)
	    {
	    	if(listitem == 0)
			{
			    new string1[256], string2[256], string3[256], string4[1024];
			    format(string1, sizeof(string1), "Daca stii id-ul playerului ce foloseste cheat-uri, foloseste /cheat.");
			    format(string2, sizeof(string2), "Abuzul de aceasta optiune se sanctioneaza cu mute 2 ore pe /report.");
			    format(string3, sizeof(string3), "Scrie aici detalii despre playerul/playerii ce folosesc cheat-uri.");
			    format(string4, sizeof(string4), "%s\n%s\n%s",string1,string2,string3);
			    ShowPlayerDialog(playerid, DIALOG_REPORTCH2, DIALOG_STYLE_INPUT, "Raportare player pentru cheat-uri", string4, "Trimite","Inapoi");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, DIALOG_REPORTCH3, DIALOG_STYLE_MSGBOX, "Raportare player pentru cheat-uri", "Foloseste /cheat <id> <reason> pentru a raporta un player pentru chat-uri.", "Inchide","");
			}
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_REPORT1, DIALOG_STYLE_LIST, "Report", "Contul meu este spart sau blocat\nRaporteaza DM\nRaporteaza un cheater\nIntrebari despre donatii\nSunt blocat/Cad prin mapa\nVreau sa fac o afacere si am nevoie de ajutor\nAlta problema", "OK", "Inchide");
		}
	}
	if(dialogid == DIALOG_REPORTDM2)
	{
	    if(response)
	    {
	    	if(ReportTime[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Dupa un minut poti folosi aceasta actiune.");
			//new sendername[MAX_PLAYER_NAME], string[300];
			GetPlayerName(playerid, sendername, sizeof(sendername));
		    SendClientMessage(playerid, COLOR_YELLOW, "Report submitted.");
			format(string, sizeof(string), "Report from %s [%d, level %d]: %s", sendername,playerid,PlayerInfo[playerid][pLevel],inputtext);
			format(reporttext[playerid], sizeof(string), string);
			ABroadCast(COLOR_REPORT,string,1);
			HLChat(COLOR_REPORT,string);
			ReportTime[playerid] = 1;
  			timerreport[playerid] = SetTimerEx("Reportul", 60000, 0, "%d", playerid);
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_REPORTDM1, DIALOG_STYLE_LIST, "Raportare DM", "Nu stiu numele playerului care m-a atacat\nStiu ID-ul playerului care m-a atacat", "Selecteaza","Inapoi");
		}
	}
	if(dialogid == DIALOG_REPORTDM3)
	{
		if(response)
		{
			if(ReportTime[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Dupa un minut poti folosi aceasta actiune.");
			//new sendername[MAX_PLAYER_NAME],string[300];
			if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Invalid ID.");
			new id = strval(inputtext),namee[30];
			if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Player not connected.");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerName(id, namee, sizeof(namee));
            SendClientMessage(playerid, COLOR_YELLOW, "Report submitted.");
			format(string, sizeof(string), "%s [%d] was reported for DM by %s.", namee,id,sendername);
			format(reporttext[id], sizeof(string), string);
			reportreason[id] = 2;
			playerreported[playerid] = id;
			ABroadCast(COLOR_REPORT,string,1);
			HLChat(COLOR_REPORT,string);
			ReportTime[playerid] = 1;
	  		timerreport[playerid] = SetTimerEx("Reportul", 60000, 0, "%d", playerid);
		}
	  	else
		{
		    ShowPlayerDialog(playerid, DIALOG_REPORTDM1, DIALOG_STYLE_LIST, "Raportare DM", "Nu stiu numele playerului care m-a atacat\nStiu ID-ul playerului care m-a atacat", "Selecteaza","Inapoi");
		}
	}
	if(dialogid == DIALOG_REPORTCH2)
	{
	    if(response)
	    {
	    	if(ReportTime[playerid] == 1) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} Dupa un minut poti folosi aceasta actiune.");
			//new sendername[MAX_PLAYER_NAME],string[300];
			GetPlayerName(playerid, sendername, sizeof(sendername));
            SendClientMessage(playerid, COLOR_YELLOW, "Report submitted.");
			format(string, sizeof(string), "Report from %s [%d, level %d]: %s", sendername,playerid,PlayerInfo[playerid][pLevel],inputtext);
			format(reporttext[playerid], sizeof(string), string);
			ABroadCast(COLOR_REPORT,string,1);
			HLChat(COLOR_REPORT,string);
			ReportTime[playerid] = 1;
  			timerreport[playerid] = SetTimerEx("Reportul", 60000, 0, "%d", playerid);
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_REPORTCH1, DIALOG_STYLE_LIST, "Raportare Cheater", "Nu stiu numele playerului ce foloseste cheat-uri\nStiu ID-ul playerului ce foloseste cheat-uri", "Selecteaza","Inapoi");
		}
	}
	if(dialogid == DIALOG_REPORT_AP1)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pAdmin] > 0) return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are an admin/helper.");
			if(PlayerInfo[playerid][pHelper] == 0)
			{
				new question[128],count,var100[256],mesajx[200];
				mysql_real_escape_string(inputtext, question);
				if(PlayerInfo[playerid][pNewbieTimeout] == 0)
				{
					if(PlayerInfo[playerid][pNMuted] == 0)
					{
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Newbie %s: %s", sendername, question);
						SendClientMessage(playerid, COLOR_NEWBIE, string);
						mysql_real_escape_string(string, mesajx);
						foreach(new i : Player)
						{
							if(strcmp(PlayerInfo[i][pNewbieQuestion], "NULL", true)) count++;
						}
						if(count < 30)
						{
							format(PlayerInfo[playerid][pNewbieQuestion], 256, question);
							PlayerInfo[playerid][pNewbieTimeout] = 180;
							PlayerInfo[playerid][pFirstAnswer] = 1;
					 		mysql_format(SQL, var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','n')", PlayerInfo[playerid][pSQLID], mesajx);
							mysql_tquery(SQL, var100, "", "");
						}
						else
						{
							SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Sunt prea multe intrebari ce asteapta raspuns de la helperii serverului. Nu poti pune o intrebare acum.");
							SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Incearca mai tarziu...");
							return 1;
						}
					}
					else return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You are muted from the newbie chat.");
				}
				else
				{
					format(string, sizeof(string), "Poti folosi /n peste %d secunde.", PlayerInfo[playerid][pNewbieTimeout]);
					SendClientMessage(playerid, COLOR_WHITE, string);
				}
			}
			else return SendClientMessage(playerid, COLOR_ERROR, "(Error){FFFFFF} You are an admin/helper.");
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_REPORT1, DIALOG_STYLE_LIST, "Report", "Contul meu este spart sau blocat\nRaporteaza DM\nRaporteaza un cheater\nIntrebari despre donatii\nSunt blocat/Cad prin mapa\nVreau sa fac o afacere si am nevoie de ajutor\nAlta problema", "OK", "Inchide");
		}
	}
	return 1;
}

forward SetPlayerHealthEx(playerid, Float:health);
public SetPlayerHealthEx(playerid, Float:health)
{
	SetPlayerHealth(playerid, health);
	Health[playerid] = health;
	return 1;
}

forward GetPlayerHealthEx(playerid, &Float:health);
public GetPlayerHealthEx(playerid, &Float:health)
{
	health = Health[playerid];
	return 1;
}

forward SetPlayerArmourEx(playerid, Float:armour);
public SetPlayerArmourEx(playerid, Float:armour)
{
	SetPlayerArmour(playerid, armour);
	Armour[playerid] = armour;
	return 1;
}

forward GetPlayerArmourEx(playerid, &Float:armour);
public GetPlayerArmourEx(playerid, &Float:armour)
{
	armour = Armour[playerid];
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	new iswar = 0, attackers, defenders,no;
    if(GoChase[playerid] < 999) ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);

    for(new i = 1; i < sizeof(Turfs) && iswar == 0; i++)
    {
        attackers = WarInfo[i][wAttacker];
		defenders = WarInfo[i][wFaction];
        if(WarInfo[i][wTime] > 1 && attackers != 0 && defenders != 0)
        {
			if( (PlayerInfo[playerid][pMember] == attackers || PlayerInfo[playerid][pMember] == defenders) && (PlayerInfo[forplayerid][pMember] == attackers || PlayerInfo[forplayerid][pMember] == defenders) ) iswar = 1;
		}
    }

	if(PlayerInfo[playerid][pWantedLevel] >= 1 && IsACop(forplayerid) && OnDuty[forplayerid] == 1)
	{
		no = 1;
	}

	if(iswar == 1)
	{
		if( (PlayerInfo[playerid][pMember] == attackers || PlayerInfo[playerid][pMember] == defenders) && (PlayerInfo[forplayerid][pMember] == attackers || PlayerInfo[forplayerid][pMember] == defenders) )
		{
			SetPlayerMarkerForPlayer( playerid, forplayerid, GetPlayerColor( forplayerid ) );
			SetPlayerMarkerForPlayer( forplayerid, playerid, GetPlayerColor( playerid ) );
		}
		else
		{
			if(no == 0)
			{
				SetPlayerMarkerForPlayer( playerid, forplayerid, ( GetPlayerColor( forplayerid ) & 0xFFFFFF00 ) );
				SetPlayerMarkerForPlayer( forplayerid, playerid, ( GetPlayerColor( playerid ) & 0xFFFFFF00 ) );
			}
		}
	}
	else
	{
		if(no == 0)
		{
			SetPlayerMarkerForPlayer( playerid, forplayerid, ( GetPlayerColor( forplayerid ) & 0xFFFFFF00 ) );
			SetPlayerMarkerForPlayer( forplayerid, playerid, ( GetPlayerColor( playerid ) & 0xFFFFFF00 ) );
		}
	}
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
    SetPlayerMarkerForPlayer( playerid, forplayerid, ( GetPlayerColor( forplayerid ) & 0xFFFFFF00 ) );
	SetPlayerMarkerForPlayer( forplayerid, playerid, ( GetPlayerColor( playerid ) & 0xFFFFFF00 ) );
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	for(new v; v < MAX_PERSONAL_VEHICLES; v++)
	{
		if(PlayerInfo[forplayerid][pCarID][v] == vehicleid)
		{
			SetVehicleParamsForPlayer(vehicleid,forplayerid,0,0);
		}
	}
	for(new vv; vv < MAX_VEHICLES; vv++)
	{
		if(vv == HireCar[forplayerid])
		{
			SetVehicleParamsForPlayer(vv,forplayerid,0,0);
		}
	}
	return 1;
}

// CAR SYSTEM
forward IsAnOwnableCar(vehicleid);
public IsAnOwnableCar(vehicleid)
{
	foreach(new i : Player)
	{
		for(new v; v < MAX_PERSONAL_VEHICLES; v++)
		{
			if(PlayerInfo[i][pCarID][v] == vehicleid)
			{
				return 1;
			}
		}
	}
	return 0;
}

forward InsertClanCar(clanid,model,money);
public InsertClanCar(clanid,model,money)
{
	new string[256],idcar,total;
    if(ClanInfo[clanid][cClanSeif] < money)
    {
    	format(string,sizeof(string), "{%s} Vehicle buy error, not enough money in clan safe.",ClanInfo[clanid][cClanColor]);
    	SendToClan(clanid,COLOR_WHITE,string);
    	return 1;
	}
	for(new v; v < MAX_CLAN_VEHICLES; v++)
	{
		if(ClanInfo[clanid][cCar][v] != -1) total++;
	}
	if(total+1 > 5)
	{
		format(string,sizeof(string), "{%s} Vehicle buy error, this clan already have 5 vehicles.",ClanInfo[clanid][cClanColor]);
    	SendToClan(clanid,COLOR_WHITE,string);
		return 1;
	}
	mysql_format(SQL, string, sizeof(string),"INSERT INTO clancars (Model) VALUES (%d)", model);
    new Cache:ids = mysql_query(SQL,string);
	new idd = cache_insert_id();
	cache_delete(ids);

	for(new v; v < MAX_CLAN_VEHICLES; v++)
	{
		if(ClanInfo[clanid][cCar][v] == -1)
		{
			idcar = v;
			break;
		}
	}

	ClanInfo[clanid][cCar][idcar] = idd;

	ClanInfo[clanid][cCarLocX][idcar] = 388.5440;
	ClanInfo[clanid][cCarLocY][idcar] = -1522.2147;
	ClanInfo[clanid][cCarLocZ][idcar] = 32.1853;
	ClanInfo[clanid][cCarAngle][idcar] = 45.0;
	
    ClanInfo[clanid][cCarModel][idcar] = model;
	ClanInfo[clanid][cCarColor1][idcar] = 1;
	ClanInfo[clanid][cCarColor2][idcar] = 1;

	format(string,sizeof(string),"{FA5778}%s",ClanInfo[clanid][cClanTag]);
    strmid(cCarPlate[clanid][idcar], string, 0, 20, 255);
	strmid(cCarOwner[clanid][idcar], ClanInfo[clanid][cClanName], 0, 50, 255);

	ccUpdate(clanid, idcar, cLocationxx);
	ccUpdate(clanid, idcar, cLocationyx);
	ccUpdate(clanid, idcar, cLocationzx);
	ccUpdate(clanid, idcar, cAnglex);
	ccUpdate(clanid, idcar, cColorOnex);
	ccUpdate(clanid, idcar, cColorTwox);
	ccUpdate(clanid, idcar, cOwnerx);
	ccUpdate(clanid, idcar, cLicensex);

    ClanInfo[clanid][cCarID][idcar] = CreateVehicle(ClanInfo[clanid][cCarModel][idcar],ClanInfo[clanid][cCarLocX][idcar],ClanInfo[clanid][cCarLocY][idcar],ClanInfo[clanid][cCarLocZ][idcar],ClanInfo[clanid][cCarAngle][idcar],1,1,-1);
    SetVehicleNumberPlate(ClanInfo[clanid][cCarID][idcar],cCarPlate[clanid][idcar]);
    Gas[ClanInfo[clanid][cCarID][idcar]] = 100;
    vehRadio[ClanInfo[clanid][cCarID][idcar]] = 0;
    ClanInfo[clanid][cClanSeif]-=money;
   	ClanUpdate(clanid, ClanSafex);

    new stringsss[256];
	format(stringsss,sizeof(stringsss), "Clan %s bought vehicle %s(%d) for %s$.",ClanInfo[clanid][cClanName],aVehicleNames[ClanInfo[clanid][cCarModel][idcar]-400],ClanInfo[clanid][cCarModel][idcar],FormatNumber(money));
	ABroadCast(COLOR_YELLOW,stringsss,1);

    new var100[256],string2[256];
	mysql_real_escape_string(stringsss, string2);
	mysql_format(SQL, var100, sizeof(var100), "INSERT INTO clan_logs (`clanid`,`action`) VALUES ('%d','%s')", clanid,string2);
	mysql_tquery(SQL,var100,"","");

	format(stringsss,sizeof(stringsss),"{%s}Our clan have now a new vehicle %s(%d) bought for %s.",ClanInfo[clanid][cClanColor],aVehicleNames[ClanInfo[clanid][cCarModel][idcar]-400],ClanInfo[clanid][cCarModel][idcar],FormatNumber(money));
    SendToClan(clanid,COLOR_WHITE,stringsss);
    return 1;
}

forward InsertCar(playerid,stockid,premium);
public InsertCar(playerid,stockid,premium)
{
    new string[256],sendername[25],total,idcar,premiump=0;
    new model = Stock[stockid][vModel];
	new value = Stock[stockid][vPrice];
    GetPlayerName(playerid,sendername,sizeof(sendername));
    BuyCar[playerid] = -1;
    if(GetPlayerCash(playerid) < value && premium == 0) return SendClientMessage(playerid,COLOR_ERROR, "(Error){FFFFFF} You don't have enough money to purchase this vehicle.");
	for(new v; v < MAX_PERSONAL_VEHICLES; v++)
	{
		if(PlayerInfo[playerid][pCar][v] != -1) total++;
	}
	if(total+1 > PlayerInfo[playerid][pCarSlots])
	{
		SendClientMessage(playerid, COLOR_GREY, "You can't buy any more cars. Sell one of your cars if you want to buy a new one. Normal players can own 2 cars. Premium players can own 4 cars.");
		return 1;
	}
	for(new v; v < MAX_PERSONAL_VEHICLES; v++)
	{
		if(PlayerInfo[playerid][pCar][v] == -1)
		{
			idcar = v;
			break;
		}
	}

	mysql_format(SQL, string, sizeof(string),"INSERT INTO cars (Model) VALUES (%d)", model);
    new Cache:ids = mysql_query(SQL,string);
	new idd = cache_insert_id();
	cache_delete(ids);

	PlayerInfo[playerid][pCar][idcar] = idd;

	if(model == 469 || model == 487 || model == 522 || model == 521 || model == 461 || model == 581 || model == 468 || model == 463 || model == 586 || model == 471 || model == 510 || model == 481 || model == 462 || model == 509)
	{
		PlayerInfo[playerid][pCarLocX][idcar] = 388.5440;
		PlayerInfo[playerid][pCarLocY][idcar] = -1522.2147;
		PlayerInfo[playerid][pCarLocZ][idcar] = 32.1853;
		PlayerInfo[playerid][pCarAngle][idcar] = 45.0;
		PlayerInfo[playerid][pCarLLocX][idcar] = 388.5440;
		PlayerInfo[playerid][pCarLLocY][idcar] = -1522.2147;
		PlayerInfo[playerid][pCarLLocZ][idcar] = 32.1853;
		PlayerInfo[playerid][pCarAngle2][idcar] = 45.0;
	}
	else
	{
		PlayerInfo[playerid][pCarLocX][idcar] = 284.5032;
		PlayerInfo[playerid][pCarLocY][idcar] = -1526.4036;
		PlayerInfo[playerid][pCarLocZ][idcar] = 24.3208;
		PlayerInfo[playerid][pCarAngle][idcar] = 45.0;
		PlayerInfo[playerid][pCarLLocX][idcar] = 284.5032;
		PlayerInfo[playerid][pCarLLocY][idcar] = -1526.4036;
		PlayerInfo[playerid][pCarLLocZ][idcar] = 24.3208;
		PlayerInfo[playerid][pCarAngle2][idcar] = 45.0;
	}
	if(premium == 0)
	{
		GivePlayerCash(playerid,-value);
		Stock[stockid][vStock]--;
		mysql_format(SQL, string, sizeof(string), "UPDATE stock SET Stock='%d' WHERE ID='%d'", Stock[stockid][vStock],stockid);
		mysql_tquery(SQL,string,"","");
	}
    PlayerInfo[playerid][pCarModel][idcar] = model;
	PlayerInfo[playerid][pCarColor1][idcar] = 1;
	PlayerInfo[playerid][pCarColor2][idcar] = 1;
	format(string,sizeof(string),"{FA5778}%d",(100000000 + random(9999999999)));
	CarVipName[playerid][idcar] = "";
    strmid(CarPlate[playerid][idcar], string, 0, 20, 255);
	strmid(CarOwner[playerid][idcar], PlayerInfo[playerid][pNormalName], 0, 50, 255);
	PlayerInfo[playerid][pCarLock][idcar] = 0;
	PlayerInfo[playerid][pCarInsPrice][idcar] = 5000;
	PlayerInfo[playerid][pCarIns][idcar] = 10;
	PlayerInfo[playerid][pCarKM][idcar] = 0.0;
	PlayerInfo[playerid][pCarKMLast][idcar] = 0;
	PlayerInfo[playerid][pCarVIP][idcar] = 0;
	PlayerInfo[playerid][pCarNeon][idcar] = 0;
	PlayerInfo[playerid][pCarVipColors][idcar] = 0;
	PlayerInfo[playerid][pCarHP][idcar] = 1000.0;
	PlayerInfo[playerid][pCarDamage1][idcar] = 0;
	PlayerInfo[playerid][pCarDamage2][idcar] = 0;
	PlayerInfo[playerid][pCarDamage3][idcar] = 0;
	PlayerInfo[playerid][pCarDamage4][idcar] = 0;
	PlayerInfo[playerid][pCarGas][idcar] = 200;
	PlayerInfo[playerid][pCarGasMax][idcar] = 100;
	PlayerInfo[playerid][pCarPaintJ][idcar] = 6;
	PlayerInfo[playerid][pCarBlock][idcar] = 0;
	for(new s; s < 17; s++)
	{
		CarMod[playerid][idcar][s] = 0;
	}
	PlayerInfo[playerid][pCarBuyTime][idcar] = gettime();

	cUpdate(playerid, idcar, cModsx);
	cUpdate(playerid, idcar, cPaintJx);
	cUpdate(playerid, idcar, cLocationxx);
	cUpdate(playerid, idcar, cLocationyx);
	cUpdate(playerid, idcar, cLocationzx);
	cUpdate(playerid, idcar, cAnglex);
	cUpdate(playerid, idcar, cLocationx2x);
	cUpdate(playerid, idcar, cLocationy2x);
	cUpdate(playerid, idcar, cLocationz2x);
	cUpdate(playerid, idcar, cAngle2x);
	cUpdate(playerid, idcar, cColorOnex);
	cUpdate(playerid, idcar, cColorTwox);
	cUpdate(playerid, idcar, cValuex);
	cUpdate(playerid, idcar, cLicensex);
	cUpdate(playerid, idcar, cLockx);
	cUpdate(playerid, idcar, cInscarpricex);
	cUpdate(playerid, idcar, cInsurancecarx);
	cUpdate(playerid, idcar, cKMx);
	cUpdate(playerid, idcar, cDaysx);
	cUpdate(playerid, idcar, cHPx);
	cUpdate(playerid, idcar, cKMLastx);
	cUpdate(playerid, idcar, cDamage1x);
	cUpdate(playerid, idcar, cDamage2x);
	cUpdate(playerid, idcar, cDamage3x);
	cUpdate(playerid, idcar, cDamage4x);
	cUpdate(playerid, idcar, cGasx);
	cUpdate(playerid, idcar, cOwnerx);

    PlayerInfo[playerid][pCarID][idcar] = CreateVehicle(PlayerInfo[playerid][pCarModel][idcar],PlayerInfo[playerid][pCarLocX][idcar],PlayerInfo[playerid][pCarLocY][idcar],PlayerInfo[playerid][pCarLocZ][idcar],PlayerInfo[playerid][pCarAngle][idcar],1,1,-1);
    SetVehicleNumberPlate(PlayerInfo[playerid][pCarID][idcar],CarPlate[playerid][idcar]);
    Gas[PlayerInfo[playerid][pCarID][idcar]] = 200;
	vehRadio[PlayerInfo[playerid][pCarID][idcar]] = 0;
    LocateCar(PlayerInfo[playerid][pCarID][idcar], playerid);

    new disp[184],stringsss[256],numele[30];
	if(premium == 1)
	{
		if(model == 469) premiump = 220;
		if(model == 487) premiump = 300;
		if(model == 494 || model == 502 || model == 503 || model == 539) premiump = 250;
		format(disp,sizeof(disp),"You purchased a %s for %d premium points.",aVehicleNames[PlayerInfo[playerid][pCarModel][idcar] - 400],premiump);
		SendClientMessage(playerid,COLOR_RED,disp);
		PlayerInfo[playerid][pPremiumPoints] -= premiump;
		Update(playerid, pPremiumPointsx);
		SendClientMessage(playerid, COLOR_GREEN3, "Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban PERMANENT.");
		SendClientMessage(playerid, COLOR_GREY, "Your car has been respawned.");
	}
	else if(premium == 0)
	{
		format(disp,sizeof(disp),"(-) Congratulations! You purchased a %s for $%s.",aVehicleNames[PlayerInfo[playerid][pCarModel][idcar] - 400],FormatNumber(value));
		SendClientMessage(playerid,COLOR_GREEN,disp);
		SendClientMessage(playerid, COLOR_GREEN3, "Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban PERMANENT.");
		SendClientMessage(playerid, COLOR_GREY, "Your car has been respawned.");
	}
	GetPlayerName(playerid, numele, sizeof(numele));
	if(premium == 1)
	{
		format(stringsss,sizeof(stringsss),"%s [user:%d] bought a %s [car:%d] for %d premium points.",numele,PlayerInfo[playerid][pSQLID],aVehicleNames[PlayerInfo[playerid][pCarModel][idcar] - 400],PlayerInfo[playerid][pCar][idcar],premiump);
    }
	else if(premium == 0)
	{
		format(stringsss,sizeof(stringsss),"%s [user:%d] bought a %s [car:%d] for $%s.",numele,PlayerInfo[playerid][pSQLID],aVehicleNames[PlayerInfo[playerid][pCarModel][idcar] - 400],PlayerInfo[playerid][pCar][idcar],FormatNumber(value));
	}
	else if(premium == 3)
	{
		format(stringsss,sizeof(stringsss),"%s [user:%d] win a %s [car:%d] from giftbox.",numele,PlayerInfo[playerid][pSQLID],aVehicleNames[PlayerInfo[playerid][pCarModel][idcar] - 400],PlayerInfo[playerid][pCar][idcar]);
	}
	ABroadCast(COLOR_YELLOW,stringsss,1);
    new var100[256],string2[256];
	mysql_real_escape_string(stringsss, string2);
	mysql_format(SQL, var100, sizeof(var100), "INSERT INTO playerlogs (`playerid`,`giverid`,`action`) VALUES ('%d','0','%s')", PlayerInfo[playerid][pSQLID],string2);
	mysql_tquery(SQL,var100,"","");
	if(premium == 3)
	{
		PlayerInfo[playerid][pCarEvent][idcar] = 1;
		mysql_format(SQL, var100, sizeof(var100), "UPDATE `cars` SET `Event`='1', `Block`='0' WHERE `ID`='%d'", PlayerInfo[playerid][pCar][idcar]);
		mysql_tquery(SQL, var100, "", "");
	}
	masini++;
    return 1;
}

forward ccUpdate(clanid, carid, type);
public ccUpdate(clanid, carid, type)
{
	new gQuery[1024];
	switch(type)
	{
		case cLocationxx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `clancars` SET `Locationx`='%f' WHERE `ID`='%d'",ClanInfo[clanid][cCarLocX][carid],ClanInfo[clanid][cCar][carid]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cLocationyx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `clancars` SET `Locationy`='%f' WHERE `ID`='%d'",ClanInfo[clanid][cCarLocY][carid],ClanInfo[clanid][cCar][carid]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cLocationzx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `clancars` SET `Locationz`='%f' WHERE `ID`='%d'",ClanInfo[clanid][cCarLocZ][carid],ClanInfo[clanid][cCar][carid]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cAnglex:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `clancars` SET `Angle`='%f' WHERE `ID`='%d'",ClanInfo[clanid][cCarAngle][carid],ClanInfo[clanid][cCar][carid]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cColorOnex:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `clancars` SET `ColorOne`='%d' WHERE `ID`='%d'",ClanInfo[clanid][cCarColor1][carid],ClanInfo[clanid][cCar][carid]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cColorTwox:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `clancars` SET `ColorTwo`='%d' WHERE `ID`='%d'",ClanInfo[clanid][cCarColor2][carid],ClanInfo[clanid][cCar][carid]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cOwnerx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `clancars` SET `Owner`='%s' WHERE `ID`='%d'",cCarOwner[clanid][carid],ClanInfo[clanid][cCar][carid]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cLicensex:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `clancars` SET `License`='%s' WHERE `ID`='%d'",cCarPlate[clanid][carid],ClanInfo[clanid][cCar][carid]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	}
	return 1;
}

forward cUpdate(playerid, id, type);
public cUpdate(playerid, id, type)
{
	new gQuery[1024];
	switch(type)
	{
		case cLocationxx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Locationx`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarLocX][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cLocationyx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Locationy`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarLocY][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cLocationzx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Locationz`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarLocZ][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cAnglex:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Angle`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarAngle][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cLocationx2x:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Locationx2`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarLLocX][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cLocationy2x:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Locationy2`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarLLocY][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cLocationz2x:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Locationz2`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarLLocZ][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cAngle2x:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Angle2`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarAngle2][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cLockx:
		{
			mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Lockk`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarLock][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
		}
		case cInsurancecarx:
		{
			mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Insurancecar`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarIns][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
		}
		case cInscarpricex:
		{
			mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Inscarprice`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarInsPrice][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
		}
		case cBlockx:
		{
			mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Block`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarBlock][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
		}
		case cKMx:
		{
			mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `KM`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarKM][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
		}
		case cKMLastx:
		{
			mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `LastKM`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarKMLast][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
		}
		case cCarVIPx:
		{
			mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `VIP`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarVIP][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
		}
		case cCarVipColorsx:
		{
			mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `VipColors`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarVipColors][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
		}
		case cDaysx:
		{
			mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `BuyTime`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarBuyTime][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
		}
		case cHPx:
		{
			mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `HP`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarHP][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
		}
		case cGasx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Gas`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarGas][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cGasMaxx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `GasMax`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarGasMax][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cDamage1x:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Damage1`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarDamage1][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cDamage2x:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Damage2`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarDamage2][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cDamage3x:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Damage3`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarDamage3][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cDamage4x:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Damage4`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarDamage4][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cModsx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `mod1`='%d',`mod2`='%d',`mod3`='%d',`mod4`='%d',`mod5`='%d',`mod6`='%d',`mod7`='%d',`mod8`='%d' WHERE `ID`='%d'",
			CarMod[playerid][id][0],
			CarMod[playerid][id][1],
			CarMod[playerid][id][2],
			CarMod[playerid][id][3],
			CarMod[playerid][id][4],
			CarMod[playerid][id][5],
			CarMod[playerid][id][6],
			CarMod[playerid][id][7],
			PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");

			mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `mod9`='%d',`mod10`='%d',`mod11`='%d',`mod12`='%d',`mod13`='%d',`mod14`='%d',`mod15`='%d',`mod16`='%d',`mod17`='%d' WHERE `ID`='%d'",
			CarMod[playerid][id][8],
			CarMod[playerid][id][9],
			CarMod[playerid][id][10],
			CarMod[playerid][id][11],
			CarMod[playerid][id][12],
			CarMod[playerid][id][13],
			CarMod[playerid][id][14],
			CarMod[playerid][id][15],
			CarMod[playerid][id][16],
			PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cLicensex:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `License`='%s' WHERE `ID`='%d'",CarPlate[playerid][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cPaintJx:
        {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `PaintJ`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarPaintJ][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cCarNeonx:
        {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Neon`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarNeon][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cColorOnex:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `ColorOne`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarColor1][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cColorTwox:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `ColorTwo`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarColor2][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cStagex:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Stage`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarStage][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
		case cOwnerx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `Owner`='%s' WHERE `ID`='%d'",CarOwner[playerid][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cCarVipXPosx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `VipXPos`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarVipXPos][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cCarVipYPosx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `VipYPos`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarVipYPos][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cCarVipZPosx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `VipZPos`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarVipZPos][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cCarVipRXPosx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `VipRXPos`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarVipRXPos][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cCarVipRYPosx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `VipRYPos`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarVipRYPos][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	    case cCarVipRZPosx:
	    {
	        mysql_format(SQL,gQuery,sizeof(gQuery),"UPDATE `cars` SET `VipRZPos`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarVipRZPos][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gQuery,"","");
	    }
	}
	return 1;
}

forward AttachNeon(playerid, idcar);
public AttachNeon(playerid, idcar)
{
	if(PlayerInfo[playerid][pCarNeon][idcar] != 0)
	{
		new neon;
		if(PlayerInfo[playerid][pCarNeon][idcar] == 1)	neon = 18647;
		else if(PlayerInfo[playerid][pCarNeon][idcar] == 2)	neon = 18649;
		else if(PlayerInfo[playerid][pCarNeon][idcar] == 3)	neon = 18650;
		else if(PlayerInfo[playerid][pCarNeon][idcar] == 4)	neon = 18651;
		else if(PlayerInfo[playerid][pCarNeon][idcar] == 5)	neon = 18648;
		DestroyObject(Neons[0][PlayerInfo[playerid][pCarID][idcar]]);
		DestroyObject(Neons[1][PlayerInfo[playerid][pCarID][idcar]]);
		
		Neons[0][PlayerInfo[playerid][pCarID][idcar]] = CreateObject(neon,0,0,0,0,0,0);
		Neons[1][PlayerInfo[playerid][pCarID][idcar]] = CreateObject(neon,0,0,0,0,0,0);
		new arrModel = PlayerInfo[playerid][pCarModel][idcar] - 400;
        AttachObjectToVehicle(Neons[0][PlayerInfo[playerid][pCarID][idcar]], PlayerInfo[playerid][pCarID][idcar], ( VehicleData[ arrModel ][ 0 ] / 2 ) - 0.5, VehicleData[ arrModel ][ 4 ] - VehicleData[ arrModel ][ 4 ], VehicleData[ arrModel ][ 5 ] - 0.5, 0.0, 0.0, 0.0);
        AttachObjectToVehicle(Neons[1][PlayerInfo[playerid][pCarID][idcar]], PlayerInfo[playerid][pCarID][idcar], ( ( VehicleData[ arrModel ][ 0 ] / 2 ) + 0.5) - VehicleData[ arrModel ][ 0 ], VehicleData[ arrModel ][ 4 ] - VehicleData[ arrModel ][ 4 ], VehicleData[ arrModel ][ 5 ] - 0.5, 0.0, 0.0, 0.0);
	} 
	else {
		DestroyObject(Neons[0][PlayerInfo[playerid][pCarID][idcar]]);
		DestroyObject(Neons[1][PlayerInfo[playerid][pCarID][idcar]]);
		Neons[0][PlayerInfo[playerid][pCarID][idcar]] = 0;
		Neons[1][PlayerInfo[playerid][pCarID][idcar]] = 0;
	}
	return 1;
}

forward SetVipText(playerid, idcar);
public SetVipText(playerid, idcar)
{
	new string[128];
	if(strlen(CarVipName[playerid][idcar]) > 0)
	{
		if(PlayerInfo[playerid][pCarVipColors][idcar] == 0) format(string, sizeof(string), "{FFFFFF}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 1) format(string, sizeof(string), "{FF0000}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 2) format(string, sizeof(string), "{640000}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 3) format(string, sizeof(string), "{00FF00}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 4) format(string, sizeof(string), "{004B01}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 5) format(string, sizeof(string), "{008DFF}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 6) format(string, sizeof(string), "{001AFF}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 7) format(string, sizeof(string), "{FFFF00}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 8) format(string, sizeof(string), "{FF6B00}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 9) format(string, sizeof(string), "{EB00FF}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 10) format(string, sizeof(string), "{590056}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 11) format(string, sizeof(string), "{8A8A8A}%s", CarVipName[playerid][idcar]);
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 12) format(string, sizeof(string), "{000000}%s", CarVipName[playerid][idcar]); 
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 13) format(string, sizeof(string), "{28B2E0}%s", CarVipName[playerid][idcar]); 
		else if(PlayerInfo[playerid][pCarVipColors][idcar] == 14) format(string, sizeof(string), "{F20C9A}%s", CarVipName[playerid][idcar]); 
		DestroyDynamicObject(vObject[PlayerInfo[playerid][pCarID][idcar]]);

		vObject[PlayerInfo[playerid][pCarID][idcar]] = CreateDynamicObject(19327,0,0,-1000,0,0,0,100);
		SetDynamicObjectMaterialText(vObject[PlayerInfo[playerid][pCarID][idcar]], 0, string, OBJECT_MATERIAL_SIZE_256x128, "Arial", 20, 1, 0xFFFFFFFF, 0, 1);
  /*if(PlayerInfo[playerid][pCarModel][idcar] == 411) AttachDynamicObjectToVehicle(vObject[PlayerInfo[playerid][pCarID][idcar]], PlayerInfo[playerid][pCarID][idcar], -0.029999, -1.974998, 0.233999, -84.824964, 0.000000, 0.000000);
		else if(PlayerInfo[playerid][pCarModel][idcar] == 541) AttachDynamicObjectToVehicle(vObject[PlayerInfo[playerid][pCarID][idcar]], PlayerInfo[playerid][pCarID][idcar], 0.000000, -0.250000, 0.600000, -90.000000, 0.100000, 0.000000);
		else if(PlayerInfo[playerid][pCarModel][idcar] == 560) AttachDynamicObjectToVehicle(vObject[PlayerInfo[playerid][pCarID][idcar]], PlayerInfo[playerid][pCarID][idcar], 0.000000, -0.614999, 0.799999, -88.439956, 0.000000, 0.000000);
		else if(PlayerInfo[playerid][pCarModel][idcar] == 451) AttachDynamicObjectToVehicle(vObject[PlayerInfo[playerid][pCarID][idcar]], PlayerInfo[playerid][pCarID][idcar], 0.000000, -0.6, 0.56, 270.0, 0.0, 0.0);
		else if(PlayerInfo[playerid][pCarModel][idcar] == 480) AttachDynamicObjectToVehicle(vObject[PlayerInfo[playerid][pCarID][idcar]], PlayerInfo[playerid][pCarID][idcar], 0.000000, -1.58, 0.27, 270.0, 0.0, 0.0);
		else if(PlayerInfo[playerid][pCarModel][idcar] == 562) AttachDynamicObjectToVehicle(vObject[PlayerInfo[playerid][pCarID][idcar]], PlayerInfo[playerid][pCarID][idcar], 0.000000, -0.500000, 0.759999, -90.000000, 0.000000, 0.000000);*/
		AttachDynamicObjectToVehicle(vObject[PlayerInfo[playerid][pCarID][idcar]], PlayerInfo[playerid][pCarID][idcar], PlayerInfo[playerid][pCarVipXPos][idcar], PlayerInfo[playerid][pCarVipYPos][idcar], PlayerInfo[playerid][pCarVipZPos][idcar], PlayerInfo[playerid][pCarVipRXPos][idcar],
			PlayerInfo[playerid][pCarVipRYPos][idcar], PlayerInfo[playerid][pCarVipRZPos][idcar]);
	}
	else {
		DestroyDynamicObject(vObject[PlayerInfo[playerid][pCarID][idcar]]);
		vObject[PlayerInfo[playerid][pCarID][idcar]] = 0;
	}
	return 1;
}

forward LevelInfo(playerid);
public LevelInfo(playerid)
{
	SendClientMessage(playerid,COLOR_GREY,"---------- {79AFD4}Levels Info{CECECE} ----------");
	SendClientMessage(playerid,COLOR_GREY,"{79AFD4}level 2:{CECECE} acces on /whisper.");
	SendClientMessage(playerid,COLOR_GREY,"{79AFD4}level 3:{CECECE} acces on /buycar, /tradecar, /contract, /rob and licences(without driving).");
	SendClientMessage(playerid,COLOR_GREY,"{79AFD4}level 4:{CECECE} acces on /sellcarto, /paint and /dice.");
	SendClientMessage(playerid,COLOR_GREY,"{79AFD4}level 5:{CECECE} acces on /transfer, /pay(more than 1.000$), /ad, buy house, account security activated.");
	SendClientMessage(playerid,COLOR_GREY,"{79AFD4}level 5:{CECECE} you can buy a billboard.");
	SendClientMessage(playerid,COLOR_GREY,"{79AFD4}level 5:{CECECE} you can apply in paceful factions or gangs.");
	SendClientMessage(playerid,COLOR_GREY,"{79AFD4}level 6:{CECECE} acces on /spin, /race and /requestevent.");
	SendClientMessage(playerid,COLOR_GREY,"{79AFD4}level 7:{CECECE} acces to buy a business, on /roulette and you can apply in departaments or hitman agency.");
	SendClientMessage(playerid,COLOR_GREY,"{79AFD4}level 10:{CECECE} acces on /blackjack.");
	SendClientMessage(playerid,COLOR_GREY,"{79AFD4}Info:{CECECE} the rest of commands are available for all levels.");
	SendClientMessage(playerid,COLOR_GREY,"-------------------------------------------------");
	return 1;
}

stock IsACBUGWeapon(playerid)
{
	if(IsPlayerConnected(playerid) && (gPlayerLogged[playerid] == 1))
	{
	    new wID = GetPlayerWeapon ( playerid ) ;
	    if(wID == 24 || wID == 25 || wID == 27 || wID == 34 ) return 1 ;
	}
	return 0 ;
}

stock GetPlayerID(playername[])
{
  	for(new i = 0; i <= MAX_PLAYERS; i++)
  	{
    	if(IsPlayerConnected(i))
    	{
      		new playername2[MAX_PLAYER_NAME];
      		GetPlayerName(i, playername2, sizeof(playername2));
      		if(strcmp(playername2, playername, true, strlen(playername)) == 0)
      		{
        		return i;
      		}
    	}
  	}
  	return INVALID_PLAYER_ID;
}

forward ClearWanted(playerid);
public ClearWanted(playerid)
{
	new string[80];
	format(string,sizeof(string),"None");
	strmid(WantedName[playerid], string, 0, strlen(string), 255);
	WantedReason[playerid] = 999;
	return 1;
}
/*		if( !( -1000.0 <= fX <= 1000.0 ) || !( -1000.0 <= fY <= 1000.0 ) || !( -1000.0 <= fZ <= 1000.0 ) ) // a valid offset, it's impossible that a offset bigger than 1000 is legit (also less than -1000.0 is impossible, not used by this hack, but still, let's check for it, just for the future, who knows what hacks will appear). The object with biggest offset is having ~700-800 radius.
		{
			return 1; // let's desynchronize that bullet, so players won't crash
}
	}
    return 1;
}*/
stock PutPlayerInVehicleEx(playerid,vehicleid,seatid)
{
	PlayerEnterTime[playerid]+=221;
	PutPlayerInVehicle(playerid,vehicleid,seatid);
	return 1;
}

stock RemovePlayerFromVehicleEx(playerid)
{
	PlayerEnterTime[playerid]+=221;
	RemovePlayerFromVehicle(playerid);
	return 1;
}

public OnQueryError( errorid, error[ ], callback[ ], query[ ], connectionHandle )
{
	print( "====================================================================" );
	printf( "Error ID: %d, Error: %s", errorid, error );
	printf( "Callback: %s", callback );
	printf( "gQuery: %s", query );
	print( "====================================================================" );
	return 1;
}
stock strmatch(const String1[], const String2[])
{
 	if((strcmp(String1, String2, true, strlen(String2)) == 0) && (strlen(String2) == strlen(String1)))
 	{
  		return true;
 	}
 	else
 	{
  		return false;
 	}
}
stock SetPlayerPosEx(playerid, Float:X, Float:Y, Float:Z)
{
    SetPlayerPos(playerid, X, Y, Z);
    SetCameraBehindPlayer(playerid);
}
function NumIp(ip[], playerid)
{
 	new ips = 0;
  	foreach(new i : Player)
 	{
  		if(i == playerid) continue;
  		new playerip[16];
  		GetPlayerIp(i,playerip,sizeof(playerip));
		if(strmatch(ip, playerip)) ips++;
 	}
 	return ips;
}

stock IsPlayerInRangeOfVehicle(playerid, vehicleid, Float: radius) {

	new
		Float:Floats[3];

	GetVehiclePos(vehicleid, Floats[0], Floats[1], Floats[2]);
	return IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]);
}

AntiDeAMX()
{
	new a[][] =
 	{
 		"Unarmed (Fist)",
 		"Brass K"
 	};
	#pragma unused a
}
